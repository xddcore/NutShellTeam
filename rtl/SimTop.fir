circuit SimTop :
  module SRAMTemplate :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>}}, flip resp : { data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}[1]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}}}}}

    smem array : UInt<73>[1] [512] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SRAMTemplate.scala 80:30]
    reg value : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[Counter.scala 60:40]
    wire wrap : UInt<1>
    wrap <= UInt<1>("h0")
    when REG : @[Counter.scala 118:17]
      node wrap_wrap = eq(value, UInt<9>("h1ff")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value <= _wrap_value_T_1 @[Counter.scala 76:15]
      wrap <= wrap_wrap @[Counter.scala 118:24]
    when wrap : @[SRAMTemplate.scala 82:24]
      REG <= UInt<1>("h0") @[SRAMTemplate.scala 82:38]
    resetState <= REG @[SRAMTemplate.scala 84:16]
    resetSet <= value @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<73> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node lo = cat(io.w.req.bits.data.brIdx, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node hi_hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data._type) @[SRAMTemplate.scala 92:78]
    node hi = cat(hi_hi, io.w.req.bits.data.target) @[SRAMTemplate.scala 92:78]
    node _T_1 = cat(hi, lo) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _WIRE, _T_1) @[SRAMTemplate.scala 92:22]
    node waymask = mux(resetState, UInt<1>("h1"), UInt<1>("h1")) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<73>[1] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_2 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_3 = or(setIdx, UInt<9>("h0"))
      node _T_4 = bits(_T_3, 8, 0)
      write mport MPORT = array[_T_4], clock
      when _T_2 :
        MPORT[0] <= wdata[0]
    wire _WIRE_1 : UInt @[Hold.scala 28:87]
    _WIRE_1 is invalid @[Hold.scala 28:87]
    when realRen : @[Hold.scala 28:87]
      _WIRE_1 <= io.r.req.bits.setIdx @[Hold.scala 28:87]
      node _T_5 = or(_WIRE_1, UInt<9>("h0")) @[Hold.scala 28:87]
      node _T_6 = bits(_T_5, 8, 0) @[Hold.scala 28:87]
      read mport MPORT_1 = array[_T_6], clock @[Hold.scala 28:87]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[Hold.scala 28:106]
    REG_1 <= realRen @[Hold.scala 28:106]
    wire _WIRE_2 : UInt<73>[1] @[Hold.scala 23:81]
    _WIRE_2[0] <= UInt<73>("h0") @[Hold.scala 23:81]
    reg r : UInt<73>[1], clock with :
      reset => (reset, _WIRE_2) @[Reg.scala 27:20]
    when REG_1 : @[Reg.scala 28:19]
      r[0] <= MPORT_1[0] @[Reg.scala 28:23]
    node _T_7 = mux(REG_1, MPORT_1, r) @[Hold.scala 23:48]
    wire rdata_0 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<73>
    _WIRE_3 <= _T_7[0]
    node _T_8 = bits(_WIRE_3, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_8 @[SRAMTemplate.scala 98:78]
    node _T_9 = bits(_WIRE_3, 3, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.brIdx <= _T_9 @[SRAMTemplate.scala 98:78]
    node _T_10 = bits(_WIRE_3, 42, 4) @[SRAMTemplate.scala 98:78]
    rdata_0.target <= _T_10 @[SRAMTemplate.scala 98:78]
    node _T_11 = bits(_WIRE_3, 44, 43) @[SRAMTemplate.scala 98:78]
    rdata_0._type <= _T_11 @[SRAMTemplate.scala 98:78]
    node _T_12 = bits(_WIRE_3, 72, 45) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_12 @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}[1] @[SRAMTemplate.scala 99:28]
    _WIRE_4[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _WIRE_4[0].brIdx <= rdata_0.brIdx @[SRAMTemplate.scala 99:28]
    _WIRE_4[0].target <= rdata_0.target @[SRAMTemplate.scala 99:28]
    _WIRE_4[0]._type <= rdata_0._type @[SRAMTemplate.scala 99:28]
    _WIRE_4[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].valid <= _WIRE_4[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].brIdx <= _WIRE_4[0].brIdx @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].target <= _WIRE_4[0].target @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0]._type <= _WIRE_4[0]._type @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _WIRE_4[0].tag @[SRAMTemplate.scala 99:18]
    node _T_13 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_14 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_15 = and(_T_13, _T_14) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_15 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module BPU_inorder :
    input clock : Clock
    input reset : Reset
    output io : { in : { flip pc : { valid : UInt<1>, bits : UInt<39>}}, out : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flip flush : UInt<1>, brIdx : UInt<3>, crosslineJump : UInt<1>}

    reg flush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when io.in.pc.valid : @[StopWatch.scala 26:19]
      flush <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when io.flush : @[StopWatch.scala 27:20]
      flush <= UInt<1>("h1") @[StopWatch.scala 27:24]
    inst btb of SRAMTemplate @[BPU.scala 302:19]
    btb.clock <= clock
    btb.reset <= reset
    wire flushBTB : UInt<1>
    flushBTB <= UInt<1>("h0")
    wire flushTLB : UInt<1>
    flushTLB <= UInt<1>("h0")
    node _T = asUInt(reset) @[BPU.scala 308:22]
    node _T_1 = or(flushBTB, flushTLB) @[BPU.scala 308:42]
    node _T_2 = or(_T, _T_1) @[BPU.scala 308:29]
    btb.reset <= _T_2 @[BPU.scala 308:13]
    node _T_3 = asUInt(reset) @[BPU.scala 309:15]
    node _T_4 = or(flushBTB, flushTLB) @[BPU.scala 309:35]
    node _T_5 = or(_T_3, _T_4) @[BPU.scala 309:22]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_6 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_7 = tail(_T_6, 1) @[GTimer.scala 25:12]
    REG <= _T_7 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_8 = and(_T_5, _WIRE) @[Debug.scala 55:16]
    when _T_8 : @[Debug.scala 55:31]
      node _T_9 = asUInt(reset) @[Debug.scala 56:24]
      node _T_10 = eq(_T_9, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_10 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] BPU_inorder: ", REG) : SIM @[Debug.scala 56:24]
      node _T_11 = asUInt(reset) @[Debug.scala 57:13]
      node _T_12 = eq(_T_11, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_12 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[BPU-RESET] bpu-reset flushBTB:%d flushTLB:%d\n", flushBTB, flushTLB) : SIM_1 @[Debug.scala 57:13]
    btb.io.r.req.valid <= io.in.pc.valid @[BPU.scala 311:22]
    wire _WIRE_1 : UInt<39> @[BPU.scala 35:37]
    _WIRE_1 <= io.in.pc.bits @[BPU.scala 35:37]
    wire _WIRE_2 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_3 : UInt<39>
    _WIRE_3 <= _WIRE_1
    node _T_13 = bits(_WIRE_3, 1, 0) @[BPU.scala 35:65]
    _WIRE_2.pad <= _T_13 @[BPU.scala 35:65]
    node _T_14 = bits(_WIRE_3, 10, 2) @[BPU.scala 35:65]
    _WIRE_2.idx <= _T_14 @[BPU.scala 35:65]
    node _T_15 = bits(_WIRE_3, 38, 11) @[BPU.scala 35:65]
    _WIRE_2.tag <= _T_15 @[BPU.scala 35:65]
    btb.io.r.req.bits.setIdx <= _WIRE_2.idx @[BPU.scala 312:28]
    wire btbRead : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>} @[BPU.scala 315:21]
    btbRead.valid <= btb.io.r.resp.data[0].valid @[BPU.scala 316:11]
    btbRead.brIdx <= btb.io.r.resp.data[0].brIdx @[BPU.scala 316:11]
    btbRead.target <= btb.io.r.resp.data[0].target @[BPU.scala 316:11]
    btbRead._type <= btb.io.r.resp.data[0]._type @[BPU.scala 316:11]
    btbRead.tag <= btb.io.r.resp.data[0].tag @[BPU.scala 316:11]
    reg pcLatch : UInt<39>, clock with :
      reset => (UInt<1>("h0"), pcLatch) @[Reg.scala 15:16]
    when io.in.pc.valid : @[Reg.scala 16:19]
      pcLatch <= io.in.pc.bits @[Reg.scala 16:23]
    wire _WIRE_4 : UInt<39> @[BPU.scala 35:37]
    _WIRE_4 <= pcLatch @[BPU.scala 35:37]
    wire _WIRE_5 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_6 : UInt<39>
    _WIRE_6 <= _WIRE_4
    node _T_16 = bits(_WIRE_6, 1, 0) @[BPU.scala 35:65]
    _WIRE_5.pad <= _T_16 @[BPU.scala 35:65]
    node _T_17 = bits(_WIRE_6, 10, 2) @[BPU.scala 35:65]
    _WIRE_5.idx <= _T_17 @[BPU.scala 35:65]
    node _T_18 = bits(_WIRE_6, 38, 11) @[BPU.scala 35:65]
    _WIRE_5.tag <= _T_18 @[BPU.scala 35:65]
    node _T_19 = eq(btbRead.tag, _WIRE_5.tag) @[BPU.scala 320:45]
    node _T_20 = and(btbRead.valid, _T_19) @[BPU.scala 320:30]
    node _T_21 = eq(flush, UInt<1>("h0")) @[BPU.scala 320:76]
    node _T_22 = and(_T_20, _T_21) @[BPU.scala 320:73]
    node _T_23 = and(btb.io.r.req.ready, btb.io.r.req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[BPU.scala 320:93]
    REG_1 <= _T_23 @[BPU.scala 320:93]
    node _T_24 = and(_T_22, REG_1) @[BPU.scala 320:83]
    node _T_25 = bits(pcLatch, 1, 1) @[BPU.scala 320:143]
    node _T_26 = bits(btbRead.brIdx, 0, 0) @[BPU.scala 320:163]
    node _T_27 = and(_T_25, _T_26) @[BPU.scala 320:147]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[BPU.scala 320:134]
    node btbHit = and(_T_24, _T_28) @[BPU.scala 320:131]
    node _T_29 = bits(btbRead.brIdx, 2, 2) @[BPU.scala 327:36]
    node crosslineJump = and(_T_29, btbHit) @[BPU.scala 327:40]
    io.crosslineJump <= crosslineJump @[BPU.scala 328:20]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_30 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_31 = tail(_T_30, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_31 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<39> @[BPU.scala 35:37]
    _WIRE_7 <= pcLatch @[BPU.scala 35:37]
    wire _WIRE_8 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_9 : UInt<39>
    _WIRE_9 <= _WIRE_7
    node _T_32 = bits(_WIRE_9, 1, 0) @[BPU.scala 35:65]
    _WIRE_8.pad <= _T_32 @[BPU.scala 35:65]
    node _T_33 = bits(_WIRE_9, 10, 2) @[BPU.scala 35:65]
    _WIRE_8.idx <= _T_33 @[BPU.scala 35:65]
    node _T_34 = bits(_WIRE_9, 38, 11) @[BPU.scala 35:65]
    _WIRE_8.tag <= _T_34 @[BPU.scala 35:65]
    wire _WIRE_10 : UInt<39> @[BPU.scala 35:37]
    _WIRE_10 <= pcLatch @[BPU.scala 35:37]
    wire _WIRE_11 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_12 : UInt<39>
    _WIRE_12 <= _WIRE_10
    node _T_35 = bits(_WIRE_12, 1, 0) @[BPU.scala 35:65]
    _WIRE_11.pad <= _T_35 @[BPU.scala 35:65]
    node _T_36 = bits(_WIRE_12, 10, 2) @[BPU.scala 35:65]
    _WIRE_11.idx <= _T_36 @[BPU.scala 35:65]
    node _T_37 = bits(_WIRE_12, 38, 11) @[BPU.scala 35:65]
    _WIRE_11.tag <= _T_37 @[BPU.scala 35:65]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_38 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_39 = tail(_T_38, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_39 @[GTimer.scala 25:7]
    wire _WIRE_13 : UInt<1>
    _WIRE_13 <= UInt<1>("h0")
    node _T_40 = and(btbHit, _WIRE_13) @[Debug.scala 55:16]
    when _T_40 : @[Debug.scala 55:31]
      node _T_41 = asUInt(reset) @[Debug.scala 56:24]
      node _T_42 = eq(_T_41, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_42 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] BPU_inorder: ", REG_3) : SIM_2 @[Debug.scala 56:24]
      node _T_43 = asUInt(reset) @[Debug.scala 57:13]
      node _T_44 = eq(_T_43, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_44 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[BTBHT1] %d pc=%x tag=%x,%x index=%x bridx=%x tgt=%x,%x flush %x type:%x\n", REG_2, pcLatch, btbRead.tag, _WIRE_8.tag, _WIRE_11.idx, btbRead.brIdx, btbRead.target, io.out.target, flush, btbRead._type) : SIM_3 @[Debug.scala 57:13]
    node _T_45 = bits(io.out.valid, 0, 0) @[Bitwise.scala 72:15]
    node _T_46 = mux(_T_45, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    node _T_47 = cat(crosslineJump, _T_46) @[Cat.scala 30:58]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_48 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_49 = tail(_T_48, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_49 @[GTimer.scala 25:7]
    wire _WIRE_14 : UInt<1>
    _WIRE_14 <= UInt<1>("h0")
    node _T_50 = and(btbHit, _WIRE_14) @[Debug.scala 55:16]
    when _T_50 : @[Debug.scala 55:31]
      node _T_51 = asUInt(reset) @[Debug.scala 56:24]
      node _T_52 = eq(_T_51, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_52 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] BPU_inorder: ", REG_4) : SIM_4 @[Debug.scala 56:24]
      node _T_53 = asUInt(reset) @[Debug.scala 57:13]
      node _T_54 = eq(_T_53, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_54 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[BTBHT2] btbRead.brIdx %x mask %x\n", btbRead.brIdx, _T_47) : SIM_5 @[Debug.scala 57:13]
    cmem pht : UInt<2> [512] @[BPU.scala 336:16]
    wire _WIRE_15 : UInt<39> @[BPU.scala 35:37]
    _WIRE_15 <= io.in.pc.bits @[BPU.scala 35:37]
    wire _WIRE_16 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_17 : UInt<39>
    _WIRE_17 <= _WIRE_15
    node _T_55 = bits(_WIRE_17, 1, 0) @[BPU.scala 35:65]
    _WIRE_16.pad <= _T_55 @[BPU.scala 35:65]
    node _T_56 = bits(_WIRE_17, 10, 2) @[BPU.scala 35:65]
    _WIRE_16.idx <= _T_56 @[BPU.scala 35:65]
    node _T_57 = bits(_WIRE_17, 38, 11) @[BPU.scala 35:65]
    _WIRE_16.tag <= _T_57 @[BPU.scala 35:65]
    read mport MPORT = pht[_WIRE_16.idx], clock @[BPU.scala 337:36]
    node _T_58 = bits(MPORT, 1, 1) @[BPU.scala 337:67]
    reg phtTaken : UInt<1>, clock with :
      reset => (UInt<1>("h0"), phtTaken) @[Reg.scala 15:16]
    when io.in.pc.valid : @[Reg.scala 16:19]
      phtTaken <= _T_58 @[Reg.scala 16:23]
    cmem ras : UInt<39> [16] @[BPU.scala 342:16]
    reg value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 60:40]
    read mport MPORT_1 = ras[value], clock @[BPU.scala 345:37]
    reg rasTarget : UInt<39>, clock with :
      reset => (UInt<1>("h0"), rasTarget) @[Reg.scala 15:16]
    when io.in.pc.valid : @[Reg.scala 16:19]
      rasTarget <= MPORT_1 @[Reg.scala 16:23]
    wire _WIRE_18 : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>} @[BPU.scala 349:34]
    _WIRE_18.isRVC <= UInt<1>("h0") @[BPU.scala 349:34]
    _WIRE_18.btbType <= UInt<2>("h0") @[BPU.scala 349:34]
    _WIRE_18.fuOpType <= UInt<7>("h0") @[BPU.scala 349:34]
    _WIRE_18.actualTaken <= UInt<1>("h0") @[BPU.scala 349:34]
    _WIRE_18.actualTarget <= UInt<39>("h0") @[BPU.scala 349:34]
    _WIRE_18.isMissPredict <= UInt<1>("h0") @[BPU.scala 349:34]
    _WIRE_18.pc <= UInt<39>("h0") @[BPU.scala 349:34]
    _WIRE_18.valid <= UInt<1>("h0") @[BPU.scala 349:34]
    wire req : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}
    req.isRVC <= _WIRE_18.isRVC
    req.btbType <= _WIRE_18.btbType
    req.fuOpType <= _WIRE_18.fuOpType
    req.actualTaken <= _WIRE_18.actualTaken
    req.actualTarget <= _WIRE_18.actualTarget
    req.isMissPredict <= _WIRE_18.isMissPredict
    req.pc <= _WIRE_18.pc
    req.valid <= _WIRE_18.valid
    wire _WIRE_19 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>} @[BPU.scala 350:39]
    _WIRE_19.valid <= UInt<1>("h0") @[BPU.scala 350:39]
    _WIRE_19.brIdx <= UInt<3>("h0") @[BPU.scala 350:39]
    _WIRE_19.target <= UInt<39>("h0") @[BPU.scala 350:39]
    _WIRE_19._type <= UInt<2>("h0") @[BPU.scala 350:39]
    _WIRE_19.tag <= UInt<28>("h0") @[BPU.scala 350:39]
    wire btbWrite : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1>}
    btbWrite.valid <= _WIRE_19.valid
    btbWrite.brIdx <= _WIRE_19.brIdx
    btbWrite.target <= _WIRE_19.target
    btbWrite._type <= _WIRE_19._type
    btbWrite.tag <= _WIRE_19.tag
    wire _WIRE_20 : UInt<39> @[BPU.scala 35:37]
    _WIRE_20 <= req.pc @[BPU.scala 35:37]
    wire _WIRE_21 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_22 : UInt<39>
    _WIRE_22 <= _WIRE_20
    node _T_59 = bits(_WIRE_22, 1, 0) @[BPU.scala 35:65]
    _WIRE_21.pad <= _T_59 @[BPU.scala 35:65]
    node _T_60 = bits(_WIRE_22, 10, 2) @[BPU.scala 35:65]
    _WIRE_21.idx <= _T_60 @[BPU.scala 35:65]
    node _T_61 = bits(_WIRE_22, 38, 11) @[BPU.scala 35:65]
    _WIRE_21.tag <= _T_61 @[BPU.scala 35:65]
    wire _WIRE_23 : UInt<39> @[BPU.scala 35:37]
    _WIRE_23 <= req.pc @[BPU.scala 35:37]
    wire _WIRE_24 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_25 : UInt<39>
    _WIRE_25 <= _WIRE_23
    node _T_62 = bits(_WIRE_25, 1, 0) @[BPU.scala 35:65]
    _WIRE_24.pad <= _T_62 @[BPU.scala 35:65]
    node _T_63 = bits(_WIRE_25, 10, 2) @[BPU.scala 35:65]
    _WIRE_24.idx <= _T_63 @[BPU.scala 35:65]
    node _T_64 = bits(_WIRE_25, 38, 11) @[BPU.scala 35:65]
    _WIRE_24.tag <= _T_64 @[BPU.scala 35:65]
    node _T_65 = bits(req.pc, 1, 1) @[BPU.scala 353:145]
    node _T_66 = bits(req.pc, 1, 1) @[BPU.scala 353:157]
    node _T_67 = not(_T_66) @[BPU.scala 353:150]
    node _T_68 = cat(_T_65, _T_67) @[Cat.scala 30:58]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_69 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_70 = tail(_T_69, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_70 @[GTimer.scala 25:7]
    wire _WIRE_26 : UInt<1>
    _WIRE_26 <= UInt<1>("h0")
    node _T_71 = and(req.valid, _WIRE_26) @[Debug.scala 55:16]
    when _T_71 : @[Debug.scala 55:31]
      node _T_72 = asUInt(reset) @[Debug.scala 56:24]
      node _T_73 = eq(_T_72, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_73 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] BPU_inorder: ", REG_5) : SIM_6 @[Debug.scala 56:24]
      node _T_74 = asUInt(reset) @[Debug.scala 57:13]
      node _T_75 = eq(_T_74, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_75 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[BTBUP] pc=%x tag=%x index=%x bridx=%x tgt=%x type=%x\n", req.pc, _WIRE_21.tag, _WIRE_24.idx, _T_68, req.actualTarget, req.btbType) : SIM_7 @[Debug.scala 57:13]
    wire _WIRE_27 : UInt<39> @[BPU.scala 35:37]
    _WIRE_27 <= req.pc @[BPU.scala 35:37]
    wire _WIRE_28 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_29 : UInt<39>
    _WIRE_29 <= _WIRE_27
    node _T_76 = bits(_WIRE_29, 1, 0) @[BPU.scala 35:65]
    _WIRE_28.pad <= _T_76 @[BPU.scala 35:65]
    node _T_77 = bits(_WIRE_29, 10, 2) @[BPU.scala 35:65]
    _WIRE_28.idx <= _T_77 @[BPU.scala 35:65]
    node _T_78 = bits(_WIRE_29, 38, 11) @[BPU.scala 35:65]
    _WIRE_28.tag <= _T_78 @[BPU.scala 35:65]
    btbWrite.tag <= _WIRE_28.tag @[BPU.scala 364:16]
    btbWrite.target <= req.actualTarget @[BPU.scala 365:19]
    btbWrite._type <= req.btbType @[BPU.scala 366:18]
    node _T_79 = bits(req.pc, 2, 0) @[BPU.scala 367:31]
    node _T_80 = eq(_T_79, UInt<3>("h6")) @[BPU.scala 367:36]
    node _T_81 = eq(req.isRVC, UInt<1>("h0")) @[BPU.scala 367:49]
    node _T_82 = and(_T_80, _T_81) @[BPU.scala 367:46]
    node _T_83 = bits(req.pc, 1, 1) @[BPU.scala 367:67]
    node _T_84 = bits(req.pc, 1, 1) @[BPU.scala 367:79]
    node _T_85 = not(_T_84) @[BPU.scala 367:72]
    node hi = cat(_T_82, _T_83) @[Cat.scala 30:58]
    node _T_86 = cat(hi, _T_85) @[Cat.scala 30:58]
    btbWrite.brIdx <= _T_86 @[BPU.scala 367:18]
    btbWrite.valid <= UInt<1>("h1") @[BPU.scala 368:18]
    node _T_87 = and(req.isMissPredict, req.valid) @[BPU.scala 375:43]
    btb.io.w.req.valid <= _T_87 @[BPU.scala 375:22]
    wire _WIRE_30 : UInt<39> @[BPU.scala 35:37]
    _WIRE_30 <= req.pc @[BPU.scala 35:37]
    wire _WIRE_31 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_32 : UInt<39>
    _WIRE_32 <= _WIRE_30
    node _T_88 = bits(_WIRE_32, 1, 0) @[BPU.scala 35:65]
    _WIRE_31.pad <= _T_88 @[BPU.scala 35:65]
    node _T_89 = bits(_WIRE_32, 10, 2) @[BPU.scala 35:65]
    _WIRE_31.idx <= _T_89 @[BPU.scala 35:65]
    node _T_90 = bits(_WIRE_32, 38, 11) @[BPU.scala 35:65]
    _WIRE_31.tag <= _T_90 @[BPU.scala 35:65]
    btb.io.w.req.bits.setIdx <= _WIRE_31.idx @[BPU.scala 376:28]
    btb.io.w.req.bits.data.valid <= btbWrite.valid @[BPU.scala 377:26]
    btb.io.w.req.bits.data.brIdx <= btbWrite.brIdx @[BPU.scala 377:26]
    btb.io.w.req.bits.data.target <= btbWrite.target @[BPU.scala 377:26]
    btb.io.w.req.bits.data._type <= btbWrite._type @[BPU.scala 377:26]
    btb.io.w.req.bits.data.tag <= btbWrite.tag @[BPU.scala 377:26]
    wire _WIRE_33 : UInt<39> @[BPU.scala 35:37]
    _WIRE_33 <= req.pc @[BPU.scala 35:37]
    wire _WIRE_34 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
    wire _WIRE_35 : UInt<39>
    _WIRE_35 <= _WIRE_33
    node _T_91 = bits(_WIRE_35, 1, 0) @[BPU.scala 35:65]
    _WIRE_34.pad <= _T_91 @[BPU.scala 35:65]
    node _T_92 = bits(_WIRE_35, 10, 2) @[BPU.scala 35:65]
    _WIRE_34.idx <= _T_92 @[BPU.scala 35:65]
    node _T_93 = bits(_WIRE_35, 38, 11) @[BPU.scala 35:65]
    _WIRE_34.tag <= _T_93 @[BPU.scala 35:65]
    read mport MPORT_2 = pht[_WIRE_34.idx], clock @[BPU.scala 389:29]
    reg cnt : UInt, clock with :
      reset => (UInt<1>("h0"), cnt) @[BPU.scala 389:20]
    cnt <= MPORT_2 @[BPU.scala 389:20]
    reg reqLatch : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), reqLatch) @[BPU.scala 390:25]
    reqLatch.isRVC <= req.isRVC @[BPU.scala 390:25]
    reqLatch.btbType <= req.btbType @[BPU.scala 390:25]
    reqLatch.fuOpType <= req.fuOpType @[BPU.scala 390:25]
    reqLatch.actualTaken <= req.actualTaken @[BPU.scala 390:25]
    reqLatch.actualTarget <= req.actualTarget @[BPU.scala 390:25]
    reqLatch.isMissPredict <= req.isMissPredict @[BPU.scala 390:25]
    reqLatch.pc <= req.pc @[BPU.scala 390:25]
    reqLatch.valid <= req.valid @[BPU.scala 390:25]
    node _T_94 = bits(reqLatch.fuOpType, 3, 3) @[ALU.scala 63:35]
    node _T_95 = eq(_T_94, UInt<1>("h0")) @[ALU.scala 63:30]
    node _T_96 = and(reqLatch.valid, _T_95) @[BPU.scala 391:24]
    when _T_96 : @[BPU.scala 391:66]
      node _T_97 = add(cnt, UInt<1>("h1")) @[BPU.scala 393:33]
      node _T_98 = tail(_T_97, 1) @[BPU.scala 393:33]
      node _T_99 = sub(cnt, UInt<1>("h1")) @[BPU.scala 393:44]
      node _T_100 = tail(_T_99, 1) @[BPU.scala 393:44]
      node _T_101 = mux(reqLatch.actualTaken, _T_98, _T_100) @[BPU.scala 393:21]
      node _T_102 = neq(cnt, UInt<2>("h3")) @[BPU.scala 394:30]
      node _T_103 = and(reqLatch.actualTaken, _T_102) @[BPU.scala 394:22]
      node _T_104 = eq(reqLatch.actualTaken, UInt<1>("h0")) @[BPU.scala 394:48]
      node _T_105 = neq(cnt, UInt<1>("h0")) @[BPU.scala 394:63]
      node _T_106 = and(_T_104, _T_105) @[BPU.scala 394:55]
      node _T_107 = or(_T_103, _T_106) @[BPU.scala 394:44]
      when _T_107 : @[BPU.scala 395:16]
        wire _WIRE_36 : UInt<39> @[BPU.scala 35:37]
        _WIRE_36 <= reqLatch.pc @[BPU.scala 35:37]
        wire _WIRE_37 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2>} @[BPU.scala 35:65]
        wire _WIRE_38 : UInt<39>
        _WIRE_38 <= _WIRE_36
        node _T_108 = bits(_WIRE_38, 1, 0) @[BPU.scala 35:65]
        _WIRE_37.pad <= _T_108 @[BPU.scala 35:65]
        node _T_109 = bits(_WIRE_38, 10, 2) @[BPU.scala 35:65]
        _WIRE_37.idx <= _T_109 @[BPU.scala 35:65]
        node _T_110 = bits(_WIRE_38, 38, 11) @[BPU.scala 35:65]
        _WIRE_37.tag <= _T_110 @[BPU.scala 35:65]
        write mport MPORT_3 = pht[_WIRE_37.idx], clock
        MPORT_3 <= _T_101
    when req.valid : @[BPU.scala 402:20]
      node _T_111 = eq(req.fuOpType, UInt<7>("h5c")) @[BPU.scala 403:24]
      when _T_111 : @[BPU.scala 403:45]
        node _T_112 = add(value, UInt<1>("h1")) @[BPU.scala 404:26]
        node _T_113 = tail(_T_112, 1) @[BPU.scala 404:26]
        node _T_114 = add(req.pc, UInt<2>("h2")) @[BPU.scala 404:55]
        node _T_115 = tail(_T_114, 1) @[BPU.scala 404:55]
        node _T_116 = add(req.pc, UInt<3>("h4")) @[BPU.scala 404:69]
        node _T_117 = tail(_T_116, 1) @[BPU.scala 404:69]
        node _T_118 = mux(req.isRVC, _T_115, _T_117) @[BPU.scala 404:36]
        write mport MPORT_4 = ras[_T_113], clock
        MPORT_4 <= _T_118
        node _value_T = add(value, UInt<1>("h1")) @[BPU.scala 406:28]
        node _value_T_1 = tail(_value_T, 1) @[BPU.scala 406:28]
        value <= _value_T_1 @[BPU.scala 406:16]
      else :
        node _T_119 = eq(req.fuOpType, UInt<7>("h5e")) @[BPU.scala 408:29]
        when _T_119 : @[BPU.scala 408:48]
          node _T_120 = eq(value, UInt<1>("h0")) @[BPU.scala 409:21]
          when _T_120 : @[BPU.scala 409:30]
            skip
          node _value_T_2 = eq(value, UInt<1>("h0")) @[BPU.scala 412:31]
          node _value_T_3 = sub(value, UInt<1>("h1")) @[BPU.scala 412:53]
          node _value_T_4 = tail(_value_T_3, 1) @[BPU.scala 412:53]
          node _value_T_5 = mux(_value_T_2, UInt<1>("h0"), _value_T_4) @[BPU.scala 412:22]
          value <= _value_T_5 @[BPU.scala 412:16]
    node _T_121 = eq(btbRead._type, UInt<2>("h3")) @[BPU.scala 416:38]
    node _T_122 = mux(_T_121, rasTarget, btbRead.target) @[BPU.scala 416:23]
    io.out.target <= _T_122 @[BPU.scala 416:17]
    node _T_123 = bits(io.out.valid, 0, 0) @[Bitwise.scala 72:15]
    node _T_124 = mux(_T_123, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    node hi_1 = cat(UInt<1>("h1"), crosslineJump) @[Cat.scala 30:58]
    node _T_125 = cat(hi_1, _T_124) @[Cat.scala 30:58]
    node _T_126 = and(btbRead.brIdx, _T_125) @[BPU.scala 419:30]
    io.brIdx <= _T_126 @[BPU.scala 419:13]
    node _T_127 = eq(btbRead._type, UInt<1>("h0")) @[BPU.scala 420:47]
    node _T_128 = neq(rasTarget, UInt<1>("h0")) @[BPU.scala 420:91]
    node _T_129 = and(UInt<1>("h1"), _T_128) @[BPU.scala 420:79]
    node _T_130 = mux(_T_127, phtTaken, _T_129) @[BPU.scala 420:32]
    node _T_131 = and(btbHit, _T_130) @[BPU.scala 420:26]
    io.out.valid <= _T_131 @[BPU.scala 420:16]
    io.out.rtype <= UInt<1>("h0") @[BPU.scala 421:16]

  module IFU_inorder :
    input clock : Clock
    input reset : Reset
    output io : { imem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<82>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<82>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, flip redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flushVec : UInt<4>, bpFlush : UInt<1>, flip ipf : UInt<1>}

    reg pc : UInt<39>, clock with :
      reset => (reset, UInt<39>("h80000000")) @[IFU.scala 322:19]
    node _T = and(io.imem.req.ready, io.imem.req.valid) @[Decoupled.scala 40:37]
    node pcUpdate = or(io.redirect.valid, _T) @[IFU.scala 323:36]
    node _T_1 = bits(pc, 1, 1) @[IFU.scala 324:20]
    node _T_2 = add(pc, UInt<2>("h2")) @[IFU.scala 324:28]
    node _T_3 = tail(_T_2, 1) @[IFU.scala 324:28]
    node _T_4 = add(pc, UInt<3>("h4")) @[IFU.scala 324:38]
    node _T_5 = tail(_T_4, 1) @[IFU.scala 324:38]
    node snpc = mux(_T_1, _T_3, _T_5) @[IFU.scala 324:17]
    inst bp1 of BPU_inorder @[IFU.scala 326:19]
    bp1.clock <= clock
    bp1.reset <= reset
    reg crosslineJumpLatch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IFU.scala 329:35]
    node _T_6 = or(pcUpdate, bp1.io.flush) @[IFU.scala 330:17]
    when _T_6 : @[IFU.scala 330:34]
      node _T_7 = eq(crosslineJumpLatch, UInt<1>("h0")) @[IFU.scala 331:71]
      node _T_8 = and(bp1.io.crosslineJump, _T_7) @[IFU.scala 331:68]
      node _T_9 = mux(bp1.io.flush, UInt<1>("h0"), _T_8) @[IFU.scala 331:30]
      crosslineJumpLatch <= _T_9 @[IFU.scala 331:24]
    reg crosslineJumpTarget : UInt<39>, clock with :
      reset => (UInt<1>("h0"), crosslineJumpTarget) @[Reg.scala 15:16]
    when bp1.io.crosslineJump : @[Reg.scala 16:19]
      crosslineJumpTarget <= bp1.io.out.target @[Reg.scala 16:23]
    node crosslineJumpForceSeq = and(bp1.io.crosslineJump, bp1.io.out.valid) @[IFU.scala 334:45]
    node _T_10 = eq(bp1.io.flush, UInt<1>("h0")) @[IFU.scala 335:53]
    node crosslineJumpForceTgt = and(crosslineJumpLatch, _T_10) @[IFU.scala 335:50]
    node pnpc = mux(bp1.io.crosslineJump, snpc, bp1.io.out.target) @[IFU.scala 338:17]
    node _T_11 = mux(bp1.io.out.valid, pnpc, snpc) @[IFU.scala 340:104]
    node _T_12 = mux(crosslineJumpLatch, crosslineJumpTarget, _T_11) @[IFU.scala 340:59]
    node npc = mux(io.redirect.valid, io.redirect.target, _T_12) @[IFU.scala 340:16]
    node _T_13 = mux(bp1.io.out.valid, UInt<1>("h0"), UInt<1>("h1")) @[IFU.scala 341:114]
    node _T_14 = mux(bp1.io.crosslineJump, UInt<1>("h1"), _T_13) @[IFU.scala 341:87]
    node _T_15 = mux(crosslineJumpLatch, UInt<1>("h0"), _T_14) @[IFU.scala 341:54]
    node npcIsSeq = mux(io.redirect.valid, UInt<1>("h0"), _T_15) @[IFU.scala 341:21]
    wire brIdx : UInt<4> @[IFU.scala 345:19]
    node _T_16 = mux(io.redirect.valid, UInt<1>("h0"), bp1.io.brIdx) @[IFU.scala 349:29]
    node _T_17 = cat(npcIsSeq, _T_16) @[Cat.scala 30:58]
    brIdx <= _T_17 @[IFU.scala 349:9]
    node _T_18 = and(io.imem.req.ready, io.imem.req.valid) @[Decoupled.scala 40:37]
    bp1.io.in.pc.valid <= _T_18 @[IFU.scala 352:22]
    bp1.io.in.pc.bits <= npc @[IFU.scala 353:21]
    bp1.io.flush <= io.redirect.valid @[IFU.scala 358:16]
    when pcUpdate : @[IFU.scala 360:19]
      pc <= npc @[IFU.scala 361:8]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_19 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_20 = tail(_T_19, 1) @[GTimer.scala 25:12]
    REG <= _T_20 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_21 = and(pcUpdate, _WIRE) @[Debug.scala 55:16]
    when _T_21 : @[Debug.scala 55:31]
      node _T_22 = asUInt(reset) @[Debug.scala 56:24]
      node _T_23 = eq(_T_22, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_23 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] IFU_inorder: ", REG) : SIM @[Debug.scala 56:24]
      node _T_24 = asUInt(reset) @[Debug.scala 57:13]
      node _T_25 = eq(_T_24, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_25 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[IFUPC] pc:%x pcUpdate:%d npc:%x RedValid:%d RedTarget:%x LJL:%d LJTarget:%x LJ:%d snpc:%x bpValid:%d pnpn:%x \n", pc, pcUpdate, npc, io.redirect.valid, io.redirect.target, crosslineJumpLatch, crosslineJumpTarget, bp1.io.crosslineJump, snpc, bp1.io.out.valid, pnpc) : SIM_1 @[Debug.scala 57:13]
    node _T_26 = mux(io.redirect.valid, UInt<4>("hf"), UInt<1>("h0")) @[IFU.scala 367:21]
    io.flushVec <= _T_26 @[IFU.scala 367:15]
    io.bpFlush <= UInt<1>("h0") @[IFU.scala 368:14]
    node _T_27 = bits(pc, 38, 1) @[IFU.scala 370:39]
    node _T_28 = cat(_T_27, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_29 = bits(brIdx, 3, 0) @[IFU.scala 371:88]
    node _T_30 = bits(npc, 38, 0) @[IFU.scala 371:98]
    node _T_31 = bits(pc, 38, 0) @[IFU.scala 371:118]
    node hi = cat(_T_29, _T_30) @[Cat.scala 30:58]
    node _T_32 = cat(hi, _T_31) @[Cat.scala 30:58]
    io.imem.req.bits.addr <= _T_28 @[SimpleBus.scala 64:15]
    io.imem.req.bits.cmd <= UInt<1>("h0") @[SimpleBus.scala 65:14]
    io.imem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.imem.req.bits.wdata <= UInt<1>("h0") @[SimpleBus.scala 67:16]
    io.imem.req.bits.wmask <= UInt<1>("h0") @[SimpleBus.scala 68:16]
    io.imem.req.bits.user <= _T_32 @[SimpleBus.scala 69:21]
    io.imem.req.valid <= io.out.ready @[IFU.scala 372:21]
    node _T_33 = bits(io.flushVec, 0, 0) @[IFU.scala 374:52]
    node _T_34 = or(io.out.ready, _T_33) @[IFU.scala 374:38]
    io.imem.resp.ready <= _T_34 @[IFU.scala 374:22]
    io.out.bits.isBranch is invalid @[IFU.scala 376:15]
    io.out.bits.runahead_checkpoint_id is invalid @[IFU.scala 376:15]
    io.out.bits.crossPageIPFFix is invalid @[IFU.scala 376:15]
    io.out.bits.isRVC is invalid @[IFU.scala 376:15]
    io.out.bits.brIdx is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[0] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[1] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[2] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[3] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[4] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[5] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[6] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[7] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[8] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[9] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[10] is invalid @[IFU.scala 376:15]
    io.out.bits.intrVec[11] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[0] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[1] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[2] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[3] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[4] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[5] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[6] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[7] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[8] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[9] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[10] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[11] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[12] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[13] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[14] is invalid @[IFU.scala 376:15]
    io.out.bits.exceptionVec[15] is invalid @[IFU.scala 376:15]
    io.out.bits.redirect.valid is invalid @[IFU.scala 376:15]
    io.out.bits.redirect.rtype is invalid @[IFU.scala 376:15]
    io.out.bits.redirect.target is invalid @[IFU.scala 376:15]
    io.out.bits.pnpc is invalid @[IFU.scala 376:15]
    io.out.bits.pc is invalid @[IFU.scala 376:15]
    io.out.bits.instr is invalid @[IFU.scala 376:15]
    node _T_35 = and(io.imem.req.ready, io.imem.req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_36 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_37 = tail(_T_36, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_37 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_38 = and(_T_35, _WIRE_1) @[Debug.scala 55:16]
    when _T_38 : @[Debug.scala 55:31]
      node _T_39 = asUInt(reset) @[Debug.scala 56:24]
      node _T_40 = eq(_T_39, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_40 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] IFU_inorder: ", REG_1) : SIM_2 @[Debug.scala 56:24]
      node _T_41 = asUInt(reset) @[Debug.scala 57:13]
      node _T_42 = eq(_T_41, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_42 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[IFI] pc=%x user=%x %x %x %x \n", io.imem.req.bits.addr, io.imem.req.bits.user, io.redirect.valid, bp1.io.brIdx, brIdx) : SIM_3 @[Debug.scala 57:13]
    node _T_43 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_44 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_45 = tail(_T_44, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_45 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_46 = and(_T_43, _WIRE_2) @[Debug.scala 55:16]
    when _T_46 : @[Debug.scala 55:31]
      node _T_47 = asUInt(reset) @[Debug.scala 56:24]
      node _T_48 = eq(_T_47, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_48 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] IFU_inorder: ", REG_2) : SIM_4 @[Debug.scala 56:24]
      node _T_49 = asUInt(reset) @[Debug.scala 57:13]
      node _T_50 = eq(_T_49, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_50 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[IFO] pc=%x inst=%x\n", io.out.bits.pc, io.out.bits.instr) : SIM_5 @[Debug.scala 57:13]
    io.out.bits.instr <= io.imem.resp.bits.rdata @[IFU.scala 384:21]
    node _T_51 = bits(io.imem.resp.bits.user, 38, 0) @[IFU.scala 386:24]
    io.out.bits.pc <= _T_51 @[IFU.scala 386:20]
    node _T_52 = bits(io.imem.resp.bits.user, 77, 39) @[IFU.scala 387:26]
    io.out.bits.pnpc <= _T_52 @[IFU.scala 387:22]
    node _T_53 = bits(io.imem.resp.bits.user, 81, 78) @[IFU.scala 388:27]
    io.out.bits.brIdx <= _T_53 @[IFU.scala 388:23]
    io.out.bits.exceptionVec[12] <= io.ipf @[IFU.scala 390:44]
    node _T_54 = bits(io.flushVec, 0, 0) @[IFU.scala 391:53]
    node _T_55 = eq(_T_54, UInt<1>("h0")) @[IFU.scala 391:41]
    node _T_56 = and(io.imem.resp.valid, _T_55) @[IFU.scala 391:38]
    io.out.valid <= _T_56 @[IFU.scala 391:16]
    node _T_57 = and(io.imem.resp.ready, io.imem.resp.valid) @[Decoupled.scala 40:37]
    reg REG_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when io.imem.req.valid : @[StopWatch.scala 30:20]
      REG_3 <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when _T_57 : @[StopWatch.scala 31:19]
      REG_3 <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_58 = orr(io.flushVec) @[IFU.scala 394:37]

  module NaiveRVCAlignBuffer :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, flip flush : UInt<1>}

    wire instr : UInt<32> @[NaiveIBF.scala 33:19]
    node _T = bits(instr, 1, 0) @[NaiveIBF.scala 34:20]
    node isRVC = neq(_T, UInt<2>("h3")) @[NaiveIBF.scala 34:26]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[NaiveIBF.scala 39:22]
    reg pcOffsetR : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[NaiveIBF.scala 40:26]
    node _T_1 = eq(state, UInt<2>("h0")) @[NaiveIBF.scala 41:28]
    node _T_2 = bits(io.in.bits.pc, 2, 0) @[NaiveIBF.scala 41:53]
    node pcOffset = mux(_T_1, _T_2, pcOffsetR) @[NaiveIBF.scala 41:21]
    node instIn = cat(UInt<16>("h0"), io.in.bits.instr) @[Cat.scala 30:58]
    wire canGo : UInt<1>
    canGo <= UInt<1>("h0")
    wire canIn : UInt<1>
    canIn <= UInt<1>("h0")
    node _T_3 = eq(pcOffset, UInt<1>("h0")) @[NaiveIBF.scala 48:28]
    node _T_4 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 48:40]
    node _T_5 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 48:55]
    node _T_6 = or(_T_4, _T_5) @[NaiveIBF.scala 48:47]
    node _T_7 = and(_T_3, _T_6) @[NaiveIBF.scala 48:36]
    node _T_8 = eq(pcOffset, UInt<3>("h4")) @[NaiveIBF.scala 48:72]
    node _T_9 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 48:84]
    node _T_10 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 48:99]
    node _T_11 = or(_T_9, _T_10) @[NaiveIBF.scala 48:91]
    node _T_12 = and(_T_8, _T_11) @[NaiveIBF.scala 48:80]
    node _T_13 = or(_T_7, _T_12) @[NaiveIBF.scala 48:60]
    node _T_14 = eq(pcOffset, UInt<2>("h2")) @[NaiveIBF.scala 48:116]
    node _T_15 = bits(io.in.bits.brIdx, 1, 1) @[NaiveIBF.scala 48:142]
    node _T_16 = or(isRVC, _T_15) @[NaiveIBF.scala 48:134]
    node _T_17 = and(_T_14, _T_16) @[NaiveIBF.scala 48:124]
    node _T_18 = or(_T_13, _T_17) @[NaiveIBF.scala 48:104]
    node _T_19 = eq(pcOffset, UInt<3>("h6")) @[NaiveIBF.scala 48:159]
    node _T_20 = and(_T_19, isRVC) @[NaiveIBF.scala 48:167]
    node rvcFinish = or(_T_18, _T_20) @[NaiveIBF.scala 48:147]
    node _T_21 = eq(pcOffset, UInt<1>("h0")) @[NaiveIBF.scala 51:26]
    node _T_22 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 51:53]
    node _T_23 = eq(_T_22, UInt<1>("h0")) @[NaiveIBF.scala 51:47]
    node _T_24 = and(isRVC, _T_23) @[NaiveIBF.scala 51:44]
    node _T_25 = and(_T_21, _T_24) @[NaiveIBF.scala 51:34]
    node _T_26 = eq(pcOffset, UInt<3>("h4")) @[NaiveIBF.scala 51:70]
    node _T_27 = bits(io.in.bits.brIdx, 0, 0) @[NaiveIBF.scala 51:97]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[NaiveIBF.scala 51:91]
    node _T_29 = and(isRVC, _T_28) @[NaiveIBF.scala 51:88]
    node _T_30 = and(_T_26, _T_29) @[NaiveIBF.scala 51:78]
    node _T_31 = or(_T_25, _T_30) @[NaiveIBF.scala 51:58]
    node _T_32 = eq(pcOffset, UInt<2>("h2")) @[NaiveIBF.scala 51:114]
    node _T_33 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 51:125]
    node _T_34 = and(_T_32, _T_33) @[NaiveIBF.scala 51:122]
    node _T_35 = bits(io.in.bits.brIdx, 1, 1) @[NaiveIBF.scala 51:141]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[NaiveIBF.scala 51:135]
    node _T_37 = and(_T_34, _T_36) @[NaiveIBF.scala 51:132]
    node rvcNext = or(_T_31, _T_37) @[NaiveIBF.scala 51:102]
    node _T_38 = eq(pcOffset, UInt<3>("h6")) @[NaiveIBF.scala 52:29]
    node _T_39 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 52:40]
    node _T_40 = and(_T_38, _T_39) @[NaiveIBF.scala 52:37]
    node _T_41 = bits(io.in.bits.brIdx, 2, 2) @[NaiveIBF.scala 52:56]
    node _T_42 = eq(_T_41, UInt<1>("h0")) @[NaiveIBF.scala 52:50]
    node rvcSpecial = and(_T_40, _T_42) @[NaiveIBF.scala 52:47]
    node _T_43 = eq(pcOffset, UInt<3>("h6")) @[NaiveIBF.scala 53:33]
    node _T_44 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 53:44]
    node _T_45 = and(_T_43, _T_44) @[NaiveIBF.scala 53:41]
    node _T_46 = bits(io.in.bits.brIdx, 2, 2) @[NaiveIBF.scala 53:59]
    node rvcSpecialJump = and(_T_45, _T_46) @[NaiveIBF.scala 53:51]
    node pnpcIsSeq = bits(io.in.bits.brIdx, 3, 3) @[NaiveIBF.scala 54:24]
    node _T_47 = eq(state, UInt<2>("h0")) @[NaiveIBF.scala 57:25]
    node _T_48 = eq(state, UInt<2>("h1")) @[NaiveIBF.scala 57:45]
    node _T_49 = or(_T_47, _T_48) @[NaiveIBF.scala 57:36]
    node _T_50 = and(_T_49, rvcSpecial) @[NaiveIBF.scala 57:58]
    node _T_51 = and(_T_50, io.in.valid) @[NaiveIBF.scala 57:72]
    node _T_52 = eq(pnpcIsSeq, UInt<1>("h0")) @[NaiveIBF.scala 57:90]
    node flushIFU = and(_T_51, _T_52) @[NaiveIBF.scala 57:87]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_53 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_54 = tail(_T_53, 1) @[GTimer.scala 25:12]
    REG <= _T_54 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_55 = and(flushIFU, _WIRE) @[Debug.scala 55:16]
    when _T_55 : @[Debug.scala 55:31]
      node _T_56 = asUInt(reset) @[Debug.scala 56:24]
      node _T_57 = eq(_T_56, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_57 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] NaiveRVCAlignBuffer: ", REG) : SIM @[Debug.scala 56:24]
      node _T_58 = asUInt(reset) @[Debug.scala 57:13]
      node _T_59 = eq(_T_58, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_59 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "flushIFU at pc %x offset %x\n", io.in.bits.pc, pcOffset) : SIM_1 @[Debug.scala 57:13]
    node _T_60 = eq(flushIFU, UInt<1>("h0")) @[NaiveIBF.scala 59:10]
    node _T_61 = asUInt(reset) @[NaiveIBF.scala 59:9]
    node _T_62 = or(_T_60, _T_61) @[NaiveIBF.scala 59:9]
    node _T_63 = eq(_T_62, UInt<1>("h0")) @[NaiveIBF.scala 59:9]
    when _T_63 : @[NaiveIBF.scala 59:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at NaiveIBF.scala:59 assert(!flushIFU)\n") : SIM_2 @[NaiveIBF.scala 59:9]
      stop(clock, UInt<1>("h1"), 1) @[NaiveIBF.scala 59:9]
    node _T_64 = eq(state, UInt<2>("h0")) @[NaiveIBF.scala 60:33]
    node _T_65 = eq(state, UInt<2>("h1")) @[NaiveIBF.scala 60:53]
    node _T_66 = or(_T_64, _T_65) @[NaiveIBF.scala 60:44]
    node _T_67 = or(rvcSpecial, rvcSpecialJump) @[NaiveIBF.scala 60:81]
    node _T_68 = and(_T_66, _T_67) @[NaiveIBF.scala 60:66]
    node _T_69 = and(_T_68, io.in.valid) @[NaiveIBF.scala 60:100]
    node loadNextInstline = and(_T_69, pnpcIsSeq) @[NaiveIBF.scala 60:115]
    wire pcOut : UInt<39>
    pcOut <= UInt<39>("h0")
    wire pnpcOut : UInt<39>
    pnpcOut <= UInt<39>("h0")
    reg specialPCR : UInt<39>, clock with :
      reset => (UInt<1>("h0"), specialPCR) @[NaiveIBF.scala 64:23]
    reg specialNPCR : UInt<39>, clock with :
      reset => (UInt<1>("h0"), specialNPCR) @[NaiveIBF.scala 65:24]
    reg specialInstR : UInt<16>, clock with :
      reset => (UInt<1>("h0"), specialInstR) @[NaiveIBF.scala 66:25]
    reg specialIPFR : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NaiveIBF.scala 67:28]
    node _T_70 = bits(io.in.bits.pc, 38, 3) @[NaiveIBF.scala 68:37]
    node _T_71 = cat(_T_70, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_72 = add(_T_71, UInt<4>("ha")) @[NaiveIBF.scala 68:63]
    node redirectPC = tail(_T_72, 1) @[NaiveIBF.scala 68:63]
    node _T_73 = eq(pcOffset, UInt<2>("h2")) @[NaiveIBF.scala 69:36]
    node _T_74 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 69:47]
    node _T_75 = and(_T_73, _T_74) @[NaiveIBF.scala 69:44]
    node _T_76 = bits(io.in.bits.pnpc, 2, 0) @[NaiveIBF.scala 69:72]
    node _T_77 = eq(_T_76, UInt<3>("h4")) @[NaiveIBF.scala 69:78]
    node _T_78 = and(_T_75, _T_77) @[NaiveIBF.scala 69:54]
    node _T_79 = bits(io.in.bits.brIdx, 1, 1) @[NaiveIBF.scala 69:95]
    node _T_80 = eq(_T_79, UInt<1>("h0")) @[NaiveIBF.scala 69:89]
    node rvcForceLoadNext = and(_T_78, _T_80) @[NaiveIBF.scala 69:86]
    node _T_81 = eq(state, UInt<2>("h2")) @[NaiveIBF.scala 90:23]
    node _T_82 = eq(state, UInt<2>("h3")) @[NaiveIBF.scala 90:47]
    node _T_83 = or(_T_81, _T_82) @[NaiveIBF.scala 90:38]
    node _T_84 = bits(instIn, 15, 0) @[NaiveIBF.scala 90:80]
    node _T_85 = cat(_T_84, specialInstR) @[Cat.scala 30:58]
    node _T_86 = bits(instIn, 31, 0) @[NaiveIBF.scala 91:23]
    node _T_87 = bits(instIn, 47, 16) @[NaiveIBF.scala 92:23]
    node _T_88 = bits(instIn, 63, 32) @[NaiveIBF.scala 93:23]
    node _T_89 = bits(instIn, 79, 48) @[NaiveIBF.scala 94:23]
    node _T_90 = eq(UInt<1>("h0"), pcOffset) @[LookupTree.scala 24:34]
    node _T_91 = eq(UInt<2>("h2"), pcOffset) @[LookupTree.scala 24:34]
    node _T_92 = eq(UInt<3>("h4"), pcOffset) @[LookupTree.scala 24:34]
    node _T_93 = eq(UInt<3>("h6"), pcOffset) @[LookupTree.scala 24:34]
    node _T_94 = mux(_T_90, _T_86, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_95 = mux(_T_91, _T_87, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_96 = mux(_T_92, _T_88, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_97 = mux(_T_93, _T_89, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_98 = or(_T_94, _T_95) @[Mux.scala 27:72]
    node _T_99 = or(_T_98, _T_96) @[Mux.scala 27:72]
    node _T_100 = or(_T_99, _T_97) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<32> @[Mux.scala 27:72]
    _WIRE_1 <= _T_100 @[Mux.scala 27:72]
    node _T_101 = mux(_T_83, _T_85, _WIRE_1) @[NaiveIBF.scala 90:15]
    instr <= _T_101 @[NaiveIBF.scala 90:9]
    node _T_102 = eq(io.flush, UInt<1>("h0")) @[NaiveIBF.scala 97:8]
    when _T_102 : @[NaiveIBF.scala 97:18]
      node _T_103 = eq(UInt<2>("h0"), state) @[NaiveIBF.scala 98:18]
      when _T_103 : @[NaiveIBF.scala 98:18]
        node _T_104 = or(rvcFinish, rvcNext) @[NaiveIBF.scala 100:28]
        canGo <= _T_104 @[NaiveIBF.scala 100:15]
        node _T_105 = or(rvcFinish, rvcForceLoadNext) @[NaiveIBF.scala 101:28]
        canIn <= _T_105 @[NaiveIBF.scala 101:15]
        pcOut <= io.in.bits.pc @[NaiveIBF.scala 102:15]
        node _T_106 = add(io.in.bits.pc, UInt<2>("h2")) @[NaiveIBF.scala 103:76]
        node _T_107 = tail(_T_106, 1) @[NaiveIBF.scala 103:76]
        node _T_108 = add(io.in.bits.pc, UInt<3>("h4")) @[NaiveIBF.scala 103:95]
        node _T_109 = tail(_T_108, 1) @[NaiveIBF.scala 103:95]
        node _T_110 = mux(isRVC, _T_107, _T_109) @[NaiveIBF.scala 103:55]
        node _T_111 = mux(rvcFinish, io.in.bits.pnpc, _T_110) @[NaiveIBF.scala 103:23]
        pnpcOut <= _T_111 @[NaiveIBF.scala 103:17]
        node _T_112 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
        node _T_113 = and(_T_112, rvcFinish) @[NaiveIBF.scala 104:28]
        when _T_113 : @[NaiveIBF.scala 104:41]
          state <= UInt<2>("h0") @[NaiveIBF.scala 104:48]
        node _T_114 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
        node _T_115 = and(_T_114, rvcNext) @[NaiveIBF.scala 105:28]
        when _T_115 : @[NaiveIBF.scala 105:39]
          state <= UInt<2>("h1") @[NaiveIBF.scala 106:17]
          node _T_116 = mux(isRVC, UInt<2>("h2"), UInt<3>("h4")) @[NaiveIBF.scala 107:38]
          node _T_117 = add(pcOffset, _T_116) @[NaiveIBF.scala 107:33]
          node _T_118 = tail(_T_117, 1) @[NaiveIBF.scala 107:33]
          pcOffsetR <= _T_118 @[NaiveIBF.scala 107:21]
        node _T_119 = and(rvcSpecial, io.in.valid) @[NaiveIBF.scala 109:25]
        when _T_119 : @[NaiveIBF.scala 109:40]
          state <= UInt<2>("h2") @[NaiveIBF.scala 110:17]
          specialPCR <= pcOut @[NaiveIBF.scala 111:22]
          node _T_120 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 112:43]
          specialInstR <= _T_120 @[NaiveIBF.scala 112:24]
          specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 113:23]
        node _T_121 = and(rvcSpecialJump, io.in.valid) @[NaiveIBF.scala 115:29]
        when _T_121 : @[NaiveIBF.scala 115:44]
          state <= UInt<2>("h3") @[NaiveIBF.scala 116:17]
          specialPCR <= pcOut @[NaiveIBF.scala 117:22]
          specialNPCR <= io.in.bits.pnpc @[NaiveIBF.scala 118:23]
          node _T_122 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 119:43]
          specialInstR <= _T_122 @[NaiveIBF.scala 119:24]
          specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 120:23]
      else :
        node _T_123 = eq(UInt<2>("h1"), state) @[NaiveIBF.scala 98:18]
        when _T_123 : @[NaiveIBF.scala 98:18]
          node _T_124 = or(rvcFinish, rvcNext) @[NaiveIBF.scala 124:28]
          canGo <= _T_124 @[NaiveIBF.scala 124:15]
          node _T_125 = or(rvcFinish, rvcForceLoadNext) @[NaiveIBF.scala 125:28]
          canIn <= _T_125 @[NaiveIBF.scala 125:15]
          node _T_126 = bits(io.in.bits.pc, 38, 3) @[NaiveIBF.scala 126:35]
          node _T_127 = bits(pcOffsetR, 2, 0) @[NaiveIBF.scala 126:61]
          node _T_128 = cat(_T_126, _T_127) @[Cat.scala 30:58]
          pcOut <= _T_128 @[NaiveIBF.scala 126:15]
          node _T_129 = add(pcOut, UInt<2>("h2")) @[NaiveIBF.scala 127:68]
          node _T_130 = tail(_T_129, 1) @[NaiveIBF.scala 127:68]
          node _T_131 = add(pcOut, UInt<3>("h4")) @[NaiveIBF.scala 127:79]
          node _T_132 = tail(_T_131, 1) @[NaiveIBF.scala 127:79]
          node _T_133 = mux(isRVC, _T_130, _T_132) @[NaiveIBF.scala 127:55]
          node _T_134 = mux(rvcFinish, io.in.bits.pnpc, _T_133) @[NaiveIBF.scala 127:23]
          pnpcOut <= _T_134 @[NaiveIBF.scala 127:17]
          node _T_135 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
          node _T_136 = and(_T_135, rvcFinish) @[NaiveIBF.scala 128:28]
          when _T_136 : @[NaiveIBF.scala 128:41]
            state <= UInt<2>("h0") @[NaiveIBF.scala 128:48]
          node _T_137 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
          node _T_138 = and(_T_137, rvcNext) @[NaiveIBF.scala 129:28]
          when _T_138 : @[NaiveIBF.scala 129:39]
            state <= UInt<2>("h1") @[NaiveIBF.scala 130:17]
            node _T_139 = mux(isRVC, UInt<2>("h2"), UInt<3>("h4")) @[NaiveIBF.scala 131:38]
            node _T_140 = add(pcOffset, _T_139) @[NaiveIBF.scala 131:33]
            node _T_141 = tail(_T_140, 1) @[NaiveIBF.scala 131:33]
            pcOffsetR <= _T_141 @[NaiveIBF.scala 131:21]
          node _T_142 = and(rvcSpecial, io.in.valid) @[NaiveIBF.scala 133:25]
          when _T_142 : @[NaiveIBF.scala 133:40]
            state <= UInt<2>("h2") @[NaiveIBF.scala 134:17]
            specialPCR <= pcOut @[NaiveIBF.scala 135:22]
            node _T_143 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 136:43]
            specialInstR <= _T_143 @[NaiveIBF.scala 136:24]
            specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 137:23]
          node _T_144 = and(rvcSpecialJump, io.in.valid) @[NaiveIBF.scala 139:29]
          when _T_144 : @[NaiveIBF.scala 139:44]
            state <= UInt<2>("h3") @[NaiveIBF.scala 140:17]
            specialPCR <= pcOut @[NaiveIBF.scala 141:22]
            specialNPCR <= io.in.bits.pnpc @[NaiveIBF.scala 142:23]
            node _T_145 = bits(io.in.bits.instr, 63, 48) @[NaiveIBF.scala 143:43]
            specialInstR <= _T_145 @[NaiveIBF.scala 143:24]
            specialIPFR <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 144:23]
        else :
          node _T_146 = eq(UInt<2>("h2"), state) @[NaiveIBF.scala 98:18]
          when _T_146 : @[NaiveIBF.scala 98:18]
            pcOut <= specialPCR @[NaiveIBF.scala 149:15]
            node _T_147 = add(specialPCR, UInt<3>("h4")) @[NaiveIBF.scala 150:31]
            node _T_148 = tail(_T_147, 1) @[NaiveIBF.scala 150:31]
            pnpcOut <= _T_148 @[NaiveIBF.scala 150:17]
            canGo <= io.in.valid @[NaiveIBF.scala 152:15]
            canIn <= UInt<1>("h0") @[NaiveIBF.scala 153:15]
            node _T_149 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
            when _T_149 : @[NaiveIBF.scala 154:28]
              state <= UInt<2>("h1") @[NaiveIBF.scala 155:17]
              pcOffsetR <= UInt<2>("h2") @[NaiveIBF.scala 156:21]
          else :
            node _T_150 = eq(UInt<2>("h3"), state) @[NaiveIBF.scala 98:18]
            when _T_150 : @[NaiveIBF.scala 98:18]
              pcOut <= specialPCR @[NaiveIBF.scala 161:15]
              pnpcOut <= specialNPCR @[NaiveIBF.scala 162:17]
              canGo <= io.in.valid @[NaiveIBF.scala 164:15]
              canIn <= UInt<1>("h1") @[NaiveIBF.scala 165:15]
              node _T_151 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
              when _T_151 : @[NaiveIBF.scala 166:28]
                state <= UInt<2>("h0") @[NaiveIBF.scala 167:17]
    else :
      state <= UInt<2>("h0") @[NaiveIBF.scala 172:11]
      canGo is invalid @[NaiveIBF.scala 173:11]
      canIn is invalid @[NaiveIBF.scala 174:11]
      pcOut is invalid @[NaiveIBF.scala 175:11]
      pnpcOut is invalid @[NaiveIBF.scala 176:13]
    io.out.bits.isBranch is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.runahead_checkpoint_id is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.crossPageIPFFix is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.isRVC is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.brIdx is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[0] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[1] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[2] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[3] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[4] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[5] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[6] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[7] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[8] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[9] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[10] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.intrVec[11] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[0] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[1] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[2] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[3] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[4] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[5] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[6] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[7] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[8] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[9] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[10] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[11] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[12] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[13] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[14] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.exceptionVec[15] is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.valid is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.rtype is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.target is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.pnpc is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.pc is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.instr is invalid @[NaiveIBF.scala 180:15]
    io.out.bits.redirect.valid <= UInt<1>("h0") @[NaiveIBF.scala 181:30]
    io.out.bits.pc <= pcOut @[NaiveIBF.scala 182:18]
    io.out.bits.pnpc <= pnpcOut @[NaiveIBF.scala 183:20]
    io.out.bits.instr <= instr @[NaiveIBF.scala 184:21]
    node _T_152 = add(pcOut, UInt<3>("h4")) @[NaiveIBF.scala 185:46]
    node _T_153 = tail(_T_152, 1) @[NaiveIBF.scala 185:46]
    node _T_154 = eq(pnpcOut, _T_153) @[NaiveIBF.scala 185:37]
    node _T_155 = eq(isRVC, UInt<1>("h0")) @[NaiveIBF.scala 185:54]
    node _T_156 = and(_T_154, _T_155) @[NaiveIBF.scala 185:51]
    node _T_157 = add(pcOut, UInt<2>("h2")) @[NaiveIBF.scala 185:83]
    node _T_158 = tail(_T_157, 1) @[NaiveIBF.scala 185:83]
    node _T_159 = eq(pnpcOut, _T_158) @[NaiveIBF.scala 185:74]
    node _T_160 = and(_T_159, isRVC) @[NaiveIBF.scala 185:88]
    node _T_161 = or(_T_156, _T_160) @[NaiveIBF.scala 185:62]
    node _T_162 = mux(_T_161, UInt<1>("h0"), UInt<1>("h1")) @[NaiveIBF.scala 185:27]
    io.out.bits.brIdx <= _T_162 @[NaiveIBF.scala 185:21]
    node _T_163 = and(io.in.valid, canGo) @[NaiveIBF.scala 187:31]
    io.out.valid <= _T_163 @[NaiveIBF.scala 187:16]
    node _T_164 = eq(io.in.valid, UInt<1>("h0")) @[NaiveIBF.scala 188:19]
    node _T_165 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_166 = and(_T_165, canIn) @[NaiveIBF.scala 188:50]
    node _T_167 = or(_T_164, _T_166) @[NaiveIBF.scala 188:32]
    node _T_168 = or(_T_167, loadNextInstline) @[NaiveIBF.scala 188:60]
    io.in.ready <= _T_168 @[NaiveIBF.scala 188:15]
    io.out.bits.exceptionVec[0] <= io.in.bits.exceptionVec[0] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[1] <= io.in.bits.exceptionVec[1] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[2] <= io.in.bits.exceptionVec[2] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[3] <= io.in.bits.exceptionVec[3] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[4] <= io.in.bits.exceptionVec[4] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[5] <= io.in.bits.exceptionVec[5] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[6] <= io.in.bits.exceptionVec[6] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[7] <= io.in.bits.exceptionVec[7] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[8] <= io.in.bits.exceptionVec[8] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[9] <= io.in.bits.exceptionVec[9] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[10] <= io.in.bits.exceptionVec[10] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[11] <= io.in.bits.exceptionVec[11] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[13] <= io.in.bits.exceptionVec[13] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[14] <= io.in.bits.exceptionVec[14] @[NaiveIBF.scala 190:28]
    io.out.bits.exceptionVec[15] <= io.in.bits.exceptionVec[15] @[NaiveIBF.scala 190:28]
    node _T_169 = eq(state, UInt<2>("h3")) @[NaiveIBF.scala 191:112]
    node _T_170 = eq(state, UInt<2>("h2")) @[NaiveIBF.scala 191:142]
    node _T_171 = or(_T_169, _T_170) @[NaiveIBF.scala 191:133]
    node _T_172 = and(specialIPFR, _T_171) @[NaiveIBF.scala 191:102]
    node _T_173 = or(io.in.bits.exceptionVec[12], _T_172) @[NaiveIBF.scala 191:87]
    io.out.bits.exceptionVec[12] <= _T_173 @[NaiveIBF.scala 191:44]
    node _T_174 = eq(state, UInt<2>("h3")) @[NaiveIBF.scala 192:84]
    node _T_175 = eq(state, UInt<2>("h2")) @[NaiveIBF.scala 192:114]
    node _T_176 = or(_T_174, _T_175) @[NaiveIBF.scala 192:105]
    node _T_177 = and(io.in.bits.exceptionVec[12], _T_176) @[NaiveIBF.scala 192:74]
    node _T_178 = eq(specialIPFR, UInt<1>("h0")) @[NaiveIBF.scala 192:133]
    node _T_179 = and(_T_177, _T_178) @[NaiveIBF.scala 192:130]
    io.out.bits.crossPageIPFFix <= _T_179 @[NaiveIBF.scala 192:31]

  module Decoder :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, isWFI : UInt<1>, isBranch : UInt<1>}

    wire hasIntr : UInt<1> @[IDU.scala 34:21]
    node _T = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<5>("h13"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.in.bits.instr, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<13>("h1013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<14>("h2013"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<14>("h3013"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<15>("h4013"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.in.bits.instr, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<15>("h5013"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<15>("h6013"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<15>("h7013"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.in.bits.instr, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<31>("h40005013"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_19 = eq(UInt<6>("h33"), _T_18) @[Lookup.scala 31:38]
    node _T_20 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_21 = eq(UInt<13>("h1033"), _T_20) @[Lookup.scala 31:38]
    node _T_22 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_23 = eq(UInt<14>("h2033"), _T_22) @[Lookup.scala 31:38]
    node _T_24 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_25 = eq(UInt<14>("h3033"), _T_24) @[Lookup.scala 31:38]
    node _T_26 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_27 = eq(UInt<15>("h4033"), _T_26) @[Lookup.scala 31:38]
    node _T_28 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_29 = eq(UInt<15>("h5033"), _T_28) @[Lookup.scala 31:38]
    node _T_30 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_31 = eq(UInt<15>("h6033"), _T_30) @[Lookup.scala 31:38]
    node _T_32 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_33 = eq(UInt<15>("h7033"), _T_32) @[Lookup.scala 31:38]
    node _T_34 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_35 = eq(UInt<31>("h40000033"), _T_34) @[Lookup.scala 31:38]
    node _T_36 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_37 = eq(UInt<31>("h40005033"), _T_36) @[Lookup.scala 31:38]
    node _T_38 = and(io.in.bits.instr, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_39 = eq(UInt<5>("h17"), _T_38) @[Lookup.scala 31:38]
    node _T_40 = and(io.in.bits.instr, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_41 = eq(UInt<6>("h37"), _T_40) @[Lookup.scala 31:38]
    node _T_42 = and(io.in.bits.instr, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_43 = eq(UInt<7>("h6f"), _T_42) @[Lookup.scala 31:38]
    node _T_44 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_45 = eq(UInt<7>("h67"), _T_44) @[Lookup.scala 31:38]
    node _T_46 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_47 = eq(UInt<7>("h63"), _T_46) @[Lookup.scala 31:38]
    node _T_48 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_49 = eq(UInt<13>("h1063"), _T_48) @[Lookup.scala 31:38]
    node _T_50 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_51 = eq(UInt<15>("h4063"), _T_50) @[Lookup.scala 31:38]
    node _T_52 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_53 = eq(UInt<15>("h5063"), _T_52) @[Lookup.scala 31:38]
    node _T_54 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_55 = eq(UInt<15>("h6063"), _T_54) @[Lookup.scala 31:38]
    node _T_56 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_57 = eq(UInt<15>("h7063"), _T_56) @[Lookup.scala 31:38]
    node _T_58 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_59 = eq(UInt<2>("h3"), _T_58) @[Lookup.scala 31:38]
    node _T_60 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_61 = eq(UInt<13>("h1003"), _T_60) @[Lookup.scala 31:38]
    node _T_62 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_63 = eq(UInt<14>("h2003"), _T_62) @[Lookup.scala 31:38]
    node _T_64 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_65 = eq(UInt<15>("h4003"), _T_64) @[Lookup.scala 31:38]
    node _T_66 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_67 = eq(UInt<15>("h5003"), _T_66) @[Lookup.scala 31:38]
    node _T_68 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_69 = eq(UInt<6>("h23"), _T_68) @[Lookup.scala 31:38]
    node _T_70 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_71 = eq(UInt<13>("h1023"), _T_70) @[Lookup.scala 31:38]
    node _T_72 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_73 = eq(UInt<14>("h2023"), _T_72) @[Lookup.scala 31:38]
    node _T_74 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_75 = eq(UInt<5>("h1b"), _T_74) @[Lookup.scala 31:38]
    node _T_76 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_77 = eq(UInt<13>("h101b"), _T_76) @[Lookup.scala 31:38]
    node _T_78 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_79 = eq(UInt<15>("h501b"), _T_78) @[Lookup.scala 31:38]
    node _T_80 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_81 = eq(UInt<31>("h4000501b"), _T_80) @[Lookup.scala 31:38]
    node _T_82 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_83 = eq(UInt<13>("h103b"), _T_82) @[Lookup.scala 31:38]
    node _T_84 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_85 = eq(UInt<15>("h503b"), _T_84) @[Lookup.scala 31:38]
    node _T_86 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_87 = eq(UInt<31>("h4000503b"), _T_86) @[Lookup.scala 31:38]
    node _T_88 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_89 = eq(UInt<6>("h3b"), _T_88) @[Lookup.scala 31:38]
    node _T_90 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_91 = eq(UInt<31>("h4000003b"), _T_90) @[Lookup.scala 31:38]
    node _T_92 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_93 = eq(UInt<15>("h6003"), _T_92) @[Lookup.scala 31:38]
    node _T_94 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_95 = eq(UInt<14>("h3003"), _T_94) @[Lookup.scala 31:38]
    node _T_96 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_97 = eq(UInt<14>("h3023"), _T_96) @[Lookup.scala 31:38]
    node _T_98 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_99 = eq(UInt<7>("h6b"), _T_98) @[Lookup.scala 31:38]
    node _T_100 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_101 = eq(UInt<26>("h2000033"), _T_100) @[Lookup.scala 31:38]
    node _T_102 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_103 = eq(UInt<26>("h2001033"), _T_102) @[Lookup.scala 31:38]
    node _T_104 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_105 = eq(UInt<26>("h2002033"), _T_104) @[Lookup.scala 31:38]
    node _T_106 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_107 = eq(UInt<26>("h2003033"), _T_106) @[Lookup.scala 31:38]
    node _T_108 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_109 = eq(UInt<26>("h2004033"), _T_108) @[Lookup.scala 31:38]
    node _T_110 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_111 = eq(UInt<26>("h2005033"), _T_110) @[Lookup.scala 31:38]
    node _T_112 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_113 = eq(UInt<26>("h2006033"), _T_112) @[Lookup.scala 31:38]
    node _T_114 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_115 = eq(UInt<26>("h2007033"), _T_114) @[Lookup.scala 31:38]
    node _T_116 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_117 = eq(UInt<26>("h200003b"), _T_116) @[Lookup.scala 31:38]
    node _T_118 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_119 = eq(UInt<26>("h200403b"), _T_118) @[Lookup.scala 31:38]
    node _T_120 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_121 = eq(UInt<26>("h200503b"), _T_120) @[Lookup.scala 31:38]
    node _T_122 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_123 = eq(UInt<26>("h200603b"), _T_122) @[Lookup.scala 31:38]
    node _T_124 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_125 = eq(UInt<26>("h200703b"), _T_124) @[Lookup.scala 31:38]
    node _T_126 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_127 = eq(UInt<1>("h0"), _T_126) @[Lookup.scala 31:38]
    node _T_128 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_129 = eq(UInt<1>("h0"), _T_128) @[Lookup.scala 31:38]
    node _T_130 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_131 = eq(UInt<15>("h4000"), _T_130) @[Lookup.scala 31:38]
    node _T_132 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_133 = eq(UInt<15>("h6000"), _T_132) @[Lookup.scala 31:38]
    node _T_134 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_135 = eq(UInt<16>("hc000"), _T_134) @[Lookup.scala 31:38]
    node _T_136 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_137 = eq(UInt<16>("he000"), _T_136) @[Lookup.scala 31:38]
    node _T_138 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_139 = eq(UInt<1>("h1"), _T_138) @[Lookup.scala 31:38]
    node _T_140 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_141 = eq(UInt<1>("h1"), _T_140) @[Lookup.scala 31:38]
    node _T_142 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_143 = eq(UInt<14>("h2001"), _T_142) @[Lookup.scala 31:38]
    node _T_144 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_145 = eq(UInt<15>("h4001"), _T_144) @[Lookup.scala 31:38]
    node _T_146 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_147 = eq(UInt<15>("h6101"), _T_146) @[Lookup.scala 31:38]
    node _T_148 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_149 = eq(UInt<15>("h6001"), _T_148) @[Lookup.scala 31:38]
    node _T_150 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_151 = eq(UInt<16>("h8001"), _T_150) @[Lookup.scala 31:38]
    node _T_152 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_153 = eq(UInt<16>("h8401"), _T_152) @[Lookup.scala 31:38]
    node _T_154 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_155 = eq(UInt<16>("h8801"), _T_154) @[Lookup.scala 31:38]
    node _T_156 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_157 = eq(UInt<16>("h8c01"), _T_156) @[Lookup.scala 31:38]
    node _T_158 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_159 = eq(UInt<16>("h8c21"), _T_158) @[Lookup.scala 31:38]
    node _T_160 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_161 = eq(UInt<16>("h8c41"), _T_160) @[Lookup.scala 31:38]
    node _T_162 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_163 = eq(UInt<16>("h8c61"), _T_162) @[Lookup.scala 31:38]
    node _T_164 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_165 = eq(UInt<16>("h9c01"), _T_164) @[Lookup.scala 31:38]
    node _T_166 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_167 = eq(UInt<16>("h9c21"), _T_166) @[Lookup.scala 31:38]
    node _T_168 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_169 = eq(UInt<16>("ha001"), _T_168) @[Lookup.scala 31:38]
    node _T_170 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_171 = eq(UInt<16>("hc001"), _T_170) @[Lookup.scala 31:38]
    node _T_172 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_173 = eq(UInt<16>("he001"), _T_172) @[Lookup.scala 31:38]
    node _T_174 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_175 = eq(UInt<2>("h2"), _T_174) @[Lookup.scala 31:38]
    node _T_176 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_177 = eq(UInt<15>("h4002"), _T_176) @[Lookup.scala 31:38]
    node _T_178 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_179 = eq(UInt<15>("h6002"), _T_178) @[Lookup.scala 31:38]
    node _T_180 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_181 = eq(UInt<16>("h8002"), _T_180) @[Lookup.scala 31:38]
    node _T_182 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_183 = eq(UInt<16>("h8002"), _T_182) @[Lookup.scala 31:38]
    node _T_184 = and(io.in.bits.instr, UInt<16>("hffff")) @[Lookup.scala 31:38]
    node _T_185 = eq(UInt<16>("h9002"), _T_184) @[Lookup.scala 31:38]
    node _T_186 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_187 = eq(UInt<16>("h9002"), _T_186) @[Lookup.scala 31:38]
    node _T_188 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_189 = eq(UInt<16>("h9002"), _T_188) @[Lookup.scala 31:38]
    node _T_190 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_191 = eq(UInt<16>("hc002"), _T_190) @[Lookup.scala 31:38]
    node _T_192 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_193 = eq(UInt<16>("he002"), _T_192) @[Lookup.scala 31:38]
    node _T_194 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_195 = eq(UInt<7>("h73"), _T_194) @[Lookup.scala 31:38]
    node _T_196 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_197 = eq(UInt<21>("h100073"), _T_196) @[Lookup.scala 31:38]
    node _T_198 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_199 = eq(UInt<30>("h30200073"), _T_198) @[Lookup.scala 31:38]
    node _T_200 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_201 = eq(UInt<4>("hf"), _T_200) @[Lookup.scala 31:38]
    node _T_202 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_203 = eq(UInt<29>("h10500073"), _T_202) @[Lookup.scala 31:38]
    node _T_204 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_205 = eq(UInt<29>("h10200073"), _T_204) @[Lookup.scala 31:38]
    node _T_206 = and(io.in.bits.instr, UInt<32>("hfe007fff")) @[Lookup.scala 31:38]
    node _T_207 = eq(UInt<29>("h12000073"), _T_206) @[Lookup.scala 31:38]
    node _T_208 = and(io.in.bits.instr, UInt<32>("hf9f0707f")) @[Lookup.scala 31:38]
    node _T_209 = eq(UInt<29>("h1000302f"), _T_208) @[Lookup.scala 31:38]
    node _T_210 = and(io.in.bits.instr, UInt<32>("hf9f0707f")) @[Lookup.scala 31:38]
    node _T_211 = eq(UInt<29>("h1000202f"), _T_210) @[Lookup.scala 31:38]
    node _T_212 = and(io.in.bits.instr, UInt<32>("hf800707f")) @[Lookup.scala 31:38]
    node _T_213 = eq(UInt<29>("h1800302f"), _T_212) @[Lookup.scala 31:38]
    node _T_214 = and(io.in.bits.instr, UInt<32>("hf800707f")) @[Lookup.scala 31:38]
    node _T_215 = eq(UInt<29>("h1800202f"), _T_214) @[Lookup.scala 31:38]
    node _T_216 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_217 = eq(UInt<28>("h800202f"), _T_216) @[Lookup.scala 31:38]
    node _T_218 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_219 = eq(UInt<14>("h202f"), _T_218) @[Lookup.scala 31:38]
    node _T_220 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_221 = eq(UInt<30>("h2000202f"), _T_220) @[Lookup.scala 31:38]
    node _T_222 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_223 = eq(UInt<31>("h6000202f"), _T_222) @[Lookup.scala 31:38]
    node _T_224 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_225 = eq(UInt<31>("h4000202f"), _T_224) @[Lookup.scala 31:38]
    node _T_226 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_227 = eq(UInt<32>("h8000202f"), _T_226) @[Lookup.scala 31:38]
    node _T_228 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_229 = eq(UInt<32>("ha000202f"), _T_228) @[Lookup.scala 31:38]
    node _T_230 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_231 = eq(UInt<32>("hc000202f"), _T_230) @[Lookup.scala 31:38]
    node _T_232 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_233 = eq(UInt<32>("he000202f"), _T_232) @[Lookup.scala 31:38]
    node _T_234 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_235 = eq(UInt<13>("h1073"), _T_234) @[Lookup.scala 31:38]
    node _T_236 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_237 = eq(UInt<14>("h2073"), _T_236) @[Lookup.scala 31:38]
    node _T_238 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_239 = eq(UInt<14>("h3073"), _T_238) @[Lookup.scala 31:38]
    node _T_240 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_241 = eq(UInt<15>("h5073"), _T_240) @[Lookup.scala 31:38]
    node _T_242 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_243 = eq(UInt<15>("h6073"), _T_242) @[Lookup.scala 31:38]
    node _T_244 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_245 = eq(UInt<15>("h7073"), _T_244) @[Lookup.scala 31:38]
    node _T_246 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_247 = eq(UInt<13>("h100f"), _T_246) @[Lookup.scala 31:38]
    node _T_248 = mux(_T_247, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_249 = mux(_T_245, UInt<3>("h4"), _T_248) @[Lookup.scala 33:37]
    node _T_250 = mux(_T_243, UInt<3>("h4"), _T_249) @[Lookup.scala 33:37]
    node _T_251 = mux(_T_241, UInt<3>("h4"), _T_250) @[Lookup.scala 33:37]
    node _T_252 = mux(_T_239, UInt<3>("h4"), _T_251) @[Lookup.scala 33:37]
    node _T_253 = mux(_T_237, UInt<3>("h4"), _T_252) @[Lookup.scala 33:37]
    node _T_254 = mux(_T_235, UInt<3>("h4"), _T_253) @[Lookup.scala 33:37]
    node _T_255 = mux(_T_233, UInt<3>("h5"), _T_254) @[Lookup.scala 33:37]
    node _T_256 = mux(_T_231, UInt<3>("h5"), _T_255) @[Lookup.scala 33:37]
    node _T_257 = mux(_T_229, UInt<3>("h5"), _T_256) @[Lookup.scala 33:37]
    node _T_258 = mux(_T_227, UInt<3>("h5"), _T_257) @[Lookup.scala 33:37]
    node _T_259 = mux(_T_225, UInt<3>("h5"), _T_258) @[Lookup.scala 33:37]
    node _T_260 = mux(_T_223, UInt<3>("h5"), _T_259) @[Lookup.scala 33:37]
    node _T_261 = mux(_T_221, UInt<3>("h5"), _T_260) @[Lookup.scala 33:37]
    node _T_262 = mux(_T_219, UInt<3>("h5"), _T_261) @[Lookup.scala 33:37]
    node _T_263 = mux(_T_217, UInt<3>("h5"), _T_262) @[Lookup.scala 33:37]
    node _T_264 = mux(_T_215, UInt<4>("hf"), _T_263) @[Lookup.scala 33:37]
    node _T_265 = mux(_T_213, UInt<4>("hf"), _T_264) @[Lookup.scala 33:37]
    node _T_266 = mux(_T_211, UInt<3>("h4"), _T_265) @[Lookup.scala 33:37]
    node _T_267 = mux(_T_209, UInt<3>("h4"), _T_266) @[Lookup.scala 33:37]
    node _T_268 = mux(_T_207, UInt<3>("h5"), _T_267) @[Lookup.scala 33:37]
    node _T_269 = mux(_T_205, UInt<3>("h4"), _T_268) @[Lookup.scala 33:37]
    node _T_270 = mux(_T_203, UInt<3>("h4"), _T_269) @[Lookup.scala 33:37]
    node _T_271 = mux(_T_201, UInt<2>("h2"), _T_270) @[Lookup.scala 33:37]
    node _T_272 = mux(_T_199, UInt<3>("h4"), _T_271) @[Lookup.scala 33:37]
    node _T_273 = mux(_T_197, UInt<3>("h4"), _T_272) @[Lookup.scala 33:37]
    node _T_274 = mux(_T_195, UInt<3>("h4"), _T_273) @[Lookup.scala 33:37]
    node _T_275 = mux(_T_193, UInt<2>("h2"), _T_274) @[Lookup.scala 33:37]
    node _T_276 = mux(_T_191, UInt<2>("h2"), _T_275) @[Lookup.scala 33:37]
    node _T_277 = mux(_T_189, UInt<3>("h5"), _T_276) @[Lookup.scala 33:37]
    node _T_278 = mux(_T_187, UInt<3>("h4"), _T_277) @[Lookup.scala 33:37]
    node _T_279 = mux(_T_185, UInt<3>("h4"), _T_278) @[Lookup.scala 33:37]
    node _T_280 = mux(_T_183, UInt<3>("h5"), _T_279) @[Lookup.scala 33:37]
    node _T_281 = mux(_T_181, UInt<3>("h4"), _T_280) @[Lookup.scala 33:37]
    node _T_282 = mux(_T_179, UInt<3>("h4"), _T_281) @[Lookup.scala 33:37]
    node _T_283 = mux(_T_177, UInt<3>("h4"), _T_282) @[Lookup.scala 33:37]
    node _T_284 = mux(_T_175, UInt<3>("h4"), _T_283) @[Lookup.scala 33:37]
    node _T_285 = mux(_T_173, UInt<1>("h1"), _T_284) @[Lookup.scala 33:37]
    node _T_286 = mux(_T_171, UInt<1>("h1"), _T_285) @[Lookup.scala 33:37]
    node _T_287 = mux(_T_169, UInt<3>("h7"), _T_286) @[Lookup.scala 33:37]
    node _T_288 = mux(_T_167, UInt<3>("h5"), _T_287) @[Lookup.scala 33:37]
    node _T_289 = mux(_T_165, UInt<3>("h5"), _T_288) @[Lookup.scala 33:37]
    node _T_290 = mux(_T_163, UInt<3>("h5"), _T_289) @[Lookup.scala 33:37]
    node _T_291 = mux(_T_161, UInt<3>("h5"), _T_290) @[Lookup.scala 33:37]
    node _T_292 = mux(_T_159, UInt<3>("h5"), _T_291) @[Lookup.scala 33:37]
    node _T_293 = mux(_T_157, UInt<3>("h5"), _T_292) @[Lookup.scala 33:37]
    node _T_294 = mux(_T_155, UInt<3>("h4"), _T_293) @[Lookup.scala 33:37]
    node _T_295 = mux(_T_153, UInt<3>("h4"), _T_294) @[Lookup.scala 33:37]
    node _T_296 = mux(_T_151, UInt<3>("h4"), _T_295) @[Lookup.scala 33:37]
    node _T_297 = mux(_T_149, UInt<3>("h4"), _T_296) @[Lookup.scala 33:37]
    node _T_298 = mux(_T_147, UInt<3>("h4"), _T_297) @[Lookup.scala 33:37]
    node _T_299 = mux(_T_145, UInt<3>("h4"), _T_298) @[Lookup.scala 33:37]
    node _T_300 = mux(_T_143, UInt<3>("h4"), _T_299) @[Lookup.scala 33:37]
    node _T_301 = mux(_T_141, UInt<3>("h4"), _T_300) @[Lookup.scala 33:37]
    node _T_302 = mux(_T_139, UInt<3>("h4"), _T_301) @[Lookup.scala 33:37]
    node _T_303 = mux(_T_137, UInt<2>("h2"), _T_302) @[Lookup.scala 33:37]
    node _T_304 = mux(_T_135, UInt<2>("h2"), _T_303) @[Lookup.scala 33:37]
    node _T_305 = mux(_T_133, UInt<3>("h4"), _T_304) @[Lookup.scala 33:37]
    node _T_306 = mux(_T_131, UInt<3>("h4"), _T_305) @[Lookup.scala 33:37]
    node _T_307 = mux(_T_129, UInt<3>("h4"), _T_306) @[Lookup.scala 33:37]
    node _T_308 = mux(_T_127, UInt<1>("h0"), _T_307) @[Lookup.scala 33:37]
    node _T_309 = mux(_T_125, UInt<3>("h5"), _T_308) @[Lookup.scala 33:37]
    node _T_310 = mux(_T_123, UInt<3>("h5"), _T_309) @[Lookup.scala 33:37]
    node _T_311 = mux(_T_121, UInt<3>("h5"), _T_310) @[Lookup.scala 33:37]
    node _T_312 = mux(_T_119, UInt<3>("h5"), _T_311) @[Lookup.scala 33:37]
    node _T_313 = mux(_T_117, UInt<3>("h5"), _T_312) @[Lookup.scala 33:37]
    node _T_314 = mux(_T_115, UInt<3>("h5"), _T_313) @[Lookup.scala 33:37]
    node _T_315 = mux(_T_113, UInt<3>("h5"), _T_314) @[Lookup.scala 33:37]
    node _T_316 = mux(_T_111, UInt<3>("h5"), _T_315) @[Lookup.scala 33:37]
    node _T_317 = mux(_T_109, UInt<3>("h5"), _T_316) @[Lookup.scala 33:37]
    node _T_318 = mux(_T_107, UInt<3>("h5"), _T_317) @[Lookup.scala 33:37]
    node _T_319 = mux(_T_105, UInt<3>("h5"), _T_318) @[Lookup.scala 33:37]
    node _T_320 = mux(_T_103, UInt<3>("h5"), _T_319) @[Lookup.scala 33:37]
    node _T_321 = mux(_T_101, UInt<3>("h5"), _T_320) @[Lookup.scala 33:37]
    node _T_322 = mux(_T_99, UInt<3>("h4"), _T_321) @[Lookup.scala 33:37]
    node _T_323 = mux(_T_97, UInt<2>("h2"), _T_322) @[Lookup.scala 33:37]
    node _T_324 = mux(_T_95, UInt<3>("h4"), _T_323) @[Lookup.scala 33:37]
    node _T_325 = mux(_T_93, UInt<3>("h4"), _T_324) @[Lookup.scala 33:37]
    node _T_326 = mux(_T_91, UInt<3>("h5"), _T_325) @[Lookup.scala 33:37]
    node _T_327 = mux(_T_89, UInt<3>("h5"), _T_326) @[Lookup.scala 33:37]
    node _T_328 = mux(_T_87, UInt<3>("h5"), _T_327) @[Lookup.scala 33:37]
    node _T_329 = mux(_T_85, UInt<3>("h5"), _T_328) @[Lookup.scala 33:37]
    node _T_330 = mux(_T_83, UInt<3>("h5"), _T_329) @[Lookup.scala 33:37]
    node _T_331 = mux(_T_81, UInt<3>("h4"), _T_330) @[Lookup.scala 33:37]
    node _T_332 = mux(_T_79, UInt<3>("h4"), _T_331) @[Lookup.scala 33:37]
    node _T_333 = mux(_T_77, UInt<3>("h4"), _T_332) @[Lookup.scala 33:37]
    node _T_334 = mux(_T_75, UInt<3>("h4"), _T_333) @[Lookup.scala 33:37]
    node _T_335 = mux(_T_73, UInt<2>("h2"), _T_334) @[Lookup.scala 33:37]
    node _T_336 = mux(_T_71, UInt<2>("h2"), _T_335) @[Lookup.scala 33:37]
    node _T_337 = mux(_T_69, UInt<2>("h2"), _T_336) @[Lookup.scala 33:37]
    node _T_338 = mux(_T_67, UInt<3>("h4"), _T_337) @[Lookup.scala 33:37]
    node _T_339 = mux(_T_65, UInt<3>("h4"), _T_338) @[Lookup.scala 33:37]
    node _T_340 = mux(_T_63, UInt<3>("h4"), _T_339) @[Lookup.scala 33:37]
    node _T_341 = mux(_T_61, UInt<3>("h4"), _T_340) @[Lookup.scala 33:37]
    node _T_342 = mux(_T_59, UInt<3>("h4"), _T_341) @[Lookup.scala 33:37]
    node _T_343 = mux(_T_57, UInt<1>("h1"), _T_342) @[Lookup.scala 33:37]
    node _T_344 = mux(_T_55, UInt<1>("h1"), _T_343) @[Lookup.scala 33:37]
    node _T_345 = mux(_T_53, UInt<1>("h1"), _T_344) @[Lookup.scala 33:37]
    node _T_346 = mux(_T_51, UInt<1>("h1"), _T_345) @[Lookup.scala 33:37]
    node _T_347 = mux(_T_49, UInt<1>("h1"), _T_346) @[Lookup.scala 33:37]
    node _T_348 = mux(_T_47, UInt<1>("h1"), _T_347) @[Lookup.scala 33:37]
    node _T_349 = mux(_T_45, UInt<3>("h4"), _T_348) @[Lookup.scala 33:37]
    node _T_350 = mux(_T_43, UInt<3>("h7"), _T_349) @[Lookup.scala 33:37]
    node _T_351 = mux(_T_41, UInt<3>("h6"), _T_350) @[Lookup.scala 33:37]
    node _T_352 = mux(_T_39, UInt<3>("h6"), _T_351) @[Lookup.scala 33:37]
    node _T_353 = mux(_T_37, UInt<3>("h5"), _T_352) @[Lookup.scala 33:37]
    node _T_354 = mux(_T_35, UInt<3>("h5"), _T_353) @[Lookup.scala 33:37]
    node _T_355 = mux(_T_33, UInt<3>("h5"), _T_354) @[Lookup.scala 33:37]
    node _T_356 = mux(_T_31, UInt<3>("h5"), _T_355) @[Lookup.scala 33:37]
    node _T_357 = mux(_T_29, UInt<3>("h5"), _T_356) @[Lookup.scala 33:37]
    node _T_358 = mux(_T_27, UInt<3>("h5"), _T_357) @[Lookup.scala 33:37]
    node _T_359 = mux(_T_25, UInt<3>("h5"), _T_358) @[Lookup.scala 33:37]
    node _T_360 = mux(_T_23, UInt<3>("h5"), _T_359) @[Lookup.scala 33:37]
    node _T_361 = mux(_T_21, UInt<3>("h5"), _T_360) @[Lookup.scala 33:37]
    node _T_362 = mux(_T_19, UInt<3>("h5"), _T_361) @[Lookup.scala 33:37]
    node _T_363 = mux(_T_17, UInt<3>("h4"), _T_362) @[Lookup.scala 33:37]
    node _T_364 = mux(_T_15, UInt<3>("h4"), _T_363) @[Lookup.scala 33:37]
    node _T_365 = mux(_T_13, UInt<3>("h4"), _T_364) @[Lookup.scala 33:37]
    node _T_366 = mux(_T_11, UInt<3>("h4"), _T_365) @[Lookup.scala 33:37]
    node _T_367 = mux(_T_9, UInt<3>("h4"), _T_366) @[Lookup.scala 33:37]
    node _T_368 = mux(_T_7, UInt<3>("h4"), _T_367) @[Lookup.scala 33:37]
    node _T_369 = mux(_T_5, UInt<3>("h4"), _T_368) @[Lookup.scala 33:37]
    node _T_370 = mux(_T_3, UInt<3>("h4"), _T_369) @[Lookup.scala 33:37]
    node decodeList_0 = mux(_T_1, UInt<3>("h4"), _T_370) @[Lookup.scala 33:37]
    node _T_371 = mux(_T_247, UInt<3>("h4"), UInt<2>("h3")) @[Lookup.scala 33:37]
    node _T_372 = mux(_T_245, UInt<2>("h3"), _T_371) @[Lookup.scala 33:37]
    node _T_373 = mux(_T_243, UInt<2>("h3"), _T_372) @[Lookup.scala 33:37]
    node _T_374 = mux(_T_241, UInt<2>("h3"), _T_373) @[Lookup.scala 33:37]
    node _T_375 = mux(_T_239, UInt<2>("h3"), _T_374) @[Lookup.scala 33:37]
    node _T_376 = mux(_T_237, UInt<2>("h3"), _T_375) @[Lookup.scala 33:37]
    node _T_377 = mux(_T_235, UInt<2>("h3"), _T_376) @[Lookup.scala 33:37]
    node _T_378 = mux(_T_233, UInt<1>("h1"), _T_377) @[Lookup.scala 33:37]
    node _T_379 = mux(_T_231, UInt<1>("h1"), _T_378) @[Lookup.scala 33:37]
    node _T_380 = mux(_T_229, UInt<1>("h1"), _T_379) @[Lookup.scala 33:37]
    node _T_381 = mux(_T_227, UInt<1>("h1"), _T_380) @[Lookup.scala 33:37]
    node _T_382 = mux(_T_225, UInt<1>("h1"), _T_381) @[Lookup.scala 33:37]
    node _T_383 = mux(_T_223, UInt<1>("h1"), _T_382) @[Lookup.scala 33:37]
    node _T_384 = mux(_T_221, UInt<1>("h1"), _T_383) @[Lookup.scala 33:37]
    node _T_385 = mux(_T_219, UInt<1>("h1"), _T_384) @[Lookup.scala 33:37]
    node _T_386 = mux(_T_217, UInt<1>("h1"), _T_385) @[Lookup.scala 33:37]
    node _T_387 = mux(_T_215, UInt<1>("h1"), _T_386) @[Lookup.scala 33:37]
    node _T_388 = mux(_T_213, UInt<1>("h1"), _T_387) @[Lookup.scala 33:37]
    node _T_389 = mux(_T_211, UInt<1>("h1"), _T_388) @[Lookup.scala 33:37]
    node _T_390 = mux(_T_209, UInt<1>("h1"), _T_389) @[Lookup.scala 33:37]
    node _T_391 = mux(_T_207, UInt<3>("h4"), _T_390) @[Lookup.scala 33:37]
    node _T_392 = mux(_T_205, UInt<2>("h3"), _T_391) @[Lookup.scala 33:37]
    node _T_393 = mux(_T_203, UInt<1>("h0"), _T_392) @[Lookup.scala 33:37]
    node _T_394 = mux(_T_201, UInt<3>("h4"), _T_393) @[Lookup.scala 33:37]
    node _T_395 = mux(_T_199, UInt<2>("h3"), _T_394) @[Lookup.scala 33:37]
    node _T_396 = mux(_T_197, UInt<2>("h3"), _T_395) @[Lookup.scala 33:37]
    node _T_397 = mux(_T_195, UInt<2>("h3"), _T_396) @[Lookup.scala 33:37]
    node _T_398 = mux(_T_193, UInt<1>("h1"), _T_397) @[Lookup.scala 33:37]
    node _T_399 = mux(_T_191, UInt<1>("h1"), _T_398) @[Lookup.scala 33:37]
    node _T_400 = mux(_T_189, UInt<1>("h0"), _T_399) @[Lookup.scala 33:37]
    node _T_401 = mux(_T_187, UInt<1>("h0"), _T_400) @[Lookup.scala 33:37]
    node _T_402 = mux(_T_185, UInt<2>("h3"), _T_401) @[Lookup.scala 33:37]
    node _T_403 = mux(_T_183, UInt<1>("h0"), _T_402) @[Lookup.scala 33:37]
    node _T_404 = mux(_T_181, UInt<1>("h0"), _T_403) @[Lookup.scala 33:37]
    node _T_405 = mux(_T_179, UInt<1>("h1"), _T_404) @[Lookup.scala 33:37]
    node _T_406 = mux(_T_177, UInt<1>("h1"), _T_405) @[Lookup.scala 33:37]
    node _T_407 = mux(_T_175, UInt<1>("h0"), _T_406) @[Lookup.scala 33:37]
    node _T_408 = mux(_T_173, UInt<1>("h0"), _T_407) @[Lookup.scala 33:37]
    node _T_409 = mux(_T_171, UInt<1>("h0"), _T_408) @[Lookup.scala 33:37]
    node _T_410 = mux(_T_169, UInt<1>("h0"), _T_409) @[Lookup.scala 33:37]
    node _T_411 = mux(_T_167, UInt<1>("h0"), _T_410) @[Lookup.scala 33:37]
    node _T_412 = mux(_T_165, UInt<1>("h0"), _T_411) @[Lookup.scala 33:37]
    node _T_413 = mux(_T_163, UInt<1>("h0"), _T_412) @[Lookup.scala 33:37]
    node _T_414 = mux(_T_161, UInt<1>("h0"), _T_413) @[Lookup.scala 33:37]
    node _T_415 = mux(_T_159, UInt<1>("h0"), _T_414) @[Lookup.scala 33:37]
    node _T_416 = mux(_T_157, UInt<1>("h0"), _T_415) @[Lookup.scala 33:37]
    node _T_417 = mux(_T_155, UInt<1>("h0"), _T_416) @[Lookup.scala 33:37]
    node _T_418 = mux(_T_153, UInt<1>("h0"), _T_417) @[Lookup.scala 33:37]
    node _T_419 = mux(_T_151, UInt<1>("h0"), _T_418) @[Lookup.scala 33:37]
    node _T_420 = mux(_T_149, UInt<1>("h0"), _T_419) @[Lookup.scala 33:37]
    node _T_421 = mux(_T_147, UInt<1>("h0"), _T_420) @[Lookup.scala 33:37]
    node _T_422 = mux(_T_145, UInt<1>("h0"), _T_421) @[Lookup.scala 33:37]
    node _T_423 = mux(_T_143, UInt<1>("h0"), _T_422) @[Lookup.scala 33:37]
    node _T_424 = mux(_T_141, UInt<1>("h0"), _T_423) @[Lookup.scala 33:37]
    node _T_425 = mux(_T_139, UInt<1>("h0"), _T_424) @[Lookup.scala 33:37]
    node _T_426 = mux(_T_137, UInt<1>("h1"), _T_425) @[Lookup.scala 33:37]
    node _T_427 = mux(_T_135, UInt<1>("h1"), _T_426) @[Lookup.scala 33:37]
    node _T_428 = mux(_T_133, UInt<1>("h1"), _T_427) @[Lookup.scala 33:37]
    node _T_429 = mux(_T_131, UInt<1>("h1"), _T_428) @[Lookup.scala 33:37]
    node _T_430 = mux(_T_129, UInt<1>("h0"), _T_429) @[Lookup.scala 33:37]
    node _T_431 = mux(_T_127, UInt<2>("h3"), _T_430) @[Lookup.scala 33:37]
    node _T_432 = mux(_T_125, UInt<2>("h2"), _T_431) @[Lookup.scala 33:37]
    node _T_433 = mux(_T_123, UInt<2>("h2"), _T_432) @[Lookup.scala 33:37]
    node _T_434 = mux(_T_121, UInt<2>("h2"), _T_433) @[Lookup.scala 33:37]
    node _T_435 = mux(_T_119, UInt<2>("h2"), _T_434) @[Lookup.scala 33:37]
    node _T_436 = mux(_T_117, UInt<2>("h2"), _T_435) @[Lookup.scala 33:37]
    node _T_437 = mux(_T_115, UInt<2>("h2"), _T_436) @[Lookup.scala 33:37]
    node _T_438 = mux(_T_113, UInt<2>("h2"), _T_437) @[Lookup.scala 33:37]
    node _T_439 = mux(_T_111, UInt<2>("h2"), _T_438) @[Lookup.scala 33:37]
    node _T_440 = mux(_T_109, UInt<2>("h2"), _T_439) @[Lookup.scala 33:37]
    node _T_441 = mux(_T_107, UInt<2>("h2"), _T_440) @[Lookup.scala 33:37]
    node _T_442 = mux(_T_105, UInt<2>("h2"), _T_441) @[Lookup.scala 33:37]
    node _T_443 = mux(_T_103, UInt<2>("h2"), _T_442) @[Lookup.scala 33:37]
    node _T_444 = mux(_T_101, UInt<2>("h2"), _T_443) @[Lookup.scala 33:37]
    node _T_445 = mux(_T_99, UInt<2>("h3"), _T_444) @[Lookup.scala 33:37]
    node _T_446 = mux(_T_97, UInt<1>("h1"), _T_445) @[Lookup.scala 33:37]
    node _T_447 = mux(_T_95, UInt<1>("h1"), _T_446) @[Lookup.scala 33:37]
    node _T_448 = mux(_T_93, UInt<1>("h1"), _T_447) @[Lookup.scala 33:37]
    node _T_449 = mux(_T_91, UInt<1>("h0"), _T_448) @[Lookup.scala 33:37]
    node _T_450 = mux(_T_89, UInt<1>("h0"), _T_449) @[Lookup.scala 33:37]
    node _T_451 = mux(_T_87, UInt<1>("h0"), _T_450) @[Lookup.scala 33:37]
    node _T_452 = mux(_T_85, UInt<1>("h0"), _T_451) @[Lookup.scala 33:37]
    node _T_453 = mux(_T_83, UInt<1>("h0"), _T_452) @[Lookup.scala 33:37]
    node _T_454 = mux(_T_81, UInt<1>("h0"), _T_453) @[Lookup.scala 33:37]
    node _T_455 = mux(_T_79, UInt<1>("h0"), _T_454) @[Lookup.scala 33:37]
    node _T_456 = mux(_T_77, UInt<1>("h0"), _T_455) @[Lookup.scala 33:37]
    node _T_457 = mux(_T_75, UInt<1>("h0"), _T_456) @[Lookup.scala 33:37]
    node _T_458 = mux(_T_73, UInt<1>("h1"), _T_457) @[Lookup.scala 33:37]
    node _T_459 = mux(_T_71, UInt<1>("h1"), _T_458) @[Lookup.scala 33:37]
    node _T_460 = mux(_T_69, UInt<1>("h1"), _T_459) @[Lookup.scala 33:37]
    node _T_461 = mux(_T_67, UInt<1>("h1"), _T_460) @[Lookup.scala 33:37]
    node _T_462 = mux(_T_65, UInt<1>("h1"), _T_461) @[Lookup.scala 33:37]
    node _T_463 = mux(_T_63, UInt<1>("h1"), _T_462) @[Lookup.scala 33:37]
    node _T_464 = mux(_T_61, UInt<1>("h1"), _T_463) @[Lookup.scala 33:37]
    node _T_465 = mux(_T_59, UInt<1>("h1"), _T_464) @[Lookup.scala 33:37]
    node _T_466 = mux(_T_57, UInt<1>("h0"), _T_465) @[Lookup.scala 33:37]
    node _T_467 = mux(_T_55, UInt<1>("h0"), _T_466) @[Lookup.scala 33:37]
    node _T_468 = mux(_T_53, UInt<1>("h0"), _T_467) @[Lookup.scala 33:37]
    node _T_469 = mux(_T_51, UInt<1>("h0"), _T_468) @[Lookup.scala 33:37]
    node _T_470 = mux(_T_49, UInt<1>("h0"), _T_469) @[Lookup.scala 33:37]
    node _T_471 = mux(_T_47, UInt<1>("h0"), _T_470) @[Lookup.scala 33:37]
    node _T_472 = mux(_T_45, UInt<1>("h0"), _T_471) @[Lookup.scala 33:37]
    node _T_473 = mux(_T_43, UInt<1>("h0"), _T_472) @[Lookup.scala 33:37]
    node _T_474 = mux(_T_41, UInt<1>("h0"), _T_473) @[Lookup.scala 33:37]
    node _T_475 = mux(_T_39, UInt<1>("h0"), _T_474) @[Lookup.scala 33:37]
    node _T_476 = mux(_T_37, UInt<1>("h0"), _T_475) @[Lookup.scala 33:37]
    node _T_477 = mux(_T_35, UInt<1>("h0"), _T_476) @[Lookup.scala 33:37]
    node _T_478 = mux(_T_33, UInt<1>("h0"), _T_477) @[Lookup.scala 33:37]
    node _T_479 = mux(_T_31, UInt<1>("h0"), _T_478) @[Lookup.scala 33:37]
    node _T_480 = mux(_T_29, UInt<1>("h0"), _T_479) @[Lookup.scala 33:37]
    node _T_481 = mux(_T_27, UInt<1>("h0"), _T_480) @[Lookup.scala 33:37]
    node _T_482 = mux(_T_25, UInt<1>("h0"), _T_481) @[Lookup.scala 33:37]
    node _T_483 = mux(_T_23, UInt<1>("h0"), _T_482) @[Lookup.scala 33:37]
    node _T_484 = mux(_T_21, UInt<1>("h0"), _T_483) @[Lookup.scala 33:37]
    node _T_485 = mux(_T_19, UInt<1>("h0"), _T_484) @[Lookup.scala 33:37]
    node _T_486 = mux(_T_17, UInt<1>("h0"), _T_485) @[Lookup.scala 33:37]
    node _T_487 = mux(_T_15, UInt<1>("h0"), _T_486) @[Lookup.scala 33:37]
    node _T_488 = mux(_T_13, UInt<1>("h0"), _T_487) @[Lookup.scala 33:37]
    node _T_489 = mux(_T_11, UInt<1>("h0"), _T_488) @[Lookup.scala 33:37]
    node _T_490 = mux(_T_9, UInt<1>("h0"), _T_489) @[Lookup.scala 33:37]
    node _T_491 = mux(_T_7, UInt<1>("h0"), _T_490) @[Lookup.scala 33:37]
    node _T_492 = mux(_T_5, UInt<1>("h0"), _T_491) @[Lookup.scala 33:37]
    node _T_493 = mux(_T_3, UInt<1>("h0"), _T_492) @[Lookup.scala 33:37]
    node decodeList_1 = mux(_T_1, UInt<1>("h0"), _T_493) @[Lookup.scala 33:37]
    node _T_494 = mux(_T_247, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_495 = mux(_T_245, UInt<3>("h7"), _T_494) @[Lookup.scala 33:37]
    node _T_496 = mux(_T_243, UInt<3>("h6"), _T_495) @[Lookup.scala 33:37]
    node _T_497 = mux(_T_241, UInt<3>("h5"), _T_496) @[Lookup.scala 33:37]
    node _T_498 = mux(_T_239, UInt<2>("h3"), _T_497) @[Lookup.scala 33:37]
    node _T_499 = mux(_T_237, UInt<2>("h2"), _T_498) @[Lookup.scala 33:37]
    node _T_500 = mux(_T_235, UInt<1>("h1"), _T_499) @[Lookup.scala 33:37]
    node _T_501 = mux(_T_233, UInt<6>("h32"), _T_500) @[Lookup.scala 33:37]
    node _T_502 = mux(_T_231, UInt<6>("h31"), _T_501) @[Lookup.scala 33:37]
    node _T_503 = mux(_T_229, UInt<6>("h30"), _T_502) @[Lookup.scala 33:37]
    node _T_504 = mux(_T_227, UInt<6>("h37"), _T_503) @[Lookup.scala 33:37]
    node _T_505 = mux(_T_225, UInt<6>("h26"), _T_504) @[Lookup.scala 33:37]
    node _T_506 = mux(_T_223, UInt<6>("h25"), _T_505) @[Lookup.scala 33:37]
    node _T_507 = mux(_T_221, UInt<6>("h24"), _T_506) @[Lookup.scala 33:37]
    node _T_508 = mux(_T_219, UInt<7>("h63"), _T_507) @[Lookup.scala 33:37]
    node _T_509 = mux(_T_217, UInt<6>("h22"), _T_508) @[Lookup.scala 33:37]
    node _T_510 = mux(_T_215, UInt<6>("h21"), _T_509) @[Lookup.scala 33:37]
    node _T_511 = mux(_T_213, UInt<6>("h21"), _T_510) @[Lookup.scala 33:37]
    node _T_512 = mux(_T_211, UInt<6>("h20"), _T_511) @[Lookup.scala 33:37]
    node _T_513 = mux(_T_209, UInt<6>("h20"), _T_512) @[Lookup.scala 33:37]
    node _T_514 = mux(_T_207, UInt<2>("h2"), _T_513) @[Lookup.scala 33:37]
    node _T_515 = mux(_T_205, UInt<1>("h0"), _T_514) @[Lookup.scala 33:37]
    node _T_516 = mux(_T_203, UInt<7>("h40"), _T_515) @[Lookup.scala 33:37]
    node _T_517 = mux(_T_201, UInt<1>("h0"), _T_516) @[Lookup.scala 33:37]
    node _T_518 = mux(_T_199, UInt<1>("h0"), _T_517) @[Lookup.scala 33:37]
    node _T_519 = mux(_T_197, UInt<1>("h0"), _T_518) @[Lookup.scala 33:37]
    node _T_520 = mux(_T_195, UInt<1>("h0"), _T_519) @[Lookup.scala 33:37]
    node _T_521 = mux(_T_193, UInt<4>("hb"), _T_520) @[Lookup.scala 33:37]
    node _T_522 = mux(_T_191, UInt<4>("ha"), _T_521) @[Lookup.scala 33:37]
    node _T_523 = mux(_T_189, UInt<7>("h40"), _T_522) @[Lookup.scala 33:37]
    node _T_524 = mux(_T_187, UInt<7>("h5a"), _T_523) @[Lookup.scala 33:37]
    node _T_525 = mux(_T_185, UInt<1>("h0"), _T_524) @[Lookup.scala 33:37]
    node _T_526 = mux(_T_183, UInt<7>("h40"), _T_525) @[Lookup.scala 33:37]
    node _T_527 = mux(_T_181, UInt<7>("h5a"), _T_526) @[Lookup.scala 33:37]
    node _T_528 = mux(_T_179, UInt<2>("h3"), _T_527) @[Lookup.scala 33:37]
    node _T_529 = mux(_T_177, UInt<2>("h2"), _T_528) @[Lookup.scala 33:37]
    node _T_530 = mux(_T_175, UInt<1>("h1"), _T_529) @[Lookup.scala 33:37]
    node _T_531 = mux(_T_173, UInt<5>("h11"), _T_530) @[Lookup.scala 33:37]
    node _T_532 = mux(_T_171, UInt<5>("h10"), _T_531) @[Lookup.scala 33:37]
    node _T_533 = mux(_T_169, UInt<7>("h58"), _T_532) @[Lookup.scala 33:37]
    node _T_534 = mux(_T_167, UInt<7>("h60"), _T_533) @[Lookup.scala 33:37]
    node _T_535 = mux(_T_165, UInt<6>("h28"), _T_534) @[Lookup.scala 33:37]
    node _T_536 = mux(_T_163, UInt<3>("h7"), _T_535) @[Lookup.scala 33:37]
    node _T_537 = mux(_T_161, UInt<3>("h6"), _T_536) @[Lookup.scala 33:37]
    node _T_538 = mux(_T_159, UInt<3>("h4"), _T_537) @[Lookup.scala 33:37]
    node _T_539 = mux(_T_157, UInt<4>("h8"), _T_538) @[Lookup.scala 33:37]
    node _T_540 = mux(_T_155, UInt<3>("h7"), _T_539) @[Lookup.scala 33:37]
    node _T_541 = mux(_T_153, UInt<4>("hd"), _T_540) @[Lookup.scala 33:37]
    node _T_542 = mux(_T_151, UInt<3>("h5"), _T_541) @[Lookup.scala 33:37]
    node _T_543 = mux(_T_149, UInt<7>("h40"), _T_542) @[Lookup.scala 33:37]
    node _T_544 = mux(_T_147, UInt<7>("h40"), _T_543) @[Lookup.scala 33:37]
    node _T_545 = mux(_T_145, UInt<7>("h40"), _T_544) @[Lookup.scala 33:37]
    node _T_546 = mux(_T_143, UInt<7>("h60"), _T_545) @[Lookup.scala 33:37]
    node _T_547 = mux(_T_141, UInt<7>("h40"), _T_546) @[Lookup.scala 33:37]
    node _T_548 = mux(_T_139, UInt<7>("h40"), _T_547) @[Lookup.scala 33:37]
    node _T_549 = mux(_T_137, UInt<4>("hb"), _T_548) @[Lookup.scala 33:37]
    node _T_550 = mux(_T_135, UInt<4>("ha"), _T_549) @[Lookup.scala 33:37]
    node _T_551 = mux(_T_133, UInt<2>("h3"), _T_550) @[Lookup.scala 33:37]
    node _T_552 = mux(_T_131, UInt<2>("h2"), _T_551) @[Lookup.scala 33:37]
    node _T_553 = mux(_T_129, UInt<7>("h40"), _T_552) @[Lookup.scala 33:37]
    node _T_554 = mux(_T_127, UInt<1>("h0"), _T_553) @[Lookup.scala 33:37]
    node _T_555 = mux(_T_125, UInt<4>("hf"), _T_554) @[Lookup.scala 33:37]
    node _T_556 = mux(_T_123, UInt<4>("he"), _T_555) @[Lookup.scala 33:37]
    node _T_557 = mux(_T_121, UInt<4>("hd"), _T_556) @[Lookup.scala 33:37]
    node _T_558 = mux(_T_119, UInt<4>("hc"), _T_557) @[Lookup.scala 33:37]
    node _T_559 = mux(_T_117, UInt<4>("h8"), _T_558) @[Lookup.scala 33:37]
    node _T_560 = mux(_T_115, UInt<3>("h7"), _T_559) @[Lookup.scala 33:37]
    node _T_561 = mux(_T_113, UInt<3>("h6"), _T_560) @[Lookup.scala 33:37]
    node _T_562 = mux(_T_111, UInt<3>("h5"), _T_561) @[Lookup.scala 33:37]
    node _T_563 = mux(_T_109, UInt<3>("h4"), _T_562) @[Lookup.scala 33:37]
    node _T_564 = mux(_T_107, UInt<2>("h3"), _T_563) @[Lookup.scala 33:37]
    node _T_565 = mux(_T_105, UInt<2>("h2"), _T_564) @[Lookup.scala 33:37]
    node _T_566 = mux(_T_103, UInt<1>("h1"), _T_565) @[Lookup.scala 33:37]
    node _T_567 = mux(_T_101, UInt<1>("h0"), _T_566) @[Lookup.scala 33:37]
    node _T_568 = mux(_T_99, UInt<2>("h2"), _T_567) @[Lookup.scala 33:37]
    node _T_569 = mux(_T_97, UInt<4>("hb"), _T_568) @[Lookup.scala 33:37]
    node _T_570 = mux(_T_95, UInt<2>("h3"), _T_569) @[Lookup.scala 33:37]
    node _T_571 = mux(_T_93, UInt<3>("h6"), _T_570) @[Lookup.scala 33:37]
    node _T_572 = mux(_T_91, UInt<6>("h28"), _T_571) @[Lookup.scala 33:37]
    node _T_573 = mux(_T_89, UInt<7>("h60"), _T_572) @[Lookup.scala 33:37]
    node _T_574 = mux(_T_87, UInt<6>("h2d"), _T_573) @[Lookup.scala 33:37]
    node _T_575 = mux(_T_85, UInt<6>("h25"), _T_574) @[Lookup.scala 33:37]
    node _T_576 = mux(_T_83, UInt<6>("h21"), _T_575) @[Lookup.scala 33:37]
    node _T_577 = mux(_T_81, UInt<6>("h2d"), _T_576) @[Lookup.scala 33:37]
    node _T_578 = mux(_T_79, UInt<6>("h25"), _T_577) @[Lookup.scala 33:37]
    node _T_579 = mux(_T_77, UInt<6>("h21"), _T_578) @[Lookup.scala 33:37]
    node _T_580 = mux(_T_75, UInt<7>("h60"), _T_579) @[Lookup.scala 33:37]
    node _T_581 = mux(_T_73, UInt<4>("ha"), _T_580) @[Lookup.scala 33:37]
    node _T_582 = mux(_T_71, UInt<4>("h9"), _T_581) @[Lookup.scala 33:37]
    node _T_583 = mux(_T_69, UInt<4>("h8"), _T_582) @[Lookup.scala 33:37]
    node _T_584 = mux(_T_67, UInt<3>("h5"), _T_583) @[Lookup.scala 33:37]
    node _T_585 = mux(_T_65, UInt<3>("h4"), _T_584) @[Lookup.scala 33:37]
    node _T_586 = mux(_T_63, UInt<2>("h2"), _T_585) @[Lookup.scala 33:37]
    node _T_587 = mux(_T_61, UInt<1>("h1"), _T_586) @[Lookup.scala 33:37]
    node _T_588 = mux(_T_59, UInt<1>("h0"), _T_587) @[Lookup.scala 33:37]
    node _T_589 = mux(_T_57, UInt<5>("h17"), _T_588) @[Lookup.scala 33:37]
    node _T_590 = mux(_T_55, UInt<5>("h16"), _T_589) @[Lookup.scala 33:37]
    node _T_591 = mux(_T_53, UInt<5>("h15"), _T_590) @[Lookup.scala 33:37]
    node _T_592 = mux(_T_51, UInt<5>("h14"), _T_591) @[Lookup.scala 33:37]
    node _T_593 = mux(_T_49, UInt<5>("h11"), _T_592) @[Lookup.scala 33:37]
    node _T_594 = mux(_T_47, UInt<5>("h10"), _T_593) @[Lookup.scala 33:37]
    node _T_595 = mux(_T_45, UInt<7>("h5a"), _T_594) @[Lookup.scala 33:37]
    node _T_596 = mux(_T_43, UInt<7>("h58"), _T_595) @[Lookup.scala 33:37]
    node _T_597 = mux(_T_41, UInt<7>("h40"), _T_596) @[Lookup.scala 33:37]
    node _T_598 = mux(_T_39, UInt<7>("h40"), _T_597) @[Lookup.scala 33:37]
    node _T_599 = mux(_T_37, UInt<4>("hd"), _T_598) @[Lookup.scala 33:37]
    node _T_600 = mux(_T_35, UInt<4>("h8"), _T_599) @[Lookup.scala 33:37]
    node _T_601 = mux(_T_33, UInt<3>("h7"), _T_600) @[Lookup.scala 33:37]
    node _T_602 = mux(_T_31, UInt<3>("h6"), _T_601) @[Lookup.scala 33:37]
    node _T_603 = mux(_T_29, UInt<3>("h5"), _T_602) @[Lookup.scala 33:37]
    node _T_604 = mux(_T_27, UInt<3>("h4"), _T_603) @[Lookup.scala 33:37]
    node _T_605 = mux(_T_25, UInt<2>("h3"), _T_604) @[Lookup.scala 33:37]
    node _T_606 = mux(_T_23, UInt<2>("h2"), _T_605) @[Lookup.scala 33:37]
    node _T_607 = mux(_T_21, UInt<1>("h1"), _T_606) @[Lookup.scala 33:37]
    node _T_608 = mux(_T_19, UInt<7>("h40"), _T_607) @[Lookup.scala 33:37]
    node _T_609 = mux(_T_17, UInt<4>("hd"), _T_608) @[Lookup.scala 33:37]
    node _T_610 = mux(_T_15, UInt<3>("h7"), _T_609) @[Lookup.scala 33:37]
    node _T_611 = mux(_T_13, UInt<3>("h6"), _T_610) @[Lookup.scala 33:37]
    node _T_612 = mux(_T_11, UInt<3>("h5"), _T_611) @[Lookup.scala 33:37]
    node _T_613 = mux(_T_9, UInt<3>("h4"), _T_612) @[Lookup.scala 33:37]
    node _T_614 = mux(_T_7, UInt<2>("h3"), _T_613) @[Lookup.scala 33:37]
    node _T_615 = mux(_T_5, UInt<2>("h2"), _T_614) @[Lookup.scala 33:37]
    node _T_616 = mux(_T_3, UInt<1>("h1"), _T_615) @[Lookup.scala 33:37]
    node decodeList_2 = mux(_T_1, UInt<7>("h40"), _T_616) @[Lookup.scala 33:37]
    node _T_617 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 38:84]
    node _T_618 = or(_T_617, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 38:127]
    node instrType = mux(_T_618, UInt<1>("h0"), decodeList_0) @[IDU.scala 38:75]
    node _T_619 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 38:84]
    node _T_620 = or(_T_619, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 38:127]
    node fuType = mux(_T_620, UInt<2>("h3"), decodeList_1) @[IDU.scala 38:75]
    node _T_621 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 38:84]
    node _T_622 = or(_T_621, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 38:127]
    node fuOpType = mux(_T_622, UInt<1>("h0"), decodeList_2) @[IDU.scala 38:75]
    node _T_623 = bits(io.in.bits.instr, 1, 0) @[IDU.scala 40:39]
    node isRVC = neq(_T_623, UInt<2>("h3")) @[IDU.scala 40:45]
    node _T_624 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_625 = eq(UInt<1>("h0"), _T_624) @[Lookup.scala 31:38]
    node _T_626 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_627 = eq(UInt<15>("h4000"), _T_626) @[Lookup.scala 31:38]
    node _T_628 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_629 = eq(UInt<15>("h6000"), _T_628) @[Lookup.scala 31:38]
    node _T_630 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_631 = eq(UInt<16>("hc000"), _T_630) @[Lookup.scala 31:38]
    node _T_632 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_633 = eq(UInt<16>("he000"), _T_632) @[Lookup.scala 31:38]
    node _T_634 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_635 = eq(UInt<1>("h1"), _T_634) @[Lookup.scala 31:38]
    node _T_636 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_637 = eq(UInt<1>("h1"), _T_636) @[Lookup.scala 31:38]
    node _T_638 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_639 = eq(UInt<14>("h2001"), _T_638) @[Lookup.scala 31:38]
    node _T_640 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_641 = eq(UInt<15>("h4001"), _T_640) @[Lookup.scala 31:38]
    node _T_642 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_643 = eq(UInt<15>("h6101"), _T_642) @[Lookup.scala 31:38]
    node _T_644 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_645 = eq(UInt<15>("h6001"), _T_644) @[Lookup.scala 31:38]
    node _T_646 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_647 = eq(UInt<16>("h8001"), _T_646) @[Lookup.scala 31:38]
    node _T_648 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_649 = eq(UInt<16>("h8401"), _T_648) @[Lookup.scala 31:38]
    node _T_650 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_651 = eq(UInt<16>("h8801"), _T_650) @[Lookup.scala 31:38]
    node _T_652 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_653 = eq(UInt<16>("h8c01"), _T_652) @[Lookup.scala 31:38]
    node _T_654 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_655 = eq(UInt<16>("h8c21"), _T_654) @[Lookup.scala 31:38]
    node _T_656 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_657 = eq(UInt<16>("h8c41"), _T_656) @[Lookup.scala 31:38]
    node _T_658 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_659 = eq(UInt<16>("h8c61"), _T_658) @[Lookup.scala 31:38]
    node _T_660 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_661 = eq(UInt<16>("h9c01"), _T_660) @[Lookup.scala 31:38]
    node _T_662 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_663 = eq(UInt<16>("h9c21"), _T_662) @[Lookup.scala 31:38]
    node _T_664 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_665 = eq(UInt<16>("ha001"), _T_664) @[Lookup.scala 31:38]
    node _T_666 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_667 = eq(UInt<16>("hc001"), _T_666) @[Lookup.scala 31:38]
    node _T_668 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_669 = eq(UInt<16>("he001"), _T_668) @[Lookup.scala 31:38]
    node _T_670 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_671 = eq(UInt<2>("h2"), _T_670) @[Lookup.scala 31:38]
    node _T_672 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_673 = eq(UInt<15>("h4002"), _T_672) @[Lookup.scala 31:38]
    node _T_674 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_675 = eq(UInt<15>("h6002"), _T_674) @[Lookup.scala 31:38]
    node _T_676 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_677 = eq(UInt<16>("h8002"), _T_676) @[Lookup.scala 31:38]
    node _T_678 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_679 = eq(UInt<16>("h8002"), _T_678) @[Lookup.scala 31:38]
    node _T_680 = and(io.in.bits.instr, UInt<16>("hffff")) @[Lookup.scala 31:38]
    node _T_681 = eq(UInt<16>("h9002"), _T_680) @[Lookup.scala 31:38]
    node _T_682 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_683 = eq(UInt<16>("h9002"), _T_682) @[Lookup.scala 31:38]
    node _T_684 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_685 = eq(UInt<16>("h9002"), _T_684) @[Lookup.scala 31:38]
    node _T_686 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_687 = eq(UInt<16>("hc002"), _T_686) @[Lookup.scala 31:38]
    node _T_688 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_689 = eq(UInt<16>("he002"), _T_688) @[Lookup.scala 31:38]
    node _T_690 = mux(_T_689, UInt<2>("h3"), UInt<5>("h10")) @[Lookup.scala 33:37]
    node _T_691 = mux(_T_687, UInt<2>("h2"), _T_690) @[Lookup.scala 33:37]
    node _T_692 = mux(_T_685, UInt<5>("h10"), _T_691) @[Lookup.scala 33:37]
    node _T_693 = mux(_T_683, UInt<5>("h10"), _T_692) @[Lookup.scala 33:37]
    node _T_694 = mux(_T_681, UInt<4>("hf"), _T_693) @[Lookup.scala 33:37]
    node _T_695 = mux(_T_679, UInt<5>("h10"), _T_694) @[Lookup.scala 33:37]
    node _T_696 = mux(_T_677, UInt<5>("h10"), _T_695) @[Lookup.scala 33:37]
    node _T_697 = mux(_T_675, UInt<1>("h1"), _T_696) @[Lookup.scala 33:37]
    node _T_698 = mux(_T_673, UInt<1>("h0"), _T_697) @[Lookup.scala 33:37]
    node _T_699 = mux(_T_671, UInt<4>("ha"), _T_698) @[Lookup.scala 33:37]
    node _T_700 = mux(_T_669, UInt<4>("h9"), _T_699) @[Lookup.scala 33:37]
    node _T_701 = mux(_T_667, UInt<4>("h9"), _T_700) @[Lookup.scala 33:37]
    node _T_702 = mux(_T_665, UInt<4>("h8"), _T_701) @[Lookup.scala 33:37]
    node _T_703 = mux(_T_663, UInt<5>("h10"), _T_702) @[Lookup.scala 33:37]
    node _T_704 = mux(_T_661, UInt<5>("h10"), _T_703) @[Lookup.scala 33:37]
    node _T_705 = mux(_T_659, UInt<5>("h10"), _T_704) @[Lookup.scala 33:37]
    node _T_706 = mux(_T_657, UInt<5>("h10"), _T_705) @[Lookup.scala 33:37]
    node _T_707 = mux(_T_655, UInt<5>("h10"), _T_706) @[Lookup.scala 33:37]
    node _T_708 = mux(_T_653, UInt<5>("h10"), _T_707) @[Lookup.scala 33:37]
    node _T_709 = mux(_T_651, UInt<4>("ha"), _T_708) @[Lookup.scala 33:37]
    node _T_710 = mux(_T_649, UInt<4>("ha"), _T_709) @[Lookup.scala 33:37]
    node _T_711 = mux(_T_647, UInt<4>("ha"), _T_710) @[Lookup.scala 33:37]
    node _T_712 = mux(_T_645, UInt<4>("hb"), _T_711) @[Lookup.scala 33:37]
    node _T_713 = mux(_T_643, UInt<4>("hd"), _T_712) @[Lookup.scala 33:37]
    node _T_714 = mux(_T_641, UInt<4>("ha"), _T_713) @[Lookup.scala 33:37]
    node _T_715 = mux(_T_639, UInt<4>("hc"), _T_714) @[Lookup.scala 33:37]
    node _T_716 = mux(_T_637, UInt<4>("hc"), _T_715) @[Lookup.scala 33:37]
    node _T_717 = mux(_T_635, UInt<5>("h10"), _T_716) @[Lookup.scala 33:37]
    node _T_718 = mux(_T_633, UInt<3>("h5"), _T_717) @[Lookup.scala 33:37]
    node _T_719 = mux(_T_631, UInt<3>("h4"), _T_718) @[Lookup.scala 33:37]
    node _T_720 = mux(_T_629, UInt<3>("h7"), _T_719) @[Lookup.scala 33:37]
    node _T_721 = mux(_T_627, UInt<3>("h6"), _T_720) @[Lookup.scala 33:37]
    node rvcImmType = mux(_T_625, UInt<4>("he"), _T_721) @[Lookup.scala 33:37]
    node _T_722 = mux(_T_689, UInt<4>("h9"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_723 = mux(_T_687, UInt<4>("h9"), _T_722) @[Lookup.scala 33:37]
    node _T_724 = mux(_T_685, UInt<2>("h2"), _T_723) @[Lookup.scala 33:37]
    node _T_725 = mux(_T_683, UInt<3>("h4"), _T_724) @[Lookup.scala 33:37]
    node _T_726 = mux(_T_681, UInt<1>("h0"), _T_725) @[Lookup.scala 33:37]
    node _T_727 = mux(_T_679, UInt<3>("h5"), _T_726) @[Lookup.scala 33:37]
    node _T_728 = mux(_T_677, UInt<3>("h4"), _T_727) @[Lookup.scala 33:37]
    node _T_729 = mux(_T_675, UInt<4>("h9"), _T_728) @[Lookup.scala 33:37]
    node _T_730 = mux(_T_673, UInt<4>("h9"), _T_729) @[Lookup.scala 33:37]
    node _T_731 = mux(_T_671, UInt<2>("h2"), _T_730) @[Lookup.scala 33:37]
    node _T_732 = mux(_T_669, UInt<3>("h6"), _T_731) @[Lookup.scala 33:37]
    node _T_733 = mux(_T_667, UInt<3>("h6"), _T_732) @[Lookup.scala 33:37]
    node _T_734 = mux(_T_665, UInt<1>("h0"), _T_733) @[Lookup.scala 33:37]
    node _T_735 = mux(_T_663, UInt<3>("h6"), _T_734) @[Lookup.scala 33:37]
    node _T_736 = mux(_T_661, UInt<3>("h6"), _T_735) @[Lookup.scala 33:37]
    node _T_737 = mux(_T_659, UInt<3>("h6"), _T_736) @[Lookup.scala 33:37]
    node _T_738 = mux(_T_657, UInt<3>("h6"), _T_737) @[Lookup.scala 33:37]
    node _T_739 = mux(_T_655, UInt<3>("h6"), _T_738) @[Lookup.scala 33:37]
    node _T_740 = mux(_T_653, UInt<3>("h6"), _T_739) @[Lookup.scala 33:37]
    node _T_741 = mux(_T_651, UInt<3>("h6"), _T_740) @[Lookup.scala 33:37]
    node _T_742 = mux(_T_649, UInt<3>("h6"), _T_741) @[Lookup.scala 33:37]
    node _T_743 = mux(_T_647, UInt<3>("h6"), _T_742) @[Lookup.scala 33:37]
    node _T_744 = mux(_T_645, UInt<1>("h0"), _T_743) @[Lookup.scala 33:37]
    node _T_745 = mux(_T_643, UInt<4>("h9"), _T_744) @[Lookup.scala 33:37]
    node _T_746 = mux(_T_641, UInt<1>("h0"), _T_745) @[Lookup.scala 33:37]
    node _T_747 = mux(_T_639, UInt<2>("h2"), _T_746) @[Lookup.scala 33:37]
    node _T_748 = mux(_T_637, UInt<2>("h2"), _T_747) @[Lookup.scala 33:37]
    node _T_749 = mux(_T_635, UInt<1>("h0"), _T_748) @[Lookup.scala 33:37]
    node _T_750 = mux(_T_633, UInt<3>("h6"), _T_749) @[Lookup.scala 33:37]
    node _T_751 = mux(_T_631, UInt<3>("h6"), _T_750) @[Lookup.scala 33:37]
    node _T_752 = mux(_T_629, UInt<3>("h6"), _T_751) @[Lookup.scala 33:37]
    node _T_753 = mux(_T_627, UInt<3>("h6"), _T_752) @[Lookup.scala 33:37]
    node rvcSrc1Type = mux(_T_625, UInt<4>("h9"), _T_753) @[Lookup.scala 33:37]
    node _T_754 = mux(_T_689, UInt<3>("h5"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_755 = mux(_T_687, UInt<3>("h5"), _T_754) @[Lookup.scala 33:37]
    node _T_756 = mux(_T_685, UInt<3>("h5"), _T_755) @[Lookup.scala 33:37]
    node _T_757 = mux(_T_683, UInt<1>("h0"), _T_756) @[Lookup.scala 33:37]
    node _T_758 = mux(_T_681, UInt<1>("h0"), _T_757) @[Lookup.scala 33:37]
    node _T_759 = mux(_T_679, UInt<1>("h0"), _T_758) @[Lookup.scala 33:37]
    node _T_760 = mux(_T_677, UInt<1>("h0"), _T_759) @[Lookup.scala 33:37]
    node _T_761 = mux(_T_675, UInt<1>("h0"), _T_760) @[Lookup.scala 33:37]
    node _T_762 = mux(_T_673, UInt<1>("h0"), _T_761) @[Lookup.scala 33:37]
    node _T_763 = mux(_T_671, UInt<1>("h0"), _T_762) @[Lookup.scala 33:37]
    node _T_764 = mux(_T_669, UInt<1>("h0"), _T_763) @[Lookup.scala 33:37]
    node _T_765 = mux(_T_667, UInt<1>("h0"), _T_764) @[Lookup.scala 33:37]
    node _T_766 = mux(_T_665, UInt<1>("h0"), _T_765) @[Lookup.scala 33:37]
    node _T_767 = mux(_T_663, UInt<3>("h7"), _T_766) @[Lookup.scala 33:37]
    node _T_768 = mux(_T_661, UInt<3>("h7"), _T_767) @[Lookup.scala 33:37]
    node _T_769 = mux(_T_659, UInt<3>("h7"), _T_768) @[Lookup.scala 33:37]
    node _T_770 = mux(_T_657, UInt<3>("h7"), _T_769) @[Lookup.scala 33:37]
    node _T_771 = mux(_T_655, UInt<3>("h7"), _T_770) @[Lookup.scala 33:37]
    node _T_772 = mux(_T_653, UInt<3>("h7"), _T_771) @[Lookup.scala 33:37]
    node _T_773 = mux(_T_651, UInt<1>("h0"), _T_772) @[Lookup.scala 33:37]
    node _T_774 = mux(_T_649, UInt<1>("h0"), _T_773) @[Lookup.scala 33:37]
    node _T_775 = mux(_T_647, UInt<1>("h0"), _T_774) @[Lookup.scala 33:37]
    node _T_776 = mux(_T_645, UInt<1>("h0"), _T_775) @[Lookup.scala 33:37]
    node _T_777 = mux(_T_643, UInt<1>("h0"), _T_776) @[Lookup.scala 33:37]
    node _T_778 = mux(_T_641, UInt<1>("h0"), _T_777) @[Lookup.scala 33:37]
    node _T_779 = mux(_T_639, UInt<1>("h0"), _T_778) @[Lookup.scala 33:37]
    node _T_780 = mux(_T_637, UInt<1>("h0"), _T_779) @[Lookup.scala 33:37]
    node _T_781 = mux(_T_635, UInt<1>("h0"), _T_780) @[Lookup.scala 33:37]
    node _T_782 = mux(_T_633, UInt<3>("h7"), _T_781) @[Lookup.scala 33:37]
    node _T_783 = mux(_T_631, UInt<3>("h7"), _T_782) @[Lookup.scala 33:37]
    node _T_784 = mux(_T_629, UInt<1>("h0"), _T_783) @[Lookup.scala 33:37]
    node _T_785 = mux(_T_627, UInt<1>("h0"), _T_784) @[Lookup.scala 33:37]
    node rvcSrc2Type = mux(_T_625, UInt<1>("h0"), _T_785) @[Lookup.scala 33:37]
    node _T_786 = mux(_T_689, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_787 = mux(_T_687, UInt<1>("h0"), _T_786) @[Lookup.scala 33:37]
    node _T_788 = mux(_T_685, UInt<2>("h2"), _T_787) @[Lookup.scala 33:37]
    node _T_789 = mux(_T_683, UInt<4>("h8"), _T_788) @[Lookup.scala 33:37]
    node _T_790 = mux(_T_681, UInt<1>("h0"), _T_789) @[Lookup.scala 33:37]
    node _T_791 = mux(_T_679, UInt<2>("h2"), _T_790) @[Lookup.scala 33:37]
    node _T_792 = mux(_T_677, UInt<1>("h0"), _T_791) @[Lookup.scala 33:37]
    node _T_793 = mux(_T_675, UInt<2>("h2"), _T_792) @[Lookup.scala 33:37]
    node _T_794 = mux(_T_673, UInt<2>("h2"), _T_793) @[Lookup.scala 33:37]
    node _T_795 = mux(_T_671, UInt<2>("h2"), _T_794) @[Lookup.scala 33:37]
    node _T_796 = mux(_T_669, UInt<1>("h0"), _T_795) @[Lookup.scala 33:37]
    node _T_797 = mux(_T_667, UInt<1>("h0"), _T_796) @[Lookup.scala 33:37]
    node _T_798 = mux(_T_665, UInt<1>("h0"), _T_797) @[Lookup.scala 33:37]
    node _T_799 = mux(_T_663, UInt<3>("h6"), _T_798) @[Lookup.scala 33:37]
    node _T_800 = mux(_T_661, UInt<3>("h6"), _T_799) @[Lookup.scala 33:37]
    node _T_801 = mux(_T_659, UInt<3>("h6"), _T_800) @[Lookup.scala 33:37]
    node _T_802 = mux(_T_657, UInt<3>("h6"), _T_801) @[Lookup.scala 33:37]
    node _T_803 = mux(_T_655, UInt<3>("h6"), _T_802) @[Lookup.scala 33:37]
    node _T_804 = mux(_T_653, UInt<3>("h6"), _T_803) @[Lookup.scala 33:37]
    node _T_805 = mux(_T_651, UInt<3>("h6"), _T_804) @[Lookup.scala 33:37]
    node _T_806 = mux(_T_649, UInt<3>("h6"), _T_805) @[Lookup.scala 33:37]
    node _T_807 = mux(_T_647, UInt<3>("h6"), _T_806) @[Lookup.scala 33:37]
    node _T_808 = mux(_T_645, UInt<2>("h2"), _T_807) @[Lookup.scala 33:37]
    node _T_809 = mux(_T_643, UInt<4>("h9"), _T_808) @[Lookup.scala 33:37]
    node _T_810 = mux(_T_641, UInt<2>("h2"), _T_809) @[Lookup.scala 33:37]
    node _T_811 = mux(_T_639, UInt<2>("h2"), _T_810) @[Lookup.scala 33:37]
    node _T_812 = mux(_T_637, UInt<2>("h2"), _T_811) @[Lookup.scala 33:37]
    node _T_813 = mux(_T_635, UInt<1>("h0"), _T_812) @[Lookup.scala 33:37]
    node _T_814 = mux(_T_633, UInt<1>("h0"), _T_813) @[Lookup.scala 33:37]
    node _T_815 = mux(_T_631, UInt<1>("h0"), _T_814) @[Lookup.scala 33:37]
    node _T_816 = mux(_T_629, UInt<3>("h7"), _T_815) @[Lookup.scala 33:37]
    node _T_817 = mux(_T_627, UInt<3>("h7"), _T_816) @[Lookup.scala 33:37]
    node rvcDestType = mux(_T_625, UInt<3>("h7"), _T_817) @[Lookup.scala 33:37]
    io.out.bits.data.imm is invalid @[IDU.scala 44:15]
    io.out.bits.data.src2 is invalid @[IDU.scala 44:15]
    io.out.bits.data.src1 is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isBlocked is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.noSpecExec is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isSrc2Forward is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isSrc1Forward is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isNutCoreTrap is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfDest is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfWen is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfSrc2 is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfSrc1 is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.fuOpType is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.fuType is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.src2Type is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.src1Type is invalid @[IDU.scala 44:15]
    io.out.bits.cf.isBranch is invalid @[IDU.scala 44:15]
    io.out.bits.cf.runahead_checkpoint_id is invalid @[IDU.scala 44:15]
    io.out.bits.cf.crossPageIPFFix is invalid @[IDU.scala 44:15]
    io.out.bits.cf.isRVC is invalid @[IDU.scala 44:15]
    io.out.bits.cf.brIdx is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[0] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[1] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[2] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[3] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[4] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[5] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[6] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[7] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[8] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[9] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[10] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[11] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[0] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[1] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[2] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[3] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[4] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[5] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[6] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[7] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[8] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[9] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[10] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[11] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[12] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[13] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[14] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[15] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.redirect.valid is invalid @[IDU.scala 44:15]
    io.out.bits.cf.redirect.rtype is invalid @[IDU.scala 44:15]
    io.out.bits.cf.redirect.target is invalid @[IDU.scala 44:15]
    io.out.bits.cf.pnpc is invalid @[IDU.scala 44:15]
    io.out.bits.cf.pc is invalid @[IDU.scala 44:15]
    io.out.bits.cf.instr is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.fuType <= fuType @[IDU.scala 46:27]
    io.out.bits.ctrl.fuOpType <= fuOpType @[IDU.scala 47:29]
    node _T_818 = eq(UInt<3>("h4"), instrType) @[LookupTree.scala 24:34]
    node _T_819 = eq(UInt<3>("h5"), instrType) @[LookupTree.scala 24:34]
    node _T_820 = eq(UInt<2>("h2"), instrType) @[LookupTree.scala 24:34]
    node _T_821 = eq(UInt<4>("hf"), instrType) @[LookupTree.scala 24:34]
    node _T_822 = eq(UInt<1>("h1"), instrType) @[LookupTree.scala 24:34]
    node _T_823 = eq(UInt<3>("h6"), instrType) @[LookupTree.scala 24:34]
    node _T_824 = eq(UInt<3>("h7"), instrType) @[LookupTree.scala 24:34]
    node _T_825 = eq(UInt<1>("h0"), instrType) @[LookupTree.scala 24:34]
    node _T_826 = mux(_T_818, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_827 = mux(_T_819, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_828 = mux(_T_820, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_829 = mux(_T_821, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_830 = mux(_T_822, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_831 = mux(_T_823, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_832 = mux(_T_824, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_833 = mux(_T_825, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_834 = or(_T_826, _T_827) @[Mux.scala 27:72]
    node _T_835 = or(_T_834, _T_828) @[Mux.scala 27:72]
    node _T_836 = or(_T_835, _T_829) @[Mux.scala 27:72]
    node _T_837 = or(_T_836, _T_830) @[Mux.scala 27:72]
    node _T_838 = or(_T_837, _T_831) @[Mux.scala 27:72]
    node _T_839 = or(_T_838, _T_832) @[Mux.scala 27:72]
    node _T_840 = or(_T_839, _T_833) @[Mux.scala 27:72]
    wire src1Type : UInt<1> @[Mux.scala 27:72]
    src1Type <= _T_840 @[Mux.scala 27:72]
    node _T_841 = eq(UInt<3>("h4"), instrType) @[LookupTree.scala 24:34]
    node _T_842 = eq(UInt<3>("h5"), instrType) @[LookupTree.scala 24:34]
    node _T_843 = eq(UInt<2>("h2"), instrType) @[LookupTree.scala 24:34]
    node _T_844 = eq(UInt<4>("hf"), instrType) @[LookupTree.scala 24:34]
    node _T_845 = eq(UInt<1>("h1"), instrType) @[LookupTree.scala 24:34]
    node _T_846 = eq(UInt<3>("h6"), instrType) @[LookupTree.scala 24:34]
    node _T_847 = eq(UInt<3>("h7"), instrType) @[LookupTree.scala 24:34]
    node _T_848 = eq(UInt<1>("h0"), instrType) @[LookupTree.scala 24:34]
    node _T_849 = mux(_T_841, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_850 = mux(_T_842, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_851 = mux(_T_843, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_852 = mux(_T_844, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_853 = mux(_T_845, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_854 = mux(_T_846, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_855 = mux(_T_847, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_856 = mux(_T_848, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_857 = or(_T_849, _T_850) @[Mux.scala 27:72]
    node _T_858 = or(_T_857, _T_851) @[Mux.scala 27:72]
    node _T_859 = or(_T_858, _T_852) @[Mux.scala 27:72]
    node _T_860 = or(_T_859, _T_853) @[Mux.scala 27:72]
    node _T_861 = or(_T_860, _T_854) @[Mux.scala 27:72]
    node _T_862 = or(_T_861, _T_855) @[Mux.scala 27:72]
    node _T_863 = or(_T_862, _T_856) @[Mux.scala 27:72]
    wire src2Type : UInt<1> @[Mux.scala 27:72]
    src2Type <= _T_863 @[Mux.scala 27:72]
    node rs = bits(io.in.bits.instr, 19, 15) @[IDU.scala 62:28]
    node rt = bits(io.in.bits.instr, 24, 20) @[IDU.scala 62:43]
    node rd = bits(io.in.bits.instr, 11, 7) @[IDU.scala 62:58]
    node rs1 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 64:24]
    node rs2 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 65:24]
    node _T_864 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 66:35]
    node _T_865 = eq(UInt<1>("h0"), _T_864) @[LookupTree.scala 24:34]
    node _T_866 = eq(UInt<1>("h1"), _T_864) @[LookupTree.scala 24:34]
    node _T_867 = eq(UInt<2>("h2"), _T_864) @[LookupTree.scala 24:34]
    node _T_868 = eq(UInt<2>("h3"), _T_864) @[LookupTree.scala 24:34]
    node _T_869 = eq(UInt<3>("h4"), _T_864) @[LookupTree.scala 24:34]
    node _T_870 = eq(UInt<3>("h5"), _T_864) @[LookupTree.scala 24:34]
    node _T_871 = eq(UInt<3>("h6"), _T_864) @[LookupTree.scala 24:34]
    node _T_872 = eq(UInt<3>("h7"), _T_864) @[LookupTree.scala 24:34]
    node _T_873 = mux(_T_865, UInt<4>("h8"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_874 = mux(_T_866, UInt<4>("h9"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_875 = mux(_T_867, UInt<4>("ha"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_876 = mux(_T_868, UInt<4>("hb"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_877 = mux(_T_869, UInt<4>("hc"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_878 = mux(_T_870, UInt<4>("hd"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_879 = mux(_T_871, UInt<4>("he"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_880 = mux(_T_872, UInt<4>("hf"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_881 = or(_T_873, _T_874) @[Mux.scala 27:72]
    node _T_882 = or(_T_881, _T_875) @[Mux.scala 27:72]
    node _T_883 = or(_T_882, _T_876) @[Mux.scala 27:72]
    node _T_884 = or(_T_883, _T_877) @[Mux.scala 27:72]
    node _T_885 = or(_T_884, _T_878) @[Mux.scala 27:72]
    node _T_886 = or(_T_885, _T_879) @[Mux.scala 27:72]
    node _T_887 = or(_T_886, _T_880) @[Mux.scala 27:72]
    wire rs1p : UInt<4> @[Mux.scala 27:72]
    rs1p <= _T_887 @[Mux.scala 27:72]
    node _T_888 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 67:35]
    node _T_889 = eq(UInt<1>("h0"), _T_888) @[LookupTree.scala 24:34]
    node _T_890 = eq(UInt<1>("h1"), _T_888) @[LookupTree.scala 24:34]
    node _T_891 = eq(UInt<2>("h2"), _T_888) @[LookupTree.scala 24:34]
    node _T_892 = eq(UInt<2>("h3"), _T_888) @[LookupTree.scala 24:34]
    node _T_893 = eq(UInt<3>("h4"), _T_888) @[LookupTree.scala 24:34]
    node _T_894 = eq(UInt<3>("h5"), _T_888) @[LookupTree.scala 24:34]
    node _T_895 = eq(UInt<3>("h6"), _T_888) @[LookupTree.scala 24:34]
    node _T_896 = eq(UInt<3>("h7"), _T_888) @[LookupTree.scala 24:34]
    node _T_897 = mux(_T_889, UInt<4>("h8"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_898 = mux(_T_890, UInt<4>("h9"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_899 = mux(_T_891, UInt<4>("ha"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_900 = mux(_T_892, UInt<4>("hb"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_901 = mux(_T_893, UInt<4>("hc"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_902 = mux(_T_894, UInt<4>("hd"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_903 = mux(_T_895, UInt<4>("he"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_904 = mux(_T_896, UInt<4>("hf"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_905 = or(_T_897, _T_898) @[Mux.scala 27:72]
    node _T_906 = or(_T_905, _T_899) @[Mux.scala 27:72]
    node _T_907 = or(_T_906, _T_900) @[Mux.scala 27:72]
    node _T_908 = or(_T_907, _T_901) @[Mux.scala 27:72]
    node _T_909 = or(_T_908, _T_902) @[Mux.scala 27:72]
    node _T_910 = or(_T_909, _T_903) @[Mux.scala 27:72]
    node _T_911 = or(_T_910, _T_904) @[Mux.scala 27:72]
    wire rs2p : UInt<4> @[Mux.scala 27:72]
    rs2p <= _T_911 @[Mux.scala 27:72]
    node _T_912 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 68:28]
    node _T_913 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 68:38]
    node rvc_shamt = cat(_T_912, _T_913) @[Cat.scala 30:58]
    node _T_914 = eq(UInt<1>("h0"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_915 = eq(UInt<2>("h3"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_916 = eq(UInt<1>("h1"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_917 = eq(UInt<2>("h2"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_918 = eq(UInt<3>("h4"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_919 = eq(UInt<3>("h5"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_920 = eq(UInt<3>("h6"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_921 = eq(UInt<3>("h7"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_922 = eq(UInt<4>("h8"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_923 = eq(UInt<4>("h9"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_924 = mux(_T_914, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_925 = mux(_T_915, rs, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_926 = mux(_T_916, rt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_927 = mux(_T_917, rd, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_928 = mux(_T_918, rs1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_929 = mux(_T_919, rs2, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_930 = mux(_T_920, rs1p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_931 = mux(_T_921, rs2p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_932 = mux(_T_922, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_933 = mux(_T_923, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_934 = or(_T_924, _T_925) @[Mux.scala 27:72]
    node _T_935 = or(_T_934, _T_926) @[Mux.scala 27:72]
    node _T_936 = or(_T_935, _T_927) @[Mux.scala 27:72]
    node _T_937 = or(_T_936, _T_928) @[Mux.scala 27:72]
    node _T_938 = or(_T_937, _T_929) @[Mux.scala 27:72]
    node _T_939 = or(_T_938, _T_930) @[Mux.scala 27:72]
    node _T_940 = or(_T_939, _T_931) @[Mux.scala 27:72]
    node _T_941 = or(_T_940, _T_932) @[Mux.scala 27:72]
    node _T_942 = or(_T_941, _T_933) @[Mux.scala 27:72]
    wire rvc_src1 : UInt<5> @[Mux.scala 27:72]
    rvc_src1 <= _T_942 @[Mux.scala 27:72]
    node _T_943 = eq(UInt<1>("h0"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_944 = eq(UInt<2>("h3"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_945 = eq(UInt<1>("h1"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_946 = eq(UInt<2>("h2"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_947 = eq(UInt<3>("h4"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_948 = eq(UInt<3>("h5"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_949 = eq(UInt<3>("h6"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_950 = eq(UInt<3>("h7"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_951 = eq(UInt<4>("h8"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_952 = eq(UInt<4>("h9"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_953 = mux(_T_943, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_954 = mux(_T_944, rs, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_955 = mux(_T_945, rt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_956 = mux(_T_946, rd, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_957 = mux(_T_947, rs1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_958 = mux(_T_948, rs2, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_959 = mux(_T_949, rs1p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_960 = mux(_T_950, rs2p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_961 = mux(_T_951, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_962 = mux(_T_952, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_963 = or(_T_953, _T_954) @[Mux.scala 27:72]
    node _T_964 = or(_T_963, _T_955) @[Mux.scala 27:72]
    node _T_965 = or(_T_964, _T_956) @[Mux.scala 27:72]
    node _T_966 = or(_T_965, _T_957) @[Mux.scala 27:72]
    node _T_967 = or(_T_966, _T_958) @[Mux.scala 27:72]
    node _T_968 = or(_T_967, _T_959) @[Mux.scala 27:72]
    node _T_969 = or(_T_968, _T_960) @[Mux.scala 27:72]
    node _T_970 = or(_T_969, _T_961) @[Mux.scala 27:72]
    node _T_971 = or(_T_970, _T_962) @[Mux.scala 27:72]
    wire rvc_src2 : UInt<5> @[Mux.scala 27:72]
    rvc_src2 <= _T_971 @[Mux.scala 27:72]
    node _T_972 = eq(UInt<1>("h0"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_973 = eq(UInt<2>("h3"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_974 = eq(UInt<1>("h1"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_975 = eq(UInt<2>("h2"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_976 = eq(UInt<3>("h4"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_977 = eq(UInt<3>("h5"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_978 = eq(UInt<3>("h6"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_979 = eq(UInt<3>("h7"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_980 = eq(UInt<4>("h8"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_981 = eq(UInt<4>("h9"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_982 = mux(_T_972, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_983 = mux(_T_973, rs, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_984 = mux(_T_974, rt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_985 = mux(_T_975, rd, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_986 = mux(_T_976, rs1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_987 = mux(_T_977, rs2, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_988 = mux(_T_978, rs1p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_989 = mux(_T_979, rs2p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_990 = mux(_T_980, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_991 = mux(_T_981, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_992 = or(_T_982, _T_983) @[Mux.scala 27:72]
    node _T_993 = or(_T_992, _T_984) @[Mux.scala 27:72]
    node _T_994 = or(_T_993, _T_985) @[Mux.scala 27:72]
    node _T_995 = or(_T_994, _T_986) @[Mux.scala 27:72]
    node _T_996 = or(_T_995, _T_987) @[Mux.scala 27:72]
    node _T_997 = or(_T_996, _T_988) @[Mux.scala 27:72]
    node _T_998 = or(_T_997, _T_989) @[Mux.scala 27:72]
    node _T_999 = or(_T_998, _T_990) @[Mux.scala 27:72]
    node _T_1000 = or(_T_999, _T_991) @[Mux.scala 27:72]
    wire rvc_dest : UInt<5> @[Mux.scala 27:72]
    rvc_dest <= _T_1000 @[Mux.scala 27:72]
    node rfSrc1 = mux(isRVC, rvc_src1, rs) @[IDU.scala 89:19]
    node rfSrc2 = mux(isRVC, rvc_src2, rt) @[IDU.scala 90:19]
    node rfDest = mux(isRVC, rvc_dest, rd) @[IDU.scala 91:19]
    node _T_1001 = eq(src1Type, UInt<1>("h1")) @[IDU.scala 94:43]
    node _T_1002 = mux(_T_1001, UInt<1>("h0"), rfSrc1) @[IDU.scala 94:33]
    io.out.bits.ctrl.rfSrc1 <= _T_1002 @[IDU.scala 94:27]
    node _T_1003 = eq(src2Type, UInt<1>("h0")) @[IDU.scala 95:43]
    node _T_1004 = mux(_T_1003, rfSrc2, UInt<1>("h0")) @[IDU.scala 95:33]
    io.out.bits.ctrl.rfSrc2 <= _T_1004 @[IDU.scala 95:27]
    node _T_1005 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    io.out.bits.ctrl.rfWen <= _T_1005 @[IDU.scala 96:27]
    node _T_1006 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    node _T_1007 = mux(_T_1006, rfDest, UInt<1>("h0")) @[IDU.scala 97:33]
    io.out.bits.ctrl.rfDest <= _T_1007 @[IDU.scala 97:27]
    io.out.bits.data.imm is invalid @[IDU.scala 99:20]
    io.out.bits.data.src2 is invalid @[IDU.scala 99:20]
    io.out.bits.data.src1 is invalid @[IDU.scala 99:20]
    node _T_1008 = bits(io.in.bits.instr, 31, 20) @[IDU.scala 101:29]
    node _T_1009 = bits(_T_1008, 11, 11) @[BitUtils.scala 39:20]
    node _T_1010 = bits(_T_1009, 0, 0) @[Bitwise.scala 72:15]
    node _T_1011 = mux(_T_1010, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1012 = cat(_T_1011, _T_1008) @[Cat.scala 30:58]
    node _T_1013 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 102:33]
    node _T_1014 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 102:48]
    node _T_1015 = cat(_T_1013, _T_1014) @[Cat.scala 30:58]
    node _T_1016 = bits(_T_1015, 11, 11) @[BitUtils.scala 39:20]
    node _T_1017 = bits(_T_1016, 0, 0) @[Bitwise.scala 72:15]
    node _T_1018 = mux(_T_1017, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1019 = cat(_T_1018, _T_1015) @[Cat.scala 30:58]
    node _T_1020 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 103:33]
    node _T_1021 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 103:48]
    node _T_1022 = cat(_T_1020, _T_1021) @[Cat.scala 30:58]
    node _T_1023 = bits(_T_1022, 11, 11) @[BitUtils.scala 39:20]
    node _T_1024 = bits(_T_1023, 0, 0) @[Bitwise.scala 72:15]
    node _T_1025 = mux(_T_1024, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1026 = cat(_T_1025, _T_1022) @[Cat.scala 30:58]
    node _T_1027 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 104:33]
    node _T_1028 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 104:44]
    node _T_1029 = bits(io.in.bits.instr, 30, 25) @[IDU.scala 104:54]
    node _T_1030 = bits(io.in.bits.instr, 11, 8) @[IDU.scala 104:69]
    node lo = cat(_T_1030, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi = cat(_T_1027, _T_1028) @[Cat.scala 30:58]
    node hi = cat(hi_hi, _T_1029) @[Cat.scala 30:58]
    node _T_1031 = cat(hi, lo) @[Cat.scala 30:58]
    node _T_1032 = bits(_T_1031, 12, 12) @[BitUtils.scala 39:20]
    node _T_1033 = bits(_T_1032, 0, 0) @[Bitwise.scala 72:15]
    node _T_1034 = mux(_T_1033, UInt<51>("h7ffffffffffff"), UInt<51>("h0")) @[Bitwise.scala 72:12]
    node _T_1035 = cat(_T_1034, _T_1031) @[Cat.scala 30:58]
    node _T_1036 = bits(io.in.bits.instr, 31, 12) @[IDU.scala 105:33]
    node _T_1037 = cat(_T_1036, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_1038 = bits(_T_1037, 31, 31) @[BitUtils.scala 39:20]
    node _T_1039 = bits(_T_1038, 0, 0) @[Bitwise.scala 72:15]
    node _T_1040 = mux(_T_1039, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_1041 = cat(_T_1040, _T_1037) @[Cat.scala 30:58]
    node _T_1042 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 106:33]
    node _T_1043 = bits(io.in.bits.instr, 19, 12) @[IDU.scala 106:44]
    node _T_1044 = bits(io.in.bits.instr, 20, 20) @[IDU.scala 106:59]
    node _T_1045 = bits(io.in.bits.instr, 30, 21) @[IDU.scala 106:70]
    node lo_1 = cat(_T_1045, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_1042, _T_1043) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, _T_1044) @[Cat.scala 30:58]
    node _T_1046 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_1047 = bits(_T_1046, 20, 20) @[BitUtils.scala 39:20]
    node _T_1048 = bits(_T_1047, 0, 0) @[Bitwise.scala 72:15]
    node _T_1049 = mux(_T_1048, UInt<43>("h7ffffffffff"), UInt<43>("h0")) @[Bitwise.scala 72:12]
    node _T_1050 = cat(_T_1049, _T_1046) @[Cat.scala 30:58]
    node _T_1051 = eq(UInt<3>("h4"), instrType) @[LookupTree.scala 24:34]
    node _T_1052 = eq(UInt<2>("h2"), instrType) @[LookupTree.scala 24:34]
    node _T_1053 = eq(UInt<4>("hf"), instrType) @[LookupTree.scala 24:34]
    node _T_1054 = eq(UInt<1>("h1"), instrType) @[LookupTree.scala 24:34]
    node _T_1055 = eq(UInt<3>("h6"), instrType) @[LookupTree.scala 24:34]
    node _T_1056 = eq(UInt<3>("h7"), instrType) @[LookupTree.scala 24:34]
    node _T_1057 = mux(_T_1051, _T_1012, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1058 = mux(_T_1052, _T_1019, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1059 = mux(_T_1053, _T_1026, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1060 = mux(_T_1054, _T_1035, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1061 = mux(_T_1055, _T_1041, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1062 = mux(_T_1056, _T_1050, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1063 = or(_T_1057, _T_1058) @[Mux.scala 27:72]
    node _T_1064 = or(_T_1063, _T_1059) @[Mux.scala 27:72]
    node _T_1065 = or(_T_1064, _T_1060) @[Mux.scala 27:72]
    node _T_1066 = or(_T_1065, _T_1061) @[Mux.scala 27:72]
    node _T_1067 = or(_T_1066, _T_1062) @[Mux.scala 27:72]
    wire imm : UInt<64> @[Mux.scala 27:72]
    imm <= _T_1067 @[Mux.scala 27:72]
    node _T_1068 = bits(io.in.bits.instr, 3, 2) @[IDU.scala 111:43]
    node _T_1069 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 111:55]
    node _T_1070 = bits(io.in.bits.instr, 6, 4) @[IDU.scala 111:66]
    node lo_2 = cat(_T_1070, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_2 = cat(_T_1068, _T_1069) @[Cat.scala 30:58]
    node _T_1071 = cat(hi_2, lo_2) @[Cat.scala 30:58]
    node _T_1072 = cat(UInt<56>("h0"), _T_1071) @[Cat.scala 30:58]
    node _T_1073 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 112:43]
    node _T_1074 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 112:55]
    node _T_1075 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 112:66]
    node lo_3 = cat(_T_1075, UInt<3>("h0")) @[Cat.scala 30:58]
    node hi_3 = cat(_T_1073, _T_1074) @[Cat.scala 30:58]
    node _T_1076 = cat(hi_3, lo_3) @[Cat.scala 30:58]
    node _T_1077 = cat(UInt<55>("h0"), _T_1076) @[Cat.scala 30:58]
    node _T_1078 = bits(io.in.bits.instr, 8, 7) @[IDU.scala 113:43]
    node _T_1079 = bits(io.in.bits.instr, 12, 9) @[IDU.scala 113:55]
    node hi_4 = cat(_T_1078, _T_1079) @[Cat.scala 30:58]
    node _T_1080 = cat(hi_4, UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_1081 = cat(UInt<56>("h0"), _T_1080) @[Cat.scala 30:58]
    node _T_1082 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 114:43]
    node _T_1083 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 114:55]
    node hi_5 = cat(_T_1082, _T_1083) @[Cat.scala 30:58]
    node _T_1084 = cat(hi_5, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_1085 = cat(UInt<55>("h0"), _T_1084) @[Cat.scala 30:58]
    node _T_1086 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 115:43]
    node _T_1087 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 115:53]
    node _T_1088 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 115:67]
    node lo_4 = cat(_T_1088, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_6 = cat(_T_1086, _T_1087) @[Cat.scala 30:58]
    node _T_1089 = cat(hi_6, lo_4) @[Cat.scala 30:58]
    node _T_1090 = cat(UInt<57>("h0"), _T_1089) @[Cat.scala 30:58]
    node _T_1091 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 116:43]
    node _T_1092 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 116:55]
    node hi_7 = cat(_T_1091, _T_1092) @[Cat.scala 30:58]
    node _T_1093 = cat(hi_7, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_1094 = cat(UInt<56>("h0"), _T_1093) @[Cat.scala 30:58]
    node _T_1095 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 117:43]
    node _T_1096 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 117:53]
    node _T_1097 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 117:67]
    node lo_5 = cat(_T_1097, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_8 = cat(_T_1095, _T_1096) @[Cat.scala 30:58]
    node _T_1098 = cat(hi_8, lo_5) @[Cat.scala 30:58]
    node _T_1099 = cat(UInt<57>("h0"), _T_1098) @[Cat.scala 30:58]
    node _T_1100 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 118:43]
    node _T_1101 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 118:55]
    node hi_9 = cat(_T_1100, _T_1101) @[Cat.scala 30:58]
    node _T_1102 = cat(hi_9, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_1103 = cat(UInt<56>("h0"), _T_1102) @[Cat.scala 30:58]
    node _T_1104 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 119:43]
    node _T_1105 = bits(io.in.bits.instr, 8, 8) @[IDU.scala 119:54]
    node _T_1106 = bits(io.in.bits.instr, 10, 9) @[IDU.scala 119:64]
    node _T_1107 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 119:77]
    node _T_1108 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 119:87]
    node _T_1109 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 119:97]
    node _T_1110 = bits(io.in.bits.instr, 11, 11) @[IDU.scala 119:107]
    node _T_1111 = bits(io.in.bits.instr, 5, 3) @[IDU.scala 119:118]
    node lo_lo = cat(_T_1111, UInt<1>("h0")) @[Cat.scala 30:58]
    node lo_hi = cat(_T_1109, _T_1110) @[Cat.scala 30:58]
    node lo_6 = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_1107, _T_1108) @[Cat.scala 30:58]
    node hi_hi_hi = cat(_T_1104, _T_1105) @[Cat.scala 30:58]
    node hi_hi_2 = cat(hi_hi_hi, _T_1106) @[Cat.scala 30:58]
    node hi_10 = cat(hi_hi_2, hi_lo) @[Cat.scala 30:58]
    node _T_1112 = cat(hi_10, lo_6) @[Cat.scala 30:58]
    node _T_1113 = bits(_T_1112, 11, 11) @[BitUtils.scala 39:20]
    node _T_1114 = bits(_T_1113, 0, 0) @[Bitwise.scala 72:15]
    node _T_1115 = mux(_T_1114, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1116 = cat(_T_1115, _T_1112) @[Cat.scala 30:58]
    node _T_1117 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 120:43]
    node _T_1118 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 120:54]
    node _T_1119 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 120:66]
    node _T_1120 = bits(io.in.bits.instr, 11, 10) @[IDU.scala 120:76]
    node _T_1121 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 120:90]
    node lo_hi_1 = cat(_T_1120, _T_1121) @[Cat.scala 30:58]
    node lo_7 = cat(lo_hi_1, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi_3 = cat(_T_1117, _T_1118) @[Cat.scala 30:58]
    node hi_11 = cat(hi_hi_3, _T_1119) @[Cat.scala 30:58]
    node _T_1122 = cat(hi_11, lo_7) @[Cat.scala 30:58]
    node _T_1123 = bits(_T_1122, 8, 8) @[BitUtils.scala 39:20]
    node _T_1124 = bits(_T_1123, 0, 0) @[Bitwise.scala 72:15]
    node _T_1125 = mux(_T_1124, UInt<55>("h7fffffffffffff"), UInt<55>("h0")) @[Bitwise.scala 72:12]
    node _T_1126 = cat(_T_1125, _T_1122) @[Cat.scala 30:58]
    node _T_1127 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 121:43]
    node _T_1128 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 121:54]
    node _T_1129 = cat(_T_1127, _T_1128) @[Cat.scala 30:58]
    node _T_1130 = bits(_T_1129, 5, 5) @[BitUtils.scala 39:20]
    node _T_1131 = bits(_T_1130, 0, 0) @[Bitwise.scala 72:15]
    node _T_1132 = mux(_T_1131, UInt<58>("h3ffffffffffffff"), UInt<58>("h0")) @[Bitwise.scala 72:12]
    node _T_1133 = cat(_T_1132, _T_1129) @[Cat.scala 30:58]
    node _T_1134 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 122:43]
    node _T_1135 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 122:54]
    node hi_12 = cat(_T_1134, _T_1135) @[Cat.scala 30:58]
    node _T_1136 = cat(hi_12, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_1137 = bits(_T_1136, 17, 17) @[BitUtils.scala 39:20]
    node _T_1138 = bits(_T_1137, 0, 0) @[Bitwise.scala 72:15]
    node _T_1139 = mux(_T_1138, UInt<46>("h3fffffffffff"), UInt<46>("h0")) @[Bitwise.scala 72:12]
    node _T_1140 = cat(_T_1139, _T_1136) @[Cat.scala 30:58]
    node _T_1141 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 123:43]
    node _T_1142 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 123:54]
    node _T_1143 = cat(_T_1141, _T_1142) @[Cat.scala 30:58]
    node _T_1144 = bits(_T_1143, 5, 5) @[BitUtils.scala 39:20]
    node _T_1145 = bits(_T_1144, 0, 0) @[Bitwise.scala 72:15]
    node _T_1146 = mux(_T_1145, UInt<58>("h3ffffffffffffff"), UInt<58>("h0")) @[Bitwise.scala 72:12]
    node _T_1147 = cat(_T_1146, _T_1143) @[Cat.scala 30:58]
    node _T_1148 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 124:45]
    node _T_1149 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 124:56]
    node _T_1150 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 124:68]
    node _T_1151 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 124:78]
    node _T_1152 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 124:88]
    node lo_hi_2 = cat(_T_1151, _T_1152) @[Cat.scala 30:58]
    node lo_8 = cat(lo_hi_2, UInt<4>("h0")) @[Cat.scala 30:58]
    node hi_hi_4 = cat(_T_1148, _T_1149) @[Cat.scala 30:58]
    node hi_13 = cat(hi_hi_4, _T_1150) @[Cat.scala 30:58]
    node _T_1153 = cat(hi_13, lo_8) @[Cat.scala 30:58]
    node _T_1154 = bits(_T_1153, 9, 9) @[BitUtils.scala 39:20]
    node _T_1155 = bits(_T_1154, 0, 0) @[Bitwise.scala 72:15]
    node _T_1156 = mux(_T_1155, UInt<54>("h3fffffffffffff"), UInt<54>("h0")) @[Bitwise.scala 72:12]
    node _T_1157 = cat(_T_1156, _T_1153) @[Cat.scala 30:58]
    node _T_1158 = bits(io.in.bits.instr, 10, 7) @[IDU.scala 125:44]
    node _T_1159 = bits(io.in.bits.instr, 12, 11) @[IDU.scala 125:57]
    node _T_1160 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 125:71]
    node _T_1161 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 125:81]
    node lo_9 = cat(_T_1161, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_hi_5 = cat(_T_1158, _T_1159) @[Cat.scala 30:58]
    node hi_14 = cat(hi_hi_5, _T_1160) @[Cat.scala 30:58]
    node _T_1162 = cat(hi_14, lo_9) @[Cat.scala 30:58]
    node _T_1163 = cat(UInt<54>("h0"), _T_1162) @[Cat.scala 30:58]
    node _T_1164 = eq(UInt<5>("h10"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1165 = eq(UInt<1>("h0"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1166 = eq(UInt<1>("h1"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1167 = eq(UInt<2>("h2"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1168 = eq(UInt<2>("h3"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1169 = eq(UInt<3>("h4"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1170 = eq(UInt<3>("h5"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1171 = eq(UInt<3>("h6"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1172 = eq(UInt<3>("h7"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1173 = eq(UInt<4>("h8"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1174 = eq(UInt<4>("h9"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1175 = eq(UInt<4>("ha"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1176 = eq(UInt<4>("hb"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1177 = eq(UInt<4>("hc"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1178 = eq(UInt<4>("hd"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1179 = eq(UInt<4>("he"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1180 = eq(UInt<4>("hf"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1181 = mux(_T_1164, UInt<64>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1182 = mux(_T_1165, _T_1072, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1183 = mux(_T_1166, _T_1077, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1184 = mux(_T_1167, _T_1081, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1185 = mux(_T_1168, _T_1085, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1186 = mux(_T_1169, _T_1090, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1187 = mux(_T_1170, _T_1094, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1188 = mux(_T_1171, _T_1099, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1189 = mux(_T_1172, _T_1103, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1190 = mux(_T_1173, _T_1116, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1191 = mux(_T_1174, _T_1126, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1192 = mux(_T_1175, _T_1133, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1193 = mux(_T_1176, _T_1140, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1194 = mux(_T_1177, _T_1147, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1195 = mux(_T_1178, _T_1157, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1196 = mux(_T_1179, _T_1163, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1197 = mux(_T_1180, UInt<64>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1198 = or(_T_1181, _T_1182) @[Mux.scala 27:72]
    node _T_1199 = or(_T_1198, _T_1183) @[Mux.scala 27:72]
    node _T_1200 = or(_T_1199, _T_1184) @[Mux.scala 27:72]
    node _T_1201 = or(_T_1200, _T_1185) @[Mux.scala 27:72]
    node _T_1202 = or(_T_1201, _T_1186) @[Mux.scala 27:72]
    node _T_1203 = or(_T_1202, _T_1187) @[Mux.scala 27:72]
    node _T_1204 = or(_T_1203, _T_1188) @[Mux.scala 27:72]
    node _T_1205 = or(_T_1204, _T_1189) @[Mux.scala 27:72]
    node _T_1206 = or(_T_1205, _T_1190) @[Mux.scala 27:72]
    node _T_1207 = or(_T_1206, _T_1191) @[Mux.scala 27:72]
    node _T_1208 = or(_T_1207, _T_1192) @[Mux.scala 27:72]
    node _T_1209 = or(_T_1208, _T_1193) @[Mux.scala 27:72]
    node _T_1210 = or(_T_1209, _T_1194) @[Mux.scala 27:72]
    node _T_1211 = or(_T_1210, _T_1195) @[Mux.scala 27:72]
    node _T_1212 = or(_T_1211, _T_1196) @[Mux.scala 27:72]
    node _T_1213 = or(_T_1212, _T_1197) @[Mux.scala 27:72]
    wire immrvc : UInt<64> @[Mux.scala 27:72]
    immrvc <= _T_1213 @[Mux.scala 27:72]
    node _T_1214 = mux(isRVC, immrvc, imm) @[IDU.scala 130:31]
    io.out.bits.data.imm <= _T_1214 @[IDU.scala 130:25]
    node _T_1215 = eq(fuType, UInt<1>("h0")) @[IDU.scala 132:16]
    when _T_1215 : @[IDU.scala 132:32]
      node _T_1216 = eq(rfDest, UInt<1>("h1")) @[IDU.scala 133:34]
      node _T_1217 = eq(rfDest, UInt<3>("h5")) @[IDU.scala 133:49]
      node _T_1218 = or(_T_1216, _T_1217) @[IDU.scala 133:42]
      node _T_1219 = eq(fuOpType, UInt<7>("h58")) @[IDU.scala 134:38]
      node _T_1220 = and(_T_1218, _T_1219) @[IDU.scala 134:26]
      when _T_1220 : @[IDU.scala 134:57]
        io.out.bits.ctrl.fuOpType <= UInt<7>("h5c") @[IDU.scala 134:85]
      node _T_1221 = eq(fuOpType, UInt<7>("h5a")) @[IDU.scala 135:20]
      when _T_1221 : @[IDU.scala 135:40]
        node _T_1222 = eq(rfSrc1, UInt<1>("h1")) @[IDU.scala 133:34]
        node _T_1223 = eq(rfSrc1, UInt<3>("h5")) @[IDU.scala 133:49]
        node _T_1224 = or(_T_1222, _T_1223) @[IDU.scala 133:42]
        when _T_1224 : @[IDU.scala 136:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h5e") @[IDU.scala 136:57]
        node _T_1225 = eq(rfDest, UInt<1>("h1")) @[IDU.scala 133:34]
        node _T_1226 = eq(rfDest, UInt<3>("h5")) @[IDU.scala 133:49]
        node _T_1227 = or(_T_1225, _T_1226) @[IDU.scala 133:42]
        when _T_1227 : @[IDU.scala 137:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h5c") @[IDU.scala 137:57]
    node _T_1228 = bits(io.in.bits.instr, 6, 0) @[IDU.scala 141:41]
    node _T_1229 = eq(_T_1228, UInt<6>("h37")) @[IDU.scala 141:47]
    node _T_1230 = mux(_T_1229, UInt<1>("h0"), src1Type) @[IDU.scala 141:35]
    io.out.bits.ctrl.src1Type <= _T_1230 @[IDU.scala 141:29]
    io.out.bits.ctrl.src2Type <= src2Type @[IDU.scala 142:29]
    node _T_1231 = bits(io.in.bits.instr, 31, 0) @[IDU.scala 152:43]
    node _T_1232 = and(_T_1231, UInt<15>("h707f")) @[IDU.scala 152:50]
    node _T_1233 = eq(UInt<7>("h6b"), _T_1232) @[IDU.scala 152:50]
    node _T_1234 = and(_T_1233, io.in.valid) @[IDU.scala 152:72]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1234 @[IDU.scala 152:34]
    node _T_1235 = eq(io.out.bits.ctrl.fuType, UInt<2>("h3")) @[IDU.scala 153:78]
    io.out.bits.ctrl.noSpecExec <= _T_1235 @[IDU.scala 153:31]
    node _T_1236 = eq(io.out.bits.ctrl.fuType, UInt<1>("h1")) @[IDU.scala 156:29]
    node _T_1237 = bits(io.out.bits.ctrl.fuOpType, 5, 5) @[LSU.scala 54:38]
    node _T_1238 = and(_T_1236, _T_1237) @[IDU.scala 156:44]
    node _T_1239 = eq(io.out.bits.ctrl.fuType, UInt<3>("h4")) @[IDU.scala 157:48]
    node _T_1240 = or(_T_1238, _T_1239) @[IDU.scala 156:91]
    io.out.bits.ctrl.isBlocked <= _T_1240 @[IDU.scala 154:30]
    io.out.valid <= io.in.valid @[IDU.scala 161:16]
    node _T_1241 = eq(io.in.valid, UInt<1>("h0")) @[IDU.scala 162:18]
    node _T_1242 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1243 = eq(hasIntr, UInt<1>("h0")) @[IDU.scala 162:51]
    node _T_1244 = and(_T_1242, _T_1243) @[IDU.scala 162:48]
    node _T_1245 = or(_T_1241, _T_1244) @[IDU.scala 162:31]
    io.in.ready <= _T_1245 @[IDU.scala 162:15]
    io.out.bits.cf.isBranch <= io.in.bits.isBranch @[IDU.scala 163:18]
    io.out.bits.cf.runahead_checkpoint_id <= io.in.bits.runahead_checkpoint_id @[IDU.scala 163:18]
    io.out.bits.cf.crossPageIPFFix <= io.in.bits.crossPageIPFFix @[IDU.scala 163:18]
    io.out.bits.cf.isRVC <= io.in.bits.isRVC @[IDU.scala 163:18]
    io.out.bits.cf.brIdx <= io.in.bits.brIdx @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[0] <= io.in.bits.intrVec[0] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[1] <= io.in.bits.intrVec[1] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[2] <= io.in.bits.intrVec[2] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[3] <= io.in.bits.intrVec[3] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[4] <= io.in.bits.intrVec[4] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[5] <= io.in.bits.intrVec[5] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[6] <= io.in.bits.intrVec[6] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[7] <= io.in.bits.intrVec[7] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[8] <= io.in.bits.intrVec[8] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[9] <= io.in.bits.intrVec[9] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[10] <= io.in.bits.intrVec[10] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[11] <= io.in.bits.intrVec[11] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[0] <= io.in.bits.exceptionVec[0] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[1] <= io.in.bits.exceptionVec[1] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[2] <= io.in.bits.exceptionVec[2] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[3] <= io.in.bits.exceptionVec[3] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[4] <= io.in.bits.exceptionVec[4] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[5] <= io.in.bits.exceptionVec[5] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[6] <= io.in.bits.exceptionVec[6] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[7] <= io.in.bits.exceptionVec[7] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[8] <= io.in.bits.exceptionVec[8] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[9] <= io.in.bits.exceptionVec[9] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[10] <= io.in.bits.exceptionVec[10] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[11] <= io.in.bits.exceptionVec[11] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[13] <= io.in.bits.exceptionVec[13] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[14] <= io.in.bits.exceptionVec[14] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[15] <= io.in.bits.exceptionVec[15] @[IDU.scala 163:18]
    io.out.bits.cf.redirect.valid <= io.in.bits.redirect.valid @[IDU.scala 163:18]
    io.out.bits.cf.redirect.rtype <= io.in.bits.redirect.rtype @[IDU.scala 163:18]
    io.out.bits.cf.redirect.target <= io.in.bits.redirect.target @[IDU.scala 163:18]
    io.out.bits.cf.pnpc <= io.in.bits.pnpc @[IDU.scala 163:18]
    io.out.bits.cf.pc <= io.in.bits.pc @[IDU.scala 163:18]
    io.out.bits.cf.instr <= io.in.bits.instr @[IDU.scala 163:18]
    node _T_1246 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_1247 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_1248 = tail(_T_1247, 1) @[GTimer.scala 25:12]
    REG <= _T_1248 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_1249 = and(_T_1246, _WIRE) @[Debug.scala 55:16]
    when _T_1249 : @[Debug.scala 55:31]
      node _T_1250 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1251 = eq(_T_1250, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_1251 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Decoder: ", REG) : SIM @[Debug.scala 56:24]
      node _T_1252 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1253 = eq(_T_1252, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_1253 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "issue: pc %x npc %x instr %x\n", io.out.bits.cf.pc, io.out.bits.cf.pnpc, io.out.bits.cf.instr) : SIM_1 @[Debug.scala 57:13]
    wire intrVec : UInt<12>
    intrVec <= UInt<12>("h0")
    node _T_1254 = bits(intrVec, 0, 0) @[IDU.scala 171:38]
    node _T_1255 = bits(intrVec, 1, 1) @[IDU.scala 171:38]
    node _T_1256 = bits(intrVec, 2, 2) @[IDU.scala 171:38]
    node _T_1257 = bits(intrVec, 3, 3) @[IDU.scala 171:38]
    node _T_1258 = bits(intrVec, 4, 4) @[IDU.scala 171:38]
    node _T_1259 = bits(intrVec, 5, 5) @[IDU.scala 171:38]
    node _T_1260 = bits(intrVec, 6, 6) @[IDU.scala 171:38]
    node _T_1261 = bits(intrVec, 7, 7) @[IDU.scala 171:38]
    node _T_1262 = bits(intrVec, 8, 8) @[IDU.scala 171:38]
    node _T_1263 = bits(intrVec, 9, 9) @[IDU.scala 171:38]
    node _T_1264 = bits(intrVec, 10, 10) @[IDU.scala 171:38]
    node _T_1265 = bits(intrVec, 11, 11) @[IDU.scala 171:38]
    io.out.bits.cf.intrVec[0] <= _T_1254 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[1] <= _T_1255 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[2] <= _T_1256 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[3] <= _T_1257 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[4] <= _T_1258 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[5] <= _T_1259 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[6] <= _T_1260 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[7] <= _T_1261 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[8] <= _T_1262 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[9] <= _T_1263 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[10] <= _T_1264 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[11] <= _T_1265 @[IDU.scala 171:68]
    node _T_1266 = orr(intrVec) @[IDU.scala 172:22]
    hasIntr <= _T_1266 @[IDU.scala 172:11]
    wire vmEnable : UInt<1>
    vmEnable <= UInt<1>("h0")
    io.out.bits.cf.exceptionVec[0] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[1] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[2] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[3] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[4] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[5] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[6] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[7] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[8] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[9] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[10] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[11] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[12] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[13] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[14] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[15] <= UInt<1>("h0") @[IDU.scala 177:37]
    node _T_1267 = eq(instrType, UInt<1>("h0")) @[IDU.scala 178:59]
    node _T_1268 = eq(hasIntr, UInt<1>("h0")) @[IDU.scala 178:73]
    node _T_1269 = and(_T_1267, _T_1268) @[IDU.scala 178:70]
    node _T_1270 = and(_T_1269, io.in.valid) @[IDU.scala 178:83]
    io.out.bits.cf.exceptionVec[2] <= _T_1270 @[IDU.scala 178:45]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 179:47]
    node _T_1271 = bits(io.in.bits.pc, 38, 32) @[IDU.scala 181:67]
    node _T_1272 = orr(_T_1271) @[IDU.scala 181:94]
    node _T_1273 = eq(vmEnable, UInt<1>("h0")) @[IDU.scala 181:101]
    node _T_1274 = and(_T_1272, _T_1273) @[IDU.scala 181:98]
    io.out.bits.cf.exceptionVec[1] <= _T_1274 @[IDU.scala 181:51]
    node _T_1275 = and(io.in.bits.instr, UInt<15>("h707f")) @[IDU.scala 186:44]
    node _T_1276 = eq(UInt<7>("h6b"), _T_1275) @[IDU.scala 186:44]
    node _T_1277 = and(_T_1276, io.in.valid) @[IDU.scala 186:66]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1277 @[IDU.scala 186:34]
    node _T_1278 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[IDU.scala 187:22]
    node _T_1279 = eq(UInt<29>("h10500073"), _T_1278) @[IDU.scala 187:22]
    node _T_1280 = and(_T_1279, io.in.valid) @[IDU.scala 187:43]
    io.isWFI <= _T_1280 @[IDU.scala 187:12]
    node _T_1281 = eq(UInt<7>("h58"), fuOpType) @[IDU.scala 188:69]
    node _T_1282 = eq(UInt<7>("h5a"), fuOpType) @[IDU.scala 188:69]
    node _T_1283 = eq(UInt<5>("h10"), fuOpType) @[IDU.scala 188:69]
    node _T_1284 = eq(UInt<5>("h11"), fuOpType) @[IDU.scala 188:69]
    node _T_1285 = eq(UInt<5>("h14"), fuOpType) @[IDU.scala 188:69]
    node _T_1286 = eq(UInt<5>("h15"), fuOpType) @[IDU.scala 188:69]
    node _T_1287 = eq(UInt<5>("h16"), fuOpType) @[IDU.scala 188:69]
    node _T_1288 = eq(UInt<5>("h17"), fuOpType) @[IDU.scala 188:69]
    wire _WIRE_1 : UInt<1>[8] @[IDU.scala 188:25]
    _WIRE_1[0] <= _T_1281 @[IDU.scala 188:25]
    _WIRE_1[1] <= _T_1282 @[IDU.scala 188:25]
    _WIRE_1[2] <= _T_1283 @[IDU.scala 188:25]
    _WIRE_1[3] <= _T_1284 @[IDU.scala 188:25]
    _WIRE_1[4] <= _T_1285 @[IDU.scala 188:25]
    _WIRE_1[5] <= _T_1286 @[IDU.scala 188:25]
    _WIRE_1[6] <= _T_1287 @[IDU.scala 188:25]
    _WIRE_1[7] <= _T_1288 @[IDU.scala 188:25]
    node lo_lo_1 = cat(_WIRE_1[1], _WIRE_1[0]) @[IDU.scala 188:84]
    node lo_hi_3 = cat(_WIRE_1[3], _WIRE_1[2]) @[IDU.scala 188:84]
    node lo_10 = cat(lo_hi_3, lo_lo_1) @[IDU.scala 188:84]
    node hi_lo_1 = cat(_WIRE_1[5], _WIRE_1[4]) @[IDU.scala 188:84]
    node hi_hi_6 = cat(_WIRE_1[7], _WIRE_1[6]) @[IDU.scala 188:84]
    node hi_15 = cat(hi_hi_6, hi_lo_1) @[IDU.scala 188:84]
    node _T_1289 = cat(hi_15, lo_10) @[IDU.scala 188:84]
    node _T_1290 = orr(_T_1289) @[IDU.scala 188:91]
    node _T_1291 = eq(fuType, UInt<1>("h0")) @[IDU.scala 188:105]
    node _T_1292 = and(_T_1290, _T_1291) @[IDU.scala 188:95]
    io.isBranch <= _T_1292 @[IDU.scala 188:15]

  module Decoder_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, isWFI : UInt<1>, isBranch : UInt<1>}

    wire hasIntr : UInt<1> @[IDU.scala 34:21]
    node _T = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<5>("h13"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.in.bits.instr, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<13>("h1013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<14>("h2013"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<14>("h3013"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<15>("h4013"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.in.bits.instr, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<15>("h5013"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<15>("h6013"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<15>("h7013"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.in.bits.instr, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<31>("h40005013"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_19 = eq(UInt<6>("h33"), _T_18) @[Lookup.scala 31:38]
    node _T_20 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_21 = eq(UInt<13>("h1033"), _T_20) @[Lookup.scala 31:38]
    node _T_22 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_23 = eq(UInt<14>("h2033"), _T_22) @[Lookup.scala 31:38]
    node _T_24 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_25 = eq(UInt<14>("h3033"), _T_24) @[Lookup.scala 31:38]
    node _T_26 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_27 = eq(UInt<15>("h4033"), _T_26) @[Lookup.scala 31:38]
    node _T_28 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_29 = eq(UInt<15>("h5033"), _T_28) @[Lookup.scala 31:38]
    node _T_30 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_31 = eq(UInt<15>("h6033"), _T_30) @[Lookup.scala 31:38]
    node _T_32 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_33 = eq(UInt<15>("h7033"), _T_32) @[Lookup.scala 31:38]
    node _T_34 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_35 = eq(UInt<31>("h40000033"), _T_34) @[Lookup.scala 31:38]
    node _T_36 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_37 = eq(UInt<31>("h40005033"), _T_36) @[Lookup.scala 31:38]
    node _T_38 = and(io.in.bits.instr, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_39 = eq(UInt<5>("h17"), _T_38) @[Lookup.scala 31:38]
    node _T_40 = and(io.in.bits.instr, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_41 = eq(UInt<6>("h37"), _T_40) @[Lookup.scala 31:38]
    node _T_42 = and(io.in.bits.instr, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_43 = eq(UInt<7>("h6f"), _T_42) @[Lookup.scala 31:38]
    node _T_44 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_45 = eq(UInt<7>("h67"), _T_44) @[Lookup.scala 31:38]
    node _T_46 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_47 = eq(UInt<7>("h63"), _T_46) @[Lookup.scala 31:38]
    node _T_48 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_49 = eq(UInt<13>("h1063"), _T_48) @[Lookup.scala 31:38]
    node _T_50 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_51 = eq(UInt<15>("h4063"), _T_50) @[Lookup.scala 31:38]
    node _T_52 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_53 = eq(UInt<15>("h5063"), _T_52) @[Lookup.scala 31:38]
    node _T_54 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_55 = eq(UInt<15>("h6063"), _T_54) @[Lookup.scala 31:38]
    node _T_56 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_57 = eq(UInt<15>("h7063"), _T_56) @[Lookup.scala 31:38]
    node _T_58 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_59 = eq(UInt<2>("h3"), _T_58) @[Lookup.scala 31:38]
    node _T_60 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_61 = eq(UInt<13>("h1003"), _T_60) @[Lookup.scala 31:38]
    node _T_62 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_63 = eq(UInt<14>("h2003"), _T_62) @[Lookup.scala 31:38]
    node _T_64 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_65 = eq(UInt<15>("h4003"), _T_64) @[Lookup.scala 31:38]
    node _T_66 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_67 = eq(UInt<15>("h5003"), _T_66) @[Lookup.scala 31:38]
    node _T_68 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_69 = eq(UInt<6>("h23"), _T_68) @[Lookup.scala 31:38]
    node _T_70 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_71 = eq(UInt<13>("h1023"), _T_70) @[Lookup.scala 31:38]
    node _T_72 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_73 = eq(UInt<14>("h2023"), _T_72) @[Lookup.scala 31:38]
    node _T_74 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_75 = eq(UInt<5>("h1b"), _T_74) @[Lookup.scala 31:38]
    node _T_76 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_77 = eq(UInt<13>("h101b"), _T_76) @[Lookup.scala 31:38]
    node _T_78 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_79 = eq(UInt<15>("h501b"), _T_78) @[Lookup.scala 31:38]
    node _T_80 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_81 = eq(UInt<31>("h4000501b"), _T_80) @[Lookup.scala 31:38]
    node _T_82 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_83 = eq(UInt<13>("h103b"), _T_82) @[Lookup.scala 31:38]
    node _T_84 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_85 = eq(UInt<15>("h503b"), _T_84) @[Lookup.scala 31:38]
    node _T_86 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_87 = eq(UInt<31>("h4000503b"), _T_86) @[Lookup.scala 31:38]
    node _T_88 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_89 = eq(UInt<6>("h3b"), _T_88) @[Lookup.scala 31:38]
    node _T_90 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_91 = eq(UInt<31>("h4000003b"), _T_90) @[Lookup.scala 31:38]
    node _T_92 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_93 = eq(UInt<15>("h6003"), _T_92) @[Lookup.scala 31:38]
    node _T_94 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_95 = eq(UInt<14>("h3003"), _T_94) @[Lookup.scala 31:38]
    node _T_96 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_97 = eq(UInt<14>("h3023"), _T_96) @[Lookup.scala 31:38]
    node _T_98 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_99 = eq(UInt<7>("h6b"), _T_98) @[Lookup.scala 31:38]
    node _T_100 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_101 = eq(UInt<26>("h2000033"), _T_100) @[Lookup.scala 31:38]
    node _T_102 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_103 = eq(UInt<26>("h2001033"), _T_102) @[Lookup.scala 31:38]
    node _T_104 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_105 = eq(UInt<26>("h2002033"), _T_104) @[Lookup.scala 31:38]
    node _T_106 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_107 = eq(UInt<26>("h2003033"), _T_106) @[Lookup.scala 31:38]
    node _T_108 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_109 = eq(UInt<26>("h2004033"), _T_108) @[Lookup.scala 31:38]
    node _T_110 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_111 = eq(UInt<26>("h2005033"), _T_110) @[Lookup.scala 31:38]
    node _T_112 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_113 = eq(UInt<26>("h2006033"), _T_112) @[Lookup.scala 31:38]
    node _T_114 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_115 = eq(UInt<26>("h2007033"), _T_114) @[Lookup.scala 31:38]
    node _T_116 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_117 = eq(UInt<26>("h200003b"), _T_116) @[Lookup.scala 31:38]
    node _T_118 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_119 = eq(UInt<26>("h200403b"), _T_118) @[Lookup.scala 31:38]
    node _T_120 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_121 = eq(UInt<26>("h200503b"), _T_120) @[Lookup.scala 31:38]
    node _T_122 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_123 = eq(UInt<26>("h200603b"), _T_122) @[Lookup.scala 31:38]
    node _T_124 = and(io.in.bits.instr, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_125 = eq(UInt<26>("h200703b"), _T_124) @[Lookup.scala 31:38]
    node _T_126 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_127 = eq(UInt<1>("h0"), _T_126) @[Lookup.scala 31:38]
    node _T_128 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_129 = eq(UInt<1>("h0"), _T_128) @[Lookup.scala 31:38]
    node _T_130 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_131 = eq(UInt<15>("h4000"), _T_130) @[Lookup.scala 31:38]
    node _T_132 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_133 = eq(UInt<15>("h6000"), _T_132) @[Lookup.scala 31:38]
    node _T_134 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_135 = eq(UInt<16>("hc000"), _T_134) @[Lookup.scala 31:38]
    node _T_136 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_137 = eq(UInt<16>("he000"), _T_136) @[Lookup.scala 31:38]
    node _T_138 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_139 = eq(UInt<1>("h1"), _T_138) @[Lookup.scala 31:38]
    node _T_140 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_141 = eq(UInt<1>("h1"), _T_140) @[Lookup.scala 31:38]
    node _T_142 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_143 = eq(UInt<14>("h2001"), _T_142) @[Lookup.scala 31:38]
    node _T_144 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_145 = eq(UInt<15>("h4001"), _T_144) @[Lookup.scala 31:38]
    node _T_146 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_147 = eq(UInt<15>("h6101"), _T_146) @[Lookup.scala 31:38]
    node _T_148 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_149 = eq(UInt<15>("h6001"), _T_148) @[Lookup.scala 31:38]
    node _T_150 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_151 = eq(UInt<16>("h8001"), _T_150) @[Lookup.scala 31:38]
    node _T_152 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_153 = eq(UInt<16>("h8401"), _T_152) @[Lookup.scala 31:38]
    node _T_154 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_155 = eq(UInt<16>("h8801"), _T_154) @[Lookup.scala 31:38]
    node _T_156 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_157 = eq(UInt<16>("h8c01"), _T_156) @[Lookup.scala 31:38]
    node _T_158 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_159 = eq(UInt<16>("h8c21"), _T_158) @[Lookup.scala 31:38]
    node _T_160 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_161 = eq(UInt<16>("h8c41"), _T_160) @[Lookup.scala 31:38]
    node _T_162 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_163 = eq(UInt<16>("h8c61"), _T_162) @[Lookup.scala 31:38]
    node _T_164 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_165 = eq(UInt<16>("h9c01"), _T_164) @[Lookup.scala 31:38]
    node _T_166 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_167 = eq(UInt<16>("h9c21"), _T_166) @[Lookup.scala 31:38]
    node _T_168 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_169 = eq(UInt<16>("ha001"), _T_168) @[Lookup.scala 31:38]
    node _T_170 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_171 = eq(UInt<16>("hc001"), _T_170) @[Lookup.scala 31:38]
    node _T_172 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_173 = eq(UInt<16>("he001"), _T_172) @[Lookup.scala 31:38]
    node _T_174 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_175 = eq(UInt<2>("h2"), _T_174) @[Lookup.scala 31:38]
    node _T_176 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_177 = eq(UInt<15>("h4002"), _T_176) @[Lookup.scala 31:38]
    node _T_178 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_179 = eq(UInt<15>("h6002"), _T_178) @[Lookup.scala 31:38]
    node _T_180 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_181 = eq(UInt<16>("h8002"), _T_180) @[Lookup.scala 31:38]
    node _T_182 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_183 = eq(UInt<16>("h8002"), _T_182) @[Lookup.scala 31:38]
    node _T_184 = and(io.in.bits.instr, UInt<16>("hffff")) @[Lookup.scala 31:38]
    node _T_185 = eq(UInt<16>("h9002"), _T_184) @[Lookup.scala 31:38]
    node _T_186 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_187 = eq(UInt<16>("h9002"), _T_186) @[Lookup.scala 31:38]
    node _T_188 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_189 = eq(UInt<16>("h9002"), _T_188) @[Lookup.scala 31:38]
    node _T_190 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_191 = eq(UInt<16>("hc002"), _T_190) @[Lookup.scala 31:38]
    node _T_192 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_193 = eq(UInt<16>("he002"), _T_192) @[Lookup.scala 31:38]
    node _T_194 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_195 = eq(UInt<7>("h73"), _T_194) @[Lookup.scala 31:38]
    node _T_196 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_197 = eq(UInt<21>("h100073"), _T_196) @[Lookup.scala 31:38]
    node _T_198 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_199 = eq(UInt<30>("h30200073"), _T_198) @[Lookup.scala 31:38]
    node _T_200 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_201 = eq(UInt<4>("hf"), _T_200) @[Lookup.scala 31:38]
    node _T_202 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_203 = eq(UInt<29>("h10500073"), _T_202) @[Lookup.scala 31:38]
    node _T_204 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_205 = eq(UInt<29>("h10200073"), _T_204) @[Lookup.scala 31:38]
    node _T_206 = and(io.in.bits.instr, UInt<32>("hfe007fff")) @[Lookup.scala 31:38]
    node _T_207 = eq(UInt<29>("h12000073"), _T_206) @[Lookup.scala 31:38]
    node _T_208 = and(io.in.bits.instr, UInt<32>("hf9f0707f")) @[Lookup.scala 31:38]
    node _T_209 = eq(UInt<29>("h1000302f"), _T_208) @[Lookup.scala 31:38]
    node _T_210 = and(io.in.bits.instr, UInt<32>("hf9f0707f")) @[Lookup.scala 31:38]
    node _T_211 = eq(UInt<29>("h1000202f"), _T_210) @[Lookup.scala 31:38]
    node _T_212 = and(io.in.bits.instr, UInt<32>("hf800707f")) @[Lookup.scala 31:38]
    node _T_213 = eq(UInt<29>("h1800302f"), _T_212) @[Lookup.scala 31:38]
    node _T_214 = and(io.in.bits.instr, UInt<32>("hf800707f")) @[Lookup.scala 31:38]
    node _T_215 = eq(UInt<29>("h1800202f"), _T_214) @[Lookup.scala 31:38]
    node _T_216 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_217 = eq(UInt<28>("h800202f"), _T_216) @[Lookup.scala 31:38]
    node _T_218 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_219 = eq(UInt<14>("h202f"), _T_218) @[Lookup.scala 31:38]
    node _T_220 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_221 = eq(UInt<30>("h2000202f"), _T_220) @[Lookup.scala 31:38]
    node _T_222 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_223 = eq(UInt<31>("h6000202f"), _T_222) @[Lookup.scala 31:38]
    node _T_224 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_225 = eq(UInt<31>("h4000202f"), _T_224) @[Lookup.scala 31:38]
    node _T_226 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_227 = eq(UInt<32>("h8000202f"), _T_226) @[Lookup.scala 31:38]
    node _T_228 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_229 = eq(UInt<32>("ha000202f"), _T_228) @[Lookup.scala 31:38]
    node _T_230 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_231 = eq(UInt<32>("hc000202f"), _T_230) @[Lookup.scala 31:38]
    node _T_232 = and(io.in.bits.instr, UInt<32>("hf800607f")) @[Lookup.scala 31:38]
    node _T_233 = eq(UInt<32>("he000202f"), _T_232) @[Lookup.scala 31:38]
    node _T_234 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_235 = eq(UInt<13>("h1073"), _T_234) @[Lookup.scala 31:38]
    node _T_236 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_237 = eq(UInt<14>("h2073"), _T_236) @[Lookup.scala 31:38]
    node _T_238 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_239 = eq(UInt<14>("h3073"), _T_238) @[Lookup.scala 31:38]
    node _T_240 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_241 = eq(UInt<15>("h5073"), _T_240) @[Lookup.scala 31:38]
    node _T_242 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_243 = eq(UInt<15>("h6073"), _T_242) @[Lookup.scala 31:38]
    node _T_244 = and(io.in.bits.instr, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_245 = eq(UInt<15>("h7073"), _T_244) @[Lookup.scala 31:38]
    node _T_246 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_247 = eq(UInt<13>("h100f"), _T_246) @[Lookup.scala 31:38]
    node _T_248 = mux(_T_247, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_249 = mux(_T_245, UInt<3>("h4"), _T_248) @[Lookup.scala 33:37]
    node _T_250 = mux(_T_243, UInt<3>("h4"), _T_249) @[Lookup.scala 33:37]
    node _T_251 = mux(_T_241, UInt<3>("h4"), _T_250) @[Lookup.scala 33:37]
    node _T_252 = mux(_T_239, UInt<3>("h4"), _T_251) @[Lookup.scala 33:37]
    node _T_253 = mux(_T_237, UInt<3>("h4"), _T_252) @[Lookup.scala 33:37]
    node _T_254 = mux(_T_235, UInt<3>("h4"), _T_253) @[Lookup.scala 33:37]
    node _T_255 = mux(_T_233, UInt<3>("h5"), _T_254) @[Lookup.scala 33:37]
    node _T_256 = mux(_T_231, UInt<3>("h5"), _T_255) @[Lookup.scala 33:37]
    node _T_257 = mux(_T_229, UInt<3>("h5"), _T_256) @[Lookup.scala 33:37]
    node _T_258 = mux(_T_227, UInt<3>("h5"), _T_257) @[Lookup.scala 33:37]
    node _T_259 = mux(_T_225, UInt<3>("h5"), _T_258) @[Lookup.scala 33:37]
    node _T_260 = mux(_T_223, UInt<3>("h5"), _T_259) @[Lookup.scala 33:37]
    node _T_261 = mux(_T_221, UInt<3>("h5"), _T_260) @[Lookup.scala 33:37]
    node _T_262 = mux(_T_219, UInt<3>("h5"), _T_261) @[Lookup.scala 33:37]
    node _T_263 = mux(_T_217, UInt<3>("h5"), _T_262) @[Lookup.scala 33:37]
    node _T_264 = mux(_T_215, UInt<4>("hf"), _T_263) @[Lookup.scala 33:37]
    node _T_265 = mux(_T_213, UInt<4>("hf"), _T_264) @[Lookup.scala 33:37]
    node _T_266 = mux(_T_211, UInt<3>("h4"), _T_265) @[Lookup.scala 33:37]
    node _T_267 = mux(_T_209, UInt<3>("h4"), _T_266) @[Lookup.scala 33:37]
    node _T_268 = mux(_T_207, UInt<3>("h5"), _T_267) @[Lookup.scala 33:37]
    node _T_269 = mux(_T_205, UInt<3>("h4"), _T_268) @[Lookup.scala 33:37]
    node _T_270 = mux(_T_203, UInt<3>("h4"), _T_269) @[Lookup.scala 33:37]
    node _T_271 = mux(_T_201, UInt<2>("h2"), _T_270) @[Lookup.scala 33:37]
    node _T_272 = mux(_T_199, UInt<3>("h4"), _T_271) @[Lookup.scala 33:37]
    node _T_273 = mux(_T_197, UInt<3>("h4"), _T_272) @[Lookup.scala 33:37]
    node _T_274 = mux(_T_195, UInt<3>("h4"), _T_273) @[Lookup.scala 33:37]
    node _T_275 = mux(_T_193, UInt<2>("h2"), _T_274) @[Lookup.scala 33:37]
    node _T_276 = mux(_T_191, UInt<2>("h2"), _T_275) @[Lookup.scala 33:37]
    node _T_277 = mux(_T_189, UInt<3>("h5"), _T_276) @[Lookup.scala 33:37]
    node _T_278 = mux(_T_187, UInt<3>("h4"), _T_277) @[Lookup.scala 33:37]
    node _T_279 = mux(_T_185, UInt<3>("h4"), _T_278) @[Lookup.scala 33:37]
    node _T_280 = mux(_T_183, UInt<3>("h5"), _T_279) @[Lookup.scala 33:37]
    node _T_281 = mux(_T_181, UInt<3>("h4"), _T_280) @[Lookup.scala 33:37]
    node _T_282 = mux(_T_179, UInt<3>("h4"), _T_281) @[Lookup.scala 33:37]
    node _T_283 = mux(_T_177, UInt<3>("h4"), _T_282) @[Lookup.scala 33:37]
    node _T_284 = mux(_T_175, UInt<3>("h4"), _T_283) @[Lookup.scala 33:37]
    node _T_285 = mux(_T_173, UInt<1>("h1"), _T_284) @[Lookup.scala 33:37]
    node _T_286 = mux(_T_171, UInt<1>("h1"), _T_285) @[Lookup.scala 33:37]
    node _T_287 = mux(_T_169, UInt<3>("h7"), _T_286) @[Lookup.scala 33:37]
    node _T_288 = mux(_T_167, UInt<3>("h5"), _T_287) @[Lookup.scala 33:37]
    node _T_289 = mux(_T_165, UInt<3>("h5"), _T_288) @[Lookup.scala 33:37]
    node _T_290 = mux(_T_163, UInt<3>("h5"), _T_289) @[Lookup.scala 33:37]
    node _T_291 = mux(_T_161, UInt<3>("h5"), _T_290) @[Lookup.scala 33:37]
    node _T_292 = mux(_T_159, UInt<3>("h5"), _T_291) @[Lookup.scala 33:37]
    node _T_293 = mux(_T_157, UInt<3>("h5"), _T_292) @[Lookup.scala 33:37]
    node _T_294 = mux(_T_155, UInt<3>("h4"), _T_293) @[Lookup.scala 33:37]
    node _T_295 = mux(_T_153, UInt<3>("h4"), _T_294) @[Lookup.scala 33:37]
    node _T_296 = mux(_T_151, UInt<3>("h4"), _T_295) @[Lookup.scala 33:37]
    node _T_297 = mux(_T_149, UInt<3>("h4"), _T_296) @[Lookup.scala 33:37]
    node _T_298 = mux(_T_147, UInt<3>("h4"), _T_297) @[Lookup.scala 33:37]
    node _T_299 = mux(_T_145, UInt<3>("h4"), _T_298) @[Lookup.scala 33:37]
    node _T_300 = mux(_T_143, UInt<3>("h4"), _T_299) @[Lookup.scala 33:37]
    node _T_301 = mux(_T_141, UInt<3>("h4"), _T_300) @[Lookup.scala 33:37]
    node _T_302 = mux(_T_139, UInt<3>("h4"), _T_301) @[Lookup.scala 33:37]
    node _T_303 = mux(_T_137, UInt<2>("h2"), _T_302) @[Lookup.scala 33:37]
    node _T_304 = mux(_T_135, UInt<2>("h2"), _T_303) @[Lookup.scala 33:37]
    node _T_305 = mux(_T_133, UInt<3>("h4"), _T_304) @[Lookup.scala 33:37]
    node _T_306 = mux(_T_131, UInt<3>("h4"), _T_305) @[Lookup.scala 33:37]
    node _T_307 = mux(_T_129, UInt<3>("h4"), _T_306) @[Lookup.scala 33:37]
    node _T_308 = mux(_T_127, UInt<1>("h0"), _T_307) @[Lookup.scala 33:37]
    node _T_309 = mux(_T_125, UInt<3>("h5"), _T_308) @[Lookup.scala 33:37]
    node _T_310 = mux(_T_123, UInt<3>("h5"), _T_309) @[Lookup.scala 33:37]
    node _T_311 = mux(_T_121, UInt<3>("h5"), _T_310) @[Lookup.scala 33:37]
    node _T_312 = mux(_T_119, UInt<3>("h5"), _T_311) @[Lookup.scala 33:37]
    node _T_313 = mux(_T_117, UInt<3>("h5"), _T_312) @[Lookup.scala 33:37]
    node _T_314 = mux(_T_115, UInt<3>("h5"), _T_313) @[Lookup.scala 33:37]
    node _T_315 = mux(_T_113, UInt<3>("h5"), _T_314) @[Lookup.scala 33:37]
    node _T_316 = mux(_T_111, UInt<3>("h5"), _T_315) @[Lookup.scala 33:37]
    node _T_317 = mux(_T_109, UInt<3>("h5"), _T_316) @[Lookup.scala 33:37]
    node _T_318 = mux(_T_107, UInt<3>("h5"), _T_317) @[Lookup.scala 33:37]
    node _T_319 = mux(_T_105, UInt<3>("h5"), _T_318) @[Lookup.scala 33:37]
    node _T_320 = mux(_T_103, UInt<3>("h5"), _T_319) @[Lookup.scala 33:37]
    node _T_321 = mux(_T_101, UInt<3>("h5"), _T_320) @[Lookup.scala 33:37]
    node _T_322 = mux(_T_99, UInt<3>("h4"), _T_321) @[Lookup.scala 33:37]
    node _T_323 = mux(_T_97, UInt<2>("h2"), _T_322) @[Lookup.scala 33:37]
    node _T_324 = mux(_T_95, UInt<3>("h4"), _T_323) @[Lookup.scala 33:37]
    node _T_325 = mux(_T_93, UInt<3>("h4"), _T_324) @[Lookup.scala 33:37]
    node _T_326 = mux(_T_91, UInt<3>("h5"), _T_325) @[Lookup.scala 33:37]
    node _T_327 = mux(_T_89, UInt<3>("h5"), _T_326) @[Lookup.scala 33:37]
    node _T_328 = mux(_T_87, UInt<3>("h5"), _T_327) @[Lookup.scala 33:37]
    node _T_329 = mux(_T_85, UInt<3>("h5"), _T_328) @[Lookup.scala 33:37]
    node _T_330 = mux(_T_83, UInt<3>("h5"), _T_329) @[Lookup.scala 33:37]
    node _T_331 = mux(_T_81, UInt<3>("h4"), _T_330) @[Lookup.scala 33:37]
    node _T_332 = mux(_T_79, UInt<3>("h4"), _T_331) @[Lookup.scala 33:37]
    node _T_333 = mux(_T_77, UInt<3>("h4"), _T_332) @[Lookup.scala 33:37]
    node _T_334 = mux(_T_75, UInt<3>("h4"), _T_333) @[Lookup.scala 33:37]
    node _T_335 = mux(_T_73, UInt<2>("h2"), _T_334) @[Lookup.scala 33:37]
    node _T_336 = mux(_T_71, UInt<2>("h2"), _T_335) @[Lookup.scala 33:37]
    node _T_337 = mux(_T_69, UInt<2>("h2"), _T_336) @[Lookup.scala 33:37]
    node _T_338 = mux(_T_67, UInt<3>("h4"), _T_337) @[Lookup.scala 33:37]
    node _T_339 = mux(_T_65, UInt<3>("h4"), _T_338) @[Lookup.scala 33:37]
    node _T_340 = mux(_T_63, UInt<3>("h4"), _T_339) @[Lookup.scala 33:37]
    node _T_341 = mux(_T_61, UInt<3>("h4"), _T_340) @[Lookup.scala 33:37]
    node _T_342 = mux(_T_59, UInt<3>("h4"), _T_341) @[Lookup.scala 33:37]
    node _T_343 = mux(_T_57, UInt<1>("h1"), _T_342) @[Lookup.scala 33:37]
    node _T_344 = mux(_T_55, UInt<1>("h1"), _T_343) @[Lookup.scala 33:37]
    node _T_345 = mux(_T_53, UInt<1>("h1"), _T_344) @[Lookup.scala 33:37]
    node _T_346 = mux(_T_51, UInt<1>("h1"), _T_345) @[Lookup.scala 33:37]
    node _T_347 = mux(_T_49, UInt<1>("h1"), _T_346) @[Lookup.scala 33:37]
    node _T_348 = mux(_T_47, UInt<1>("h1"), _T_347) @[Lookup.scala 33:37]
    node _T_349 = mux(_T_45, UInt<3>("h4"), _T_348) @[Lookup.scala 33:37]
    node _T_350 = mux(_T_43, UInt<3>("h7"), _T_349) @[Lookup.scala 33:37]
    node _T_351 = mux(_T_41, UInt<3>("h6"), _T_350) @[Lookup.scala 33:37]
    node _T_352 = mux(_T_39, UInt<3>("h6"), _T_351) @[Lookup.scala 33:37]
    node _T_353 = mux(_T_37, UInt<3>("h5"), _T_352) @[Lookup.scala 33:37]
    node _T_354 = mux(_T_35, UInt<3>("h5"), _T_353) @[Lookup.scala 33:37]
    node _T_355 = mux(_T_33, UInt<3>("h5"), _T_354) @[Lookup.scala 33:37]
    node _T_356 = mux(_T_31, UInt<3>("h5"), _T_355) @[Lookup.scala 33:37]
    node _T_357 = mux(_T_29, UInt<3>("h5"), _T_356) @[Lookup.scala 33:37]
    node _T_358 = mux(_T_27, UInt<3>("h5"), _T_357) @[Lookup.scala 33:37]
    node _T_359 = mux(_T_25, UInt<3>("h5"), _T_358) @[Lookup.scala 33:37]
    node _T_360 = mux(_T_23, UInt<3>("h5"), _T_359) @[Lookup.scala 33:37]
    node _T_361 = mux(_T_21, UInt<3>("h5"), _T_360) @[Lookup.scala 33:37]
    node _T_362 = mux(_T_19, UInt<3>("h5"), _T_361) @[Lookup.scala 33:37]
    node _T_363 = mux(_T_17, UInt<3>("h4"), _T_362) @[Lookup.scala 33:37]
    node _T_364 = mux(_T_15, UInt<3>("h4"), _T_363) @[Lookup.scala 33:37]
    node _T_365 = mux(_T_13, UInt<3>("h4"), _T_364) @[Lookup.scala 33:37]
    node _T_366 = mux(_T_11, UInt<3>("h4"), _T_365) @[Lookup.scala 33:37]
    node _T_367 = mux(_T_9, UInt<3>("h4"), _T_366) @[Lookup.scala 33:37]
    node _T_368 = mux(_T_7, UInt<3>("h4"), _T_367) @[Lookup.scala 33:37]
    node _T_369 = mux(_T_5, UInt<3>("h4"), _T_368) @[Lookup.scala 33:37]
    node _T_370 = mux(_T_3, UInt<3>("h4"), _T_369) @[Lookup.scala 33:37]
    node decodeList_0 = mux(_T_1, UInt<3>("h4"), _T_370) @[Lookup.scala 33:37]
    node _T_371 = mux(_T_247, UInt<3>("h4"), UInt<2>("h3")) @[Lookup.scala 33:37]
    node _T_372 = mux(_T_245, UInt<2>("h3"), _T_371) @[Lookup.scala 33:37]
    node _T_373 = mux(_T_243, UInt<2>("h3"), _T_372) @[Lookup.scala 33:37]
    node _T_374 = mux(_T_241, UInt<2>("h3"), _T_373) @[Lookup.scala 33:37]
    node _T_375 = mux(_T_239, UInt<2>("h3"), _T_374) @[Lookup.scala 33:37]
    node _T_376 = mux(_T_237, UInt<2>("h3"), _T_375) @[Lookup.scala 33:37]
    node _T_377 = mux(_T_235, UInt<2>("h3"), _T_376) @[Lookup.scala 33:37]
    node _T_378 = mux(_T_233, UInt<1>("h1"), _T_377) @[Lookup.scala 33:37]
    node _T_379 = mux(_T_231, UInt<1>("h1"), _T_378) @[Lookup.scala 33:37]
    node _T_380 = mux(_T_229, UInt<1>("h1"), _T_379) @[Lookup.scala 33:37]
    node _T_381 = mux(_T_227, UInt<1>("h1"), _T_380) @[Lookup.scala 33:37]
    node _T_382 = mux(_T_225, UInt<1>("h1"), _T_381) @[Lookup.scala 33:37]
    node _T_383 = mux(_T_223, UInt<1>("h1"), _T_382) @[Lookup.scala 33:37]
    node _T_384 = mux(_T_221, UInt<1>("h1"), _T_383) @[Lookup.scala 33:37]
    node _T_385 = mux(_T_219, UInt<1>("h1"), _T_384) @[Lookup.scala 33:37]
    node _T_386 = mux(_T_217, UInt<1>("h1"), _T_385) @[Lookup.scala 33:37]
    node _T_387 = mux(_T_215, UInt<1>("h1"), _T_386) @[Lookup.scala 33:37]
    node _T_388 = mux(_T_213, UInt<1>("h1"), _T_387) @[Lookup.scala 33:37]
    node _T_389 = mux(_T_211, UInt<1>("h1"), _T_388) @[Lookup.scala 33:37]
    node _T_390 = mux(_T_209, UInt<1>("h1"), _T_389) @[Lookup.scala 33:37]
    node _T_391 = mux(_T_207, UInt<3>("h4"), _T_390) @[Lookup.scala 33:37]
    node _T_392 = mux(_T_205, UInt<2>("h3"), _T_391) @[Lookup.scala 33:37]
    node _T_393 = mux(_T_203, UInt<1>("h0"), _T_392) @[Lookup.scala 33:37]
    node _T_394 = mux(_T_201, UInt<3>("h4"), _T_393) @[Lookup.scala 33:37]
    node _T_395 = mux(_T_199, UInt<2>("h3"), _T_394) @[Lookup.scala 33:37]
    node _T_396 = mux(_T_197, UInt<2>("h3"), _T_395) @[Lookup.scala 33:37]
    node _T_397 = mux(_T_195, UInt<2>("h3"), _T_396) @[Lookup.scala 33:37]
    node _T_398 = mux(_T_193, UInt<1>("h1"), _T_397) @[Lookup.scala 33:37]
    node _T_399 = mux(_T_191, UInt<1>("h1"), _T_398) @[Lookup.scala 33:37]
    node _T_400 = mux(_T_189, UInt<1>("h0"), _T_399) @[Lookup.scala 33:37]
    node _T_401 = mux(_T_187, UInt<1>("h0"), _T_400) @[Lookup.scala 33:37]
    node _T_402 = mux(_T_185, UInt<2>("h3"), _T_401) @[Lookup.scala 33:37]
    node _T_403 = mux(_T_183, UInt<1>("h0"), _T_402) @[Lookup.scala 33:37]
    node _T_404 = mux(_T_181, UInt<1>("h0"), _T_403) @[Lookup.scala 33:37]
    node _T_405 = mux(_T_179, UInt<1>("h1"), _T_404) @[Lookup.scala 33:37]
    node _T_406 = mux(_T_177, UInt<1>("h1"), _T_405) @[Lookup.scala 33:37]
    node _T_407 = mux(_T_175, UInt<1>("h0"), _T_406) @[Lookup.scala 33:37]
    node _T_408 = mux(_T_173, UInt<1>("h0"), _T_407) @[Lookup.scala 33:37]
    node _T_409 = mux(_T_171, UInt<1>("h0"), _T_408) @[Lookup.scala 33:37]
    node _T_410 = mux(_T_169, UInt<1>("h0"), _T_409) @[Lookup.scala 33:37]
    node _T_411 = mux(_T_167, UInt<1>("h0"), _T_410) @[Lookup.scala 33:37]
    node _T_412 = mux(_T_165, UInt<1>("h0"), _T_411) @[Lookup.scala 33:37]
    node _T_413 = mux(_T_163, UInt<1>("h0"), _T_412) @[Lookup.scala 33:37]
    node _T_414 = mux(_T_161, UInt<1>("h0"), _T_413) @[Lookup.scala 33:37]
    node _T_415 = mux(_T_159, UInt<1>("h0"), _T_414) @[Lookup.scala 33:37]
    node _T_416 = mux(_T_157, UInt<1>("h0"), _T_415) @[Lookup.scala 33:37]
    node _T_417 = mux(_T_155, UInt<1>("h0"), _T_416) @[Lookup.scala 33:37]
    node _T_418 = mux(_T_153, UInt<1>("h0"), _T_417) @[Lookup.scala 33:37]
    node _T_419 = mux(_T_151, UInt<1>("h0"), _T_418) @[Lookup.scala 33:37]
    node _T_420 = mux(_T_149, UInt<1>("h0"), _T_419) @[Lookup.scala 33:37]
    node _T_421 = mux(_T_147, UInt<1>("h0"), _T_420) @[Lookup.scala 33:37]
    node _T_422 = mux(_T_145, UInt<1>("h0"), _T_421) @[Lookup.scala 33:37]
    node _T_423 = mux(_T_143, UInt<1>("h0"), _T_422) @[Lookup.scala 33:37]
    node _T_424 = mux(_T_141, UInt<1>("h0"), _T_423) @[Lookup.scala 33:37]
    node _T_425 = mux(_T_139, UInt<1>("h0"), _T_424) @[Lookup.scala 33:37]
    node _T_426 = mux(_T_137, UInt<1>("h1"), _T_425) @[Lookup.scala 33:37]
    node _T_427 = mux(_T_135, UInt<1>("h1"), _T_426) @[Lookup.scala 33:37]
    node _T_428 = mux(_T_133, UInt<1>("h1"), _T_427) @[Lookup.scala 33:37]
    node _T_429 = mux(_T_131, UInt<1>("h1"), _T_428) @[Lookup.scala 33:37]
    node _T_430 = mux(_T_129, UInt<1>("h0"), _T_429) @[Lookup.scala 33:37]
    node _T_431 = mux(_T_127, UInt<2>("h3"), _T_430) @[Lookup.scala 33:37]
    node _T_432 = mux(_T_125, UInt<2>("h2"), _T_431) @[Lookup.scala 33:37]
    node _T_433 = mux(_T_123, UInt<2>("h2"), _T_432) @[Lookup.scala 33:37]
    node _T_434 = mux(_T_121, UInt<2>("h2"), _T_433) @[Lookup.scala 33:37]
    node _T_435 = mux(_T_119, UInt<2>("h2"), _T_434) @[Lookup.scala 33:37]
    node _T_436 = mux(_T_117, UInt<2>("h2"), _T_435) @[Lookup.scala 33:37]
    node _T_437 = mux(_T_115, UInt<2>("h2"), _T_436) @[Lookup.scala 33:37]
    node _T_438 = mux(_T_113, UInt<2>("h2"), _T_437) @[Lookup.scala 33:37]
    node _T_439 = mux(_T_111, UInt<2>("h2"), _T_438) @[Lookup.scala 33:37]
    node _T_440 = mux(_T_109, UInt<2>("h2"), _T_439) @[Lookup.scala 33:37]
    node _T_441 = mux(_T_107, UInt<2>("h2"), _T_440) @[Lookup.scala 33:37]
    node _T_442 = mux(_T_105, UInt<2>("h2"), _T_441) @[Lookup.scala 33:37]
    node _T_443 = mux(_T_103, UInt<2>("h2"), _T_442) @[Lookup.scala 33:37]
    node _T_444 = mux(_T_101, UInt<2>("h2"), _T_443) @[Lookup.scala 33:37]
    node _T_445 = mux(_T_99, UInt<2>("h3"), _T_444) @[Lookup.scala 33:37]
    node _T_446 = mux(_T_97, UInt<1>("h1"), _T_445) @[Lookup.scala 33:37]
    node _T_447 = mux(_T_95, UInt<1>("h1"), _T_446) @[Lookup.scala 33:37]
    node _T_448 = mux(_T_93, UInt<1>("h1"), _T_447) @[Lookup.scala 33:37]
    node _T_449 = mux(_T_91, UInt<1>("h0"), _T_448) @[Lookup.scala 33:37]
    node _T_450 = mux(_T_89, UInt<1>("h0"), _T_449) @[Lookup.scala 33:37]
    node _T_451 = mux(_T_87, UInt<1>("h0"), _T_450) @[Lookup.scala 33:37]
    node _T_452 = mux(_T_85, UInt<1>("h0"), _T_451) @[Lookup.scala 33:37]
    node _T_453 = mux(_T_83, UInt<1>("h0"), _T_452) @[Lookup.scala 33:37]
    node _T_454 = mux(_T_81, UInt<1>("h0"), _T_453) @[Lookup.scala 33:37]
    node _T_455 = mux(_T_79, UInt<1>("h0"), _T_454) @[Lookup.scala 33:37]
    node _T_456 = mux(_T_77, UInt<1>("h0"), _T_455) @[Lookup.scala 33:37]
    node _T_457 = mux(_T_75, UInt<1>("h0"), _T_456) @[Lookup.scala 33:37]
    node _T_458 = mux(_T_73, UInt<1>("h1"), _T_457) @[Lookup.scala 33:37]
    node _T_459 = mux(_T_71, UInt<1>("h1"), _T_458) @[Lookup.scala 33:37]
    node _T_460 = mux(_T_69, UInt<1>("h1"), _T_459) @[Lookup.scala 33:37]
    node _T_461 = mux(_T_67, UInt<1>("h1"), _T_460) @[Lookup.scala 33:37]
    node _T_462 = mux(_T_65, UInt<1>("h1"), _T_461) @[Lookup.scala 33:37]
    node _T_463 = mux(_T_63, UInt<1>("h1"), _T_462) @[Lookup.scala 33:37]
    node _T_464 = mux(_T_61, UInt<1>("h1"), _T_463) @[Lookup.scala 33:37]
    node _T_465 = mux(_T_59, UInt<1>("h1"), _T_464) @[Lookup.scala 33:37]
    node _T_466 = mux(_T_57, UInt<1>("h0"), _T_465) @[Lookup.scala 33:37]
    node _T_467 = mux(_T_55, UInt<1>("h0"), _T_466) @[Lookup.scala 33:37]
    node _T_468 = mux(_T_53, UInt<1>("h0"), _T_467) @[Lookup.scala 33:37]
    node _T_469 = mux(_T_51, UInt<1>("h0"), _T_468) @[Lookup.scala 33:37]
    node _T_470 = mux(_T_49, UInt<1>("h0"), _T_469) @[Lookup.scala 33:37]
    node _T_471 = mux(_T_47, UInt<1>("h0"), _T_470) @[Lookup.scala 33:37]
    node _T_472 = mux(_T_45, UInt<1>("h0"), _T_471) @[Lookup.scala 33:37]
    node _T_473 = mux(_T_43, UInt<1>("h0"), _T_472) @[Lookup.scala 33:37]
    node _T_474 = mux(_T_41, UInt<1>("h0"), _T_473) @[Lookup.scala 33:37]
    node _T_475 = mux(_T_39, UInt<1>("h0"), _T_474) @[Lookup.scala 33:37]
    node _T_476 = mux(_T_37, UInt<1>("h0"), _T_475) @[Lookup.scala 33:37]
    node _T_477 = mux(_T_35, UInt<1>("h0"), _T_476) @[Lookup.scala 33:37]
    node _T_478 = mux(_T_33, UInt<1>("h0"), _T_477) @[Lookup.scala 33:37]
    node _T_479 = mux(_T_31, UInt<1>("h0"), _T_478) @[Lookup.scala 33:37]
    node _T_480 = mux(_T_29, UInt<1>("h0"), _T_479) @[Lookup.scala 33:37]
    node _T_481 = mux(_T_27, UInt<1>("h0"), _T_480) @[Lookup.scala 33:37]
    node _T_482 = mux(_T_25, UInt<1>("h0"), _T_481) @[Lookup.scala 33:37]
    node _T_483 = mux(_T_23, UInt<1>("h0"), _T_482) @[Lookup.scala 33:37]
    node _T_484 = mux(_T_21, UInt<1>("h0"), _T_483) @[Lookup.scala 33:37]
    node _T_485 = mux(_T_19, UInt<1>("h0"), _T_484) @[Lookup.scala 33:37]
    node _T_486 = mux(_T_17, UInt<1>("h0"), _T_485) @[Lookup.scala 33:37]
    node _T_487 = mux(_T_15, UInt<1>("h0"), _T_486) @[Lookup.scala 33:37]
    node _T_488 = mux(_T_13, UInt<1>("h0"), _T_487) @[Lookup.scala 33:37]
    node _T_489 = mux(_T_11, UInt<1>("h0"), _T_488) @[Lookup.scala 33:37]
    node _T_490 = mux(_T_9, UInt<1>("h0"), _T_489) @[Lookup.scala 33:37]
    node _T_491 = mux(_T_7, UInt<1>("h0"), _T_490) @[Lookup.scala 33:37]
    node _T_492 = mux(_T_5, UInt<1>("h0"), _T_491) @[Lookup.scala 33:37]
    node _T_493 = mux(_T_3, UInt<1>("h0"), _T_492) @[Lookup.scala 33:37]
    node decodeList_1 = mux(_T_1, UInt<1>("h0"), _T_493) @[Lookup.scala 33:37]
    node _T_494 = mux(_T_247, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_495 = mux(_T_245, UInt<3>("h7"), _T_494) @[Lookup.scala 33:37]
    node _T_496 = mux(_T_243, UInt<3>("h6"), _T_495) @[Lookup.scala 33:37]
    node _T_497 = mux(_T_241, UInt<3>("h5"), _T_496) @[Lookup.scala 33:37]
    node _T_498 = mux(_T_239, UInt<2>("h3"), _T_497) @[Lookup.scala 33:37]
    node _T_499 = mux(_T_237, UInt<2>("h2"), _T_498) @[Lookup.scala 33:37]
    node _T_500 = mux(_T_235, UInt<1>("h1"), _T_499) @[Lookup.scala 33:37]
    node _T_501 = mux(_T_233, UInt<6>("h32"), _T_500) @[Lookup.scala 33:37]
    node _T_502 = mux(_T_231, UInt<6>("h31"), _T_501) @[Lookup.scala 33:37]
    node _T_503 = mux(_T_229, UInt<6>("h30"), _T_502) @[Lookup.scala 33:37]
    node _T_504 = mux(_T_227, UInt<6>("h37"), _T_503) @[Lookup.scala 33:37]
    node _T_505 = mux(_T_225, UInt<6>("h26"), _T_504) @[Lookup.scala 33:37]
    node _T_506 = mux(_T_223, UInt<6>("h25"), _T_505) @[Lookup.scala 33:37]
    node _T_507 = mux(_T_221, UInt<6>("h24"), _T_506) @[Lookup.scala 33:37]
    node _T_508 = mux(_T_219, UInt<7>("h63"), _T_507) @[Lookup.scala 33:37]
    node _T_509 = mux(_T_217, UInt<6>("h22"), _T_508) @[Lookup.scala 33:37]
    node _T_510 = mux(_T_215, UInt<6>("h21"), _T_509) @[Lookup.scala 33:37]
    node _T_511 = mux(_T_213, UInt<6>("h21"), _T_510) @[Lookup.scala 33:37]
    node _T_512 = mux(_T_211, UInt<6>("h20"), _T_511) @[Lookup.scala 33:37]
    node _T_513 = mux(_T_209, UInt<6>("h20"), _T_512) @[Lookup.scala 33:37]
    node _T_514 = mux(_T_207, UInt<2>("h2"), _T_513) @[Lookup.scala 33:37]
    node _T_515 = mux(_T_205, UInt<1>("h0"), _T_514) @[Lookup.scala 33:37]
    node _T_516 = mux(_T_203, UInt<7>("h40"), _T_515) @[Lookup.scala 33:37]
    node _T_517 = mux(_T_201, UInt<1>("h0"), _T_516) @[Lookup.scala 33:37]
    node _T_518 = mux(_T_199, UInt<1>("h0"), _T_517) @[Lookup.scala 33:37]
    node _T_519 = mux(_T_197, UInt<1>("h0"), _T_518) @[Lookup.scala 33:37]
    node _T_520 = mux(_T_195, UInt<1>("h0"), _T_519) @[Lookup.scala 33:37]
    node _T_521 = mux(_T_193, UInt<4>("hb"), _T_520) @[Lookup.scala 33:37]
    node _T_522 = mux(_T_191, UInt<4>("ha"), _T_521) @[Lookup.scala 33:37]
    node _T_523 = mux(_T_189, UInt<7>("h40"), _T_522) @[Lookup.scala 33:37]
    node _T_524 = mux(_T_187, UInt<7>("h5a"), _T_523) @[Lookup.scala 33:37]
    node _T_525 = mux(_T_185, UInt<1>("h0"), _T_524) @[Lookup.scala 33:37]
    node _T_526 = mux(_T_183, UInt<7>("h40"), _T_525) @[Lookup.scala 33:37]
    node _T_527 = mux(_T_181, UInt<7>("h5a"), _T_526) @[Lookup.scala 33:37]
    node _T_528 = mux(_T_179, UInt<2>("h3"), _T_527) @[Lookup.scala 33:37]
    node _T_529 = mux(_T_177, UInt<2>("h2"), _T_528) @[Lookup.scala 33:37]
    node _T_530 = mux(_T_175, UInt<1>("h1"), _T_529) @[Lookup.scala 33:37]
    node _T_531 = mux(_T_173, UInt<5>("h11"), _T_530) @[Lookup.scala 33:37]
    node _T_532 = mux(_T_171, UInt<5>("h10"), _T_531) @[Lookup.scala 33:37]
    node _T_533 = mux(_T_169, UInt<7>("h58"), _T_532) @[Lookup.scala 33:37]
    node _T_534 = mux(_T_167, UInt<7>("h60"), _T_533) @[Lookup.scala 33:37]
    node _T_535 = mux(_T_165, UInt<6>("h28"), _T_534) @[Lookup.scala 33:37]
    node _T_536 = mux(_T_163, UInt<3>("h7"), _T_535) @[Lookup.scala 33:37]
    node _T_537 = mux(_T_161, UInt<3>("h6"), _T_536) @[Lookup.scala 33:37]
    node _T_538 = mux(_T_159, UInt<3>("h4"), _T_537) @[Lookup.scala 33:37]
    node _T_539 = mux(_T_157, UInt<4>("h8"), _T_538) @[Lookup.scala 33:37]
    node _T_540 = mux(_T_155, UInt<3>("h7"), _T_539) @[Lookup.scala 33:37]
    node _T_541 = mux(_T_153, UInt<4>("hd"), _T_540) @[Lookup.scala 33:37]
    node _T_542 = mux(_T_151, UInt<3>("h5"), _T_541) @[Lookup.scala 33:37]
    node _T_543 = mux(_T_149, UInt<7>("h40"), _T_542) @[Lookup.scala 33:37]
    node _T_544 = mux(_T_147, UInt<7>("h40"), _T_543) @[Lookup.scala 33:37]
    node _T_545 = mux(_T_145, UInt<7>("h40"), _T_544) @[Lookup.scala 33:37]
    node _T_546 = mux(_T_143, UInt<7>("h60"), _T_545) @[Lookup.scala 33:37]
    node _T_547 = mux(_T_141, UInt<7>("h40"), _T_546) @[Lookup.scala 33:37]
    node _T_548 = mux(_T_139, UInt<7>("h40"), _T_547) @[Lookup.scala 33:37]
    node _T_549 = mux(_T_137, UInt<4>("hb"), _T_548) @[Lookup.scala 33:37]
    node _T_550 = mux(_T_135, UInt<4>("ha"), _T_549) @[Lookup.scala 33:37]
    node _T_551 = mux(_T_133, UInt<2>("h3"), _T_550) @[Lookup.scala 33:37]
    node _T_552 = mux(_T_131, UInt<2>("h2"), _T_551) @[Lookup.scala 33:37]
    node _T_553 = mux(_T_129, UInt<7>("h40"), _T_552) @[Lookup.scala 33:37]
    node _T_554 = mux(_T_127, UInt<1>("h0"), _T_553) @[Lookup.scala 33:37]
    node _T_555 = mux(_T_125, UInt<4>("hf"), _T_554) @[Lookup.scala 33:37]
    node _T_556 = mux(_T_123, UInt<4>("he"), _T_555) @[Lookup.scala 33:37]
    node _T_557 = mux(_T_121, UInt<4>("hd"), _T_556) @[Lookup.scala 33:37]
    node _T_558 = mux(_T_119, UInt<4>("hc"), _T_557) @[Lookup.scala 33:37]
    node _T_559 = mux(_T_117, UInt<4>("h8"), _T_558) @[Lookup.scala 33:37]
    node _T_560 = mux(_T_115, UInt<3>("h7"), _T_559) @[Lookup.scala 33:37]
    node _T_561 = mux(_T_113, UInt<3>("h6"), _T_560) @[Lookup.scala 33:37]
    node _T_562 = mux(_T_111, UInt<3>("h5"), _T_561) @[Lookup.scala 33:37]
    node _T_563 = mux(_T_109, UInt<3>("h4"), _T_562) @[Lookup.scala 33:37]
    node _T_564 = mux(_T_107, UInt<2>("h3"), _T_563) @[Lookup.scala 33:37]
    node _T_565 = mux(_T_105, UInt<2>("h2"), _T_564) @[Lookup.scala 33:37]
    node _T_566 = mux(_T_103, UInt<1>("h1"), _T_565) @[Lookup.scala 33:37]
    node _T_567 = mux(_T_101, UInt<1>("h0"), _T_566) @[Lookup.scala 33:37]
    node _T_568 = mux(_T_99, UInt<2>("h2"), _T_567) @[Lookup.scala 33:37]
    node _T_569 = mux(_T_97, UInt<4>("hb"), _T_568) @[Lookup.scala 33:37]
    node _T_570 = mux(_T_95, UInt<2>("h3"), _T_569) @[Lookup.scala 33:37]
    node _T_571 = mux(_T_93, UInt<3>("h6"), _T_570) @[Lookup.scala 33:37]
    node _T_572 = mux(_T_91, UInt<6>("h28"), _T_571) @[Lookup.scala 33:37]
    node _T_573 = mux(_T_89, UInt<7>("h60"), _T_572) @[Lookup.scala 33:37]
    node _T_574 = mux(_T_87, UInt<6>("h2d"), _T_573) @[Lookup.scala 33:37]
    node _T_575 = mux(_T_85, UInt<6>("h25"), _T_574) @[Lookup.scala 33:37]
    node _T_576 = mux(_T_83, UInt<6>("h21"), _T_575) @[Lookup.scala 33:37]
    node _T_577 = mux(_T_81, UInt<6>("h2d"), _T_576) @[Lookup.scala 33:37]
    node _T_578 = mux(_T_79, UInt<6>("h25"), _T_577) @[Lookup.scala 33:37]
    node _T_579 = mux(_T_77, UInt<6>("h21"), _T_578) @[Lookup.scala 33:37]
    node _T_580 = mux(_T_75, UInt<7>("h60"), _T_579) @[Lookup.scala 33:37]
    node _T_581 = mux(_T_73, UInt<4>("ha"), _T_580) @[Lookup.scala 33:37]
    node _T_582 = mux(_T_71, UInt<4>("h9"), _T_581) @[Lookup.scala 33:37]
    node _T_583 = mux(_T_69, UInt<4>("h8"), _T_582) @[Lookup.scala 33:37]
    node _T_584 = mux(_T_67, UInt<3>("h5"), _T_583) @[Lookup.scala 33:37]
    node _T_585 = mux(_T_65, UInt<3>("h4"), _T_584) @[Lookup.scala 33:37]
    node _T_586 = mux(_T_63, UInt<2>("h2"), _T_585) @[Lookup.scala 33:37]
    node _T_587 = mux(_T_61, UInt<1>("h1"), _T_586) @[Lookup.scala 33:37]
    node _T_588 = mux(_T_59, UInt<1>("h0"), _T_587) @[Lookup.scala 33:37]
    node _T_589 = mux(_T_57, UInt<5>("h17"), _T_588) @[Lookup.scala 33:37]
    node _T_590 = mux(_T_55, UInt<5>("h16"), _T_589) @[Lookup.scala 33:37]
    node _T_591 = mux(_T_53, UInt<5>("h15"), _T_590) @[Lookup.scala 33:37]
    node _T_592 = mux(_T_51, UInt<5>("h14"), _T_591) @[Lookup.scala 33:37]
    node _T_593 = mux(_T_49, UInt<5>("h11"), _T_592) @[Lookup.scala 33:37]
    node _T_594 = mux(_T_47, UInt<5>("h10"), _T_593) @[Lookup.scala 33:37]
    node _T_595 = mux(_T_45, UInt<7>("h5a"), _T_594) @[Lookup.scala 33:37]
    node _T_596 = mux(_T_43, UInt<7>("h58"), _T_595) @[Lookup.scala 33:37]
    node _T_597 = mux(_T_41, UInt<7>("h40"), _T_596) @[Lookup.scala 33:37]
    node _T_598 = mux(_T_39, UInt<7>("h40"), _T_597) @[Lookup.scala 33:37]
    node _T_599 = mux(_T_37, UInt<4>("hd"), _T_598) @[Lookup.scala 33:37]
    node _T_600 = mux(_T_35, UInt<4>("h8"), _T_599) @[Lookup.scala 33:37]
    node _T_601 = mux(_T_33, UInt<3>("h7"), _T_600) @[Lookup.scala 33:37]
    node _T_602 = mux(_T_31, UInt<3>("h6"), _T_601) @[Lookup.scala 33:37]
    node _T_603 = mux(_T_29, UInt<3>("h5"), _T_602) @[Lookup.scala 33:37]
    node _T_604 = mux(_T_27, UInt<3>("h4"), _T_603) @[Lookup.scala 33:37]
    node _T_605 = mux(_T_25, UInt<2>("h3"), _T_604) @[Lookup.scala 33:37]
    node _T_606 = mux(_T_23, UInt<2>("h2"), _T_605) @[Lookup.scala 33:37]
    node _T_607 = mux(_T_21, UInt<1>("h1"), _T_606) @[Lookup.scala 33:37]
    node _T_608 = mux(_T_19, UInt<7>("h40"), _T_607) @[Lookup.scala 33:37]
    node _T_609 = mux(_T_17, UInt<4>("hd"), _T_608) @[Lookup.scala 33:37]
    node _T_610 = mux(_T_15, UInt<3>("h7"), _T_609) @[Lookup.scala 33:37]
    node _T_611 = mux(_T_13, UInt<3>("h6"), _T_610) @[Lookup.scala 33:37]
    node _T_612 = mux(_T_11, UInt<3>("h5"), _T_611) @[Lookup.scala 33:37]
    node _T_613 = mux(_T_9, UInt<3>("h4"), _T_612) @[Lookup.scala 33:37]
    node _T_614 = mux(_T_7, UInt<2>("h3"), _T_613) @[Lookup.scala 33:37]
    node _T_615 = mux(_T_5, UInt<2>("h2"), _T_614) @[Lookup.scala 33:37]
    node _T_616 = mux(_T_3, UInt<1>("h1"), _T_615) @[Lookup.scala 33:37]
    node decodeList_2 = mux(_T_1, UInt<7>("h40"), _T_616) @[Lookup.scala 33:37]
    node _T_617 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 38:84]
    node _T_618 = or(_T_617, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 38:127]
    node instrType = mux(_T_618, UInt<1>("h0"), decodeList_0) @[IDU.scala 38:75]
    node _T_619 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 38:84]
    node _T_620 = or(_T_619, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 38:127]
    node fuType = mux(_T_620, UInt<2>("h3"), decodeList_1) @[IDU.scala 38:75]
    node _T_621 = or(hasIntr, io.in.bits.exceptionVec[12]) @[IDU.scala 38:84]
    node _T_622 = or(_T_621, io.out.bits.cf.exceptionVec[1]) @[IDU.scala 38:127]
    node fuOpType = mux(_T_622, UInt<1>("h0"), decodeList_2) @[IDU.scala 38:75]
    node _T_623 = bits(io.in.bits.instr, 1, 0) @[IDU.scala 40:39]
    node isRVC = neq(_T_623, UInt<2>("h3")) @[IDU.scala 40:45]
    node _T_624 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_625 = eq(UInt<1>("h0"), _T_624) @[Lookup.scala 31:38]
    node _T_626 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_627 = eq(UInt<15>("h4000"), _T_626) @[Lookup.scala 31:38]
    node _T_628 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_629 = eq(UInt<15>("h6000"), _T_628) @[Lookup.scala 31:38]
    node _T_630 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_631 = eq(UInt<16>("hc000"), _T_630) @[Lookup.scala 31:38]
    node _T_632 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_633 = eq(UInt<16>("he000"), _T_632) @[Lookup.scala 31:38]
    node _T_634 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_635 = eq(UInt<1>("h1"), _T_634) @[Lookup.scala 31:38]
    node _T_636 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_637 = eq(UInt<1>("h1"), _T_636) @[Lookup.scala 31:38]
    node _T_638 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_639 = eq(UInt<14>("h2001"), _T_638) @[Lookup.scala 31:38]
    node _T_640 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_641 = eq(UInt<15>("h4001"), _T_640) @[Lookup.scala 31:38]
    node _T_642 = and(io.in.bits.instr, UInt<16>("hef83")) @[Lookup.scala 31:38]
    node _T_643 = eq(UInt<15>("h6101"), _T_642) @[Lookup.scala 31:38]
    node _T_644 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_645 = eq(UInt<15>("h6001"), _T_644) @[Lookup.scala 31:38]
    node _T_646 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_647 = eq(UInt<16>("h8001"), _T_646) @[Lookup.scala 31:38]
    node _T_648 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_649 = eq(UInt<16>("h8401"), _T_648) @[Lookup.scala 31:38]
    node _T_650 = and(io.in.bits.instr, UInt<16>("hec03")) @[Lookup.scala 31:38]
    node _T_651 = eq(UInt<16>("h8801"), _T_650) @[Lookup.scala 31:38]
    node _T_652 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_653 = eq(UInt<16>("h8c01"), _T_652) @[Lookup.scala 31:38]
    node _T_654 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_655 = eq(UInt<16>("h8c21"), _T_654) @[Lookup.scala 31:38]
    node _T_656 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_657 = eq(UInt<16>("h8c41"), _T_656) @[Lookup.scala 31:38]
    node _T_658 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_659 = eq(UInt<16>("h8c61"), _T_658) @[Lookup.scala 31:38]
    node _T_660 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_661 = eq(UInt<16>("h9c01"), _T_660) @[Lookup.scala 31:38]
    node _T_662 = and(io.in.bits.instr, UInt<16>("hfc63")) @[Lookup.scala 31:38]
    node _T_663 = eq(UInt<16>("h9c21"), _T_662) @[Lookup.scala 31:38]
    node _T_664 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_665 = eq(UInt<16>("ha001"), _T_664) @[Lookup.scala 31:38]
    node _T_666 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_667 = eq(UInt<16>("hc001"), _T_666) @[Lookup.scala 31:38]
    node _T_668 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_669 = eq(UInt<16>("he001"), _T_668) @[Lookup.scala 31:38]
    node _T_670 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_671 = eq(UInt<2>("h2"), _T_670) @[Lookup.scala 31:38]
    node _T_672 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_673 = eq(UInt<15>("h4002"), _T_672) @[Lookup.scala 31:38]
    node _T_674 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_675 = eq(UInt<15>("h6002"), _T_674) @[Lookup.scala 31:38]
    node _T_676 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_677 = eq(UInt<16>("h8002"), _T_676) @[Lookup.scala 31:38]
    node _T_678 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_679 = eq(UInt<16>("h8002"), _T_678) @[Lookup.scala 31:38]
    node _T_680 = and(io.in.bits.instr, UInt<16>("hffff")) @[Lookup.scala 31:38]
    node _T_681 = eq(UInt<16>("h9002"), _T_680) @[Lookup.scala 31:38]
    node _T_682 = and(io.in.bits.instr, UInt<16>("hf07f")) @[Lookup.scala 31:38]
    node _T_683 = eq(UInt<16>("h9002"), _T_682) @[Lookup.scala 31:38]
    node _T_684 = and(io.in.bits.instr, UInt<16>("hf003")) @[Lookup.scala 31:38]
    node _T_685 = eq(UInt<16>("h9002"), _T_684) @[Lookup.scala 31:38]
    node _T_686 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_687 = eq(UInt<16>("hc002"), _T_686) @[Lookup.scala 31:38]
    node _T_688 = and(io.in.bits.instr, UInt<16>("he003")) @[Lookup.scala 31:38]
    node _T_689 = eq(UInt<16>("he002"), _T_688) @[Lookup.scala 31:38]
    node _T_690 = mux(_T_689, UInt<2>("h3"), UInt<5>("h10")) @[Lookup.scala 33:37]
    node _T_691 = mux(_T_687, UInt<2>("h2"), _T_690) @[Lookup.scala 33:37]
    node _T_692 = mux(_T_685, UInt<5>("h10"), _T_691) @[Lookup.scala 33:37]
    node _T_693 = mux(_T_683, UInt<5>("h10"), _T_692) @[Lookup.scala 33:37]
    node _T_694 = mux(_T_681, UInt<4>("hf"), _T_693) @[Lookup.scala 33:37]
    node _T_695 = mux(_T_679, UInt<5>("h10"), _T_694) @[Lookup.scala 33:37]
    node _T_696 = mux(_T_677, UInt<5>("h10"), _T_695) @[Lookup.scala 33:37]
    node _T_697 = mux(_T_675, UInt<1>("h1"), _T_696) @[Lookup.scala 33:37]
    node _T_698 = mux(_T_673, UInt<1>("h0"), _T_697) @[Lookup.scala 33:37]
    node _T_699 = mux(_T_671, UInt<4>("ha"), _T_698) @[Lookup.scala 33:37]
    node _T_700 = mux(_T_669, UInt<4>("h9"), _T_699) @[Lookup.scala 33:37]
    node _T_701 = mux(_T_667, UInt<4>("h9"), _T_700) @[Lookup.scala 33:37]
    node _T_702 = mux(_T_665, UInt<4>("h8"), _T_701) @[Lookup.scala 33:37]
    node _T_703 = mux(_T_663, UInt<5>("h10"), _T_702) @[Lookup.scala 33:37]
    node _T_704 = mux(_T_661, UInt<5>("h10"), _T_703) @[Lookup.scala 33:37]
    node _T_705 = mux(_T_659, UInt<5>("h10"), _T_704) @[Lookup.scala 33:37]
    node _T_706 = mux(_T_657, UInt<5>("h10"), _T_705) @[Lookup.scala 33:37]
    node _T_707 = mux(_T_655, UInt<5>("h10"), _T_706) @[Lookup.scala 33:37]
    node _T_708 = mux(_T_653, UInt<5>("h10"), _T_707) @[Lookup.scala 33:37]
    node _T_709 = mux(_T_651, UInt<4>("ha"), _T_708) @[Lookup.scala 33:37]
    node _T_710 = mux(_T_649, UInt<4>("ha"), _T_709) @[Lookup.scala 33:37]
    node _T_711 = mux(_T_647, UInt<4>("ha"), _T_710) @[Lookup.scala 33:37]
    node _T_712 = mux(_T_645, UInt<4>("hb"), _T_711) @[Lookup.scala 33:37]
    node _T_713 = mux(_T_643, UInt<4>("hd"), _T_712) @[Lookup.scala 33:37]
    node _T_714 = mux(_T_641, UInt<4>("ha"), _T_713) @[Lookup.scala 33:37]
    node _T_715 = mux(_T_639, UInt<4>("hc"), _T_714) @[Lookup.scala 33:37]
    node _T_716 = mux(_T_637, UInt<4>("hc"), _T_715) @[Lookup.scala 33:37]
    node _T_717 = mux(_T_635, UInt<5>("h10"), _T_716) @[Lookup.scala 33:37]
    node _T_718 = mux(_T_633, UInt<3>("h5"), _T_717) @[Lookup.scala 33:37]
    node _T_719 = mux(_T_631, UInt<3>("h4"), _T_718) @[Lookup.scala 33:37]
    node _T_720 = mux(_T_629, UInt<3>("h7"), _T_719) @[Lookup.scala 33:37]
    node _T_721 = mux(_T_627, UInt<3>("h6"), _T_720) @[Lookup.scala 33:37]
    node rvcImmType = mux(_T_625, UInt<4>("he"), _T_721) @[Lookup.scala 33:37]
    node _T_722 = mux(_T_689, UInt<4>("h9"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_723 = mux(_T_687, UInt<4>("h9"), _T_722) @[Lookup.scala 33:37]
    node _T_724 = mux(_T_685, UInt<2>("h2"), _T_723) @[Lookup.scala 33:37]
    node _T_725 = mux(_T_683, UInt<3>("h4"), _T_724) @[Lookup.scala 33:37]
    node _T_726 = mux(_T_681, UInt<1>("h0"), _T_725) @[Lookup.scala 33:37]
    node _T_727 = mux(_T_679, UInt<3>("h5"), _T_726) @[Lookup.scala 33:37]
    node _T_728 = mux(_T_677, UInt<3>("h4"), _T_727) @[Lookup.scala 33:37]
    node _T_729 = mux(_T_675, UInt<4>("h9"), _T_728) @[Lookup.scala 33:37]
    node _T_730 = mux(_T_673, UInt<4>("h9"), _T_729) @[Lookup.scala 33:37]
    node _T_731 = mux(_T_671, UInt<2>("h2"), _T_730) @[Lookup.scala 33:37]
    node _T_732 = mux(_T_669, UInt<3>("h6"), _T_731) @[Lookup.scala 33:37]
    node _T_733 = mux(_T_667, UInt<3>("h6"), _T_732) @[Lookup.scala 33:37]
    node _T_734 = mux(_T_665, UInt<1>("h0"), _T_733) @[Lookup.scala 33:37]
    node _T_735 = mux(_T_663, UInt<3>("h6"), _T_734) @[Lookup.scala 33:37]
    node _T_736 = mux(_T_661, UInt<3>("h6"), _T_735) @[Lookup.scala 33:37]
    node _T_737 = mux(_T_659, UInt<3>("h6"), _T_736) @[Lookup.scala 33:37]
    node _T_738 = mux(_T_657, UInt<3>("h6"), _T_737) @[Lookup.scala 33:37]
    node _T_739 = mux(_T_655, UInt<3>("h6"), _T_738) @[Lookup.scala 33:37]
    node _T_740 = mux(_T_653, UInt<3>("h6"), _T_739) @[Lookup.scala 33:37]
    node _T_741 = mux(_T_651, UInt<3>("h6"), _T_740) @[Lookup.scala 33:37]
    node _T_742 = mux(_T_649, UInt<3>("h6"), _T_741) @[Lookup.scala 33:37]
    node _T_743 = mux(_T_647, UInt<3>("h6"), _T_742) @[Lookup.scala 33:37]
    node _T_744 = mux(_T_645, UInt<1>("h0"), _T_743) @[Lookup.scala 33:37]
    node _T_745 = mux(_T_643, UInt<4>("h9"), _T_744) @[Lookup.scala 33:37]
    node _T_746 = mux(_T_641, UInt<1>("h0"), _T_745) @[Lookup.scala 33:37]
    node _T_747 = mux(_T_639, UInt<2>("h2"), _T_746) @[Lookup.scala 33:37]
    node _T_748 = mux(_T_637, UInt<2>("h2"), _T_747) @[Lookup.scala 33:37]
    node _T_749 = mux(_T_635, UInt<1>("h0"), _T_748) @[Lookup.scala 33:37]
    node _T_750 = mux(_T_633, UInt<3>("h6"), _T_749) @[Lookup.scala 33:37]
    node _T_751 = mux(_T_631, UInt<3>("h6"), _T_750) @[Lookup.scala 33:37]
    node _T_752 = mux(_T_629, UInt<3>("h6"), _T_751) @[Lookup.scala 33:37]
    node _T_753 = mux(_T_627, UInt<3>("h6"), _T_752) @[Lookup.scala 33:37]
    node rvcSrc1Type = mux(_T_625, UInt<4>("h9"), _T_753) @[Lookup.scala 33:37]
    node _T_754 = mux(_T_689, UInt<3>("h5"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_755 = mux(_T_687, UInt<3>("h5"), _T_754) @[Lookup.scala 33:37]
    node _T_756 = mux(_T_685, UInt<3>("h5"), _T_755) @[Lookup.scala 33:37]
    node _T_757 = mux(_T_683, UInt<1>("h0"), _T_756) @[Lookup.scala 33:37]
    node _T_758 = mux(_T_681, UInt<1>("h0"), _T_757) @[Lookup.scala 33:37]
    node _T_759 = mux(_T_679, UInt<1>("h0"), _T_758) @[Lookup.scala 33:37]
    node _T_760 = mux(_T_677, UInt<1>("h0"), _T_759) @[Lookup.scala 33:37]
    node _T_761 = mux(_T_675, UInt<1>("h0"), _T_760) @[Lookup.scala 33:37]
    node _T_762 = mux(_T_673, UInt<1>("h0"), _T_761) @[Lookup.scala 33:37]
    node _T_763 = mux(_T_671, UInt<1>("h0"), _T_762) @[Lookup.scala 33:37]
    node _T_764 = mux(_T_669, UInt<1>("h0"), _T_763) @[Lookup.scala 33:37]
    node _T_765 = mux(_T_667, UInt<1>("h0"), _T_764) @[Lookup.scala 33:37]
    node _T_766 = mux(_T_665, UInt<1>("h0"), _T_765) @[Lookup.scala 33:37]
    node _T_767 = mux(_T_663, UInt<3>("h7"), _T_766) @[Lookup.scala 33:37]
    node _T_768 = mux(_T_661, UInt<3>("h7"), _T_767) @[Lookup.scala 33:37]
    node _T_769 = mux(_T_659, UInt<3>("h7"), _T_768) @[Lookup.scala 33:37]
    node _T_770 = mux(_T_657, UInt<3>("h7"), _T_769) @[Lookup.scala 33:37]
    node _T_771 = mux(_T_655, UInt<3>("h7"), _T_770) @[Lookup.scala 33:37]
    node _T_772 = mux(_T_653, UInt<3>("h7"), _T_771) @[Lookup.scala 33:37]
    node _T_773 = mux(_T_651, UInt<1>("h0"), _T_772) @[Lookup.scala 33:37]
    node _T_774 = mux(_T_649, UInt<1>("h0"), _T_773) @[Lookup.scala 33:37]
    node _T_775 = mux(_T_647, UInt<1>("h0"), _T_774) @[Lookup.scala 33:37]
    node _T_776 = mux(_T_645, UInt<1>("h0"), _T_775) @[Lookup.scala 33:37]
    node _T_777 = mux(_T_643, UInt<1>("h0"), _T_776) @[Lookup.scala 33:37]
    node _T_778 = mux(_T_641, UInt<1>("h0"), _T_777) @[Lookup.scala 33:37]
    node _T_779 = mux(_T_639, UInt<1>("h0"), _T_778) @[Lookup.scala 33:37]
    node _T_780 = mux(_T_637, UInt<1>("h0"), _T_779) @[Lookup.scala 33:37]
    node _T_781 = mux(_T_635, UInt<1>("h0"), _T_780) @[Lookup.scala 33:37]
    node _T_782 = mux(_T_633, UInt<3>("h7"), _T_781) @[Lookup.scala 33:37]
    node _T_783 = mux(_T_631, UInt<3>("h7"), _T_782) @[Lookup.scala 33:37]
    node _T_784 = mux(_T_629, UInt<1>("h0"), _T_783) @[Lookup.scala 33:37]
    node _T_785 = mux(_T_627, UInt<1>("h0"), _T_784) @[Lookup.scala 33:37]
    node rvcSrc2Type = mux(_T_625, UInt<1>("h0"), _T_785) @[Lookup.scala 33:37]
    node _T_786 = mux(_T_689, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_787 = mux(_T_687, UInt<1>("h0"), _T_786) @[Lookup.scala 33:37]
    node _T_788 = mux(_T_685, UInt<2>("h2"), _T_787) @[Lookup.scala 33:37]
    node _T_789 = mux(_T_683, UInt<4>("h8"), _T_788) @[Lookup.scala 33:37]
    node _T_790 = mux(_T_681, UInt<1>("h0"), _T_789) @[Lookup.scala 33:37]
    node _T_791 = mux(_T_679, UInt<2>("h2"), _T_790) @[Lookup.scala 33:37]
    node _T_792 = mux(_T_677, UInt<1>("h0"), _T_791) @[Lookup.scala 33:37]
    node _T_793 = mux(_T_675, UInt<2>("h2"), _T_792) @[Lookup.scala 33:37]
    node _T_794 = mux(_T_673, UInt<2>("h2"), _T_793) @[Lookup.scala 33:37]
    node _T_795 = mux(_T_671, UInt<2>("h2"), _T_794) @[Lookup.scala 33:37]
    node _T_796 = mux(_T_669, UInt<1>("h0"), _T_795) @[Lookup.scala 33:37]
    node _T_797 = mux(_T_667, UInt<1>("h0"), _T_796) @[Lookup.scala 33:37]
    node _T_798 = mux(_T_665, UInt<1>("h0"), _T_797) @[Lookup.scala 33:37]
    node _T_799 = mux(_T_663, UInt<3>("h6"), _T_798) @[Lookup.scala 33:37]
    node _T_800 = mux(_T_661, UInt<3>("h6"), _T_799) @[Lookup.scala 33:37]
    node _T_801 = mux(_T_659, UInt<3>("h6"), _T_800) @[Lookup.scala 33:37]
    node _T_802 = mux(_T_657, UInt<3>("h6"), _T_801) @[Lookup.scala 33:37]
    node _T_803 = mux(_T_655, UInt<3>("h6"), _T_802) @[Lookup.scala 33:37]
    node _T_804 = mux(_T_653, UInt<3>("h6"), _T_803) @[Lookup.scala 33:37]
    node _T_805 = mux(_T_651, UInt<3>("h6"), _T_804) @[Lookup.scala 33:37]
    node _T_806 = mux(_T_649, UInt<3>("h6"), _T_805) @[Lookup.scala 33:37]
    node _T_807 = mux(_T_647, UInt<3>("h6"), _T_806) @[Lookup.scala 33:37]
    node _T_808 = mux(_T_645, UInt<2>("h2"), _T_807) @[Lookup.scala 33:37]
    node _T_809 = mux(_T_643, UInt<4>("h9"), _T_808) @[Lookup.scala 33:37]
    node _T_810 = mux(_T_641, UInt<2>("h2"), _T_809) @[Lookup.scala 33:37]
    node _T_811 = mux(_T_639, UInt<2>("h2"), _T_810) @[Lookup.scala 33:37]
    node _T_812 = mux(_T_637, UInt<2>("h2"), _T_811) @[Lookup.scala 33:37]
    node _T_813 = mux(_T_635, UInt<1>("h0"), _T_812) @[Lookup.scala 33:37]
    node _T_814 = mux(_T_633, UInt<1>("h0"), _T_813) @[Lookup.scala 33:37]
    node _T_815 = mux(_T_631, UInt<1>("h0"), _T_814) @[Lookup.scala 33:37]
    node _T_816 = mux(_T_629, UInt<3>("h7"), _T_815) @[Lookup.scala 33:37]
    node _T_817 = mux(_T_627, UInt<3>("h7"), _T_816) @[Lookup.scala 33:37]
    node rvcDestType = mux(_T_625, UInt<3>("h7"), _T_817) @[Lookup.scala 33:37]
    io.out.bits.data.imm is invalid @[IDU.scala 44:15]
    io.out.bits.data.src2 is invalid @[IDU.scala 44:15]
    io.out.bits.data.src1 is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isBlocked is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.noSpecExec is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isSrc2Forward is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isSrc1Forward is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.isNutCoreTrap is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfDest is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfWen is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfSrc2 is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.rfSrc1 is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.fuOpType is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.fuType is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.src2Type is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.src1Type is invalid @[IDU.scala 44:15]
    io.out.bits.cf.isBranch is invalid @[IDU.scala 44:15]
    io.out.bits.cf.runahead_checkpoint_id is invalid @[IDU.scala 44:15]
    io.out.bits.cf.crossPageIPFFix is invalid @[IDU.scala 44:15]
    io.out.bits.cf.isRVC is invalid @[IDU.scala 44:15]
    io.out.bits.cf.brIdx is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[0] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[1] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[2] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[3] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[4] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[5] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[6] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[7] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[8] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[9] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[10] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.intrVec[11] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[0] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[1] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[2] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[3] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[4] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[5] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[6] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[7] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[8] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[9] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[10] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[11] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[12] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[13] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[14] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.exceptionVec[15] is invalid @[IDU.scala 44:15]
    io.out.bits.cf.redirect.valid is invalid @[IDU.scala 44:15]
    io.out.bits.cf.redirect.rtype is invalid @[IDU.scala 44:15]
    io.out.bits.cf.redirect.target is invalid @[IDU.scala 44:15]
    io.out.bits.cf.pnpc is invalid @[IDU.scala 44:15]
    io.out.bits.cf.pc is invalid @[IDU.scala 44:15]
    io.out.bits.cf.instr is invalid @[IDU.scala 44:15]
    io.out.bits.ctrl.fuType <= fuType @[IDU.scala 46:27]
    io.out.bits.ctrl.fuOpType <= fuOpType @[IDU.scala 47:29]
    node _T_818 = eq(UInt<3>("h4"), instrType) @[LookupTree.scala 24:34]
    node _T_819 = eq(UInt<3>("h5"), instrType) @[LookupTree.scala 24:34]
    node _T_820 = eq(UInt<2>("h2"), instrType) @[LookupTree.scala 24:34]
    node _T_821 = eq(UInt<4>("hf"), instrType) @[LookupTree.scala 24:34]
    node _T_822 = eq(UInt<1>("h1"), instrType) @[LookupTree.scala 24:34]
    node _T_823 = eq(UInt<3>("h6"), instrType) @[LookupTree.scala 24:34]
    node _T_824 = eq(UInt<3>("h7"), instrType) @[LookupTree.scala 24:34]
    node _T_825 = eq(UInt<1>("h0"), instrType) @[LookupTree.scala 24:34]
    node _T_826 = mux(_T_818, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_827 = mux(_T_819, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_828 = mux(_T_820, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_829 = mux(_T_821, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_830 = mux(_T_822, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_831 = mux(_T_823, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_832 = mux(_T_824, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_833 = mux(_T_825, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_834 = or(_T_826, _T_827) @[Mux.scala 27:72]
    node _T_835 = or(_T_834, _T_828) @[Mux.scala 27:72]
    node _T_836 = or(_T_835, _T_829) @[Mux.scala 27:72]
    node _T_837 = or(_T_836, _T_830) @[Mux.scala 27:72]
    node _T_838 = or(_T_837, _T_831) @[Mux.scala 27:72]
    node _T_839 = or(_T_838, _T_832) @[Mux.scala 27:72]
    node _T_840 = or(_T_839, _T_833) @[Mux.scala 27:72]
    wire src1Type : UInt<1> @[Mux.scala 27:72]
    src1Type <= _T_840 @[Mux.scala 27:72]
    node _T_841 = eq(UInt<3>("h4"), instrType) @[LookupTree.scala 24:34]
    node _T_842 = eq(UInt<3>("h5"), instrType) @[LookupTree.scala 24:34]
    node _T_843 = eq(UInt<2>("h2"), instrType) @[LookupTree.scala 24:34]
    node _T_844 = eq(UInt<4>("hf"), instrType) @[LookupTree.scala 24:34]
    node _T_845 = eq(UInt<1>("h1"), instrType) @[LookupTree.scala 24:34]
    node _T_846 = eq(UInt<3>("h6"), instrType) @[LookupTree.scala 24:34]
    node _T_847 = eq(UInt<3>("h7"), instrType) @[LookupTree.scala 24:34]
    node _T_848 = eq(UInt<1>("h0"), instrType) @[LookupTree.scala 24:34]
    node _T_849 = mux(_T_841, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_850 = mux(_T_842, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_851 = mux(_T_843, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_852 = mux(_T_844, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_853 = mux(_T_845, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_854 = mux(_T_846, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_855 = mux(_T_847, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_856 = mux(_T_848, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_857 = or(_T_849, _T_850) @[Mux.scala 27:72]
    node _T_858 = or(_T_857, _T_851) @[Mux.scala 27:72]
    node _T_859 = or(_T_858, _T_852) @[Mux.scala 27:72]
    node _T_860 = or(_T_859, _T_853) @[Mux.scala 27:72]
    node _T_861 = or(_T_860, _T_854) @[Mux.scala 27:72]
    node _T_862 = or(_T_861, _T_855) @[Mux.scala 27:72]
    node _T_863 = or(_T_862, _T_856) @[Mux.scala 27:72]
    wire src2Type : UInt<1> @[Mux.scala 27:72]
    src2Type <= _T_863 @[Mux.scala 27:72]
    node rs = bits(io.in.bits.instr, 19, 15) @[IDU.scala 62:28]
    node rt = bits(io.in.bits.instr, 24, 20) @[IDU.scala 62:43]
    node rd = bits(io.in.bits.instr, 11, 7) @[IDU.scala 62:58]
    node rs1 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 64:24]
    node rs2 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 65:24]
    node _T_864 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 66:35]
    node _T_865 = eq(UInt<1>("h0"), _T_864) @[LookupTree.scala 24:34]
    node _T_866 = eq(UInt<1>("h1"), _T_864) @[LookupTree.scala 24:34]
    node _T_867 = eq(UInt<2>("h2"), _T_864) @[LookupTree.scala 24:34]
    node _T_868 = eq(UInt<2>("h3"), _T_864) @[LookupTree.scala 24:34]
    node _T_869 = eq(UInt<3>("h4"), _T_864) @[LookupTree.scala 24:34]
    node _T_870 = eq(UInt<3>("h5"), _T_864) @[LookupTree.scala 24:34]
    node _T_871 = eq(UInt<3>("h6"), _T_864) @[LookupTree.scala 24:34]
    node _T_872 = eq(UInt<3>("h7"), _T_864) @[LookupTree.scala 24:34]
    node _T_873 = mux(_T_865, UInt<4>("h8"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_874 = mux(_T_866, UInt<4>("h9"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_875 = mux(_T_867, UInt<4>("ha"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_876 = mux(_T_868, UInt<4>("hb"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_877 = mux(_T_869, UInt<4>("hc"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_878 = mux(_T_870, UInt<4>("hd"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_879 = mux(_T_871, UInt<4>("he"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_880 = mux(_T_872, UInt<4>("hf"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_881 = or(_T_873, _T_874) @[Mux.scala 27:72]
    node _T_882 = or(_T_881, _T_875) @[Mux.scala 27:72]
    node _T_883 = or(_T_882, _T_876) @[Mux.scala 27:72]
    node _T_884 = or(_T_883, _T_877) @[Mux.scala 27:72]
    node _T_885 = or(_T_884, _T_878) @[Mux.scala 27:72]
    node _T_886 = or(_T_885, _T_879) @[Mux.scala 27:72]
    node _T_887 = or(_T_886, _T_880) @[Mux.scala 27:72]
    wire rs1p : UInt<4> @[Mux.scala 27:72]
    rs1p <= _T_887 @[Mux.scala 27:72]
    node _T_888 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 67:35]
    node _T_889 = eq(UInt<1>("h0"), _T_888) @[LookupTree.scala 24:34]
    node _T_890 = eq(UInt<1>("h1"), _T_888) @[LookupTree.scala 24:34]
    node _T_891 = eq(UInt<2>("h2"), _T_888) @[LookupTree.scala 24:34]
    node _T_892 = eq(UInt<2>("h3"), _T_888) @[LookupTree.scala 24:34]
    node _T_893 = eq(UInt<3>("h4"), _T_888) @[LookupTree.scala 24:34]
    node _T_894 = eq(UInt<3>("h5"), _T_888) @[LookupTree.scala 24:34]
    node _T_895 = eq(UInt<3>("h6"), _T_888) @[LookupTree.scala 24:34]
    node _T_896 = eq(UInt<3>("h7"), _T_888) @[LookupTree.scala 24:34]
    node _T_897 = mux(_T_889, UInt<4>("h8"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_898 = mux(_T_890, UInt<4>("h9"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_899 = mux(_T_891, UInt<4>("ha"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_900 = mux(_T_892, UInt<4>("hb"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_901 = mux(_T_893, UInt<4>("hc"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_902 = mux(_T_894, UInt<4>("hd"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_903 = mux(_T_895, UInt<4>("he"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_904 = mux(_T_896, UInt<4>("hf"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_905 = or(_T_897, _T_898) @[Mux.scala 27:72]
    node _T_906 = or(_T_905, _T_899) @[Mux.scala 27:72]
    node _T_907 = or(_T_906, _T_900) @[Mux.scala 27:72]
    node _T_908 = or(_T_907, _T_901) @[Mux.scala 27:72]
    node _T_909 = or(_T_908, _T_902) @[Mux.scala 27:72]
    node _T_910 = or(_T_909, _T_903) @[Mux.scala 27:72]
    node _T_911 = or(_T_910, _T_904) @[Mux.scala 27:72]
    wire rs2p : UInt<4> @[Mux.scala 27:72]
    rs2p <= _T_911 @[Mux.scala 27:72]
    node _T_912 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 68:28]
    node _T_913 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 68:38]
    node rvc_shamt = cat(_T_912, _T_913) @[Cat.scala 30:58]
    node _T_914 = eq(UInt<1>("h0"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_915 = eq(UInt<2>("h3"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_916 = eq(UInt<1>("h1"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_917 = eq(UInt<2>("h2"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_918 = eq(UInt<3>("h4"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_919 = eq(UInt<3>("h5"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_920 = eq(UInt<3>("h6"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_921 = eq(UInt<3>("h7"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_922 = eq(UInt<4>("h8"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_923 = eq(UInt<4>("h9"), rvcSrc1Type) @[LookupTree.scala 24:34]
    node _T_924 = mux(_T_914, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_925 = mux(_T_915, rs, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_926 = mux(_T_916, rt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_927 = mux(_T_917, rd, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_928 = mux(_T_918, rs1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_929 = mux(_T_919, rs2, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_930 = mux(_T_920, rs1p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_931 = mux(_T_921, rs2p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_932 = mux(_T_922, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_933 = mux(_T_923, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_934 = or(_T_924, _T_925) @[Mux.scala 27:72]
    node _T_935 = or(_T_934, _T_926) @[Mux.scala 27:72]
    node _T_936 = or(_T_935, _T_927) @[Mux.scala 27:72]
    node _T_937 = or(_T_936, _T_928) @[Mux.scala 27:72]
    node _T_938 = or(_T_937, _T_929) @[Mux.scala 27:72]
    node _T_939 = or(_T_938, _T_930) @[Mux.scala 27:72]
    node _T_940 = or(_T_939, _T_931) @[Mux.scala 27:72]
    node _T_941 = or(_T_940, _T_932) @[Mux.scala 27:72]
    node _T_942 = or(_T_941, _T_933) @[Mux.scala 27:72]
    wire rvc_src1 : UInt<5> @[Mux.scala 27:72]
    rvc_src1 <= _T_942 @[Mux.scala 27:72]
    node _T_943 = eq(UInt<1>("h0"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_944 = eq(UInt<2>("h3"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_945 = eq(UInt<1>("h1"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_946 = eq(UInt<2>("h2"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_947 = eq(UInt<3>("h4"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_948 = eq(UInt<3>("h5"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_949 = eq(UInt<3>("h6"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_950 = eq(UInt<3>("h7"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_951 = eq(UInt<4>("h8"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_952 = eq(UInt<4>("h9"), rvcSrc2Type) @[LookupTree.scala 24:34]
    node _T_953 = mux(_T_943, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_954 = mux(_T_944, rs, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_955 = mux(_T_945, rt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_956 = mux(_T_946, rd, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_957 = mux(_T_947, rs1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_958 = mux(_T_948, rs2, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_959 = mux(_T_949, rs1p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_960 = mux(_T_950, rs2p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_961 = mux(_T_951, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_962 = mux(_T_952, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_963 = or(_T_953, _T_954) @[Mux.scala 27:72]
    node _T_964 = or(_T_963, _T_955) @[Mux.scala 27:72]
    node _T_965 = or(_T_964, _T_956) @[Mux.scala 27:72]
    node _T_966 = or(_T_965, _T_957) @[Mux.scala 27:72]
    node _T_967 = or(_T_966, _T_958) @[Mux.scala 27:72]
    node _T_968 = or(_T_967, _T_959) @[Mux.scala 27:72]
    node _T_969 = or(_T_968, _T_960) @[Mux.scala 27:72]
    node _T_970 = or(_T_969, _T_961) @[Mux.scala 27:72]
    node _T_971 = or(_T_970, _T_962) @[Mux.scala 27:72]
    wire rvc_src2 : UInt<5> @[Mux.scala 27:72]
    rvc_src2 <= _T_971 @[Mux.scala 27:72]
    node _T_972 = eq(UInt<1>("h0"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_973 = eq(UInt<2>("h3"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_974 = eq(UInt<1>("h1"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_975 = eq(UInt<2>("h2"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_976 = eq(UInt<3>("h4"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_977 = eq(UInt<3>("h5"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_978 = eq(UInt<3>("h6"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_979 = eq(UInt<3>("h7"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_980 = eq(UInt<4>("h8"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_981 = eq(UInt<4>("h9"), rvcDestType) @[LookupTree.scala 24:34]
    node _T_982 = mux(_T_972, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_983 = mux(_T_973, rs, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_984 = mux(_T_974, rt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_985 = mux(_T_975, rd, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_986 = mux(_T_976, rs1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_987 = mux(_T_977, rs2, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_988 = mux(_T_978, rs1p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_989 = mux(_T_979, rs2p, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_990 = mux(_T_980, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_991 = mux(_T_981, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_992 = or(_T_982, _T_983) @[Mux.scala 27:72]
    node _T_993 = or(_T_992, _T_984) @[Mux.scala 27:72]
    node _T_994 = or(_T_993, _T_985) @[Mux.scala 27:72]
    node _T_995 = or(_T_994, _T_986) @[Mux.scala 27:72]
    node _T_996 = or(_T_995, _T_987) @[Mux.scala 27:72]
    node _T_997 = or(_T_996, _T_988) @[Mux.scala 27:72]
    node _T_998 = or(_T_997, _T_989) @[Mux.scala 27:72]
    node _T_999 = or(_T_998, _T_990) @[Mux.scala 27:72]
    node _T_1000 = or(_T_999, _T_991) @[Mux.scala 27:72]
    wire rvc_dest : UInt<5> @[Mux.scala 27:72]
    rvc_dest <= _T_1000 @[Mux.scala 27:72]
    node rfSrc1 = mux(isRVC, rvc_src1, rs) @[IDU.scala 89:19]
    node rfSrc2 = mux(isRVC, rvc_src2, rt) @[IDU.scala 90:19]
    node rfDest = mux(isRVC, rvc_dest, rd) @[IDU.scala 91:19]
    node _T_1001 = eq(src1Type, UInt<1>("h1")) @[IDU.scala 94:43]
    node _T_1002 = mux(_T_1001, UInt<1>("h0"), rfSrc1) @[IDU.scala 94:33]
    io.out.bits.ctrl.rfSrc1 <= _T_1002 @[IDU.scala 94:27]
    node _T_1003 = eq(src2Type, UInt<1>("h0")) @[IDU.scala 95:43]
    node _T_1004 = mux(_T_1003, rfSrc2, UInt<1>("h0")) @[IDU.scala 95:33]
    io.out.bits.ctrl.rfSrc2 <= _T_1004 @[IDU.scala 95:27]
    node _T_1005 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    io.out.bits.ctrl.rfWen <= _T_1005 @[IDU.scala 96:27]
    node _T_1006 = bits(instrType, 2, 2) @[Decode.scala 33:50]
    node _T_1007 = mux(_T_1006, rfDest, UInt<1>("h0")) @[IDU.scala 97:33]
    io.out.bits.ctrl.rfDest <= _T_1007 @[IDU.scala 97:27]
    io.out.bits.data.imm is invalid @[IDU.scala 99:20]
    io.out.bits.data.src2 is invalid @[IDU.scala 99:20]
    io.out.bits.data.src1 is invalid @[IDU.scala 99:20]
    node _T_1008 = bits(io.in.bits.instr, 31, 20) @[IDU.scala 101:29]
    node _T_1009 = bits(_T_1008, 11, 11) @[BitUtils.scala 39:20]
    node _T_1010 = bits(_T_1009, 0, 0) @[Bitwise.scala 72:15]
    node _T_1011 = mux(_T_1010, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1012 = cat(_T_1011, _T_1008) @[Cat.scala 30:58]
    node _T_1013 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 102:33]
    node _T_1014 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 102:48]
    node _T_1015 = cat(_T_1013, _T_1014) @[Cat.scala 30:58]
    node _T_1016 = bits(_T_1015, 11, 11) @[BitUtils.scala 39:20]
    node _T_1017 = bits(_T_1016, 0, 0) @[Bitwise.scala 72:15]
    node _T_1018 = mux(_T_1017, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1019 = cat(_T_1018, _T_1015) @[Cat.scala 30:58]
    node _T_1020 = bits(io.in.bits.instr, 31, 25) @[IDU.scala 103:33]
    node _T_1021 = bits(io.in.bits.instr, 11, 7) @[IDU.scala 103:48]
    node _T_1022 = cat(_T_1020, _T_1021) @[Cat.scala 30:58]
    node _T_1023 = bits(_T_1022, 11, 11) @[BitUtils.scala 39:20]
    node _T_1024 = bits(_T_1023, 0, 0) @[Bitwise.scala 72:15]
    node _T_1025 = mux(_T_1024, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1026 = cat(_T_1025, _T_1022) @[Cat.scala 30:58]
    node _T_1027 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 104:33]
    node _T_1028 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 104:44]
    node _T_1029 = bits(io.in.bits.instr, 30, 25) @[IDU.scala 104:54]
    node _T_1030 = bits(io.in.bits.instr, 11, 8) @[IDU.scala 104:69]
    node lo = cat(_T_1030, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi = cat(_T_1027, _T_1028) @[Cat.scala 30:58]
    node hi = cat(hi_hi, _T_1029) @[Cat.scala 30:58]
    node _T_1031 = cat(hi, lo) @[Cat.scala 30:58]
    node _T_1032 = bits(_T_1031, 12, 12) @[BitUtils.scala 39:20]
    node _T_1033 = bits(_T_1032, 0, 0) @[Bitwise.scala 72:15]
    node _T_1034 = mux(_T_1033, UInt<51>("h7ffffffffffff"), UInt<51>("h0")) @[Bitwise.scala 72:12]
    node _T_1035 = cat(_T_1034, _T_1031) @[Cat.scala 30:58]
    node _T_1036 = bits(io.in.bits.instr, 31, 12) @[IDU.scala 105:33]
    node _T_1037 = cat(_T_1036, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_1038 = bits(_T_1037, 31, 31) @[BitUtils.scala 39:20]
    node _T_1039 = bits(_T_1038, 0, 0) @[Bitwise.scala 72:15]
    node _T_1040 = mux(_T_1039, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_1041 = cat(_T_1040, _T_1037) @[Cat.scala 30:58]
    node _T_1042 = bits(io.in.bits.instr, 31, 31) @[IDU.scala 106:33]
    node _T_1043 = bits(io.in.bits.instr, 19, 12) @[IDU.scala 106:44]
    node _T_1044 = bits(io.in.bits.instr, 20, 20) @[IDU.scala 106:59]
    node _T_1045 = bits(io.in.bits.instr, 30, 21) @[IDU.scala 106:70]
    node lo_1 = cat(_T_1045, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_1042, _T_1043) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, _T_1044) @[Cat.scala 30:58]
    node _T_1046 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_1047 = bits(_T_1046, 20, 20) @[BitUtils.scala 39:20]
    node _T_1048 = bits(_T_1047, 0, 0) @[Bitwise.scala 72:15]
    node _T_1049 = mux(_T_1048, UInt<43>("h7ffffffffff"), UInt<43>("h0")) @[Bitwise.scala 72:12]
    node _T_1050 = cat(_T_1049, _T_1046) @[Cat.scala 30:58]
    node _T_1051 = eq(UInt<3>("h4"), instrType) @[LookupTree.scala 24:34]
    node _T_1052 = eq(UInt<2>("h2"), instrType) @[LookupTree.scala 24:34]
    node _T_1053 = eq(UInt<4>("hf"), instrType) @[LookupTree.scala 24:34]
    node _T_1054 = eq(UInt<1>("h1"), instrType) @[LookupTree.scala 24:34]
    node _T_1055 = eq(UInt<3>("h6"), instrType) @[LookupTree.scala 24:34]
    node _T_1056 = eq(UInt<3>("h7"), instrType) @[LookupTree.scala 24:34]
    node _T_1057 = mux(_T_1051, _T_1012, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1058 = mux(_T_1052, _T_1019, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1059 = mux(_T_1053, _T_1026, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1060 = mux(_T_1054, _T_1035, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1061 = mux(_T_1055, _T_1041, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1062 = mux(_T_1056, _T_1050, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1063 = or(_T_1057, _T_1058) @[Mux.scala 27:72]
    node _T_1064 = or(_T_1063, _T_1059) @[Mux.scala 27:72]
    node _T_1065 = or(_T_1064, _T_1060) @[Mux.scala 27:72]
    node _T_1066 = or(_T_1065, _T_1061) @[Mux.scala 27:72]
    node _T_1067 = or(_T_1066, _T_1062) @[Mux.scala 27:72]
    wire imm : UInt<64> @[Mux.scala 27:72]
    imm <= _T_1067 @[Mux.scala 27:72]
    node _T_1068 = bits(io.in.bits.instr, 3, 2) @[IDU.scala 111:43]
    node _T_1069 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 111:55]
    node _T_1070 = bits(io.in.bits.instr, 6, 4) @[IDU.scala 111:66]
    node lo_2 = cat(_T_1070, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_2 = cat(_T_1068, _T_1069) @[Cat.scala 30:58]
    node _T_1071 = cat(hi_2, lo_2) @[Cat.scala 30:58]
    node _T_1072 = cat(UInt<56>("h0"), _T_1071) @[Cat.scala 30:58]
    node _T_1073 = bits(io.in.bits.instr, 4, 2) @[IDU.scala 112:43]
    node _T_1074 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 112:55]
    node _T_1075 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 112:66]
    node lo_3 = cat(_T_1075, UInt<3>("h0")) @[Cat.scala 30:58]
    node hi_3 = cat(_T_1073, _T_1074) @[Cat.scala 30:58]
    node _T_1076 = cat(hi_3, lo_3) @[Cat.scala 30:58]
    node _T_1077 = cat(UInt<55>("h0"), _T_1076) @[Cat.scala 30:58]
    node _T_1078 = bits(io.in.bits.instr, 8, 7) @[IDU.scala 113:43]
    node _T_1079 = bits(io.in.bits.instr, 12, 9) @[IDU.scala 113:55]
    node hi_4 = cat(_T_1078, _T_1079) @[Cat.scala 30:58]
    node _T_1080 = cat(hi_4, UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_1081 = cat(UInt<56>("h0"), _T_1080) @[Cat.scala 30:58]
    node _T_1082 = bits(io.in.bits.instr, 9, 7) @[IDU.scala 114:43]
    node _T_1083 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 114:55]
    node hi_5 = cat(_T_1082, _T_1083) @[Cat.scala 30:58]
    node _T_1084 = cat(hi_5, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_1085 = cat(UInt<55>("h0"), _T_1084) @[Cat.scala 30:58]
    node _T_1086 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 115:43]
    node _T_1087 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 115:53]
    node _T_1088 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 115:67]
    node lo_4 = cat(_T_1088, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_6 = cat(_T_1086, _T_1087) @[Cat.scala 30:58]
    node _T_1089 = cat(hi_6, lo_4) @[Cat.scala 30:58]
    node _T_1090 = cat(UInt<57>("h0"), _T_1089) @[Cat.scala 30:58]
    node _T_1091 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 116:43]
    node _T_1092 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 116:55]
    node hi_7 = cat(_T_1091, _T_1092) @[Cat.scala 30:58]
    node _T_1093 = cat(hi_7, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_1094 = cat(UInt<56>("h0"), _T_1093) @[Cat.scala 30:58]
    node _T_1095 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 117:43]
    node _T_1096 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 117:53]
    node _T_1097 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 117:67]
    node lo_5 = cat(_T_1097, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_8 = cat(_T_1095, _T_1096) @[Cat.scala 30:58]
    node _T_1098 = cat(hi_8, lo_5) @[Cat.scala 30:58]
    node _T_1099 = cat(UInt<57>("h0"), _T_1098) @[Cat.scala 30:58]
    node _T_1100 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 118:43]
    node _T_1101 = bits(io.in.bits.instr, 12, 10) @[IDU.scala 118:55]
    node hi_9 = cat(_T_1100, _T_1101) @[Cat.scala 30:58]
    node _T_1102 = cat(hi_9, UInt<3>("h0")) @[Cat.scala 30:58]
    node _T_1103 = cat(UInt<56>("h0"), _T_1102) @[Cat.scala 30:58]
    node _T_1104 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 119:43]
    node _T_1105 = bits(io.in.bits.instr, 8, 8) @[IDU.scala 119:54]
    node _T_1106 = bits(io.in.bits.instr, 10, 9) @[IDU.scala 119:64]
    node _T_1107 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 119:77]
    node _T_1108 = bits(io.in.bits.instr, 7, 7) @[IDU.scala 119:87]
    node _T_1109 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 119:97]
    node _T_1110 = bits(io.in.bits.instr, 11, 11) @[IDU.scala 119:107]
    node _T_1111 = bits(io.in.bits.instr, 5, 3) @[IDU.scala 119:118]
    node lo_lo = cat(_T_1111, UInt<1>("h0")) @[Cat.scala 30:58]
    node lo_hi = cat(_T_1109, _T_1110) @[Cat.scala 30:58]
    node lo_6 = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_1107, _T_1108) @[Cat.scala 30:58]
    node hi_hi_hi = cat(_T_1104, _T_1105) @[Cat.scala 30:58]
    node hi_hi_2 = cat(hi_hi_hi, _T_1106) @[Cat.scala 30:58]
    node hi_10 = cat(hi_hi_2, hi_lo) @[Cat.scala 30:58]
    node _T_1112 = cat(hi_10, lo_6) @[Cat.scala 30:58]
    node _T_1113 = bits(_T_1112, 11, 11) @[BitUtils.scala 39:20]
    node _T_1114 = bits(_T_1113, 0, 0) @[Bitwise.scala 72:15]
    node _T_1115 = mux(_T_1114, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node _T_1116 = cat(_T_1115, _T_1112) @[Cat.scala 30:58]
    node _T_1117 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 120:43]
    node _T_1118 = bits(io.in.bits.instr, 6, 5) @[IDU.scala 120:54]
    node _T_1119 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 120:66]
    node _T_1120 = bits(io.in.bits.instr, 11, 10) @[IDU.scala 120:76]
    node _T_1121 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 120:90]
    node lo_hi_1 = cat(_T_1120, _T_1121) @[Cat.scala 30:58]
    node lo_7 = cat(lo_hi_1, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi_3 = cat(_T_1117, _T_1118) @[Cat.scala 30:58]
    node hi_11 = cat(hi_hi_3, _T_1119) @[Cat.scala 30:58]
    node _T_1122 = cat(hi_11, lo_7) @[Cat.scala 30:58]
    node _T_1123 = bits(_T_1122, 8, 8) @[BitUtils.scala 39:20]
    node _T_1124 = bits(_T_1123, 0, 0) @[Bitwise.scala 72:15]
    node _T_1125 = mux(_T_1124, UInt<55>("h7fffffffffffff"), UInt<55>("h0")) @[Bitwise.scala 72:12]
    node _T_1126 = cat(_T_1125, _T_1122) @[Cat.scala 30:58]
    node _T_1127 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 121:43]
    node _T_1128 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 121:54]
    node _T_1129 = cat(_T_1127, _T_1128) @[Cat.scala 30:58]
    node _T_1130 = bits(_T_1129, 5, 5) @[BitUtils.scala 39:20]
    node _T_1131 = bits(_T_1130, 0, 0) @[Bitwise.scala 72:15]
    node _T_1132 = mux(_T_1131, UInt<58>("h3ffffffffffffff"), UInt<58>("h0")) @[Bitwise.scala 72:12]
    node _T_1133 = cat(_T_1132, _T_1129) @[Cat.scala 30:58]
    node _T_1134 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 122:43]
    node _T_1135 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 122:54]
    node hi_12 = cat(_T_1134, _T_1135) @[Cat.scala 30:58]
    node _T_1136 = cat(hi_12, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_1137 = bits(_T_1136, 17, 17) @[BitUtils.scala 39:20]
    node _T_1138 = bits(_T_1137, 0, 0) @[Bitwise.scala 72:15]
    node _T_1139 = mux(_T_1138, UInt<46>("h3fffffffffff"), UInt<46>("h0")) @[Bitwise.scala 72:12]
    node _T_1140 = cat(_T_1139, _T_1136) @[Cat.scala 30:58]
    node _T_1141 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 123:43]
    node _T_1142 = bits(io.in.bits.instr, 6, 2) @[IDU.scala 123:54]
    node _T_1143 = cat(_T_1141, _T_1142) @[Cat.scala 30:58]
    node _T_1144 = bits(_T_1143, 5, 5) @[BitUtils.scala 39:20]
    node _T_1145 = bits(_T_1144, 0, 0) @[Bitwise.scala 72:15]
    node _T_1146 = mux(_T_1145, UInt<58>("h3ffffffffffffff"), UInt<58>("h0")) @[Bitwise.scala 72:12]
    node _T_1147 = cat(_T_1146, _T_1143) @[Cat.scala 30:58]
    node _T_1148 = bits(io.in.bits.instr, 12, 12) @[IDU.scala 124:45]
    node _T_1149 = bits(io.in.bits.instr, 4, 3) @[IDU.scala 124:56]
    node _T_1150 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 124:68]
    node _T_1151 = bits(io.in.bits.instr, 2, 2) @[IDU.scala 124:78]
    node _T_1152 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 124:88]
    node lo_hi_2 = cat(_T_1151, _T_1152) @[Cat.scala 30:58]
    node lo_8 = cat(lo_hi_2, UInt<4>("h0")) @[Cat.scala 30:58]
    node hi_hi_4 = cat(_T_1148, _T_1149) @[Cat.scala 30:58]
    node hi_13 = cat(hi_hi_4, _T_1150) @[Cat.scala 30:58]
    node _T_1153 = cat(hi_13, lo_8) @[Cat.scala 30:58]
    node _T_1154 = bits(_T_1153, 9, 9) @[BitUtils.scala 39:20]
    node _T_1155 = bits(_T_1154, 0, 0) @[Bitwise.scala 72:15]
    node _T_1156 = mux(_T_1155, UInt<54>("h3fffffffffffff"), UInt<54>("h0")) @[Bitwise.scala 72:12]
    node _T_1157 = cat(_T_1156, _T_1153) @[Cat.scala 30:58]
    node _T_1158 = bits(io.in.bits.instr, 10, 7) @[IDU.scala 125:44]
    node _T_1159 = bits(io.in.bits.instr, 12, 11) @[IDU.scala 125:57]
    node _T_1160 = bits(io.in.bits.instr, 5, 5) @[IDU.scala 125:71]
    node _T_1161 = bits(io.in.bits.instr, 6, 6) @[IDU.scala 125:81]
    node lo_9 = cat(_T_1161, UInt<2>("h0")) @[Cat.scala 30:58]
    node hi_hi_5 = cat(_T_1158, _T_1159) @[Cat.scala 30:58]
    node hi_14 = cat(hi_hi_5, _T_1160) @[Cat.scala 30:58]
    node _T_1162 = cat(hi_14, lo_9) @[Cat.scala 30:58]
    node _T_1163 = cat(UInt<54>("h0"), _T_1162) @[Cat.scala 30:58]
    node _T_1164 = eq(UInt<5>("h10"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1165 = eq(UInt<1>("h0"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1166 = eq(UInt<1>("h1"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1167 = eq(UInt<2>("h2"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1168 = eq(UInt<2>("h3"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1169 = eq(UInt<3>("h4"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1170 = eq(UInt<3>("h5"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1171 = eq(UInt<3>("h6"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1172 = eq(UInt<3>("h7"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1173 = eq(UInt<4>("h8"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1174 = eq(UInt<4>("h9"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1175 = eq(UInt<4>("ha"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1176 = eq(UInt<4>("hb"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1177 = eq(UInt<4>("hc"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1178 = eq(UInt<4>("hd"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1179 = eq(UInt<4>("he"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1180 = eq(UInt<4>("hf"), rvcImmType) @[LookupTree.scala 24:34]
    node _T_1181 = mux(_T_1164, UInt<64>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1182 = mux(_T_1165, _T_1072, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1183 = mux(_T_1166, _T_1077, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1184 = mux(_T_1167, _T_1081, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1185 = mux(_T_1168, _T_1085, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1186 = mux(_T_1169, _T_1090, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1187 = mux(_T_1170, _T_1094, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1188 = mux(_T_1171, _T_1099, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1189 = mux(_T_1172, _T_1103, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1190 = mux(_T_1173, _T_1116, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1191 = mux(_T_1174, _T_1126, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1192 = mux(_T_1175, _T_1133, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1193 = mux(_T_1176, _T_1140, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1194 = mux(_T_1177, _T_1147, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1195 = mux(_T_1178, _T_1157, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1196 = mux(_T_1179, _T_1163, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1197 = mux(_T_1180, UInt<64>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1198 = or(_T_1181, _T_1182) @[Mux.scala 27:72]
    node _T_1199 = or(_T_1198, _T_1183) @[Mux.scala 27:72]
    node _T_1200 = or(_T_1199, _T_1184) @[Mux.scala 27:72]
    node _T_1201 = or(_T_1200, _T_1185) @[Mux.scala 27:72]
    node _T_1202 = or(_T_1201, _T_1186) @[Mux.scala 27:72]
    node _T_1203 = or(_T_1202, _T_1187) @[Mux.scala 27:72]
    node _T_1204 = or(_T_1203, _T_1188) @[Mux.scala 27:72]
    node _T_1205 = or(_T_1204, _T_1189) @[Mux.scala 27:72]
    node _T_1206 = or(_T_1205, _T_1190) @[Mux.scala 27:72]
    node _T_1207 = or(_T_1206, _T_1191) @[Mux.scala 27:72]
    node _T_1208 = or(_T_1207, _T_1192) @[Mux.scala 27:72]
    node _T_1209 = or(_T_1208, _T_1193) @[Mux.scala 27:72]
    node _T_1210 = or(_T_1209, _T_1194) @[Mux.scala 27:72]
    node _T_1211 = or(_T_1210, _T_1195) @[Mux.scala 27:72]
    node _T_1212 = or(_T_1211, _T_1196) @[Mux.scala 27:72]
    node _T_1213 = or(_T_1212, _T_1197) @[Mux.scala 27:72]
    wire immrvc : UInt<64> @[Mux.scala 27:72]
    immrvc <= _T_1213 @[Mux.scala 27:72]
    node _T_1214 = mux(isRVC, immrvc, imm) @[IDU.scala 130:31]
    io.out.bits.data.imm <= _T_1214 @[IDU.scala 130:25]
    node _T_1215 = eq(fuType, UInt<1>("h0")) @[IDU.scala 132:16]
    when _T_1215 : @[IDU.scala 132:32]
      node _T_1216 = eq(rfDest, UInt<1>("h1")) @[IDU.scala 133:34]
      node _T_1217 = eq(rfDest, UInt<3>("h5")) @[IDU.scala 133:49]
      node _T_1218 = or(_T_1216, _T_1217) @[IDU.scala 133:42]
      node _T_1219 = eq(fuOpType, UInt<7>("h58")) @[IDU.scala 134:38]
      node _T_1220 = and(_T_1218, _T_1219) @[IDU.scala 134:26]
      when _T_1220 : @[IDU.scala 134:57]
        io.out.bits.ctrl.fuOpType <= UInt<7>("h5c") @[IDU.scala 134:85]
      node _T_1221 = eq(fuOpType, UInt<7>("h5a")) @[IDU.scala 135:20]
      when _T_1221 : @[IDU.scala 135:40]
        node _T_1222 = eq(rfSrc1, UInt<1>("h1")) @[IDU.scala 133:34]
        node _T_1223 = eq(rfSrc1, UInt<3>("h5")) @[IDU.scala 133:49]
        node _T_1224 = or(_T_1222, _T_1223) @[IDU.scala 133:42]
        when _T_1224 : @[IDU.scala 136:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h5e") @[IDU.scala 136:57]
        node _T_1225 = eq(rfDest, UInt<1>("h1")) @[IDU.scala 133:34]
        node _T_1226 = eq(rfDest, UInt<3>("h5")) @[IDU.scala 133:49]
        node _T_1227 = or(_T_1225, _T_1226) @[IDU.scala 133:42]
        when _T_1227 : @[IDU.scala 137:29]
          io.out.bits.ctrl.fuOpType <= UInt<7>("h5c") @[IDU.scala 137:57]
    node _T_1228 = bits(io.in.bits.instr, 6, 0) @[IDU.scala 141:41]
    node _T_1229 = eq(_T_1228, UInt<6>("h37")) @[IDU.scala 141:47]
    node _T_1230 = mux(_T_1229, UInt<1>("h0"), src1Type) @[IDU.scala 141:35]
    io.out.bits.ctrl.src1Type <= _T_1230 @[IDU.scala 141:29]
    io.out.bits.ctrl.src2Type <= src2Type @[IDU.scala 142:29]
    node _T_1231 = bits(io.in.bits.instr, 31, 0) @[IDU.scala 152:43]
    node _T_1232 = and(_T_1231, UInt<15>("h707f")) @[IDU.scala 152:50]
    node _T_1233 = eq(UInt<7>("h6b"), _T_1232) @[IDU.scala 152:50]
    node _T_1234 = and(_T_1233, io.in.valid) @[IDU.scala 152:72]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1234 @[IDU.scala 152:34]
    node _T_1235 = eq(io.out.bits.ctrl.fuType, UInt<2>("h3")) @[IDU.scala 153:78]
    io.out.bits.ctrl.noSpecExec <= _T_1235 @[IDU.scala 153:31]
    node _T_1236 = eq(io.out.bits.ctrl.fuType, UInt<1>("h1")) @[IDU.scala 156:29]
    node _T_1237 = bits(io.out.bits.ctrl.fuOpType, 5, 5) @[LSU.scala 54:38]
    node _T_1238 = and(_T_1236, _T_1237) @[IDU.scala 156:44]
    node _T_1239 = eq(io.out.bits.ctrl.fuType, UInt<3>("h4")) @[IDU.scala 157:48]
    node _T_1240 = or(_T_1238, _T_1239) @[IDU.scala 156:91]
    io.out.bits.ctrl.isBlocked <= _T_1240 @[IDU.scala 154:30]
    io.out.valid <= io.in.valid @[IDU.scala 161:16]
    node _T_1241 = eq(io.in.valid, UInt<1>("h0")) @[IDU.scala 162:18]
    node _T_1242 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1243 = eq(hasIntr, UInt<1>("h0")) @[IDU.scala 162:51]
    node _T_1244 = and(_T_1242, _T_1243) @[IDU.scala 162:48]
    node _T_1245 = or(_T_1241, _T_1244) @[IDU.scala 162:31]
    io.in.ready <= _T_1245 @[IDU.scala 162:15]
    io.out.bits.cf.isBranch <= io.in.bits.isBranch @[IDU.scala 163:18]
    io.out.bits.cf.runahead_checkpoint_id <= io.in.bits.runahead_checkpoint_id @[IDU.scala 163:18]
    io.out.bits.cf.crossPageIPFFix <= io.in.bits.crossPageIPFFix @[IDU.scala 163:18]
    io.out.bits.cf.isRVC <= io.in.bits.isRVC @[IDU.scala 163:18]
    io.out.bits.cf.brIdx <= io.in.bits.brIdx @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[0] <= io.in.bits.intrVec[0] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[1] <= io.in.bits.intrVec[1] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[2] <= io.in.bits.intrVec[2] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[3] <= io.in.bits.intrVec[3] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[4] <= io.in.bits.intrVec[4] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[5] <= io.in.bits.intrVec[5] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[6] <= io.in.bits.intrVec[6] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[7] <= io.in.bits.intrVec[7] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[8] <= io.in.bits.intrVec[8] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[9] <= io.in.bits.intrVec[9] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[10] <= io.in.bits.intrVec[10] @[IDU.scala 163:18]
    io.out.bits.cf.intrVec[11] <= io.in.bits.intrVec[11] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[0] <= io.in.bits.exceptionVec[0] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[1] <= io.in.bits.exceptionVec[1] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[2] <= io.in.bits.exceptionVec[2] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[3] <= io.in.bits.exceptionVec[3] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[4] <= io.in.bits.exceptionVec[4] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[5] <= io.in.bits.exceptionVec[5] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[6] <= io.in.bits.exceptionVec[6] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[7] <= io.in.bits.exceptionVec[7] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[8] <= io.in.bits.exceptionVec[8] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[9] <= io.in.bits.exceptionVec[9] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[10] <= io.in.bits.exceptionVec[10] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[11] <= io.in.bits.exceptionVec[11] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[13] <= io.in.bits.exceptionVec[13] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[14] <= io.in.bits.exceptionVec[14] @[IDU.scala 163:18]
    io.out.bits.cf.exceptionVec[15] <= io.in.bits.exceptionVec[15] @[IDU.scala 163:18]
    io.out.bits.cf.redirect.valid <= io.in.bits.redirect.valid @[IDU.scala 163:18]
    io.out.bits.cf.redirect.rtype <= io.in.bits.redirect.rtype @[IDU.scala 163:18]
    io.out.bits.cf.redirect.target <= io.in.bits.redirect.target @[IDU.scala 163:18]
    io.out.bits.cf.pnpc <= io.in.bits.pnpc @[IDU.scala 163:18]
    io.out.bits.cf.pc <= io.in.bits.pc @[IDU.scala 163:18]
    io.out.bits.cf.instr <= io.in.bits.instr @[IDU.scala 163:18]
    node _T_1246 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_1247 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_1248 = tail(_T_1247, 1) @[GTimer.scala 25:12]
    REG <= _T_1248 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_1249 = and(_T_1246, _WIRE) @[Debug.scala 55:16]
    when _T_1249 : @[Debug.scala 55:31]
      node _T_1250 = asUInt(reset) @[Debug.scala 56:24]
      node _T_1251 = eq(_T_1250, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_1251 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Decoder_1: ", REG) : SIM @[Debug.scala 56:24]
      node _T_1252 = asUInt(reset) @[Debug.scala 57:13]
      node _T_1253 = eq(_T_1252, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_1253 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "issue: pc %x npc %x instr %x\n", io.out.bits.cf.pc, io.out.bits.cf.pnpc, io.out.bits.cf.instr) : SIM_1 @[Debug.scala 57:13]
    wire intrVec : UInt<12>
    intrVec <= UInt<12>("h0")
    node _T_1254 = bits(intrVec, 0, 0) @[IDU.scala 171:38]
    node _T_1255 = bits(intrVec, 1, 1) @[IDU.scala 171:38]
    node _T_1256 = bits(intrVec, 2, 2) @[IDU.scala 171:38]
    node _T_1257 = bits(intrVec, 3, 3) @[IDU.scala 171:38]
    node _T_1258 = bits(intrVec, 4, 4) @[IDU.scala 171:38]
    node _T_1259 = bits(intrVec, 5, 5) @[IDU.scala 171:38]
    node _T_1260 = bits(intrVec, 6, 6) @[IDU.scala 171:38]
    node _T_1261 = bits(intrVec, 7, 7) @[IDU.scala 171:38]
    node _T_1262 = bits(intrVec, 8, 8) @[IDU.scala 171:38]
    node _T_1263 = bits(intrVec, 9, 9) @[IDU.scala 171:38]
    node _T_1264 = bits(intrVec, 10, 10) @[IDU.scala 171:38]
    node _T_1265 = bits(intrVec, 11, 11) @[IDU.scala 171:38]
    io.out.bits.cf.intrVec[0] <= _T_1254 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[1] <= _T_1255 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[2] <= _T_1256 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[3] <= _T_1257 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[4] <= _T_1258 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[5] <= _T_1259 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[6] <= _T_1260 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[7] <= _T_1261 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[8] <= _T_1262 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[9] <= _T_1263 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[10] <= _T_1264 @[IDU.scala 171:68]
    io.out.bits.cf.intrVec[11] <= _T_1265 @[IDU.scala 171:68]
    node _T_1266 = orr(intrVec) @[IDU.scala 172:22]
    hasIntr <= _T_1266 @[IDU.scala 172:11]
    wire vmEnable : UInt<1>
    vmEnable <= UInt<1>("h0")
    io.out.bits.cf.exceptionVec[0] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[1] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[2] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[3] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[4] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[5] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[6] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[7] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[8] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[9] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[10] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[11] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[12] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[13] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[14] <= UInt<1>("h0") @[IDU.scala 177:37]
    io.out.bits.cf.exceptionVec[15] <= UInt<1>("h0") @[IDU.scala 177:37]
    node _T_1267 = eq(instrType, UInt<1>("h0")) @[IDU.scala 178:59]
    node _T_1268 = eq(hasIntr, UInt<1>("h0")) @[IDU.scala 178:73]
    node _T_1269 = and(_T_1267, _T_1268) @[IDU.scala 178:70]
    node _T_1270 = and(_T_1269, io.in.valid) @[IDU.scala 178:83]
    io.out.bits.cf.exceptionVec[2] <= _T_1270 @[IDU.scala 178:45]
    io.out.bits.cf.exceptionVec[12] <= io.in.bits.exceptionVec[12] @[IDU.scala 179:47]
    node _T_1271 = bits(io.in.bits.pc, 38, 32) @[IDU.scala 181:67]
    node _T_1272 = orr(_T_1271) @[IDU.scala 181:94]
    node _T_1273 = eq(vmEnable, UInt<1>("h0")) @[IDU.scala 181:101]
    node _T_1274 = and(_T_1272, _T_1273) @[IDU.scala 181:98]
    io.out.bits.cf.exceptionVec[1] <= _T_1274 @[IDU.scala 181:51]
    node _T_1275 = and(io.in.bits.instr, UInt<15>("h707f")) @[IDU.scala 186:44]
    node _T_1276 = eq(UInt<7>("h6b"), _T_1275) @[IDU.scala 186:44]
    node _T_1277 = and(_T_1276, io.in.valid) @[IDU.scala 186:66]
    io.out.bits.ctrl.isNutCoreTrap <= _T_1277 @[IDU.scala 186:34]
    node _T_1278 = and(io.in.bits.instr, UInt<32>("hffffffff")) @[IDU.scala 187:22]
    node _T_1279 = eq(UInt<29>("h10500073"), _T_1278) @[IDU.scala 187:22]
    node _T_1280 = and(_T_1279, io.in.valid) @[IDU.scala 187:43]
    io.isWFI <= _T_1280 @[IDU.scala 187:12]
    node _T_1281 = eq(UInt<7>("h58"), fuOpType) @[IDU.scala 188:69]
    node _T_1282 = eq(UInt<7>("h5a"), fuOpType) @[IDU.scala 188:69]
    node _T_1283 = eq(UInt<5>("h10"), fuOpType) @[IDU.scala 188:69]
    node _T_1284 = eq(UInt<5>("h11"), fuOpType) @[IDU.scala 188:69]
    node _T_1285 = eq(UInt<5>("h14"), fuOpType) @[IDU.scala 188:69]
    node _T_1286 = eq(UInt<5>("h15"), fuOpType) @[IDU.scala 188:69]
    node _T_1287 = eq(UInt<5>("h16"), fuOpType) @[IDU.scala 188:69]
    node _T_1288 = eq(UInt<5>("h17"), fuOpType) @[IDU.scala 188:69]
    wire _WIRE_1 : UInt<1>[8] @[IDU.scala 188:25]
    _WIRE_1[0] <= _T_1281 @[IDU.scala 188:25]
    _WIRE_1[1] <= _T_1282 @[IDU.scala 188:25]
    _WIRE_1[2] <= _T_1283 @[IDU.scala 188:25]
    _WIRE_1[3] <= _T_1284 @[IDU.scala 188:25]
    _WIRE_1[4] <= _T_1285 @[IDU.scala 188:25]
    _WIRE_1[5] <= _T_1286 @[IDU.scala 188:25]
    _WIRE_1[6] <= _T_1287 @[IDU.scala 188:25]
    _WIRE_1[7] <= _T_1288 @[IDU.scala 188:25]
    node lo_lo_1 = cat(_WIRE_1[1], _WIRE_1[0]) @[IDU.scala 188:84]
    node lo_hi_3 = cat(_WIRE_1[3], _WIRE_1[2]) @[IDU.scala 188:84]
    node lo_10 = cat(lo_hi_3, lo_lo_1) @[IDU.scala 188:84]
    node hi_lo_1 = cat(_WIRE_1[5], _WIRE_1[4]) @[IDU.scala 188:84]
    node hi_hi_6 = cat(_WIRE_1[7], _WIRE_1[6]) @[IDU.scala 188:84]
    node hi_15 = cat(hi_hi_6, hi_lo_1) @[IDU.scala 188:84]
    node _T_1289 = cat(hi_15, lo_10) @[IDU.scala 188:84]
    node _T_1290 = orr(_T_1289) @[IDU.scala 188:91]
    node _T_1291 = eq(fuType, UInt<1>("h0")) @[IDU.scala 188:105]
    node _T_1292 = and(_T_1290, _T_1291) @[IDU.scala 188:95]
    io.isBranch <= _T_1292 @[IDU.scala 188:15]

  extmodule DifftestRunaheadEvent :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip index : UInt<8>, flip valid : UInt<1>, flip branch : UInt<1>, flip may_replay : UInt<1>, flip pc : UInt<64>, flip checkpoint_id : UInt<64>}
    defname = DifftestRunaheadEvent

  module IDU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2]}

    inst decoder1 of Decoder @[IDU.scala 197:25]
    decoder1.clock <= clock
    decoder1.reset <= reset
    inst decoder2 of Decoder_1 @[IDU.scala 198:25]
    decoder2.clock <= clock
    decoder2.reset <= reset
    decoder1.io.in.bits.isBranch <= io.in[0].bits.isBranch @[IDU.scala 199:12]
    decoder1.io.in.bits.runahead_checkpoint_id <= io.in[0].bits.runahead_checkpoint_id @[IDU.scala 199:12]
    decoder1.io.in.bits.crossPageIPFFix <= io.in[0].bits.crossPageIPFFix @[IDU.scala 199:12]
    decoder1.io.in.bits.isRVC <= io.in[0].bits.isRVC @[IDU.scala 199:12]
    decoder1.io.in.bits.brIdx <= io.in[0].bits.brIdx @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[0] <= io.in[0].bits.intrVec[0] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[1] <= io.in[0].bits.intrVec[1] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[2] <= io.in[0].bits.intrVec[2] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[3] <= io.in[0].bits.intrVec[3] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[4] <= io.in[0].bits.intrVec[4] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[5] <= io.in[0].bits.intrVec[5] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[6] <= io.in[0].bits.intrVec[6] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[7] <= io.in[0].bits.intrVec[7] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[8] <= io.in[0].bits.intrVec[8] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[9] <= io.in[0].bits.intrVec[9] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[10] <= io.in[0].bits.intrVec[10] @[IDU.scala 199:12]
    decoder1.io.in.bits.intrVec[11] <= io.in[0].bits.intrVec[11] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[0] <= io.in[0].bits.exceptionVec[0] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[1] <= io.in[0].bits.exceptionVec[1] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[2] <= io.in[0].bits.exceptionVec[2] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[3] <= io.in[0].bits.exceptionVec[3] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[4] <= io.in[0].bits.exceptionVec[4] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[5] <= io.in[0].bits.exceptionVec[5] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[6] <= io.in[0].bits.exceptionVec[6] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[7] <= io.in[0].bits.exceptionVec[7] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[8] <= io.in[0].bits.exceptionVec[8] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[9] <= io.in[0].bits.exceptionVec[9] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[10] <= io.in[0].bits.exceptionVec[10] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[11] <= io.in[0].bits.exceptionVec[11] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[12] <= io.in[0].bits.exceptionVec[12] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[13] <= io.in[0].bits.exceptionVec[13] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[14] <= io.in[0].bits.exceptionVec[14] @[IDU.scala 199:12]
    decoder1.io.in.bits.exceptionVec[15] <= io.in[0].bits.exceptionVec[15] @[IDU.scala 199:12]
    decoder1.io.in.bits.redirect.valid <= io.in[0].bits.redirect.valid @[IDU.scala 199:12]
    decoder1.io.in.bits.redirect.rtype <= io.in[0].bits.redirect.rtype @[IDU.scala 199:12]
    decoder1.io.in.bits.redirect.target <= io.in[0].bits.redirect.target @[IDU.scala 199:12]
    decoder1.io.in.bits.pnpc <= io.in[0].bits.pnpc @[IDU.scala 199:12]
    decoder1.io.in.bits.pc <= io.in[0].bits.pc @[IDU.scala 199:12]
    decoder1.io.in.bits.instr <= io.in[0].bits.instr @[IDU.scala 199:12]
    decoder1.io.in.valid <= io.in[0].valid @[IDU.scala 199:12]
    io.in[0].ready <= decoder1.io.in.ready @[IDU.scala 199:12]
    decoder2.io.in.bits.isBranch <= io.in[1].bits.isBranch @[IDU.scala 200:12]
    decoder2.io.in.bits.runahead_checkpoint_id <= io.in[1].bits.runahead_checkpoint_id @[IDU.scala 200:12]
    decoder2.io.in.bits.crossPageIPFFix <= io.in[1].bits.crossPageIPFFix @[IDU.scala 200:12]
    decoder2.io.in.bits.isRVC <= io.in[1].bits.isRVC @[IDU.scala 200:12]
    decoder2.io.in.bits.brIdx <= io.in[1].bits.brIdx @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[0] <= io.in[1].bits.intrVec[0] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[1] <= io.in[1].bits.intrVec[1] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[2] <= io.in[1].bits.intrVec[2] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[3] <= io.in[1].bits.intrVec[3] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[4] <= io.in[1].bits.intrVec[4] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[5] <= io.in[1].bits.intrVec[5] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[6] <= io.in[1].bits.intrVec[6] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[7] <= io.in[1].bits.intrVec[7] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[8] <= io.in[1].bits.intrVec[8] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[9] <= io.in[1].bits.intrVec[9] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[10] <= io.in[1].bits.intrVec[10] @[IDU.scala 200:12]
    decoder2.io.in.bits.intrVec[11] <= io.in[1].bits.intrVec[11] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[0] <= io.in[1].bits.exceptionVec[0] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[1] <= io.in[1].bits.exceptionVec[1] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[2] <= io.in[1].bits.exceptionVec[2] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[3] <= io.in[1].bits.exceptionVec[3] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[4] <= io.in[1].bits.exceptionVec[4] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[5] <= io.in[1].bits.exceptionVec[5] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[6] <= io.in[1].bits.exceptionVec[6] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[7] <= io.in[1].bits.exceptionVec[7] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[8] <= io.in[1].bits.exceptionVec[8] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[9] <= io.in[1].bits.exceptionVec[9] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[10] <= io.in[1].bits.exceptionVec[10] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[11] <= io.in[1].bits.exceptionVec[11] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[12] <= io.in[1].bits.exceptionVec[12] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[13] <= io.in[1].bits.exceptionVec[13] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[14] <= io.in[1].bits.exceptionVec[14] @[IDU.scala 200:12]
    decoder2.io.in.bits.exceptionVec[15] <= io.in[1].bits.exceptionVec[15] @[IDU.scala 200:12]
    decoder2.io.in.bits.redirect.valid <= io.in[1].bits.redirect.valid @[IDU.scala 200:12]
    decoder2.io.in.bits.redirect.rtype <= io.in[1].bits.redirect.rtype @[IDU.scala 200:12]
    decoder2.io.in.bits.redirect.target <= io.in[1].bits.redirect.target @[IDU.scala 200:12]
    decoder2.io.in.bits.pnpc <= io.in[1].bits.pnpc @[IDU.scala 200:12]
    decoder2.io.in.bits.pc <= io.in[1].bits.pc @[IDU.scala 200:12]
    decoder2.io.in.bits.instr <= io.in[1].bits.instr @[IDU.scala 200:12]
    decoder2.io.in.valid <= io.in[1].valid @[IDU.scala 200:12]
    io.in[1].ready <= decoder2.io.in.ready @[IDU.scala 200:12]
    io.out[0].bits.data.imm <= decoder1.io.out.bits.data.imm @[IDU.scala 201:13]
    io.out[0].bits.data.src2 <= decoder1.io.out.bits.data.src2 @[IDU.scala 201:13]
    io.out[0].bits.data.src1 <= decoder1.io.out.bits.data.src1 @[IDU.scala 201:13]
    io.out[0].bits.ctrl.isBlocked <= decoder1.io.out.bits.ctrl.isBlocked @[IDU.scala 201:13]
    io.out[0].bits.ctrl.noSpecExec <= decoder1.io.out.bits.ctrl.noSpecExec @[IDU.scala 201:13]
    io.out[0].bits.ctrl.isSrc2Forward <= decoder1.io.out.bits.ctrl.isSrc2Forward @[IDU.scala 201:13]
    io.out[0].bits.ctrl.isSrc1Forward <= decoder1.io.out.bits.ctrl.isSrc1Forward @[IDU.scala 201:13]
    io.out[0].bits.ctrl.isNutCoreTrap <= decoder1.io.out.bits.ctrl.isNutCoreTrap @[IDU.scala 201:13]
    io.out[0].bits.ctrl.rfDest <= decoder1.io.out.bits.ctrl.rfDest @[IDU.scala 201:13]
    io.out[0].bits.ctrl.rfWen <= decoder1.io.out.bits.ctrl.rfWen @[IDU.scala 201:13]
    io.out[0].bits.ctrl.rfSrc2 <= decoder1.io.out.bits.ctrl.rfSrc2 @[IDU.scala 201:13]
    io.out[0].bits.ctrl.rfSrc1 <= decoder1.io.out.bits.ctrl.rfSrc1 @[IDU.scala 201:13]
    io.out[0].bits.ctrl.fuOpType <= decoder1.io.out.bits.ctrl.fuOpType @[IDU.scala 201:13]
    io.out[0].bits.ctrl.fuType <= decoder1.io.out.bits.ctrl.fuType @[IDU.scala 201:13]
    io.out[0].bits.ctrl.src2Type <= decoder1.io.out.bits.ctrl.src2Type @[IDU.scala 201:13]
    io.out[0].bits.ctrl.src1Type <= decoder1.io.out.bits.ctrl.src1Type @[IDU.scala 201:13]
    io.out[0].bits.cf.isBranch <= decoder1.io.out.bits.cf.isBranch @[IDU.scala 201:13]
    io.out[0].bits.cf.runahead_checkpoint_id <= decoder1.io.out.bits.cf.runahead_checkpoint_id @[IDU.scala 201:13]
    io.out[0].bits.cf.crossPageIPFFix <= decoder1.io.out.bits.cf.crossPageIPFFix @[IDU.scala 201:13]
    io.out[0].bits.cf.isRVC <= decoder1.io.out.bits.cf.isRVC @[IDU.scala 201:13]
    io.out[0].bits.cf.brIdx <= decoder1.io.out.bits.cf.brIdx @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[0] <= decoder1.io.out.bits.cf.intrVec[0] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[1] <= decoder1.io.out.bits.cf.intrVec[1] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[2] <= decoder1.io.out.bits.cf.intrVec[2] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[3] <= decoder1.io.out.bits.cf.intrVec[3] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[4] <= decoder1.io.out.bits.cf.intrVec[4] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[5] <= decoder1.io.out.bits.cf.intrVec[5] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[6] <= decoder1.io.out.bits.cf.intrVec[6] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[7] <= decoder1.io.out.bits.cf.intrVec[7] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[8] <= decoder1.io.out.bits.cf.intrVec[8] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[9] <= decoder1.io.out.bits.cf.intrVec[9] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[10] <= decoder1.io.out.bits.cf.intrVec[10] @[IDU.scala 201:13]
    io.out[0].bits.cf.intrVec[11] <= decoder1.io.out.bits.cf.intrVec[11] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[0] <= decoder1.io.out.bits.cf.exceptionVec[0] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[1] <= decoder1.io.out.bits.cf.exceptionVec[1] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[2] <= decoder1.io.out.bits.cf.exceptionVec[2] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[3] <= decoder1.io.out.bits.cf.exceptionVec[3] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[4] <= decoder1.io.out.bits.cf.exceptionVec[4] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[5] <= decoder1.io.out.bits.cf.exceptionVec[5] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[6] <= decoder1.io.out.bits.cf.exceptionVec[6] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[7] <= decoder1.io.out.bits.cf.exceptionVec[7] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[8] <= decoder1.io.out.bits.cf.exceptionVec[8] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[9] <= decoder1.io.out.bits.cf.exceptionVec[9] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[10] <= decoder1.io.out.bits.cf.exceptionVec[10] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[11] <= decoder1.io.out.bits.cf.exceptionVec[11] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[12] <= decoder1.io.out.bits.cf.exceptionVec[12] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[13] <= decoder1.io.out.bits.cf.exceptionVec[13] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[14] <= decoder1.io.out.bits.cf.exceptionVec[14] @[IDU.scala 201:13]
    io.out[0].bits.cf.exceptionVec[15] <= decoder1.io.out.bits.cf.exceptionVec[15] @[IDU.scala 201:13]
    io.out[0].bits.cf.redirect.valid <= decoder1.io.out.bits.cf.redirect.valid @[IDU.scala 201:13]
    io.out[0].bits.cf.redirect.rtype <= decoder1.io.out.bits.cf.redirect.rtype @[IDU.scala 201:13]
    io.out[0].bits.cf.redirect.target <= decoder1.io.out.bits.cf.redirect.target @[IDU.scala 201:13]
    io.out[0].bits.cf.pnpc <= decoder1.io.out.bits.cf.pnpc @[IDU.scala 201:13]
    io.out[0].bits.cf.pc <= decoder1.io.out.bits.cf.pc @[IDU.scala 201:13]
    io.out[0].bits.cf.instr <= decoder1.io.out.bits.cf.instr @[IDU.scala 201:13]
    io.out[0].valid <= decoder1.io.out.valid @[IDU.scala 201:13]
    decoder1.io.out.ready <= io.out[0].ready @[IDU.scala 201:13]
    io.out[1].bits.data.imm <= decoder2.io.out.bits.data.imm @[IDU.scala 202:13]
    io.out[1].bits.data.src2 <= decoder2.io.out.bits.data.src2 @[IDU.scala 202:13]
    io.out[1].bits.data.src1 <= decoder2.io.out.bits.data.src1 @[IDU.scala 202:13]
    io.out[1].bits.ctrl.isBlocked <= decoder2.io.out.bits.ctrl.isBlocked @[IDU.scala 202:13]
    io.out[1].bits.ctrl.noSpecExec <= decoder2.io.out.bits.ctrl.noSpecExec @[IDU.scala 202:13]
    io.out[1].bits.ctrl.isSrc2Forward <= decoder2.io.out.bits.ctrl.isSrc2Forward @[IDU.scala 202:13]
    io.out[1].bits.ctrl.isSrc1Forward <= decoder2.io.out.bits.ctrl.isSrc1Forward @[IDU.scala 202:13]
    io.out[1].bits.ctrl.isNutCoreTrap <= decoder2.io.out.bits.ctrl.isNutCoreTrap @[IDU.scala 202:13]
    io.out[1].bits.ctrl.rfDest <= decoder2.io.out.bits.ctrl.rfDest @[IDU.scala 202:13]
    io.out[1].bits.ctrl.rfWen <= decoder2.io.out.bits.ctrl.rfWen @[IDU.scala 202:13]
    io.out[1].bits.ctrl.rfSrc2 <= decoder2.io.out.bits.ctrl.rfSrc2 @[IDU.scala 202:13]
    io.out[1].bits.ctrl.rfSrc1 <= decoder2.io.out.bits.ctrl.rfSrc1 @[IDU.scala 202:13]
    io.out[1].bits.ctrl.fuOpType <= decoder2.io.out.bits.ctrl.fuOpType @[IDU.scala 202:13]
    io.out[1].bits.ctrl.fuType <= decoder2.io.out.bits.ctrl.fuType @[IDU.scala 202:13]
    io.out[1].bits.ctrl.src2Type <= decoder2.io.out.bits.ctrl.src2Type @[IDU.scala 202:13]
    io.out[1].bits.ctrl.src1Type <= decoder2.io.out.bits.ctrl.src1Type @[IDU.scala 202:13]
    io.out[1].bits.cf.isBranch <= decoder2.io.out.bits.cf.isBranch @[IDU.scala 202:13]
    io.out[1].bits.cf.runahead_checkpoint_id <= decoder2.io.out.bits.cf.runahead_checkpoint_id @[IDU.scala 202:13]
    io.out[1].bits.cf.crossPageIPFFix <= decoder2.io.out.bits.cf.crossPageIPFFix @[IDU.scala 202:13]
    io.out[1].bits.cf.isRVC <= decoder2.io.out.bits.cf.isRVC @[IDU.scala 202:13]
    io.out[1].bits.cf.brIdx <= decoder2.io.out.bits.cf.brIdx @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[0] <= decoder2.io.out.bits.cf.intrVec[0] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[1] <= decoder2.io.out.bits.cf.intrVec[1] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[2] <= decoder2.io.out.bits.cf.intrVec[2] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[3] <= decoder2.io.out.bits.cf.intrVec[3] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[4] <= decoder2.io.out.bits.cf.intrVec[4] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[5] <= decoder2.io.out.bits.cf.intrVec[5] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[6] <= decoder2.io.out.bits.cf.intrVec[6] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[7] <= decoder2.io.out.bits.cf.intrVec[7] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[8] <= decoder2.io.out.bits.cf.intrVec[8] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[9] <= decoder2.io.out.bits.cf.intrVec[9] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[10] <= decoder2.io.out.bits.cf.intrVec[10] @[IDU.scala 202:13]
    io.out[1].bits.cf.intrVec[11] <= decoder2.io.out.bits.cf.intrVec[11] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[0] <= decoder2.io.out.bits.cf.exceptionVec[0] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[1] <= decoder2.io.out.bits.cf.exceptionVec[1] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[2] <= decoder2.io.out.bits.cf.exceptionVec[2] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[3] <= decoder2.io.out.bits.cf.exceptionVec[3] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[4] <= decoder2.io.out.bits.cf.exceptionVec[4] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[5] <= decoder2.io.out.bits.cf.exceptionVec[5] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[6] <= decoder2.io.out.bits.cf.exceptionVec[6] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[7] <= decoder2.io.out.bits.cf.exceptionVec[7] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[8] <= decoder2.io.out.bits.cf.exceptionVec[8] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[9] <= decoder2.io.out.bits.cf.exceptionVec[9] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[10] <= decoder2.io.out.bits.cf.exceptionVec[10] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[11] <= decoder2.io.out.bits.cf.exceptionVec[11] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[12] <= decoder2.io.out.bits.cf.exceptionVec[12] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[13] <= decoder2.io.out.bits.cf.exceptionVec[13] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[14] <= decoder2.io.out.bits.cf.exceptionVec[14] @[IDU.scala 202:13]
    io.out[1].bits.cf.exceptionVec[15] <= decoder2.io.out.bits.cf.exceptionVec[15] @[IDU.scala 202:13]
    io.out[1].bits.cf.redirect.valid <= decoder2.io.out.bits.cf.redirect.valid @[IDU.scala 202:13]
    io.out[1].bits.cf.redirect.rtype <= decoder2.io.out.bits.cf.redirect.rtype @[IDU.scala 202:13]
    io.out[1].bits.cf.redirect.target <= decoder2.io.out.bits.cf.redirect.target @[IDU.scala 202:13]
    io.out[1].bits.cf.pnpc <= decoder2.io.out.bits.cf.pnpc @[IDU.scala 202:13]
    io.out[1].bits.cf.pc <= decoder2.io.out.bits.cf.pc @[IDU.scala 202:13]
    io.out[1].bits.cf.instr <= decoder2.io.out.bits.cf.instr @[IDU.scala 202:13]
    io.out[1].valid <= decoder2.io.out.valid @[IDU.scala 202:13]
    decoder2.io.out.ready <= io.out[1].ready @[IDU.scala 202:13]
    io.in[1].ready <= UInt<1>("h0") @[IDU.scala 204:20]
    decoder2.io.in.valid <= UInt<1>("h0") @[IDU.scala 205:26]
    reg checkpoint_id : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IDU.scala 208:30]
    inst runahead of DifftestRunaheadEvent @[IDU.scala 211:24]
    runahead.io is invalid
    runahead.io.clock <= clock @[IDU.scala 212:29]
    runahead.io.coreid <= UInt<1>("h0") @[IDU.scala 213:29]
    node _T = and(io.out[0].ready, io.out[0].valid) @[Decoupled.scala 40:37]
    runahead.io.valid <= _T @[IDU.scala 214:29]
    runahead.io.branch <= decoder1.io.isBranch @[IDU.scala 215:29]
    runahead.io.pc <= io.out[0].bits.cf.pc @[IDU.scala 216:29]
    runahead.io.checkpoint_id <= checkpoint_id @[IDU.scala 217:29]
    node _T_1 = and(runahead.io.valid, runahead.io.branch) @[IDU.scala 218:26]
    when _T_1 : @[IDU.scala 218:49]
      node _T_2 = add(checkpoint_id, UInt<1>("h1")) @[IDU.scala 219:36]
      node _T_3 = tail(_T_2, 1) @[IDU.scala 219:36]
      checkpoint_id <= _T_3 @[IDU.scala 219:19]
    io.out[0].bits.cf.isBranch <= decoder1.io.isBranch @[IDU.scala 221:30]
    io.out[0].bits.cf.runahead_checkpoint_id <= checkpoint_id @[IDU.scala 222:44]
    node _T_4 = or(decoder1.io.isWFI, decoder2.io.isWFI) @[IDU.scala 228:45]

  module FlushableQueue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}}, count : UInt<3>, flip flush : UInt<1>}

    cmem MEM : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>} [4] @[FlushableQueue.scala 23:24]
    reg value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 60:40]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FlushableQueue.scala 26:35]
    node _T = eq(value, value_1) @[FlushableQueue.scala 28:41]
    node _T_1 = eq(REG, UInt<1>("h0")) @[FlushableQueue.scala 29:36]
    node _T_2 = and(_T, _T_1) @[FlushableQueue.scala 29:33]
    node _T_3 = and(_T, REG) @[FlushableQueue.scala 30:32]
    node _T_4 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire _WIRE : UInt<1>
    _WIRE <= _T_4
    node _T_5 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= _T_5
    when _WIRE : @[FlushableQueue.scala 34:17]
      infer mport MPORT = MEM[value], clock @[FlushableQueue.scala 35:8]
      MPORT.isBranch <= io.enq.bits.isBranch @[FlushableQueue.scala 35:24]
      MPORT.runahead_checkpoint_id <= io.enq.bits.runahead_checkpoint_id @[FlushableQueue.scala 35:24]
      MPORT.crossPageIPFFix <= io.enq.bits.crossPageIPFFix @[FlushableQueue.scala 35:24]
      MPORT.isRVC <= io.enq.bits.isRVC @[FlushableQueue.scala 35:24]
      MPORT.brIdx <= io.enq.bits.brIdx @[FlushableQueue.scala 35:24]
      MPORT.intrVec[0] <= io.enq.bits.intrVec[0] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[1] <= io.enq.bits.intrVec[1] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[2] <= io.enq.bits.intrVec[2] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[3] <= io.enq.bits.intrVec[3] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[4] <= io.enq.bits.intrVec[4] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[5] <= io.enq.bits.intrVec[5] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[6] <= io.enq.bits.intrVec[6] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[7] <= io.enq.bits.intrVec[7] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[8] <= io.enq.bits.intrVec[8] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[9] <= io.enq.bits.intrVec[9] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[10] <= io.enq.bits.intrVec[10] @[FlushableQueue.scala 35:24]
      MPORT.intrVec[11] <= io.enq.bits.intrVec[11] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[0] <= io.enq.bits.exceptionVec[0] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[1] <= io.enq.bits.exceptionVec[1] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[2] <= io.enq.bits.exceptionVec[2] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[3] <= io.enq.bits.exceptionVec[3] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[4] <= io.enq.bits.exceptionVec[4] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[5] <= io.enq.bits.exceptionVec[5] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[6] <= io.enq.bits.exceptionVec[6] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[7] <= io.enq.bits.exceptionVec[7] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[8] <= io.enq.bits.exceptionVec[8] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[9] <= io.enq.bits.exceptionVec[9] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[10] <= io.enq.bits.exceptionVec[10] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[11] <= io.enq.bits.exceptionVec[11] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[12] <= io.enq.bits.exceptionVec[12] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[13] <= io.enq.bits.exceptionVec[13] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[14] <= io.enq.bits.exceptionVec[14] @[FlushableQueue.scala 35:24]
      MPORT.exceptionVec[15] <= io.enq.bits.exceptionVec[15] @[FlushableQueue.scala 35:24]
      MPORT.redirect.valid <= io.enq.bits.redirect.valid @[FlushableQueue.scala 35:24]
      MPORT.redirect.rtype <= io.enq.bits.redirect.rtype @[FlushableQueue.scala 35:24]
      MPORT.redirect.target <= io.enq.bits.redirect.target @[FlushableQueue.scala 35:24]
      MPORT.pnpc <= io.enq.bits.pnpc @[FlushableQueue.scala 35:24]
      MPORT.pc <= io.enq.bits.pc @[FlushableQueue.scala 35:24]
      MPORT.instr <= io.enq.bits.instr @[FlushableQueue.scala 35:24]
      node wrap = eq(value, UInt<2>("h3")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    when _WIRE_1 : @[FlushableQueue.scala 38:17]
      node wrap_1 = eq(value_1, UInt<2>("h3")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
    node _T_6 = neq(_WIRE, _WIRE_1) @[FlushableQueue.scala 41:16]
    when _T_6 : @[FlushableQueue.scala 41:28]
      REG <= _WIRE @[FlushableQueue.scala 42:16]
    node _T_7 = eq(_T_2, UInt<1>("h0")) @[FlushableQueue.scala 45:19]
    io.deq.valid <= _T_7 @[FlushableQueue.scala 45:16]
    node _T_8 = eq(_T_3, UInt<1>("h0")) @[FlushableQueue.scala 46:19]
    io.enq.ready <= _T_8 @[FlushableQueue.scala 46:16]
    infer mport MPORT_1 = MEM[value_1], clock @[FlushableQueue.scala 47:21]
    io.deq.bits.isBranch <= MPORT_1.isBranch @[FlushableQueue.scala 47:15]
    io.deq.bits.runahead_checkpoint_id <= MPORT_1.runahead_checkpoint_id @[FlushableQueue.scala 47:15]
    io.deq.bits.crossPageIPFFix <= MPORT_1.crossPageIPFFix @[FlushableQueue.scala 47:15]
    io.deq.bits.isRVC <= MPORT_1.isRVC @[FlushableQueue.scala 47:15]
    io.deq.bits.brIdx <= MPORT_1.brIdx @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[0] <= MPORT_1.intrVec[0] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[1] <= MPORT_1.intrVec[1] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[2] <= MPORT_1.intrVec[2] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[3] <= MPORT_1.intrVec[3] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[4] <= MPORT_1.intrVec[4] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[5] <= MPORT_1.intrVec[5] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[6] <= MPORT_1.intrVec[6] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[7] <= MPORT_1.intrVec[7] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[8] <= MPORT_1.intrVec[8] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[9] <= MPORT_1.intrVec[9] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[10] <= MPORT_1.intrVec[10] @[FlushableQueue.scala 47:15]
    io.deq.bits.intrVec[11] <= MPORT_1.intrVec[11] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[0] <= MPORT_1.exceptionVec[0] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[1] <= MPORT_1.exceptionVec[1] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[2] <= MPORT_1.exceptionVec[2] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[3] <= MPORT_1.exceptionVec[3] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[4] <= MPORT_1.exceptionVec[4] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[5] <= MPORT_1.exceptionVec[5] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[6] <= MPORT_1.exceptionVec[6] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[7] <= MPORT_1.exceptionVec[7] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[8] <= MPORT_1.exceptionVec[8] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[9] <= MPORT_1.exceptionVec[9] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[10] <= MPORT_1.exceptionVec[10] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[11] <= MPORT_1.exceptionVec[11] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[12] <= MPORT_1.exceptionVec[12] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[13] <= MPORT_1.exceptionVec[13] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[14] <= MPORT_1.exceptionVec[14] @[FlushableQueue.scala 47:15]
    io.deq.bits.exceptionVec[15] <= MPORT_1.exceptionVec[15] @[FlushableQueue.scala 47:15]
    io.deq.bits.redirect.valid <= MPORT_1.redirect.valid @[FlushableQueue.scala 47:15]
    io.deq.bits.redirect.rtype <= MPORT_1.redirect.rtype @[FlushableQueue.scala 47:15]
    io.deq.bits.redirect.target <= MPORT_1.redirect.target @[FlushableQueue.scala 47:15]
    io.deq.bits.pnpc <= MPORT_1.pnpc @[FlushableQueue.scala 47:15]
    io.deq.bits.pc <= MPORT_1.pc @[FlushableQueue.scala 47:15]
    io.deq.bits.instr <= MPORT_1.instr @[FlushableQueue.scala 47:15]
    when io.flush : @[FlushableQueue.scala 62:19]
      value <= UInt<1>("h0") @[FlushableQueue.scala 64:21]
      value_1 <= UInt<1>("h0") @[FlushableQueue.scala 65:21]
      REG <= UInt<1>("h0") @[FlushableQueue.scala 67:16]
    node _T_9 = sub(value, value_1) @[FlushableQueue.scala 70:40]
    node _T_10 = tail(_T_9, 1) @[FlushableQueue.scala 70:40]
    node _T_11 = and(REG, _T) @[FlushableQueue.scala 72:32]
    node _T_12 = cat(_T_11, _T_10) @[Cat.scala 30:58]
    io.count <= _T_12 @[FlushableQueue.scala 72:14]

  module Frontend_inorder :
    input clock : Clock
    input reset : Reset
    output io : { imem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2], flushVec : UInt<4>, flip redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, bpFlush : UInt<1>, flip ipf : UInt<1>}

    inst ifu of IFU_inorder @[Frontend.scala 96:20]
    ifu.clock <= clock
    ifu.reset <= reset
    inst ibf of NaiveRVCAlignBuffer @[Frontend.scala 97:19]
    ibf.clock <= clock
    ibf.reset <= reset
    inst idu of IDU @[Frontend.scala 98:20]
    idu.clock <= clock
    idu.reset <= reset
    node _T = bits(ifu.io.flushVec, 0, 0) @[Frontend.scala 107:58]
    inst FlushableQueue of FlushableQueue @[FlushableQueue.scala 94:21]
    FlushableQueue.clock <= clock
    FlushableQueue.reset <= reset
    FlushableQueue.io.enq.valid <= ifu.io.out.valid @[FlushableQueue.scala 95:22]
    FlushableQueue.io.enq.bits.isBranch <= ifu.io.out.bits.isBranch @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.runahead_checkpoint_id <= ifu.io.out.bits.runahead_checkpoint_id @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.crossPageIPFFix <= ifu.io.out.bits.crossPageIPFFix @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.isRVC <= ifu.io.out.bits.isRVC @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.brIdx <= ifu.io.out.bits.brIdx @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[0] <= ifu.io.out.bits.intrVec[0] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[1] <= ifu.io.out.bits.intrVec[1] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[2] <= ifu.io.out.bits.intrVec[2] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[3] <= ifu.io.out.bits.intrVec[3] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[4] <= ifu.io.out.bits.intrVec[4] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[5] <= ifu.io.out.bits.intrVec[5] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[6] <= ifu.io.out.bits.intrVec[6] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[7] <= ifu.io.out.bits.intrVec[7] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[8] <= ifu.io.out.bits.intrVec[8] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[9] <= ifu.io.out.bits.intrVec[9] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[10] <= ifu.io.out.bits.intrVec[10] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.intrVec[11] <= ifu.io.out.bits.intrVec[11] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[0] <= ifu.io.out.bits.exceptionVec[0] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[1] <= ifu.io.out.bits.exceptionVec[1] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[2] <= ifu.io.out.bits.exceptionVec[2] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[3] <= ifu.io.out.bits.exceptionVec[3] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[4] <= ifu.io.out.bits.exceptionVec[4] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[5] <= ifu.io.out.bits.exceptionVec[5] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[6] <= ifu.io.out.bits.exceptionVec[6] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[7] <= ifu.io.out.bits.exceptionVec[7] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[8] <= ifu.io.out.bits.exceptionVec[8] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[9] <= ifu.io.out.bits.exceptionVec[9] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[10] <= ifu.io.out.bits.exceptionVec[10] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[11] <= ifu.io.out.bits.exceptionVec[11] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[12] <= ifu.io.out.bits.exceptionVec[12] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[13] <= ifu.io.out.bits.exceptionVec[13] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[14] <= ifu.io.out.bits.exceptionVec[14] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.exceptionVec[15] <= ifu.io.out.bits.exceptionVec[15] @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.redirect.valid <= ifu.io.out.bits.redirect.valid @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.redirect.rtype <= ifu.io.out.bits.redirect.rtype @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.redirect.target <= ifu.io.out.bits.redirect.target @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.pnpc <= ifu.io.out.bits.pnpc @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.pc <= ifu.io.out.bits.pc @[FlushableQueue.scala 96:21]
    FlushableQueue.io.enq.bits.instr <= ifu.io.out.bits.instr @[FlushableQueue.scala 96:21]
    FlushableQueue.io.flush <= _T @[FlushableQueue.scala 97:18]
    ifu.io.out.ready <= FlushableQueue.io.enq.ready @[FlushableQueue.scala 98:17]
    ibf.io.in.bits.isBranch <= FlushableQueue.io.deq.bits.isBranch @[Frontend.scala 104:11]
    ibf.io.in.bits.runahead_checkpoint_id <= FlushableQueue.io.deq.bits.runahead_checkpoint_id @[Frontend.scala 104:11]
    ibf.io.in.bits.crossPageIPFFix <= FlushableQueue.io.deq.bits.crossPageIPFFix @[Frontend.scala 104:11]
    ibf.io.in.bits.isRVC <= FlushableQueue.io.deq.bits.isRVC @[Frontend.scala 104:11]
    ibf.io.in.bits.brIdx <= FlushableQueue.io.deq.bits.brIdx @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[0] <= FlushableQueue.io.deq.bits.intrVec[0] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[1] <= FlushableQueue.io.deq.bits.intrVec[1] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[2] <= FlushableQueue.io.deq.bits.intrVec[2] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[3] <= FlushableQueue.io.deq.bits.intrVec[3] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[4] <= FlushableQueue.io.deq.bits.intrVec[4] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[5] <= FlushableQueue.io.deq.bits.intrVec[5] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[6] <= FlushableQueue.io.deq.bits.intrVec[6] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[7] <= FlushableQueue.io.deq.bits.intrVec[7] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[8] <= FlushableQueue.io.deq.bits.intrVec[8] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[9] <= FlushableQueue.io.deq.bits.intrVec[9] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[10] <= FlushableQueue.io.deq.bits.intrVec[10] @[Frontend.scala 104:11]
    ibf.io.in.bits.intrVec[11] <= FlushableQueue.io.deq.bits.intrVec[11] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[0] <= FlushableQueue.io.deq.bits.exceptionVec[0] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[1] <= FlushableQueue.io.deq.bits.exceptionVec[1] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[2] <= FlushableQueue.io.deq.bits.exceptionVec[2] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[3] <= FlushableQueue.io.deq.bits.exceptionVec[3] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[4] <= FlushableQueue.io.deq.bits.exceptionVec[4] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[5] <= FlushableQueue.io.deq.bits.exceptionVec[5] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[6] <= FlushableQueue.io.deq.bits.exceptionVec[6] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[7] <= FlushableQueue.io.deq.bits.exceptionVec[7] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[8] <= FlushableQueue.io.deq.bits.exceptionVec[8] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[9] <= FlushableQueue.io.deq.bits.exceptionVec[9] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[10] <= FlushableQueue.io.deq.bits.exceptionVec[10] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[11] <= FlushableQueue.io.deq.bits.exceptionVec[11] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[12] <= FlushableQueue.io.deq.bits.exceptionVec[12] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[13] <= FlushableQueue.io.deq.bits.exceptionVec[13] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[14] <= FlushableQueue.io.deq.bits.exceptionVec[14] @[Frontend.scala 104:11]
    ibf.io.in.bits.exceptionVec[15] <= FlushableQueue.io.deq.bits.exceptionVec[15] @[Frontend.scala 104:11]
    ibf.io.in.bits.redirect.valid <= FlushableQueue.io.deq.bits.redirect.valid @[Frontend.scala 104:11]
    ibf.io.in.bits.redirect.rtype <= FlushableQueue.io.deq.bits.redirect.rtype @[Frontend.scala 104:11]
    ibf.io.in.bits.redirect.target <= FlushableQueue.io.deq.bits.redirect.target @[Frontend.scala 104:11]
    ibf.io.in.bits.pnpc <= FlushableQueue.io.deq.bits.pnpc @[Frontend.scala 104:11]
    ibf.io.in.bits.pc <= FlushableQueue.io.deq.bits.pc @[Frontend.scala 104:11]
    ibf.io.in.bits.instr <= FlushableQueue.io.deq.bits.instr @[Frontend.scala 104:11]
    ibf.io.in.valid <= FlushableQueue.io.deq.valid @[Frontend.scala 104:11]
    FlushableQueue.io.deq.ready <= ibf.io.in.ready @[Frontend.scala 104:11]
    node _T_1 = and(idu.io.out[0].ready, idu.io.out[0].valid) @[Decoupled.scala 40:37]
    node _T_2 = bits(ifu.io.flushVec, 1, 1) @[Frontend.scala 108:82]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T_1 : @[Pipeline.scala 25:25]
      REG <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_3 = and(ibf.io.out.valid, idu.io.in[0].ready) @[Pipeline.scala 26:22]
    when _T_3 : @[Pipeline.scala 26:38]
      REG <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_2 : @[Pipeline.scala 27:20]
      REG <= UInt<1>("h0") @[Pipeline.scala 27:28]
    ibf.io.out.ready <= idu.io.in[0].ready @[Pipeline.scala 29:16]
    node _T_4 = and(ibf.io.out.valid, idu.io.in[0].ready) @[Pipeline.scala 30:51]
    reg r : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when _T_4 : @[Reg.scala 16:19]
      r.isBranch <= ibf.io.out.bits.isBranch @[Reg.scala 16:23]
      r.runahead_checkpoint_id <= ibf.io.out.bits.runahead_checkpoint_id @[Reg.scala 16:23]
      r.crossPageIPFFix <= ibf.io.out.bits.crossPageIPFFix @[Reg.scala 16:23]
      r.isRVC <= ibf.io.out.bits.isRVC @[Reg.scala 16:23]
      r.brIdx <= ibf.io.out.bits.brIdx @[Reg.scala 16:23]
      r.intrVec[0] <= ibf.io.out.bits.intrVec[0] @[Reg.scala 16:23]
      r.intrVec[1] <= ibf.io.out.bits.intrVec[1] @[Reg.scala 16:23]
      r.intrVec[2] <= ibf.io.out.bits.intrVec[2] @[Reg.scala 16:23]
      r.intrVec[3] <= ibf.io.out.bits.intrVec[3] @[Reg.scala 16:23]
      r.intrVec[4] <= ibf.io.out.bits.intrVec[4] @[Reg.scala 16:23]
      r.intrVec[5] <= ibf.io.out.bits.intrVec[5] @[Reg.scala 16:23]
      r.intrVec[6] <= ibf.io.out.bits.intrVec[6] @[Reg.scala 16:23]
      r.intrVec[7] <= ibf.io.out.bits.intrVec[7] @[Reg.scala 16:23]
      r.intrVec[8] <= ibf.io.out.bits.intrVec[8] @[Reg.scala 16:23]
      r.intrVec[9] <= ibf.io.out.bits.intrVec[9] @[Reg.scala 16:23]
      r.intrVec[10] <= ibf.io.out.bits.intrVec[10] @[Reg.scala 16:23]
      r.intrVec[11] <= ibf.io.out.bits.intrVec[11] @[Reg.scala 16:23]
      r.exceptionVec[0] <= ibf.io.out.bits.exceptionVec[0] @[Reg.scala 16:23]
      r.exceptionVec[1] <= ibf.io.out.bits.exceptionVec[1] @[Reg.scala 16:23]
      r.exceptionVec[2] <= ibf.io.out.bits.exceptionVec[2] @[Reg.scala 16:23]
      r.exceptionVec[3] <= ibf.io.out.bits.exceptionVec[3] @[Reg.scala 16:23]
      r.exceptionVec[4] <= ibf.io.out.bits.exceptionVec[4] @[Reg.scala 16:23]
      r.exceptionVec[5] <= ibf.io.out.bits.exceptionVec[5] @[Reg.scala 16:23]
      r.exceptionVec[6] <= ibf.io.out.bits.exceptionVec[6] @[Reg.scala 16:23]
      r.exceptionVec[7] <= ibf.io.out.bits.exceptionVec[7] @[Reg.scala 16:23]
      r.exceptionVec[8] <= ibf.io.out.bits.exceptionVec[8] @[Reg.scala 16:23]
      r.exceptionVec[9] <= ibf.io.out.bits.exceptionVec[9] @[Reg.scala 16:23]
      r.exceptionVec[10] <= ibf.io.out.bits.exceptionVec[10] @[Reg.scala 16:23]
      r.exceptionVec[11] <= ibf.io.out.bits.exceptionVec[11] @[Reg.scala 16:23]
      r.exceptionVec[12] <= ibf.io.out.bits.exceptionVec[12] @[Reg.scala 16:23]
      r.exceptionVec[13] <= ibf.io.out.bits.exceptionVec[13] @[Reg.scala 16:23]
      r.exceptionVec[14] <= ibf.io.out.bits.exceptionVec[14] @[Reg.scala 16:23]
      r.exceptionVec[15] <= ibf.io.out.bits.exceptionVec[15] @[Reg.scala 16:23]
      r.redirect.valid <= ibf.io.out.bits.redirect.valid @[Reg.scala 16:23]
      r.redirect.rtype <= ibf.io.out.bits.redirect.rtype @[Reg.scala 16:23]
      r.redirect.target <= ibf.io.out.bits.redirect.target @[Reg.scala 16:23]
      r.pnpc <= ibf.io.out.bits.pnpc @[Reg.scala 16:23]
      r.pc <= ibf.io.out.bits.pc @[Reg.scala 16:23]
      r.instr <= ibf.io.out.bits.instr @[Reg.scala 16:23]
    idu.io.in[0].bits.isBranch <= r.isBranch @[Pipeline.scala 30:16]
    idu.io.in[0].bits.runahead_checkpoint_id <= r.runahead_checkpoint_id @[Pipeline.scala 30:16]
    idu.io.in[0].bits.crossPageIPFFix <= r.crossPageIPFFix @[Pipeline.scala 30:16]
    idu.io.in[0].bits.isRVC <= r.isRVC @[Pipeline.scala 30:16]
    idu.io.in[0].bits.brIdx <= r.brIdx @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[0] <= r.intrVec[0] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[1] <= r.intrVec[1] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[2] <= r.intrVec[2] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[3] <= r.intrVec[3] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[4] <= r.intrVec[4] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[5] <= r.intrVec[5] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[6] <= r.intrVec[6] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[7] <= r.intrVec[7] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[8] <= r.intrVec[8] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[9] <= r.intrVec[9] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[10] <= r.intrVec[10] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.intrVec[11] <= r.intrVec[11] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[0] <= r.exceptionVec[0] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[1] <= r.exceptionVec[1] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[2] <= r.exceptionVec[2] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[3] <= r.exceptionVec[3] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[4] <= r.exceptionVec[4] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[5] <= r.exceptionVec[5] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[6] <= r.exceptionVec[6] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[7] <= r.exceptionVec[7] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[8] <= r.exceptionVec[8] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[9] <= r.exceptionVec[9] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[10] <= r.exceptionVec[10] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[11] <= r.exceptionVec[11] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[12] <= r.exceptionVec[12] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[13] <= r.exceptionVec[13] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[14] <= r.exceptionVec[14] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.exceptionVec[15] <= r.exceptionVec[15] @[Pipeline.scala 30:16]
    idu.io.in[0].bits.redirect.valid <= r.redirect.valid @[Pipeline.scala 30:16]
    idu.io.in[0].bits.redirect.rtype <= r.redirect.rtype @[Pipeline.scala 30:16]
    idu.io.in[0].bits.redirect.target <= r.redirect.target @[Pipeline.scala 30:16]
    idu.io.in[0].bits.pnpc <= r.pnpc @[Pipeline.scala 30:16]
    idu.io.in[0].bits.pc <= r.pc @[Pipeline.scala 30:16]
    idu.io.in[0].bits.instr <= r.instr @[Pipeline.scala 30:16]
    idu.io.in[0].valid <= REG @[Pipeline.scala 31:17]
    idu.io.in[1].bits.isBranch is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.runahead_checkpoint_id is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.crossPageIPFFix is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.isRVC is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.brIdx is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[0] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[1] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[2] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[3] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[4] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[5] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[6] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[7] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[8] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[9] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[10] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.intrVec[11] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[0] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[1] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[2] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[3] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[4] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[5] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[6] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[7] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[8] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[9] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[10] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[11] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[12] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[13] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[14] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.exceptionVec[15] is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.redirect.valid is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.redirect.rtype is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.redirect.target is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.pnpc is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.pc is invalid @[Frontend.scala 109:16]
    idu.io.in[1].bits.instr is invalid @[Frontend.scala 109:16]
    idu.io.in[1].valid is invalid @[Frontend.scala 109:16]
    idu.io.in[1].ready is invalid @[Frontend.scala 109:16]
    node _T_5 = bits(ifu.io.flushVec, 1, 1) @[Frontend.scala 111:34]
    ibf.io.flush <= _T_5 @[Frontend.scala 111:16]
    io.out[0].bits.data.imm <= idu.io.out[0].bits.data.imm @[Frontend.scala 112:10]
    io.out[0].bits.data.src2 <= idu.io.out[0].bits.data.src2 @[Frontend.scala 112:10]
    io.out[0].bits.data.src1 <= idu.io.out[0].bits.data.src1 @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.isBlocked <= idu.io.out[0].bits.ctrl.isBlocked @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.noSpecExec <= idu.io.out[0].bits.ctrl.noSpecExec @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.isSrc2Forward <= idu.io.out[0].bits.ctrl.isSrc2Forward @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.isSrc1Forward <= idu.io.out[0].bits.ctrl.isSrc1Forward @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.isNutCoreTrap <= idu.io.out[0].bits.ctrl.isNutCoreTrap @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.rfDest <= idu.io.out[0].bits.ctrl.rfDest @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.rfWen <= idu.io.out[0].bits.ctrl.rfWen @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.rfSrc2 <= idu.io.out[0].bits.ctrl.rfSrc2 @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.rfSrc1 <= idu.io.out[0].bits.ctrl.rfSrc1 @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.fuOpType <= idu.io.out[0].bits.ctrl.fuOpType @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.fuType <= idu.io.out[0].bits.ctrl.fuType @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.src2Type <= idu.io.out[0].bits.ctrl.src2Type @[Frontend.scala 112:10]
    io.out[0].bits.ctrl.src1Type <= idu.io.out[0].bits.ctrl.src1Type @[Frontend.scala 112:10]
    io.out[0].bits.cf.isBranch <= idu.io.out[0].bits.cf.isBranch @[Frontend.scala 112:10]
    io.out[0].bits.cf.runahead_checkpoint_id <= idu.io.out[0].bits.cf.runahead_checkpoint_id @[Frontend.scala 112:10]
    io.out[0].bits.cf.crossPageIPFFix <= idu.io.out[0].bits.cf.crossPageIPFFix @[Frontend.scala 112:10]
    io.out[0].bits.cf.isRVC <= idu.io.out[0].bits.cf.isRVC @[Frontend.scala 112:10]
    io.out[0].bits.cf.brIdx <= idu.io.out[0].bits.cf.brIdx @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[0] <= idu.io.out[0].bits.cf.intrVec[0] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[1] <= idu.io.out[0].bits.cf.intrVec[1] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[2] <= idu.io.out[0].bits.cf.intrVec[2] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[3] <= idu.io.out[0].bits.cf.intrVec[3] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[4] <= idu.io.out[0].bits.cf.intrVec[4] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[5] <= idu.io.out[0].bits.cf.intrVec[5] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[6] <= idu.io.out[0].bits.cf.intrVec[6] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[7] <= idu.io.out[0].bits.cf.intrVec[7] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[8] <= idu.io.out[0].bits.cf.intrVec[8] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[9] <= idu.io.out[0].bits.cf.intrVec[9] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[10] <= idu.io.out[0].bits.cf.intrVec[10] @[Frontend.scala 112:10]
    io.out[0].bits.cf.intrVec[11] <= idu.io.out[0].bits.cf.intrVec[11] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[0] <= idu.io.out[0].bits.cf.exceptionVec[0] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[1] <= idu.io.out[0].bits.cf.exceptionVec[1] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[2] <= idu.io.out[0].bits.cf.exceptionVec[2] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[3] <= idu.io.out[0].bits.cf.exceptionVec[3] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[4] <= idu.io.out[0].bits.cf.exceptionVec[4] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[5] <= idu.io.out[0].bits.cf.exceptionVec[5] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[6] <= idu.io.out[0].bits.cf.exceptionVec[6] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[7] <= idu.io.out[0].bits.cf.exceptionVec[7] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[8] <= idu.io.out[0].bits.cf.exceptionVec[8] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[9] <= idu.io.out[0].bits.cf.exceptionVec[9] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[10] <= idu.io.out[0].bits.cf.exceptionVec[10] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[11] <= idu.io.out[0].bits.cf.exceptionVec[11] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[12] <= idu.io.out[0].bits.cf.exceptionVec[12] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[13] <= idu.io.out[0].bits.cf.exceptionVec[13] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[14] <= idu.io.out[0].bits.cf.exceptionVec[14] @[Frontend.scala 112:10]
    io.out[0].bits.cf.exceptionVec[15] <= idu.io.out[0].bits.cf.exceptionVec[15] @[Frontend.scala 112:10]
    io.out[0].bits.cf.redirect.valid <= idu.io.out[0].bits.cf.redirect.valid @[Frontend.scala 112:10]
    io.out[0].bits.cf.redirect.rtype <= idu.io.out[0].bits.cf.redirect.rtype @[Frontend.scala 112:10]
    io.out[0].bits.cf.redirect.target <= idu.io.out[0].bits.cf.redirect.target @[Frontend.scala 112:10]
    io.out[0].bits.cf.pnpc <= idu.io.out[0].bits.cf.pnpc @[Frontend.scala 112:10]
    io.out[0].bits.cf.pc <= idu.io.out[0].bits.cf.pc @[Frontend.scala 112:10]
    io.out[0].bits.cf.instr <= idu.io.out[0].bits.cf.instr @[Frontend.scala 112:10]
    io.out[0].valid <= idu.io.out[0].valid @[Frontend.scala 112:10]
    idu.io.out[0].ready <= io.out[0].ready @[Frontend.scala 112:10]
    io.out[1].bits.data.imm <= idu.io.out[1].bits.data.imm @[Frontend.scala 112:10]
    io.out[1].bits.data.src2 <= idu.io.out[1].bits.data.src2 @[Frontend.scala 112:10]
    io.out[1].bits.data.src1 <= idu.io.out[1].bits.data.src1 @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.isBlocked <= idu.io.out[1].bits.ctrl.isBlocked @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.noSpecExec <= idu.io.out[1].bits.ctrl.noSpecExec @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.isSrc2Forward <= idu.io.out[1].bits.ctrl.isSrc2Forward @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.isSrc1Forward <= idu.io.out[1].bits.ctrl.isSrc1Forward @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.isNutCoreTrap <= idu.io.out[1].bits.ctrl.isNutCoreTrap @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.rfDest <= idu.io.out[1].bits.ctrl.rfDest @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.rfWen <= idu.io.out[1].bits.ctrl.rfWen @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.rfSrc2 <= idu.io.out[1].bits.ctrl.rfSrc2 @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.rfSrc1 <= idu.io.out[1].bits.ctrl.rfSrc1 @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.fuOpType <= idu.io.out[1].bits.ctrl.fuOpType @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.fuType <= idu.io.out[1].bits.ctrl.fuType @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.src2Type <= idu.io.out[1].bits.ctrl.src2Type @[Frontend.scala 112:10]
    io.out[1].bits.ctrl.src1Type <= idu.io.out[1].bits.ctrl.src1Type @[Frontend.scala 112:10]
    io.out[1].bits.cf.isBranch <= idu.io.out[1].bits.cf.isBranch @[Frontend.scala 112:10]
    io.out[1].bits.cf.runahead_checkpoint_id <= idu.io.out[1].bits.cf.runahead_checkpoint_id @[Frontend.scala 112:10]
    io.out[1].bits.cf.crossPageIPFFix <= idu.io.out[1].bits.cf.crossPageIPFFix @[Frontend.scala 112:10]
    io.out[1].bits.cf.isRVC <= idu.io.out[1].bits.cf.isRVC @[Frontend.scala 112:10]
    io.out[1].bits.cf.brIdx <= idu.io.out[1].bits.cf.brIdx @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[0] <= idu.io.out[1].bits.cf.intrVec[0] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[1] <= idu.io.out[1].bits.cf.intrVec[1] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[2] <= idu.io.out[1].bits.cf.intrVec[2] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[3] <= idu.io.out[1].bits.cf.intrVec[3] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[4] <= idu.io.out[1].bits.cf.intrVec[4] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[5] <= idu.io.out[1].bits.cf.intrVec[5] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[6] <= idu.io.out[1].bits.cf.intrVec[6] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[7] <= idu.io.out[1].bits.cf.intrVec[7] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[8] <= idu.io.out[1].bits.cf.intrVec[8] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[9] <= idu.io.out[1].bits.cf.intrVec[9] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[10] <= idu.io.out[1].bits.cf.intrVec[10] @[Frontend.scala 112:10]
    io.out[1].bits.cf.intrVec[11] <= idu.io.out[1].bits.cf.intrVec[11] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[0] <= idu.io.out[1].bits.cf.exceptionVec[0] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[1] <= idu.io.out[1].bits.cf.exceptionVec[1] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[2] <= idu.io.out[1].bits.cf.exceptionVec[2] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[3] <= idu.io.out[1].bits.cf.exceptionVec[3] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[4] <= idu.io.out[1].bits.cf.exceptionVec[4] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[5] <= idu.io.out[1].bits.cf.exceptionVec[5] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[6] <= idu.io.out[1].bits.cf.exceptionVec[6] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[7] <= idu.io.out[1].bits.cf.exceptionVec[7] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[8] <= idu.io.out[1].bits.cf.exceptionVec[8] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[9] <= idu.io.out[1].bits.cf.exceptionVec[9] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[10] <= idu.io.out[1].bits.cf.exceptionVec[10] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[11] <= idu.io.out[1].bits.cf.exceptionVec[11] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[12] <= idu.io.out[1].bits.cf.exceptionVec[12] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[13] <= idu.io.out[1].bits.cf.exceptionVec[13] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[14] <= idu.io.out[1].bits.cf.exceptionVec[14] @[Frontend.scala 112:10]
    io.out[1].bits.cf.exceptionVec[15] <= idu.io.out[1].bits.cf.exceptionVec[15] @[Frontend.scala 112:10]
    io.out[1].bits.cf.redirect.valid <= idu.io.out[1].bits.cf.redirect.valid @[Frontend.scala 112:10]
    io.out[1].bits.cf.redirect.rtype <= idu.io.out[1].bits.cf.redirect.rtype @[Frontend.scala 112:10]
    io.out[1].bits.cf.redirect.target <= idu.io.out[1].bits.cf.redirect.target @[Frontend.scala 112:10]
    io.out[1].bits.cf.pnpc <= idu.io.out[1].bits.cf.pnpc @[Frontend.scala 112:10]
    io.out[1].bits.cf.pc <= idu.io.out[1].bits.cf.pc @[Frontend.scala 112:10]
    io.out[1].bits.cf.instr <= idu.io.out[1].bits.cf.instr @[Frontend.scala 112:10]
    io.out[1].valid <= idu.io.out[1].valid @[Frontend.scala 112:10]
    idu.io.out[1].ready <= io.out[1].ready @[Frontend.scala 112:10]
    ifu.io.redirect.valid <= io.redirect.valid @[Frontend.scala 113:15]
    ifu.io.redirect.rtype <= io.redirect.rtype @[Frontend.scala 113:15]
    ifu.io.redirect.target <= io.redirect.target @[Frontend.scala 113:15]
    io.flushVec <= ifu.io.flushVec @[Frontend.scala 114:15]
    io.bpFlush <= ifu.io.bpFlush @[Frontend.scala 115:14]
    ifu.io.ipf <= io.ipf @[Frontend.scala 116:10]
    ifu.io.imem.resp.bits.user <= io.imem.resp.bits.user @[Frontend.scala 117:11]
    ifu.io.imem.resp.bits.rdata <= io.imem.resp.bits.rdata @[Frontend.scala 117:11]
    ifu.io.imem.resp.bits.cmd <= io.imem.resp.bits.cmd @[Frontend.scala 117:11]
    ifu.io.imem.resp.valid <= io.imem.resp.valid @[Frontend.scala 117:11]
    io.imem.resp.ready <= ifu.io.imem.resp.ready @[Frontend.scala 117:11]
    io.imem.req.bits.user <= ifu.io.imem.req.bits.user @[Frontend.scala 117:11]
    io.imem.req.bits.wdata <= ifu.io.imem.req.bits.wdata @[Frontend.scala 117:11]
    io.imem.req.bits.wmask <= ifu.io.imem.req.bits.wmask @[Frontend.scala 117:11]
    io.imem.req.bits.cmd <= ifu.io.imem.req.bits.cmd @[Frontend.scala 117:11]
    io.imem.req.bits.size <= ifu.io.imem.req.bits.size @[Frontend.scala 117:11]
    io.imem.req.bits.addr <= ifu.io.imem.req.bits.addr @[Frontend.scala 117:11]
    io.imem.req.valid <= ifu.io.imem.req.valid @[Frontend.scala 117:11]
    ifu.io.imem.req.ready <= io.imem.req.ready @[Frontend.scala 117:11]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_6 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_7 = tail(_T_6, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_7 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_8 = and(UInt<1>("h1"), _WIRE) @[Debug.scala 55:16]
    when _T_8 : @[Debug.scala 55:31]
      node _T_9 = asUInt(reset) @[Debug.scala 56:24]
      node _T_10 = eq(_T_9, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_10 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Frontend_inorder: ", REG_1) : SIM @[Debug.scala 56:24]
      node _T_11 = asUInt(reset) @[Debug.scala 57:13]
      node _T_12 = eq(_T_11, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_12 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "------------------------ FRONTEND:------------------------\n") : SIM_1 @[Debug.scala 57:13]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_13 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_14 = tail(_T_13, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_14 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_15 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 55:16]
    when _T_15 : @[Debug.scala 55:31]
      node _T_16 = asUInt(reset) @[Debug.scala 56:24]
      node _T_17 = eq(_T_16, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_17 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Frontend_inorder: ", REG_2) : SIM_2 @[Debug.scala 56:24]
      node _T_18 = asUInt(reset) @[Debug.scala 57:13]
      node _T_19 = eq(_T_18, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_19 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "flush = %b, ifu:(%d,%d), idu:(%d,%d)\n", ifu.io.flushVec, ifu.io.out.valid, ifu.io.out.ready, idu.io.in[0].valid, idu.io.in[0].ready) : SIM_3 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_20 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_21 = tail(_T_20, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_21 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_22 = and(ifu.io.out.valid, _WIRE_2) @[Debug.scala 55:16]
    when _T_22 : @[Debug.scala 55:31]
      node _T_23 = asUInt(reset) @[Debug.scala 56:24]
      node _T_24 = eq(_T_23, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_24 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Frontend_inorder: ", REG_3) : SIM_4 @[Debug.scala 56:24]
      node _T_25 = asUInt(reset) @[Debug.scala 57:13]
      node _T_26 = eq(_T_25, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_26 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "IFU: pc = 0x%x, instr = 0x%x\n", ifu.io.out.bits.pc, ifu.io.out.bits.instr) : SIM_5 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_27 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_28 = tail(_T_27, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_28 @[GTimer.scala 25:7]
    wire _WIRE_3 : UInt<1>
    _WIRE_3 <= UInt<1>("h0")
    node _T_29 = and(idu.io.in[0].valid, _WIRE_3) @[Debug.scala 55:16]
    when _T_29 : @[Debug.scala 55:31]
      node _T_30 = asUInt(reset) @[Debug.scala 56:24]
      node _T_31 = eq(_T_30, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_31 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Frontend_inorder: ", REG_4) : SIM_6 @[Debug.scala 56:24]
      node _T_32 = asUInt(reset) @[Debug.scala 57:13]
      node _T_33 = eq(_T_32, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_33 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "IDU1: pc = 0x%x, instr = 0x%x, pnpc = 0x%x\n", idu.io.in[0].bits.pc, idu.io.in[0].bits.instr, idu.io.in[0].bits.pnpc) : SIM_7 @[Debug.scala 57:13]

  extmodule DifftestArchIntRegState :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip gpr : UInt<64>[32]}
    defname = DifftestArchIntRegState

  module ISU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, flip wb : { rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, flip forward : { valid : UInt<1>, wb : { rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, fuType : UInt<3>}, flip flush : UInt<1>}

    io.out.bits.data.imm is invalid @[ISU.scala 36:15]
    io.out.bits.data.src2 is invalid @[ISU.scala 36:15]
    io.out.bits.data.src1 is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.isBlocked is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.noSpecExec is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.isSrc2Forward is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.isSrc1Forward is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.isNutCoreTrap is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.rfDest is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.rfWen is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.rfSrc2 is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.rfSrc1 is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.fuOpType is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.fuType is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.src2Type is invalid @[ISU.scala 36:15]
    io.out.bits.ctrl.src1Type is invalid @[ISU.scala 36:15]
    io.out.bits.cf.isBranch is invalid @[ISU.scala 36:15]
    io.out.bits.cf.runahead_checkpoint_id is invalid @[ISU.scala 36:15]
    io.out.bits.cf.crossPageIPFFix is invalid @[ISU.scala 36:15]
    io.out.bits.cf.isRVC is invalid @[ISU.scala 36:15]
    io.out.bits.cf.brIdx is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[0] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[1] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[2] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[3] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[4] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[5] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[6] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[7] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[8] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[9] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[10] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.intrVec[11] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[0] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[1] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[2] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[3] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[4] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[5] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[6] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[7] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[8] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[9] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[10] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[11] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[12] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[13] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[14] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.exceptionVec[15] is invalid @[ISU.scala 36:15]
    io.out.bits.cf.redirect.valid is invalid @[ISU.scala 36:15]
    io.out.bits.cf.redirect.rtype is invalid @[ISU.scala 36:15]
    io.out.bits.cf.redirect.target is invalid @[ISU.scala 36:15]
    io.out.bits.cf.pnpc is invalid @[ISU.scala 36:15]
    io.out.bits.cf.pc is invalid @[ISU.scala 36:15]
    io.out.bits.cf.instr is invalid @[ISU.scala 36:15]
    node forwardRfWen = and(io.forward.wb.rfWen, io.forward.valid) @[ISU.scala 43:42]
    node _T = neq(io.forward.fuType, UInt<1>("h0")) @[ISU.scala 44:41]
    node _T_1 = neq(io.forward.fuType, UInt<1>("h1")) @[ISU.scala 44:79]
    node dontForward1 = and(_T, _T_1) @[ISU.scala 44:57]
    node _T_2 = neq(io.in[0].bits.ctrl.rfSrc1, UInt<1>("h0")) @[ISU.scala 41:69]
    node _T_3 = eq(io.in[0].bits.ctrl.rfSrc1, io.forward.wb.rfDest) @[ISU.scala 41:88]
    node _T_4 = and(_T_2, _T_3) @[ISU.scala 41:78]
    node src1DependEX = and(_T_4, forwardRfWen) @[ISU.scala 41:100]
    node _T_5 = neq(io.in[0].bits.ctrl.rfSrc2, UInt<1>("h0")) @[ISU.scala 41:69]
    node _T_6 = eq(io.in[0].bits.ctrl.rfSrc2, io.forward.wb.rfDest) @[ISU.scala 41:88]
    node _T_7 = and(_T_5, _T_6) @[ISU.scala 41:78]
    node src2DependEX = and(_T_7, forwardRfWen) @[ISU.scala 41:100]
    node _T_8 = neq(io.in[0].bits.ctrl.rfSrc1, UInt<1>("h0")) @[ISU.scala 41:69]
    node _T_9 = eq(io.in[0].bits.ctrl.rfSrc1, io.wb.rfDest) @[ISU.scala 41:88]
    node _T_10 = and(_T_8, _T_9) @[ISU.scala 41:78]
    node src1DependWB = and(_T_10, io.wb.rfWen) @[ISU.scala 41:100]
    node _T_11 = neq(io.in[0].bits.ctrl.rfSrc2, UInt<1>("h0")) @[ISU.scala 41:69]
    node _T_12 = eq(io.in[0].bits.ctrl.rfSrc2, io.wb.rfDest) @[ISU.scala 41:88]
    node _T_13 = and(_T_11, _T_12) @[ISU.scala 41:78]
    node src2DependWB = and(_T_13, io.wb.rfWen) @[ISU.scala 41:100]
    node _T_14 = eq(dontForward1, UInt<1>("h0")) @[ISU.scala 50:46]
    node src1ForwardNextCycle = and(src1DependEX, _T_14) @[ISU.scala 50:43]
    node _T_15 = eq(dontForward1, UInt<1>("h0")) @[ISU.scala 51:46]
    node src2ForwardNextCycle = and(src2DependEX, _T_15) @[ISU.scala 51:43]
    node _T_16 = eq(src1DependEX, UInt<1>("h0")) @[ISU.scala 52:55]
    node _T_17 = mux(dontForward1, _T_16, UInt<1>("h1")) @[ISU.scala 52:40]
    node src1Forward = and(src1DependWB, _T_17) @[ISU.scala 52:34]
    node _T_18 = eq(src2DependEX, UInt<1>("h0")) @[ISU.scala 53:55]
    node _T_19 = mux(dontForward1, _T_18, UInt<1>("h1")) @[ISU.scala 53:40]
    node src2Forward = and(src2DependWB, _T_19) @[ISU.scala 53:34]
    reg REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[RF.scala 36:21]
    node _T_20 = dshr(REG, io.in[0].bits.ctrl.rfSrc1) @[RF.scala 37:37]
    node _T_21 = bits(_T_20, 0, 0) @[RF.scala 37:37]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[ISU.scala 56:19]
    node _T_23 = or(_T_22, src1ForwardNextCycle) @[ISU.scala 56:38]
    node src1Ready = or(_T_23, src1Forward) @[ISU.scala 56:62]
    node _T_24 = dshr(REG, io.in[0].bits.ctrl.rfSrc2) @[RF.scala 37:37]
    node _T_25 = bits(_T_24, 0, 0) @[RF.scala 37:37]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[ISU.scala 57:19]
    node _T_27 = or(_T_26, src2ForwardNextCycle) @[ISU.scala 57:38]
    node src2Ready = or(_T_27, src2Forward) @[ISU.scala 57:62]
    node _T_28 = and(io.in[0].valid, src1Ready) @[ISU.scala 58:34]
    node _T_29 = and(_T_28, src2Ready) @[ISU.scala 58:47]
    io.out.valid <= _T_29 @[ISU.scala 58:16]
    cmem MEM : UInt<64> [32] @[RF.scala 30:15]
    node _T_30 = eq(io.in[0].bits.ctrl.src1Type, UInt<1>("h1")) @[ISU.scala 64:34]
    node _T_31 = bits(io.in[0].bits.cf.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_32 = bits(_T_31, 0, 0) @[Bitwise.scala 72:15]
    node _T_33 = mux(_T_32, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
    node _T_34 = cat(_T_33, io.in[0].bits.cf.pc) @[Cat.scala 30:58]
    node _T_35 = eq(src1ForwardNextCycle, UInt<1>("h0")) @[ISU.scala 66:21]
    node _T_36 = and(src1Forward, _T_35) @[ISU.scala 66:18]
    node _T_37 = neq(io.in[0].bits.ctrl.src1Type, UInt<1>("h1")) @[ISU.scala 67:35]
    node _T_38 = eq(src1ForwardNextCycle, UInt<1>("h0")) @[ISU.scala 67:54]
    node _T_39 = and(_T_37, _T_38) @[ISU.scala 67:51]
    node _T_40 = eq(src1Forward, UInt<1>("h0")) @[ISU.scala 67:79]
    node _T_41 = and(_T_39, _T_40) @[ISU.scala 67:76]
    node _T_42 = eq(io.in[0].bits.ctrl.rfSrc1, UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT = MEM[io.in[0].bits.ctrl.rfSrc1], clock @[RF.scala 31:58]
    node _T_43 = mux(_T_42, UInt<1>("h0"), MPORT) @[RF.scala 31:36]
    node _T_44 = mux(_T_30, _T_34, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_45 = mux(src1ForwardNextCycle, io.forward.wb.rfData, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_46 = mux(_T_36, io.wb.rfData, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_47 = mux(_T_41, _T_43, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_48 = or(_T_44, _T_45) @[Mux.scala 27:72]
    node _T_49 = or(_T_48, _T_46) @[Mux.scala 27:72]
    node _T_50 = or(_T_49, _T_47) @[Mux.scala 27:72]
    wire _WIRE : UInt<64> @[Mux.scala 27:72]
    _WIRE <= _T_50 @[Mux.scala 27:72]
    io.out.bits.data.src1 <= _WIRE @[ISU.scala 63:25]
    node _T_51 = neq(io.in[0].bits.ctrl.src2Type, UInt<1>("h0")) @[ISU.scala 70:34]
    node _T_52 = eq(src2ForwardNextCycle, UInt<1>("h0")) @[ISU.scala 72:21]
    node _T_53 = and(src2Forward, _T_52) @[ISU.scala 72:18]
    node _T_54 = eq(io.in[0].bits.ctrl.src2Type, UInt<1>("h0")) @[ISU.scala 73:35]
    node _T_55 = eq(src2ForwardNextCycle, UInt<1>("h0")) @[ISU.scala 73:55]
    node _T_56 = and(_T_54, _T_55) @[ISU.scala 73:52]
    node _T_57 = eq(src2Forward, UInt<1>("h0")) @[ISU.scala 73:80]
    node _T_58 = and(_T_56, _T_57) @[ISU.scala 73:77]
    node _T_59 = eq(io.in[0].bits.ctrl.rfSrc2, UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_1 = MEM[io.in[0].bits.ctrl.rfSrc2], clock @[RF.scala 31:58]
    node _T_60 = mux(_T_59, UInt<1>("h0"), MPORT_1) @[RF.scala 31:36]
    node _T_61 = mux(_T_51, io.in[0].bits.data.imm, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_62 = mux(src2ForwardNextCycle, io.forward.wb.rfData, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_63 = mux(_T_53, io.wb.rfData, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_64 = mux(_T_58, _T_60, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_65 = or(_T_61, _T_62) @[Mux.scala 27:72]
    node _T_66 = or(_T_65, _T_63) @[Mux.scala 27:72]
    node _T_67 = or(_T_66, _T_64) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<64> @[Mux.scala 27:72]
    _WIRE_1 <= _T_67 @[Mux.scala 27:72]
    io.out.bits.data.src2 <= _WIRE_1 @[ISU.scala 69:25]
    io.out.bits.data.imm <= io.in[0].bits.data.imm @[ISU.scala 75:25]
    io.out.bits.cf.isBranch <= io.in[0].bits.cf.isBranch @[ISU.scala 77:18]
    io.out.bits.cf.runahead_checkpoint_id <= io.in[0].bits.cf.runahead_checkpoint_id @[ISU.scala 77:18]
    io.out.bits.cf.crossPageIPFFix <= io.in[0].bits.cf.crossPageIPFFix @[ISU.scala 77:18]
    io.out.bits.cf.isRVC <= io.in[0].bits.cf.isRVC @[ISU.scala 77:18]
    io.out.bits.cf.brIdx <= io.in[0].bits.cf.brIdx @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[0] <= io.in[0].bits.cf.intrVec[0] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[1] <= io.in[0].bits.cf.intrVec[1] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[2] <= io.in[0].bits.cf.intrVec[2] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[3] <= io.in[0].bits.cf.intrVec[3] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[4] <= io.in[0].bits.cf.intrVec[4] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[5] <= io.in[0].bits.cf.intrVec[5] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[6] <= io.in[0].bits.cf.intrVec[6] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[7] <= io.in[0].bits.cf.intrVec[7] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[8] <= io.in[0].bits.cf.intrVec[8] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[9] <= io.in[0].bits.cf.intrVec[9] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[10] <= io.in[0].bits.cf.intrVec[10] @[ISU.scala 77:18]
    io.out.bits.cf.intrVec[11] <= io.in[0].bits.cf.intrVec[11] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[0] <= io.in[0].bits.cf.exceptionVec[0] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[1] <= io.in[0].bits.cf.exceptionVec[1] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[2] <= io.in[0].bits.cf.exceptionVec[2] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[3] <= io.in[0].bits.cf.exceptionVec[3] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[4] <= io.in[0].bits.cf.exceptionVec[4] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[5] <= io.in[0].bits.cf.exceptionVec[5] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[6] <= io.in[0].bits.cf.exceptionVec[6] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[7] <= io.in[0].bits.cf.exceptionVec[7] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[8] <= io.in[0].bits.cf.exceptionVec[8] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[9] <= io.in[0].bits.cf.exceptionVec[9] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[10] <= io.in[0].bits.cf.exceptionVec[10] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[11] <= io.in[0].bits.cf.exceptionVec[11] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[12] <= io.in[0].bits.cf.exceptionVec[12] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[13] <= io.in[0].bits.cf.exceptionVec[13] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[14] <= io.in[0].bits.cf.exceptionVec[14] @[ISU.scala 77:18]
    io.out.bits.cf.exceptionVec[15] <= io.in[0].bits.cf.exceptionVec[15] @[ISU.scala 77:18]
    io.out.bits.cf.redirect.valid <= io.in[0].bits.cf.redirect.valid @[ISU.scala 77:18]
    io.out.bits.cf.redirect.rtype <= io.in[0].bits.cf.redirect.rtype @[ISU.scala 77:18]
    io.out.bits.cf.redirect.target <= io.in[0].bits.cf.redirect.target @[ISU.scala 77:18]
    io.out.bits.cf.pnpc <= io.in[0].bits.cf.pnpc @[ISU.scala 77:18]
    io.out.bits.cf.pc <= io.in[0].bits.cf.pc @[ISU.scala 77:18]
    io.out.bits.cf.instr <= io.in[0].bits.cf.instr @[ISU.scala 77:18]
    io.out.bits.ctrl.isBlocked <= io.in[0].bits.ctrl.isBlocked @[ISU.scala 78:20]
    io.out.bits.ctrl.noSpecExec <= io.in[0].bits.ctrl.noSpecExec @[ISU.scala 78:20]
    io.out.bits.ctrl.isSrc2Forward <= io.in[0].bits.ctrl.isSrc2Forward @[ISU.scala 78:20]
    io.out.bits.ctrl.isSrc1Forward <= io.in[0].bits.ctrl.isSrc1Forward @[ISU.scala 78:20]
    io.out.bits.ctrl.isNutCoreTrap <= io.in[0].bits.ctrl.isNutCoreTrap @[ISU.scala 78:20]
    io.out.bits.ctrl.rfDest <= io.in[0].bits.ctrl.rfDest @[ISU.scala 78:20]
    io.out.bits.ctrl.rfWen <= io.in[0].bits.ctrl.rfWen @[ISU.scala 78:20]
    io.out.bits.ctrl.rfSrc2 <= io.in[0].bits.ctrl.rfSrc2 @[ISU.scala 78:20]
    io.out.bits.ctrl.rfSrc1 <= io.in[0].bits.ctrl.rfSrc1 @[ISU.scala 78:20]
    io.out.bits.ctrl.fuOpType <= io.in[0].bits.ctrl.fuOpType @[ISU.scala 78:20]
    io.out.bits.ctrl.fuType <= io.in[0].bits.ctrl.fuType @[ISU.scala 78:20]
    io.out.bits.ctrl.src2Type <= io.in[0].bits.ctrl.src2Type @[ISU.scala 78:20]
    io.out.bits.ctrl.src1Type <= io.in[0].bits.ctrl.src1Type @[ISU.scala 78:20]
    io.out.bits.ctrl.isSrc1Forward <= src1ForwardNextCycle @[ISU.scala 79:34]
    io.out.bits.ctrl.isSrc2Forward <= src2ForwardNextCycle @[ISU.scala 80:34]
    when io.wb.rfWen : @[ISU.scala 83:22]
      infer mport MPORT_2 = MEM[io.wb.rfDest], clock @[RF.scala 32:43]
      node _T_68 = bits(io.wb.rfData, 63, 0) @[RF.scala 32:57]
      MPORT_2 <= _T_68 @[RF.scala 32:50]
    node _T_69 = neq(io.wb.rfDest, UInt<1>("h0")) @[ISU.scala 41:69]
    node _T_70 = eq(io.wb.rfDest, io.forward.wb.rfDest) @[ISU.scala 41:88]
    node _T_71 = and(_T_69, _T_70) @[ISU.scala 41:78]
    node _T_72 = and(_T_71, forwardRfWen) @[ISU.scala 41:100]
    node _T_73 = eq(_T_72, UInt<1>("h0")) @[ISU.scala 85:40]
    node _T_74 = and(io.wb.rfWen, _T_73) @[ISU.scala 85:37]
    node _T_75 = dshl(UInt<32>("h1"), io.wb.rfDest) @[RF.scala 38:39]
    node _T_76 = bits(_T_75, 31, 0) @[RF.scala 38:46]
    node wbClearMask = mux(_T_74, _T_76, UInt<32>("h0")) @[ISU.scala 85:24]
    node _T_77 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_78 = dshl(UInt<32>("h1"), io.in[0].bits.ctrl.rfDest) @[RF.scala 38:39]
    node _T_79 = bits(_T_78, 31, 0) @[RF.scala 38:46]
    node isuFireSetMask = mux(_T_77, _T_79, UInt<1>("h0")) @[ISU.scala 87:27]
    when io.flush : @[ISU.scala 88:19]
      node _T_80 = mux(UInt<1>("h1"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
      node _T_81 = not(_T_80) @[RF.scala 44:26]
      node _T_82 = and(REG, _T_81) @[RF.scala 44:24]
      node _T_83 = or(_T_82, UInt<1>("h0")) @[RF.scala 44:38]
      node _T_84 = bits(_T_83, 31, 1) @[RF.scala 44:48]
      node _T_85 = cat(_T_84, UInt<1>("h0")) @[Cat.scala 30:58]
      REG <= _T_85 @[RF.scala 44:10]
    else :
      node _T_86 = not(wbClearMask) @[RF.scala 44:26]
      node _T_87 = and(REG, _T_86) @[RF.scala 44:24]
      node _T_88 = or(_T_87, isuFireSetMask) @[RF.scala 44:38]
      node _T_89 = bits(_T_88, 31, 1) @[RF.scala 44:48]
      node _T_90 = cat(_T_89, UInt<1>("h0")) @[Cat.scala 30:58]
      REG <= _T_90 @[RF.scala 44:10]
    node _T_91 = eq(io.in[0].valid, UInt<1>("h0")) @[ISU.scala 91:21]
    node _T_92 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_93 = or(_T_91, _T_92) @[ISU.scala 91:37]
    io.in[0].ready <= _T_93 @[ISU.scala 91:18]
    io.in[1].ready <= UInt<1>("h0") @[ISU.scala 92:18]
    node _T_94 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_95 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_96 = tail(_T_95, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_96 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_97 = and(_T_94, _WIRE_2) @[Debug.scala 55:16]
    when _T_97 : @[Debug.scala 55:31]
      node _T_98 = asUInt(reset) @[Debug.scala 56:24]
      node _T_99 = eq(_T_98, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_99 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ISU: ", REG_1) : SIM @[Debug.scala 56:24]
      node _T_100 = asUInt(reset) @[Debug.scala 57:13]
      node _T_101 = eq(_T_100, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_101 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "issue: pc %x npc %x instr %x src1 %x src2 %x imm %x\n", io.out.bits.cf.pc, io.out.bits.cf.pnpc, io.out.bits.cf.instr, io.out.bits.data.src1, io.out.bits.data.src2, io.out.bits.data.imm) : SIM_1 @[Debug.scala 57:13]
    node _T_102 = eq(io.out.valid, UInt<1>("h0")) @[ISU.scala 97:43]
    node _T_103 = and(io.in[0].valid, _T_102) @[ISU.scala 97:40]
    node _T_104 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_105 = eq(_T_104, UInt<1>("h0")) @[ISU.scala 98:41]
    node _T_106 = and(io.out.valid, _T_105) @[ISU.scala 98:38]
    node _T_107 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    inst DifftestArchIntRegState of DifftestArchIntRegState @[ISU.scala 102:26]
    DifftestArchIntRegState.io is invalid
    DifftestArchIntRegState.io.clock <= clock @[ISU.scala 103:24]
    DifftestArchIntRegState.io.coreid <= UInt<1>("h0") @[ISU.scala 104:24]
    node _T_108 = eq(UInt<1>("h0"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_3 = MEM[UInt<1>("h0")], clock @[RF.scala 31:58]
    node _T_109 = mux(_T_108, UInt<1>("h0"), MPORT_3) @[RF.scala 31:36]
    node _T_110 = eq(UInt<1>("h1"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_4 = MEM[UInt<1>("h1")], clock @[RF.scala 31:58]
    node _T_111 = mux(_T_110, UInt<1>("h0"), MPORT_4) @[RF.scala 31:36]
    node _T_112 = eq(UInt<2>("h2"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_5 = MEM[UInt<2>("h2")], clock @[RF.scala 31:58]
    node _T_113 = mux(_T_112, UInt<1>("h0"), MPORT_5) @[RF.scala 31:36]
    node _T_114 = eq(UInt<2>("h3"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_6 = MEM[UInt<2>("h3")], clock @[RF.scala 31:58]
    node _T_115 = mux(_T_114, UInt<1>("h0"), MPORT_6) @[RF.scala 31:36]
    node _T_116 = eq(UInt<3>("h4"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_7 = MEM[UInt<3>("h4")], clock @[RF.scala 31:58]
    node _T_117 = mux(_T_116, UInt<1>("h0"), MPORT_7) @[RF.scala 31:36]
    node _T_118 = eq(UInt<3>("h5"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_8 = MEM[UInt<3>("h5")], clock @[RF.scala 31:58]
    node _T_119 = mux(_T_118, UInt<1>("h0"), MPORT_8) @[RF.scala 31:36]
    node _T_120 = eq(UInt<3>("h6"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_9 = MEM[UInt<3>("h6")], clock @[RF.scala 31:58]
    node _T_121 = mux(_T_120, UInt<1>("h0"), MPORT_9) @[RF.scala 31:36]
    node _T_122 = eq(UInt<3>("h7"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_10 = MEM[UInt<3>("h7")], clock @[RF.scala 31:58]
    node _T_123 = mux(_T_122, UInt<1>("h0"), MPORT_10) @[RF.scala 31:36]
    node _T_124 = eq(UInt<4>("h8"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_11 = MEM[UInt<4>("h8")], clock @[RF.scala 31:58]
    node _T_125 = mux(_T_124, UInt<1>("h0"), MPORT_11) @[RF.scala 31:36]
    node _T_126 = eq(UInt<4>("h9"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_12 = MEM[UInt<4>("h9")], clock @[RF.scala 31:58]
    node _T_127 = mux(_T_126, UInt<1>("h0"), MPORT_12) @[RF.scala 31:36]
    node _T_128 = eq(UInt<4>("ha"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_13 = MEM[UInt<4>("ha")], clock @[RF.scala 31:58]
    node _T_129 = mux(_T_128, UInt<1>("h0"), MPORT_13) @[RF.scala 31:36]
    node _T_130 = eq(UInt<4>("hb"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_14 = MEM[UInt<4>("hb")], clock @[RF.scala 31:58]
    node _T_131 = mux(_T_130, UInt<1>("h0"), MPORT_14) @[RF.scala 31:36]
    node _T_132 = eq(UInt<4>("hc"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_15 = MEM[UInt<4>("hc")], clock @[RF.scala 31:58]
    node _T_133 = mux(_T_132, UInt<1>("h0"), MPORT_15) @[RF.scala 31:36]
    node _T_134 = eq(UInt<4>("hd"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_16 = MEM[UInt<4>("hd")], clock @[RF.scala 31:58]
    node _T_135 = mux(_T_134, UInt<1>("h0"), MPORT_16) @[RF.scala 31:36]
    node _T_136 = eq(UInt<4>("he"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_17 = MEM[UInt<4>("he")], clock @[RF.scala 31:58]
    node _T_137 = mux(_T_136, UInt<1>("h0"), MPORT_17) @[RF.scala 31:36]
    node _T_138 = eq(UInt<4>("hf"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_18 = MEM[UInt<4>("hf")], clock @[RF.scala 31:58]
    node _T_139 = mux(_T_138, UInt<1>("h0"), MPORT_18) @[RF.scala 31:36]
    node _T_140 = eq(UInt<5>("h10"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_19 = MEM[UInt<5>("h10")], clock @[RF.scala 31:58]
    node _T_141 = mux(_T_140, UInt<1>("h0"), MPORT_19) @[RF.scala 31:36]
    node _T_142 = eq(UInt<5>("h11"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_20 = MEM[UInt<5>("h11")], clock @[RF.scala 31:58]
    node _T_143 = mux(_T_142, UInt<1>("h0"), MPORT_20) @[RF.scala 31:36]
    node _T_144 = eq(UInt<5>("h12"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_21 = MEM[UInt<5>("h12")], clock @[RF.scala 31:58]
    node _T_145 = mux(_T_144, UInt<1>("h0"), MPORT_21) @[RF.scala 31:36]
    node _T_146 = eq(UInt<5>("h13"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_22 = MEM[UInt<5>("h13")], clock @[RF.scala 31:58]
    node _T_147 = mux(_T_146, UInt<1>("h0"), MPORT_22) @[RF.scala 31:36]
    node _T_148 = eq(UInt<5>("h14"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_23 = MEM[UInt<5>("h14")], clock @[RF.scala 31:58]
    node _T_149 = mux(_T_148, UInt<1>("h0"), MPORT_23) @[RF.scala 31:36]
    node _T_150 = eq(UInt<5>("h15"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_24 = MEM[UInt<5>("h15")], clock @[RF.scala 31:58]
    node _T_151 = mux(_T_150, UInt<1>("h0"), MPORT_24) @[RF.scala 31:36]
    node _T_152 = eq(UInt<5>("h16"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_25 = MEM[UInt<5>("h16")], clock @[RF.scala 31:58]
    node _T_153 = mux(_T_152, UInt<1>("h0"), MPORT_25) @[RF.scala 31:36]
    node _T_154 = eq(UInt<5>("h17"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_26 = MEM[UInt<5>("h17")], clock @[RF.scala 31:58]
    node _T_155 = mux(_T_154, UInt<1>("h0"), MPORT_26) @[RF.scala 31:36]
    node _T_156 = eq(UInt<5>("h18"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_27 = MEM[UInt<5>("h18")], clock @[RF.scala 31:58]
    node _T_157 = mux(_T_156, UInt<1>("h0"), MPORT_27) @[RF.scala 31:36]
    node _T_158 = eq(UInt<5>("h19"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_28 = MEM[UInt<5>("h19")], clock @[RF.scala 31:58]
    node _T_159 = mux(_T_158, UInt<1>("h0"), MPORT_28) @[RF.scala 31:36]
    node _T_160 = eq(UInt<5>("h1a"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_29 = MEM[UInt<5>("h1a")], clock @[RF.scala 31:58]
    node _T_161 = mux(_T_160, UInt<1>("h0"), MPORT_29) @[RF.scala 31:36]
    node _T_162 = eq(UInt<5>("h1b"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_30 = MEM[UInt<5>("h1b")], clock @[RF.scala 31:58]
    node _T_163 = mux(_T_162, UInt<1>("h0"), MPORT_30) @[RF.scala 31:36]
    node _T_164 = eq(UInt<5>("h1c"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_31 = MEM[UInt<5>("h1c")], clock @[RF.scala 31:58]
    node _T_165 = mux(_T_164, UInt<1>("h0"), MPORT_31) @[RF.scala 31:36]
    node _T_166 = eq(UInt<5>("h1d"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_32 = MEM[UInt<5>("h1d")], clock @[RF.scala 31:58]
    node _T_167 = mux(_T_166, UInt<1>("h0"), MPORT_32) @[RF.scala 31:36]
    node _T_168 = eq(UInt<5>("h1e"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_33 = MEM[UInt<5>("h1e")], clock @[RF.scala 31:58]
    node _T_169 = mux(_T_168, UInt<1>("h0"), MPORT_33) @[RF.scala 31:36]
    node _T_170 = eq(UInt<5>("h1f"), UInt<1>("h0")) @[RF.scala 31:42]
    infer mport MPORT_34 = MEM[UInt<5>("h1f")], clock @[RF.scala 31:58]
    node _T_171 = mux(_T_170, UInt<1>("h0"), MPORT_34) @[RF.scala 31:36]
    wire _WIRE_3 : UInt<64>[32] @[ISU.scala 105:34]
    _WIRE_3[0] <= _T_109 @[ISU.scala 105:34]
    _WIRE_3[1] <= _T_111 @[ISU.scala 105:34]
    _WIRE_3[2] <= _T_113 @[ISU.scala 105:34]
    _WIRE_3[3] <= _T_115 @[ISU.scala 105:34]
    _WIRE_3[4] <= _T_117 @[ISU.scala 105:34]
    _WIRE_3[5] <= _T_119 @[ISU.scala 105:34]
    _WIRE_3[6] <= _T_121 @[ISU.scala 105:34]
    _WIRE_3[7] <= _T_123 @[ISU.scala 105:34]
    _WIRE_3[8] <= _T_125 @[ISU.scala 105:34]
    _WIRE_3[9] <= _T_127 @[ISU.scala 105:34]
    _WIRE_3[10] <= _T_129 @[ISU.scala 105:34]
    _WIRE_3[11] <= _T_131 @[ISU.scala 105:34]
    _WIRE_3[12] <= _T_133 @[ISU.scala 105:34]
    _WIRE_3[13] <= _T_135 @[ISU.scala 105:34]
    _WIRE_3[14] <= _T_137 @[ISU.scala 105:34]
    _WIRE_3[15] <= _T_139 @[ISU.scala 105:34]
    _WIRE_3[16] <= _T_141 @[ISU.scala 105:34]
    _WIRE_3[17] <= _T_143 @[ISU.scala 105:34]
    _WIRE_3[18] <= _T_145 @[ISU.scala 105:34]
    _WIRE_3[19] <= _T_147 @[ISU.scala 105:34]
    _WIRE_3[20] <= _T_149 @[ISU.scala 105:34]
    _WIRE_3[21] <= _T_151 @[ISU.scala 105:34]
    _WIRE_3[22] <= _T_153 @[ISU.scala 105:34]
    _WIRE_3[23] <= _T_155 @[ISU.scala 105:34]
    _WIRE_3[24] <= _T_157 @[ISU.scala 105:34]
    _WIRE_3[25] <= _T_159 @[ISU.scala 105:34]
    _WIRE_3[26] <= _T_161 @[ISU.scala 105:34]
    _WIRE_3[27] <= _T_163 @[ISU.scala 105:34]
    _WIRE_3[28] <= _T_165 @[ISU.scala 105:34]
    _WIRE_3[29] <= _T_167 @[ISU.scala 105:34]
    _WIRE_3[30] <= _T_169 @[ISU.scala 105:34]
    _WIRE_3[31] <= _T_171 @[ISU.scala 105:34]
    DifftestArchIntRegState.io.gpr[0] <= _WIRE_3[0] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[1] <= _WIRE_3[1] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[2] <= _WIRE_3[2] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[3] <= _WIRE_3[3] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[4] <= _WIRE_3[4] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[5] <= _WIRE_3[5] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[6] <= _WIRE_3[6] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[7] <= _WIRE_3[7] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[8] <= _WIRE_3[8] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[9] <= _WIRE_3[9] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[10] <= _WIRE_3[10] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[11] <= _WIRE_3[11] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[12] <= _WIRE_3[12] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[13] <= _WIRE_3[13] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[14] <= _WIRE_3[14] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[15] <= _WIRE_3[15] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[16] <= _WIRE_3[16] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[17] <= _WIRE_3[17] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[18] <= _WIRE_3[18] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[19] <= _WIRE_3[19] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[20] <= _WIRE_3[20] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[21] <= _WIRE_3[21] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[22] <= _WIRE_3[22] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[23] <= _WIRE_3[23] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[24] <= _WIRE_3[24] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[25] <= _WIRE_3[25] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[26] <= _WIRE_3[26] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[27] <= _WIRE_3[27] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[28] <= _WIRE_3[28] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[29] <= _WIRE_3[29] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[30] <= _WIRE_3[30] @[ISU.scala 105:24]
    DifftestArchIntRegState.io.gpr[31] <= _WIRE_3[31] @[ISU.scala 105:24]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip cfIn : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flip offset : UInt<64>}

    node _T = bits(io.in.bits.func, 6, 6) @[ALU.scala 60:31]
    node isAdderSub = eq(_T, UInt<1>("h0")) @[ALU.scala 87:20]
    node _T_1 = bits(isAdderSub, 0, 0) @[Bitwise.scala 72:15]
    node _T_2 = mux(_T_1, UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_3 = xor(io.in.bits.src2, _T_2) @[ALU.scala 88:33]
    node _T_4 = add(io.in.bits.src1, _T_3) @[ALU.scala 88:24]
    node _T_5 = add(_T_4, isAdderSub) @[ALU.scala 88:60]
    node adderRes = tail(_T_5, 1) @[ALU.scala 88:60]
    node xorRes = xor(io.in.bits.src1, io.in.bits.src2) @[ALU.scala 89:21]
    node _T_6 = bits(adderRes, 64, 64) @[ALU.scala 90:23]
    node sltu = eq(_T_6, UInt<1>("h0")) @[ALU.scala 90:14]
    node _T_7 = bits(xorRes, 63, 63) @[ALU.scala 91:19]
    node slt = xor(_T_7, sltu) @[ALU.scala 91:28]
    node _T_8 = bits(io.in.bits.src1, 63, 0) @[ALU.scala 93:44]
    node _T_9 = bits(io.in.bits.src1, 31, 0) @[ALU.scala 94:35]
    node _T_10 = cat(UInt<32>("h0"), _T_9) @[Cat.scala 30:58]
    node _T_11 = bits(io.in.bits.src1, 31, 0) @[ALU.scala 95:35]
    node _T_12 = bits(_T_11, 31, 31) @[BitUtils.scala 39:20]
    node _T_13 = bits(_T_12, 0, 0) @[Bitwise.scala 72:15]
    node _T_14 = mux(_T_13, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_15 = cat(_T_14, _T_11) @[Cat.scala 30:58]
    node _T_16 = eq(UInt<6>("h25"), io.in.bits.func) @[Mux.scala 80:60]
    node _T_17 = mux(_T_16, _T_10, _T_8) @[Mux.scala 80:57]
    node _T_18 = eq(UInt<6>("h2d"), io.in.bits.func) @[Mux.scala 80:60]
    node shsrc1 = mux(_T_18, _T_15, _T_17) @[Mux.scala 80:57]
    node _T_19 = bits(io.in.bits.func, 5, 5) @[ALU.scala 45:34]
    node _T_20 = bits(io.in.bits.src2, 4, 0) @[ALU.scala 97:49]
    node _T_21 = bits(io.in.bits.src2, 5, 0) @[ALU.scala 97:77]
    node shamt = mux(_T_19, _T_20, _T_21) @[ALU.scala 97:18]
    node _T_22 = bits(io.in.bits.func, 3, 0) @[ALU.scala 98:35]
    node _T_23 = dshl(shsrc1, shamt) @[ALU.scala 99:33]
    node _T_24 = bits(_T_23, 63, 0) @[ALU.scala 99:42]
    node _T_25 = cat(UInt<63>("h0"), slt) @[Cat.scala 30:58]
    node _T_26 = cat(UInt<63>("h0"), sltu) @[Cat.scala 30:58]
    node _T_27 = dshr(shsrc1, shamt) @[ALU.scala 103:32]
    node _T_28 = or(io.in.bits.src1, io.in.bits.src2) @[ALU.scala 104:30]
    node _T_29 = and(io.in.bits.src1, io.in.bits.src2) @[ALU.scala 105:30]
    node _T_30 = asSInt(shsrc1) @[ALU.scala 106:32]
    node _T_31 = dshr(_T_30, shamt) @[ALU.scala 106:39]
    node _T_32 = asUInt(_T_31) @[ALU.scala 106:49]
    node _T_33 = eq(UInt<1>("h1"), _T_22) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_24, adderRes) @[Mux.scala 80:57]
    node _T_35 = eq(UInt<2>("h2"), _T_22) @[Mux.scala 80:60]
    node _T_36 = mux(_T_35, _T_25, _T_34) @[Mux.scala 80:57]
    node _T_37 = eq(UInt<2>("h3"), _T_22) @[Mux.scala 80:60]
    node _T_38 = mux(_T_37, _T_26, _T_36) @[Mux.scala 80:57]
    node _T_39 = eq(UInt<3>("h4"), _T_22) @[Mux.scala 80:60]
    node _T_40 = mux(_T_39, xorRes, _T_38) @[Mux.scala 80:57]
    node _T_41 = eq(UInt<3>("h5"), _T_22) @[Mux.scala 80:60]
    node _T_42 = mux(_T_41, _T_27, _T_40) @[Mux.scala 80:57]
    node _T_43 = eq(UInt<3>("h6"), _T_22) @[Mux.scala 80:60]
    node _T_44 = mux(_T_43, _T_28, _T_42) @[Mux.scala 80:57]
    node _T_45 = eq(UInt<3>("h7"), _T_22) @[Mux.scala 80:60]
    node _T_46 = mux(_T_45, _T_29, _T_44) @[Mux.scala 80:57]
    node _T_47 = eq(UInt<4>("hd"), _T_22) @[Mux.scala 80:60]
    node res = mux(_T_47, _T_32, _T_46) @[Mux.scala 80:57]
    node _T_48 = bits(io.in.bits.func, 5, 5) @[ALU.scala 45:34]
    node _T_49 = bits(res, 31, 0) @[ALU.scala 108:57]
    node _T_50 = bits(_T_49, 31, 31) @[BitUtils.scala 39:20]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
    node _T_52 = mux(_T_51, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_53 = cat(_T_52, _T_49) @[Cat.scala 30:58]
    node aluRes = mux(_T_48, _T_53, res) @[ALU.scala 108:19]
    node _T_54 = orr(xorRes) @[ALU.scala 111:56]
    node _T_55 = eq(_T_54, UInt<1>("h0")) @[ALU.scala 111:48]
    node _T_56 = bits(io.in.bits.func, 3, 3) @[ALU.scala 63:35]
    node isBranch = eq(_T_56, UInt<1>("h0")) @[ALU.scala 63:30]
    node isBru = bits(io.in.bits.func, 4, 4) @[ALU.scala 62:31]
    node _T_57 = bits(io.in.bits.func, 2, 1) @[ALU.scala 65:39]
    node _T_58 = eq(UInt<2>("h0"), _T_57) @[LookupTree.scala 24:34]
    node _T_59 = eq(UInt<2>("h2"), _T_57) @[LookupTree.scala 24:34]
    node _T_60 = eq(UInt<2>("h3"), _T_57) @[LookupTree.scala 24:34]
    node _T_61 = mux(_T_58, _T_55, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_62 = mux(_T_59, slt, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_63 = mux(_T_60, sltu, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_64 = or(_T_61, _T_62) @[Mux.scala 27:72]
    node _T_65 = or(_T_64, _T_63) @[Mux.scala 27:72]
    wire _WIRE : UInt<1> @[Mux.scala 27:72]
    _WIRE <= _T_65 @[Mux.scala 27:72]
    node _T_66 = bits(io.in.bits.func, 0, 0) @[ALU.scala 66:40]
    node taken = xor(_WIRE, _T_66) @[ALU.scala 118:72]
    node _T_67 = add(io.cfIn.pc, io.offset) @[ALU.scala 119:41]
    node _T_68 = tail(_T_67, 1) @[ALU.scala 119:41]
    node _T_69 = mux(isBranch, _T_68, adderRes) @[ALU.scala 119:19]
    node target = bits(_T_69, 38, 0) @[ALU.scala 119:63]
    node _T_70 = eq(taken, UInt<1>("h0")) @[ALU.scala 120:26]
    node _T_71 = and(_T_70, isBranch) @[ALU.scala 120:33]
    node _T_72 = bits(io.cfIn.brIdx, 0, 0) @[ALU.scala 120:59]
    node _T_73 = bits(io.cfIn.brIdx, 0, 0) @[ALU.scala 120:78]
    node _T_74 = eq(_T_73, UInt<1>("h0")) @[ALU.scala 120:64]
    node _T_75 = neq(io.redirect.target, io.cfIn.pnpc) @[ALU.scala 120:105]
    node _T_76 = or(_T_74, _T_75) @[ALU.scala 120:82]
    node predictWrong = mux(_T_71, _T_72, _T_76) @[ALU.scala 120:25]
    node _T_77 = bits(io.cfIn.instr, 1, 0) @[ALU.scala 121:29]
    node isRVC = neq(_T_77, UInt<2>("h3")) @[ALU.scala 121:35]
    node _T_78 = bits(io.cfIn.instr, 1, 0) @[ALU.scala 122:23]
    node _T_79 = eq(_T_78, UInt<2>("h3")) @[ALU.scala 122:29]
    node _T_80 = or(_T_79, isRVC) @[ALU.scala 122:41]
    node _T_81 = eq(io.in.valid, UInt<1>("h0")) @[ALU.scala 122:53]
    node _T_82 = or(_T_80, _T_81) @[ALU.scala 122:50]
    node _T_83 = asUInt(reset) @[ALU.scala 122:9]
    node _T_84 = or(_T_82, _T_83) @[ALU.scala 122:9]
    node _T_85 = eq(_T_84, UInt<1>("h0")) @[ALU.scala 122:9]
    when _T_85 : @[ALU.scala 122:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ALU.scala:122 assert(io.cfIn.instr(1,0) === \"b11\".U || isRVC || !valid)\n") : SIM @[ALU.scala 122:9]
      stop(clock, UInt<1>("h1"), 1) @[ALU.scala 122:9]
    node _T_86 = bits(io.cfIn.instr, 1, 0) @[ALU.scala 123:32]
    node _T_87 = eq(_T_86, UInt<2>("h3")) @[ALU.scala 123:38]
    node _T_88 = eq(isRVC, UInt<1>("h0")) @[ALU.scala 123:55]
    node _T_89 = neq(_T_87, _T_88) @[ALU.scala 123:51]
    node _T_90 = and(io.in.valid, _T_89) @[ALU.scala 123:15]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_91 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_92 = tail(_T_91, 1) @[GTimer.scala 25:12]
    REG <= _T_92 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_93 = and(_T_90, _WIRE_1) @[Debug.scala 55:16]
    when _T_93 : @[Debug.scala 55:31]
      node _T_94 = asUInt(reset) @[Debug.scala 56:24]
      node _T_95 = eq(_T_94, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_95 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ALU: ", REG) : SIM_1 @[Debug.scala 56:24]
      node _T_96 = asUInt(reset) @[Debug.scala 57:13]
      node _T_97 = eq(_T_96, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_97 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[ERROR] pc %x inst %x rvc %x\n", io.cfIn.pc, io.cfIn.instr, isRVC) : SIM_2 @[Debug.scala 57:13]
    node _T_98 = eq(taken, UInt<1>("h0")) @[ALU.scala 124:29]
    node _T_99 = and(_T_98, isBranch) @[ALU.scala 124:36]
    node _T_100 = add(io.cfIn.pc, UInt<2>("h2")) @[ALU.scala 124:71]
    node _T_101 = tail(_T_100, 1) @[ALU.scala 124:71]
    node _T_102 = add(io.cfIn.pc, UInt<3>("h4")) @[ALU.scala 124:89]
    node _T_103 = tail(_T_102, 1) @[ALU.scala 124:89]
    node _T_104 = mux(isRVC, _T_101, _T_103) @[ALU.scala 124:52]
    node _T_105 = mux(_T_99, _T_104, target) @[ALU.scala 124:28]
    io.redirect.target <= _T_105 @[ALU.scala 124:22]
    node _T_106 = and(io.in.valid, isBru) @[ALU.scala 126:30]
    node _T_107 = and(_T_106, predictWrong) @[ALU.scala 126:39]
    io.redirect.valid <= _T_107 @[ALU.scala 126:21]
    io.redirect.rtype <= UInt<1>("h0") @[ALU.scala 128:21]
    node _T_108 = eq(isRVC, UInt<1>("h0")) @[ALU.scala 132:33]
    node _T_109 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_110 = bits(_T_109, 0, 0) @[Bitwise.scala 72:15]
    node _T_111 = mux(_T_110, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
    node _T_112 = cat(_T_111, io.cfIn.pc) @[Cat.scala 30:58]
    node _T_113 = add(_T_112, UInt<3>("h4")) @[ALU.scala 132:71]
    node _T_114 = tail(_T_113, 1) @[ALU.scala 132:71]
    node _T_115 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_116 = bits(_T_115, 0, 0) @[Bitwise.scala 72:15]
    node _T_117 = mux(_T_116, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
    node _T_118 = cat(_T_117, io.cfIn.pc) @[Cat.scala 30:58]
    node _T_119 = add(_T_118, UInt<2>("h2")) @[ALU.scala 132:108]
    node _T_120 = tail(_T_119, 1) @[ALU.scala 132:108]
    node _T_121 = mux(_T_108, _T_114, _T_120) @[ALU.scala 132:32]
    node _T_122 = mux(isBru, _T_121, aluRes) @[ALU.scala 132:21]
    io.out.bits <= _T_122 @[ALU.scala 132:15]
    node _T_123 = and(io.in.valid, isBru) @[ALU.scala 134:15]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_124 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_125 = tail(_T_124, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_125 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_126 = and(_T_123, _WIRE_2) @[Debug.scala 55:16]
    when _T_126 : @[Debug.scala 55:31]
      node _T_127 = asUInt(reset) @[Debug.scala 56:24]
      node _T_128 = eq(_T_127, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_128 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ALU: ", REG_1) : SIM_3 @[Debug.scala 56:24]
      node _T_129 = asUInt(reset) @[Debug.scala 57:13]
      node _T_130 = eq(_T_129, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_130 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "tgt %x, valid:%d, npc: %x, pdwrong: %x\n", io.redirect.target, io.redirect.valid, io.cfIn.pnpc, predictWrong) : SIM_4 @[Debug.scala 57:13]
    node _T_131 = and(io.in.valid, isBru) @[ALU.scala 135:15]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_132 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_133 = tail(_T_132, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_133 @[GTimer.scala 25:7]
    wire _WIRE_3 : UInt<1>
    _WIRE_3 <= UInt<1>("h0")
    node _T_134 = and(_T_131, _WIRE_3) @[Debug.scala 55:16]
    when _T_134 : @[Debug.scala 55:31]
      node _T_135 = asUInt(reset) @[Debug.scala 56:24]
      node _T_136 = eq(_T_135, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_136 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ALU: ", REG_2) : SIM_5 @[Debug.scala 56:24]
      node _T_137 = asUInt(reset) @[Debug.scala 57:13]
      node _T_138 = eq(_T_137, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_138 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "taken:%d addrRes:%x src1:%x src2:%x func:%x\n", taken, adderRes, io.in.bits.src1, io.in.bits.src2, io.in.bits.func) : SIM_6 @[Debug.scala 57:13]
    node _T_139 = and(io.in.valid, isBru) @[ALU.scala 136:15]
    node _T_140 = eq(io.in.bits.func, UInt<7>("h58")) @[ALU.scala 136:162]
    node _T_141 = eq(io.in.bits.func, UInt<7>("h5c")) @[ALU.scala 136:188]
    node _T_142 = or(_T_140, _T_141) @[ALU.scala 136:180]
    node _T_143 = eq(io.in.bits.func, UInt<7>("h5a")) @[ALU.scala 136:214]
    node _T_144 = eq(io.in.bits.func, UInt<7>("h5e")) @[ALU.scala 136:239]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_145 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_146 = tail(_T_145, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_146 @[GTimer.scala 25:7]
    wire _WIRE_4 : UInt<1>
    _WIRE_4 <= UInt<1>("h0")
    node _T_147 = and(_T_139, _WIRE_4) @[Debug.scala 55:16]
    when _T_147 : @[Debug.scala 55:31]
      node _T_148 = asUInt(reset) @[Debug.scala 56:24]
      node _T_149 = eq(_T_148, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_149 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ALU: ", REG_3) : SIM_7 @[Debug.scala 56:24]
      node _T_150 = asUInt(reset) @[Debug.scala 57:13]
      node _T_151 = eq(_T_150, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_151 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[BPW] pc %x tgt %x, npc: %x, pdwrong: %x type: %x%x%x%x\n", io.cfIn.pc, io.redirect.target, io.cfIn.pnpc, predictWrong, isBranch, _T_142, _T_143, _T_144) : SIM_8 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_152 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_153 = tail(_T_152, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_153 @[GTimer.scala 25:7]
    wire _WIRE_5 : UInt<1>
    _WIRE_5 <= UInt<1>("h0")
    node _T_154 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
    when _T_154 : @[Debug.scala 55:31]
      node _T_155 = asUInt(reset) @[Debug.scala 56:24]
      node _T_156 = eq(_T_155, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_156 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ALU: ", REG_4) : SIM_9 @[Debug.scala 56:24]
      node _T_157 = asUInt(reset) @[Debug.scala 57:13]
      node _T_158 = eq(_T_157, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_158 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "valid:%d isBru:%d isBranch:%d \n", io.in.valid, isBru, isBranch) : SIM_10 @[Debug.scala 57:13]
    node _T_159 = and(io.in.valid, isBru) @[ALU.scala 143:15]
    node _T_160 = and(io.in.valid, isBru) @[ALU.scala 143:147]
    node _T_161 = eq(UInt<5>("h10"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_162 = eq(UInt<5>("h11"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_163 = eq(UInt<5>("h14"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_164 = eq(UInt<5>("h15"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_165 = eq(UInt<5>("h16"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_166 = eq(UInt<5>("h17"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_167 = eq(UInt<7>("h5c"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_168 = eq(UInt<7>("h5e"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_169 = eq(UInt<7>("h58"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_170 = eq(UInt<7>("h5a"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_171 = mux(_T_161, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_172 = mux(_T_162, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_173 = mux(_T_163, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_174 = mux(_T_164, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_175 = mux(_T_165, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_176 = mux(_T_166, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_177 = mux(_T_167, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_178 = mux(_T_168, UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_179 = mux(_T_169, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_180 = mux(_T_170, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_181 = or(_T_171, _T_172) @[Mux.scala 27:72]
    node _T_182 = or(_T_181, _T_173) @[Mux.scala 27:72]
    node _T_183 = or(_T_182, _T_174) @[Mux.scala 27:72]
    node _T_184 = or(_T_183, _T_175) @[Mux.scala 27:72]
    node _T_185 = or(_T_184, _T_176) @[Mux.scala 27:72]
    node _T_186 = or(_T_185, _T_177) @[Mux.scala 27:72]
    node _T_187 = or(_T_186, _T_178) @[Mux.scala 27:72]
    node _T_188 = or(_T_187, _T_179) @[Mux.scala 27:72]
    node _T_189 = or(_T_188, _T_180) @[Mux.scala 27:72]
    wire _WIRE_6 : UInt<2> @[Mux.scala 27:72]
    _WIRE_6 <= _T_189 @[Mux.scala 27:72]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_190 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_191 = tail(_T_190, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_191 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_192 = and(_T_159, _WIRE_7) @[Debug.scala 55:16]
    when _T_192 : @[Debug.scala 55:31]
      node _T_193 = asUInt(reset) @[Debug.scala 56:24]
      node _T_194 = eq(_T_193, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_194 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] ALU: ", REG_5) : SIM_11 @[Debug.scala 56:24]
      node _T_195 = asUInt(reset) @[Debug.scala 57:13]
      node _T_196 = eq(_T_195, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_196 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " bpuUpdateReq: valid:%d pc:%x isMissPredict:%d actualTarget:%x actualTaken:%x fuOpType:%x btbType:%x isRVC:%d \n", _T_160, io.cfIn.pc, predictWrong, target, taken, io.in.bits.func, _WIRE_6, isRVC) : SIM_12 @[Debug.scala 57:13]
    io.in.ready <= io.out.ready @[ALU.scala 145:15]
    io.out.valid <= io.in.valid @[ALU.scala 146:16]
    wire _WIRE_8 : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>} @[ALU.scala 148:43]
    _WIRE_8.isRVC <= UInt<1>("h0") @[ALU.scala 148:43]
    _WIRE_8.btbType <= UInt<2>("h0") @[ALU.scala 148:43]
    _WIRE_8.fuOpType <= UInt<7>("h0") @[ALU.scala 148:43]
    _WIRE_8.actualTaken <= UInt<1>("h0") @[ALU.scala 148:43]
    _WIRE_8.actualTarget <= UInt<39>("h0") @[ALU.scala 148:43]
    _WIRE_8.isMissPredict <= UInt<1>("h0") @[ALU.scala 148:43]
    _WIRE_8.pc <= UInt<39>("h0") @[ALU.scala 148:43]
    _WIRE_8.valid <= UInt<1>("h0") @[ALU.scala 148:43]
    wire bpuUpdateReq : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}
    bpuUpdateReq.isRVC <= _WIRE_8.isRVC
    bpuUpdateReq.btbType <= _WIRE_8.btbType
    bpuUpdateReq.fuOpType <= _WIRE_8.fuOpType
    bpuUpdateReq.actualTaken <= _WIRE_8.actualTaken
    bpuUpdateReq.actualTarget <= _WIRE_8.actualTarget
    bpuUpdateReq.isMissPredict <= _WIRE_8.isMissPredict
    bpuUpdateReq.pc <= _WIRE_8.pc
    bpuUpdateReq.valid <= _WIRE_8.valid
    node _T_197 = and(io.in.valid, isBru) @[ALU.scala 149:31]
    bpuUpdateReq.valid <= _T_197 @[ALU.scala 149:22]
    bpuUpdateReq.pc <= io.cfIn.pc @[ALU.scala 150:19]
    bpuUpdateReq.isMissPredict <= predictWrong @[ALU.scala 151:30]
    bpuUpdateReq.actualTarget <= target @[ALU.scala 152:29]
    bpuUpdateReq.actualTaken <= taken @[ALU.scala 153:28]
    bpuUpdateReq.fuOpType <= io.in.bits.func @[ALU.scala 154:25]
    node _T_198 = eq(UInt<5>("h10"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_199 = eq(UInt<5>("h11"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_200 = eq(UInt<5>("h14"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_201 = eq(UInt<5>("h15"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_202 = eq(UInt<5>("h16"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_203 = eq(UInt<5>("h17"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_204 = eq(UInt<7>("h5c"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_205 = eq(UInt<7>("h5e"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_206 = eq(UInt<7>("h58"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_207 = eq(UInt<7>("h5a"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_208 = mux(_T_198, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_209 = mux(_T_199, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_210 = mux(_T_200, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_211 = mux(_T_201, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_212 = mux(_T_202, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_213 = mux(_T_203, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_214 = mux(_T_204, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_215 = mux(_T_205, UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_216 = mux(_T_206, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_217 = mux(_T_207, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_218 = or(_T_208, _T_209) @[Mux.scala 27:72]
    node _T_219 = or(_T_218, _T_210) @[Mux.scala 27:72]
    node _T_220 = or(_T_219, _T_211) @[Mux.scala 27:72]
    node _T_221 = or(_T_220, _T_212) @[Mux.scala 27:72]
    node _T_222 = or(_T_221, _T_213) @[Mux.scala 27:72]
    node _T_223 = or(_T_222, _T_214) @[Mux.scala 27:72]
    node _T_224 = or(_T_223, _T_215) @[Mux.scala 27:72]
    node _T_225 = or(_T_224, _T_216) @[Mux.scala 27:72]
    node _T_226 = or(_T_225, _T_217) @[Mux.scala 27:72]
    wire _WIRE_9 : UInt<2> @[Mux.scala 27:72]
    _WIRE_9 <= _T_226 @[Mux.scala 27:72]
    bpuUpdateReq.btbType <= _WIRE_9 @[ALU.scala 155:24]
    bpuUpdateReq.isRVC <= isRVC @[ALU.scala 156:22]
    reg REG_6 : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), REG_6) @[ALU.scala 159:34]
    REG_6.isRVC <= bpuUpdateReq.isRVC @[ALU.scala 159:34]
    REG_6.btbType <= bpuUpdateReq.btbType @[ALU.scala 159:34]
    REG_6.fuOpType <= bpuUpdateReq.fuOpType @[ALU.scala 159:34]
    REG_6.actualTaken <= bpuUpdateReq.actualTaken @[ALU.scala 159:34]
    REG_6.actualTarget <= bpuUpdateReq.actualTarget @[ALU.scala 159:34]
    REG_6.isMissPredict <= bpuUpdateReq.isMissPredict @[ALU.scala 159:34]
    REG_6.pc <= bpuUpdateReq.pc @[ALU.scala 159:34]
    REG_6.valid <= bpuUpdateReq.valid @[ALU.scala 159:34]
    node _T_227 = and(io.in.valid, isBru) @[ALU.scala 161:23]
    node _T_228 = eq(predictWrong, UInt<1>("h0")) @[ALU.scala 161:35]
    node _T_229 = and(_T_227, _T_228) @[ALU.scala 161:32]
    node _T_230 = and(io.in.valid, isBru) @[ALU.scala 162:23]
    node _T_231 = and(_T_230, predictWrong) @[ALU.scala 162:32]
    node _T_232 = and(_T_229, isBranch) @[ALU.scala 163:33]
    node _T_233 = and(_T_231, isBranch) @[ALU.scala 164:33]
    node _T_234 = and(_T_231, isBranch) @[ALU.scala 165:33]
    node _T_235 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 165:58]
    node _T_236 = eq(_T_235, UInt<1>("h0")) @[ALU.scala 165:63]
    node _T_237 = and(_T_234, _T_236) @[ALU.scala 165:45]
    node _T_238 = and(_T_237, isRVC) @[ALU.scala 165:73]
    node _T_239 = and(_T_231, isBranch) @[ALU.scala 166:33]
    node _T_240 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 166:58]
    node _T_241 = eq(_T_240, UInt<1>("h0")) @[ALU.scala 166:63]
    node _T_242 = and(_T_239, _T_241) @[ALU.scala 166:45]
    node _T_243 = eq(isRVC, UInt<1>("h0")) @[ALU.scala 166:76]
    node _T_244 = and(_T_242, _T_243) @[ALU.scala 166:73]
    node _T_245 = and(_T_231, isBranch) @[ALU.scala 167:33]
    node _T_246 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 167:58]
    node _T_247 = eq(_T_246, UInt<2>("h2")) @[ALU.scala 167:63]
    node _T_248 = and(_T_245, _T_247) @[ALU.scala 167:45]
    node _T_249 = and(_T_248, isRVC) @[ALU.scala 167:73]
    node _T_250 = and(_T_231, isBranch) @[ALU.scala 168:33]
    node _T_251 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 168:58]
    node _T_252 = eq(_T_251, UInt<2>("h2")) @[ALU.scala 168:63]
    node _T_253 = and(_T_250, _T_252) @[ALU.scala 168:45]
    node _T_254 = eq(isRVC, UInt<1>("h0")) @[ALU.scala 168:76]
    node _T_255 = and(_T_253, _T_254) @[ALU.scala 168:73]
    node _T_256 = and(_T_231, isBranch) @[ALU.scala 169:33]
    node _T_257 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 169:58]
    node _T_258 = eq(_T_257, UInt<3>("h4")) @[ALU.scala 169:63]
    node _T_259 = and(_T_256, _T_258) @[ALU.scala 169:45]
    node _T_260 = and(_T_259, isRVC) @[ALU.scala 169:73]
    node _T_261 = and(_T_231, isBranch) @[ALU.scala 170:33]
    node _T_262 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 170:58]
    node _T_263 = eq(_T_262, UInt<3>("h4")) @[ALU.scala 170:63]
    node _T_264 = and(_T_261, _T_263) @[ALU.scala 170:45]
    node _T_265 = eq(isRVC, UInt<1>("h0")) @[ALU.scala 170:76]
    node _T_266 = and(_T_264, _T_265) @[ALU.scala 170:73]
    node _T_267 = and(_T_231, isBranch) @[ALU.scala 171:33]
    node _T_268 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 171:58]
    node _T_269 = eq(_T_268, UInt<3>("h6")) @[ALU.scala 171:63]
    node _T_270 = and(_T_267, _T_269) @[ALU.scala 171:45]
    node _T_271 = and(_T_270, isRVC) @[ALU.scala 171:73]
    node _T_272 = and(_T_231, isBranch) @[ALU.scala 172:33]
    node _T_273 = bits(io.cfIn.pc, 2, 0) @[ALU.scala 172:58]
    node _T_274 = eq(_T_273, UInt<3>("h6")) @[ALU.scala 172:63]
    node _T_275 = and(_T_272, _T_274) @[ALU.scala 172:45]
    node _T_276 = eq(isRVC, UInt<1>("h0")) @[ALU.scala 172:76]
    node _T_277 = and(_T_275, _T_276) @[ALU.scala 172:73]
    node _T_278 = eq(io.in.bits.func, UInt<7>("h58")) @[ALU.scala 173:42]
    node _T_279 = eq(io.in.bits.func, UInt<7>("h5c")) @[ALU.scala 173:68]
    node _T_280 = or(_T_278, _T_279) @[ALU.scala 173:60]
    node _T_281 = and(_T_229, _T_280) @[ALU.scala 173:33]
    node _T_282 = eq(io.in.bits.func, UInt<7>("h58")) @[ALU.scala 174:42]
    node _T_283 = eq(io.in.bits.func, UInt<7>("h5c")) @[ALU.scala 174:68]
    node _T_284 = or(_T_282, _T_283) @[ALU.scala 174:60]
    node _T_285 = and(_T_231, _T_284) @[ALU.scala 174:33]
    node _T_286 = eq(io.in.bits.func, UInt<7>("h5a")) @[ALU.scala 175:41]
    node _T_287 = and(_T_229, _T_286) @[ALU.scala 175:33]
    node _T_288 = eq(io.in.bits.func, UInt<7>("h5a")) @[ALU.scala 176:41]
    node _T_289 = and(_T_231, _T_288) @[ALU.scala 176:33]
    node _T_290 = eq(io.in.bits.func, UInt<7>("h5e")) @[ALU.scala 177:41]
    node _T_291 = and(_T_229, _T_290) @[ALU.scala 177:33]
    node _T_292 = eq(io.in.bits.func, UInt<7>("h5e")) @[ALU.scala 178:41]
    node _T_293 = and(_T_231, _T_292) @[ALU.scala 178:33]

  module LSExecUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip wdata : UInt<64>, flip instr : UInt<32>, dmem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, isMMIO : UInt<1>, dtlbPF : UInt<1>, loadAddrMisaligned : UInt<1>, storeAddrMisaligned : UInt<1>}

    reg addrLatch : UInt, clock with :
      reset => (UInt<1>("h0"), addrLatch) @[UnpipelinedLSU.scala 333:26]
    addrLatch <= io.in.bits.src1 @[UnpipelinedLSU.scala 333:26]
    node _T = bits(io.in.bits.func, 3, 3) @[LSU.scala 55:39]
    node isStore = and(io.in.valid, _T) @[UnpipelinedLSU.scala 334:23]
    node _T_1 = eq(isStore, UInt<1>("h0")) @[UnpipelinedLSU.scala 335:21]
    node _T_2 = neq(io.in.bits.func, UInt<2>("h3")) @[UnpipelinedLSU.scala 335:39]
    node partialLoad = and(_T_1, _T_2) @[UnpipelinedLSU.scala 335:30]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[UnpipelinedLSU.scala 338:22]
    wire dtlbFinish : UInt<1>
    dtlbFinish <= UInt<1>("h0")
    wire dtlbPF : UInt<1>
    dtlbPF <= UInt<1>("h0")
    wire dtlbEnable : UInt<1>
    dtlbEnable <= UInt<1>("h0")
    io.dtlbPF <= dtlbPF @[UnpipelinedLSU.scala 349:13]
    node _T_3 = eq(UInt<2>("h0"), state) @[UnpipelinedLSU.scala 351:18]
    when _T_3 : @[UnpipelinedLSU.scala 351:18]
      node _T_4 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
      node _T_5 = and(_T_4, dtlbEnable) @[UnpipelinedLSU.scala 353:29]
      when _T_5 : @[UnpipelinedLSU.scala 353:45]
        state <= UInt<2>("h1") @[UnpipelinedLSU.scala 353:53]
      node _T_6 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
      node _T_7 = eq(dtlbEnable, UInt<1>("h0")) @[UnpipelinedLSU.scala 354:32]
      node _T_8 = and(_T_6, _T_7) @[UnpipelinedLSU.scala 354:29]
      when _T_8 : @[UnpipelinedLSU.scala 354:45]
        state <= UInt<2>("h2") @[UnpipelinedLSU.scala 354:53]
    else :
      node _T_9 = eq(UInt<2>("h1"), state) @[UnpipelinedLSU.scala 351:18]
      when _T_9 : @[UnpipelinedLSU.scala 351:18]
        node _T_10 = and(dtlbFinish, dtlbPF) @[UnpipelinedLSU.scala 358:24]
        when _T_10 : @[UnpipelinedLSU.scala 358:36]
          state <= UInt<2>("h0") @[UnpipelinedLSU.scala 358:44]
        node _T_11 = eq(dtlbPF, UInt<1>("h0")) @[UnpipelinedLSU.scala 359:27]
        node _T_12 = and(dtlbFinish, _T_11) @[UnpipelinedLSU.scala 359:24]
        when _T_12 : @[UnpipelinedLSU.scala 359:36]
          state <= UInt<2>("h2") @[UnpipelinedLSU.scala 359:44]
      else :
        node _T_13 = eq(UInt<2>("h2"), state) @[UnpipelinedLSU.scala 351:18]
        when _T_13 : @[UnpipelinedLSU.scala 351:18]
          node _T_14 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
          when _T_14 : @[UnpipelinedLSU.scala 361:48]
            node _T_15 = mux(partialLoad, UInt<2>("h3"), UInt<2>("h0")) @[UnpipelinedLSU.scala 361:62]
            state <= _T_15 @[UnpipelinedLSU.scala 361:56]
        else :
          node _T_16 = eq(UInt<2>("h3"), state) @[UnpipelinedLSU.scala 351:18]
          when _T_16 : @[UnpipelinedLSU.scala 351:18]
            state <= UInt<2>("h0") @[UnpipelinedLSU.scala 362:32]
    node _T_17 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_18 = bits(io.in.bits.func, 1, 0) @[UnpipelinedLSU.scala 365:85]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_19 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_20 = tail(_T_19, 1) @[GTimer.scala 25:12]
    REG <= _T_20 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_21 = and(_T_17, _WIRE) @[Debug.scala 55:16]
    when _T_21 : @[Debug.scala 55:31]
      node _T_22 = asUInt(reset) @[Debug.scala 56:24]
      node _T_23 = eq(_T_22, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_23 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] LSExecUnit: ", REG) : SIM @[Debug.scala 56:24]
      node _T_24 = asUInt(reset) @[Debug.scala 57:13]
      node _T_25 = eq(_T_24, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_25 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[LSU] %x, size %x, wdata_raw %x, isStore %x\n", io.in.bits.src1, _T_18, io.wdata, isStore) : SIM_1 @[Debug.scala 57:13]
    node _T_26 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_27 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_28 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_29 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_30 = tail(_T_29, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_30 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_31 = and(_T_26, _WIRE_1) @[Debug.scala 55:16]
    when _T_31 : @[Debug.scala 55:31]
      node _T_32 = asUInt(reset) @[Debug.scala 56:24]
      node _T_33 = eq(_T_32, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_33 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] LSExecUnit: ", REG_1) : SIM_2 @[Debug.scala 56:24]
      node _T_34 = asUInt(reset) @[Debug.scala 57:13]
      node _T_35 = eq(_T_34, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_35 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[LSU] dtlbFinish:%d dtlbEnable:%d dtlbPF:%d state:%d addr:%x dmemReqFire:%d dmemRespFire:%d dmemRdata:%x\n", dtlbFinish, dtlbEnable, dtlbPF, state, io.dmem.req.bits.addr, _T_27, _T_28, io.dmem.resp.bits.rdata) : SIM_3 @[Debug.scala 57:13]
    node _T_36 = and(dtlbFinish, dtlbEnable) @[UnpipelinedLSU.scala 367:20]
    node _T_37 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_38 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_39 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_40 = tail(_T_39, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_40 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_41 = and(_T_36, _WIRE_2) @[Debug.scala 55:16]
    when _T_41 : @[Debug.scala 55:31]
      node _T_42 = asUInt(reset) @[Debug.scala 56:24]
      node _T_43 = eq(_T_42, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_43 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] LSExecUnit: ", REG_2) : SIM_4 @[Debug.scala 56:24]
      node _T_44 = asUInt(reset) @[Debug.scala 57:13]
      node _T_45 = eq(_T_44, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_45 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[LSU] dtlbFinish:%d dtlbEnable:%d dtlbPF:%d state:%d addr:%x dmemReqFire:%d dmemRespFire:%d dmemRdata:%x\n", dtlbFinish, dtlbEnable, dtlbPF, state, io.dmem.req.bits.addr, _T_37, _T_38, io.dmem.resp.bits.rdata) : SIM_5 @[Debug.scala 57:13]
    node size = bits(io.in.bits.func, 1, 0) @[UnpipelinedLSU.scala 369:18]
    node reqAddr = bits(io.in.bits.src1, 38, 0) @[UnpipelinedLSU.scala 370:68]
    node _T_46 = bits(io.wdata, 7, 0) @[UnpipelinedLSU.scala 310:30]
    node _T_47 = cat(_T_46, _T_46) @[Cat.scala 30:58]
    node _T_48 = cat(_T_47, _T_47) @[Cat.scala 30:58]
    node _T_49 = cat(_T_48, _T_48) @[Cat.scala 30:58]
    node _T_50 = bits(io.wdata, 15, 0) @[UnpipelinedLSU.scala 311:30]
    node _T_51 = cat(_T_50, _T_50) @[Cat.scala 30:58]
    node _T_52 = cat(_T_51, _T_51) @[Cat.scala 30:58]
    node _T_53 = bits(io.wdata, 31, 0) @[UnpipelinedLSU.scala 312:30]
    node _T_54 = cat(_T_53, _T_53) @[Cat.scala 30:58]
    node _T_55 = eq(UInt<1>("h0"), size) @[LookupTree.scala 24:34]
    node _T_56 = eq(UInt<1>("h1"), size) @[LookupTree.scala 24:34]
    node _T_57 = eq(UInt<2>("h2"), size) @[LookupTree.scala 24:34]
    node _T_58 = eq(UInt<2>("h3"), size) @[LookupTree.scala 24:34]
    node _T_59 = mux(_T_55, _T_49, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_60 = mux(_T_56, _T_52, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_61 = mux(_T_57, _T_54, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_62 = mux(_T_58, io.wdata, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_63 = or(_T_59, _T_60) @[Mux.scala 27:72]
    node _T_64 = or(_T_63, _T_61) @[Mux.scala 27:72]
    node _T_65 = or(_T_64, _T_62) @[Mux.scala 27:72]
    wire reqWdata : UInt<64> @[Mux.scala 27:72]
    reqWdata <= _T_65 @[Mux.scala 27:72]
    node _T_66 = eq(UInt<1>("h0"), size) @[LookupTree.scala 24:34]
    node _T_67 = eq(UInt<1>("h1"), size) @[LookupTree.scala 24:34]
    node _T_68 = eq(UInt<2>("h2"), size) @[LookupTree.scala 24:34]
    node _T_69 = eq(UInt<2>("h3"), size) @[LookupTree.scala 24:34]
    node _T_70 = mux(_T_66, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_71 = mux(_T_67, UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_72 = mux(_T_68, UInt<4>("hf"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_73 = mux(_T_69, UInt<8>("hff"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_74 = or(_T_70, _T_71) @[Mux.scala 27:72]
    node _T_75 = or(_T_74, _T_72) @[Mux.scala 27:72]
    node _T_76 = or(_T_75, _T_73) @[Mux.scala 27:72]
    wire _WIRE_3 : UInt<8> @[Mux.scala 27:72]
    _WIRE_3 <= _T_76 @[Mux.scala 27:72]
    node _T_77 = bits(io.in.bits.src1, 2, 0) @[UnpipelinedLSU.scala 306:15]
    node reqWmask = dshl(_WIRE_3, _T_77) @[UnpipelinedLSU.scala 306:8]
    node _T_78 = mux(isStore, UInt<1>("h1"), UInt<1>("h0")) @[UnpipelinedLSU.scala 378:14]
    io.dmem.req.bits.addr <= reqAddr @[SimpleBus.scala 64:15]
    io.dmem.req.bits.cmd <= _T_78 @[SimpleBus.scala 65:14]
    io.dmem.req.bits.size <= size @[SimpleBus.scala 66:15]
    io.dmem.req.bits.wdata <= reqWdata @[SimpleBus.scala 67:16]
    io.dmem.req.bits.wmask <= reqWmask @[SimpleBus.scala 68:16]
    node _T_79 = eq(state, UInt<2>("h0")) @[UnpipelinedLSU.scala 379:37]
    node _T_80 = and(io.in.valid, _T_79) @[UnpipelinedLSU.scala 379:27]
    node _T_81 = eq(io.loadAddrMisaligned, UInt<1>("h0")) @[UnpipelinedLSU.scala 379:52]
    node _T_82 = and(_T_80, _T_81) @[UnpipelinedLSU.scala 379:49]
    node _T_83 = eq(io.storeAddrMisaligned, UInt<1>("h0")) @[UnpipelinedLSU.scala 379:78]
    node _T_84 = and(_T_82, _T_83) @[UnpipelinedLSU.scala 379:75]
    io.dmem.req.valid <= _T_84 @[UnpipelinedLSU.scala 379:18]
    io.dmem.resp.ready <= UInt<1>("h1") @[UnpipelinedLSU.scala 380:19]
    node _T_85 = neq(state, UInt<2>("h0")) @[UnpipelinedLSU.scala 382:40]
    node _T_86 = and(dtlbPF, _T_85) @[UnpipelinedLSU.scala 382:31]
    node _T_87 = or(_T_86, io.loadAddrMisaligned) @[UnpipelinedLSU.scala 382:51]
    node _T_88 = or(_T_87, io.storeAddrMisaligned) @[UnpipelinedLSU.scala 382:76]
    node _T_89 = eq(state, UInt<2>("h3")) @[UnpipelinedLSU.scala 382:134]
    node _T_90 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    node _T_91 = eq(state, UInt<2>("h2")) @[UnpipelinedLSU.scala 382:180]
    node _T_92 = and(_T_90, _T_91) @[UnpipelinedLSU.scala 382:170]
    node _T_93 = mux(partialLoad, _T_89, _T_92) @[UnpipelinedLSU.scala 382:114]
    node _T_94 = mux(_T_88, UInt<1>("h1"), _T_93) @[UnpipelinedLSU.scala 382:22]
    io.out.valid <= _T_94 @[UnpipelinedLSU.scala 382:16]
    node _T_95 = eq(state, UInt<2>("h0")) @[UnpipelinedLSU.scala 383:25]
    node _T_96 = or(_T_95, dtlbPF) @[UnpipelinedLSU.scala 383:37]
    io.in.ready <= _T_96 @[UnpipelinedLSU.scala 383:15]
    node _T_97 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_98 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_99 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_100 = tail(_T_99, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_100 @[GTimer.scala 25:7]
    wire _WIRE_4 : UInt<1>
    _WIRE_4 <= UInt<1>("h0")
    node _T_101 = and(_T_97, _WIRE_4) @[Debug.scala 55:16]
    when _T_101 : @[Debug.scala 55:31]
      node _T_102 = asUInt(reset) @[Debug.scala 56:24]
      node _T_103 = eq(_T_102, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_103 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] LSExecUnit: ", REG_3) : SIM_6 @[Debug.scala 56:24]
      node _T_104 = asUInt(reset) @[Debug.scala 57:13]
      node _T_105 = eq(_T_104, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_105 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[LSU-EXECUNIT] state %x dresp %x dpf %x lm %x sm %x\n", state, _T_98, dtlbPF, io.loadAddrMisaligned, io.storeAddrMisaligned) : SIM_7 @[Debug.scala 57:13]
    reg rdataLatch : UInt, clock with :
      reset => (UInt<1>("h0"), rdataLatch) @[UnpipelinedLSU.scala 388:27]
    rdataLatch <= io.dmem.resp.bits.rdata @[UnpipelinedLSU.scala 388:27]
    node _T_106 = bits(addrLatch, 2, 0) @[UnpipelinedLSU.scala 389:40]
    node _T_107 = bits(rdataLatch, 63, 0) @[UnpipelinedLSU.scala 390:27]
    node _T_108 = bits(rdataLatch, 63, 8) @[UnpipelinedLSU.scala 391:27]
    node _T_109 = bits(rdataLatch, 63, 16) @[UnpipelinedLSU.scala 392:27]
    node _T_110 = bits(rdataLatch, 63, 24) @[UnpipelinedLSU.scala 393:27]
    node _T_111 = bits(rdataLatch, 63, 32) @[UnpipelinedLSU.scala 394:27]
    node _T_112 = bits(rdataLatch, 63, 40) @[UnpipelinedLSU.scala 395:27]
    node _T_113 = bits(rdataLatch, 63, 48) @[UnpipelinedLSU.scala 396:27]
    node _T_114 = bits(rdataLatch, 63, 56) @[UnpipelinedLSU.scala 397:27]
    node _T_115 = eq(UInt<1>("h0"), _T_106) @[LookupTree.scala 24:34]
    node _T_116 = eq(UInt<1>("h1"), _T_106) @[LookupTree.scala 24:34]
    node _T_117 = eq(UInt<2>("h2"), _T_106) @[LookupTree.scala 24:34]
    node _T_118 = eq(UInt<2>("h3"), _T_106) @[LookupTree.scala 24:34]
    node _T_119 = eq(UInt<3>("h4"), _T_106) @[LookupTree.scala 24:34]
    node _T_120 = eq(UInt<3>("h5"), _T_106) @[LookupTree.scala 24:34]
    node _T_121 = eq(UInt<3>("h6"), _T_106) @[LookupTree.scala 24:34]
    node _T_122 = eq(UInt<3>("h7"), _T_106) @[LookupTree.scala 24:34]
    node _T_123 = mux(_T_115, _T_107, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_124 = mux(_T_116, _T_108, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_125 = mux(_T_117, _T_109, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_126 = mux(_T_118, _T_110, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_127 = mux(_T_119, _T_111, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_128 = mux(_T_120, _T_112, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_129 = mux(_T_121, _T_113, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_130 = mux(_T_122, _T_114, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_131 = or(_T_123, _T_124) @[Mux.scala 27:72]
    node _T_132 = or(_T_131, _T_125) @[Mux.scala 27:72]
    node _T_133 = or(_T_132, _T_126) @[Mux.scala 27:72]
    node _T_134 = or(_T_133, _T_127) @[Mux.scala 27:72]
    node _T_135 = or(_T_134, _T_128) @[Mux.scala 27:72]
    node _T_136 = or(_T_135, _T_129) @[Mux.scala 27:72]
    node _T_137 = or(_T_136, _T_130) @[Mux.scala 27:72]
    wire rdataSel : UInt<64> @[Mux.scala 27:72]
    rdataSel <= _T_137 @[Mux.scala 27:72]
    node _T_138 = bits(addrLatch, 1, 0) @[UnpipelinedLSU.scala 399:40]
    node _T_139 = bits(rdataLatch, 31, 0) @[UnpipelinedLSU.scala 400:26]
    node _T_140 = bits(rdataLatch, 31, 8) @[UnpipelinedLSU.scala 401:26]
    node _T_141 = bits(rdataLatch, 31, 16) @[UnpipelinedLSU.scala 402:26]
    node _T_142 = bits(rdataLatch, 31, 24) @[UnpipelinedLSU.scala 403:26]
    node _T_143 = eq(UInt<1>("h0"), _T_138) @[LookupTree.scala 24:34]
    node _T_144 = eq(UInt<1>("h1"), _T_138) @[LookupTree.scala 24:34]
    node _T_145 = eq(UInt<2>("h2"), _T_138) @[LookupTree.scala 24:34]
    node _T_146 = eq(UInt<2>("h3"), _T_138) @[LookupTree.scala 24:34]
    node _T_147 = mux(_T_143, _T_139, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_148 = mux(_T_144, _T_140, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_149 = mux(_T_145, _T_141, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_150 = mux(_T_146, _T_142, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_151 = or(_T_147, _T_148) @[Mux.scala 27:72]
    node _T_152 = or(_T_151, _T_149) @[Mux.scala 27:72]
    node _T_153 = or(_T_152, _T_150) @[Mux.scala 27:72]
    wire rdataSel32 : UInt<32> @[Mux.scala 27:72]
    rdataSel32 <= _T_153 @[Mux.scala 27:72]
    node _T_154 = bits(rdataSel, 7, 0) @[UnpipelinedLSU.scala 407:41]
    node _T_155 = bits(_T_154, 7, 7) @[BitUtils.scala 39:20]
    node _T_156 = bits(_T_155, 0, 0) @[Bitwise.scala 72:15]
    node _T_157 = mux(_T_156, UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 72:12]
    node _T_158 = cat(_T_157, _T_154) @[Cat.scala 30:58]
    node _T_159 = bits(rdataSel, 15, 0) @[UnpipelinedLSU.scala 408:41]
    node _T_160 = bits(_T_159, 15, 15) @[BitUtils.scala 39:20]
    node _T_161 = bits(_T_160, 0, 0) @[Bitwise.scala 72:15]
    node _T_162 = mux(_T_161, UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 72:12]
    node _T_163 = cat(_T_162, _T_159) @[Cat.scala 30:58]
    node _T_164 = bits(rdataSel, 31, 0) @[UnpipelinedLSU.scala 409:41]
    node _T_165 = bits(_T_164, 31, 31) @[BitUtils.scala 39:20]
    node _T_166 = bits(_T_165, 0, 0) @[Bitwise.scala 72:15]
    node _T_167 = mux(_T_166, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_168 = cat(_T_167, _T_164) @[Cat.scala 30:58]
    node _T_169 = bits(rdataSel, 7, 0) @[UnpipelinedLSU.scala 410:41]
    node _T_170 = cat(UInt<56>("h0"), _T_169) @[Cat.scala 30:58]
    node _T_171 = bits(rdataSel, 15, 0) @[UnpipelinedLSU.scala 411:41]
    node _T_172 = cat(UInt<48>("h0"), _T_171) @[Cat.scala 30:58]
    node _T_173 = bits(rdataSel, 31, 0) @[UnpipelinedLSU.scala 412:41]
    node _T_174 = cat(UInt<32>("h0"), _T_173) @[Cat.scala 30:58]
    node _T_175 = eq(UInt<1>("h0"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_176 = eq(UInt<1>("h1"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_177 = eq(UInt<2>("h2"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_178 = eq(UInt<3>("h4"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_179 = eq(UInt<3>("h5"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_180 = eq(UInt<3>("h6"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_181 = mux(_T_175, _T_158, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_182 = mux(_T_176, _T_163, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_183 = mux(_T_177, _T_168, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_184 = mux(_T_178, _T_170, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_185 = mux(_T_179, _T_172, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_186 = mux(_T_180, _T_174, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_187 = or(_T_181, _T_182) @[Mux.scala 27:72]
    node _T_188 = or(_T_187, _T_183) @[Mux.scala 27:72]
    node _T_189 = or(_T_188, _T_184) @[Mux.scala 27:72]
    node _T_190 = or(_T_189, _T_185) @[Mux.scala 27:72]
    node _T_191 = or(_T_190, _T_186) @[Mux.scala 27:72]
    wire rdataPartialLoad : UInt<64> @[Mux.scala 27:72]
    rdataPartialLoad <= _T_191 @[Mux.scala 27:72]
    node _T_192 = bits(io.in.bits.func, 1, 0) @[UnpipelinedLSU.scala 414:36]
    node _T_193 = bits(io.in.bits.src1, 0, 0) @[UnpipelinedLSU.scala 416:23]
    node _T_194 = eq(_T_193, UInt<1>("h0")) @[UnpipelinedLSU.scala 416:27]
    node _T_195 = bits(io.in.bits.src1, 1, 0) @[UnpipelinedLSU.scala 417:23]
    node _T_196 = eq(_T_195, UInt<1>("h0")) @[UnpipelinedLSU.scala 417:29]
    node _T_197 = bits(io.in.bits.src1, 2, 0) @[UnpipelinedLSU.scala 418:23]
    node _T_198 = eq(_T_197, UInt<1>("h0")) @[UnpipelinedLSU.scala 418:29]
    node _T_199 = eq(UInt<1>("h0"), _T_192) @[LookupTree.scala 24:34]
    node _T_200 = eq(UInt<1>("h1"), _T_192) @[LookupTree.scala 24:34]
    node _T_201 = eq(UInt<2>("h2"), _T_192) @[LookupTree.scala 24:34]
    node _T_202 = eq(UInt<2>("h3"), _T_192) @[LookupTree.scala 24:34]
    node _T_203 = mux(_T_199, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_204 = mux(_T_200, _T_194, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_205 = mux(_T_201, _T_196, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_206 = mux(_T_202, _T_198, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_207 = or(_T_203, _T_204) @[Mux.scala 27:72]
    node _T_208 = or(_T_207, _T_205) @[Mux.scala 27:72]
    node _T_209 = or(_T_208, _T_206) @[Mux.scala 27:72]
    wire addrAligned : UInt<1> @[Mux.scala 27:72]
    addrAligned <= _T_209 @[Mux.scala 27:72]
    node _T_210 = bits(io.dmem.resp.bits.rdata, 63, 0) @[UnpipelinedLSU.scala 421:58]
    node _T_211 = mux(partialLoad, rdataPartialLoad, _T_210) @[UnpipelinedLSU.scala 421:21]
    io.out.bits <= _T_211 @[UnpipelinedLSU.scala 421:15]
    io.isMMIO is invalid @[UnpipelinedLSU.scala 423:13]
    wire isAMO : UInt<1>
    isAMO <= UInt<1>("h0")
    node _T_212 = eq(isStore, UInt<1>("h0")) @[UnpipelinedLSU.scala 429:38]
    node _T_213 = and(io.in.valid, _T_212) @[UnpipelinedLSU.scala 429:35]
    node _T_214 = eq(isAMO, UInt<1>("h0")) @[UnpipelinedLSU.scala 429:50]
    node _T_215 = and(_T_213, _T_214) @[UnpipelinedLSU.scala 429:47]
    node _T_216 = eq(addrAligned, UInt<1>("h0")) @[UnpipelinedLSU.scala 429:60]
    node _T_217 = and(_T_215, _T_216) @[UnpipelinedLSU.scala 429:57]
    io.loadAddrMisaligned <= _T_217 @[UnpipelinedLSU.scala 429:25]
    node _T_218 = or(isStore, isAMO) @[UnpipelinedLSU.scala 430:47]
    node _T_219 = and(io.in.valid, _T_218) @[UnpipelinedLSU.scala 430:35]
    node _T_220 = eq(addrAligned, UInt<1>("h0")) @[UnpipelinedLSU.scala 430:60]
    node _T_221 = and(_T_219, _T_220) @[UnpipelinedLSU.scala 430:57]
    io.storeAddrMisaligned <= _T_221 @[UnpipelinedLSU.scala 430:26]
    node _T_222 = or(io.loadAddrMisaligned, io.storeAddrMisaligned) @[UnpipelinedLSU.scala 432:31]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_223 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_224 = tail(_T_223, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_224 @[GTimer.scala 25:7]
    wire _WIRE_5 : UInt<1>
    _WIRE_5 <= UInt<1>("h0")
    node _T_225 = and(_T_222, _WIRE_5) @[Debug.scala 55:16]
    when _T_225 : @[Debug.scala 55:31]
      node _T_226 = asUInt(reset) @[Debug.scala 56:24]
      node _T_227 = eq(_T_226, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_227 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] LSExecUnit: ", REG_4) : SIM_8 @[Debug.scala 56:24]
      node _T_228 = asUInt(reset) @[Debug.scala 57:13]
      node _T_229 = eq(_T_228, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_229 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "misaligned addr detected\n") : SIM_9 @[Debug.scala 57:13]
    node _T_230 = bits(io.dmem.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_231 = eq(_T_230, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_232 = bits(io.dmem.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_233 = eq(_T_232, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_234 = and(_T_231, _T_233) @[SimpleBus.scala 73:26]
    node _T_235 = and(io.dmem.req.valid, _T_234) @[SimpleBus.scala 104:29]
    node _T_236 = and(io.dmem.req.ready, io.dmem.req.valid) @[Decoupled.scala 40:37]
    node _T_237 = and(_T_235, _T_236) @[UnpipelinedLSU.scala 434:39]
    node _T_238 = bits(io.dmem.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_239 = eq(_T_238, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_240 = bits(io.dmem.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_241 = eq(_T_240, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_242 = and(_T_239, _T_241) @[SimpleBus.scala 73:26]
    node _T_243 = and(io.dmem.req.valid, _T_242) @[SimpleBus.scala 104:29]
    node _T_244 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg REG_5 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_243 : @[StopWatch.scala 30:20]
      REG_5 <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when _T_244 : @[StopWatch.scala 31:19]
      REG_5 <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_245 = bits(io.dmem.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_246 = and(io.dmem.req.valid, _T_245) @[SimpleBus.scala 103:29]
    node _T_247 = and(io.dmem.resp.ready, io.dmem.resp.valid) @[Decoupled.scala 40:37]
    reg REG_6 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_246 : @[StopWatch.scala 30:20]
      REG_6 <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when _T_247 : @[StopWatch.scala 31:19]
      REG_6 <= UInt<1>("h0") @[StopWatch.scala 31:23]

  module AtomALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<64>, flip src2 : UInt<64>, flip func : UInt<7>, flip isWordOp : UInt<1>, result : UInt<64>}

    node _T = bits(io.func, 6, 6) @[LSU.scala 53:31]
    node isAdderSub = eq(_T, UInt<1>("h0")) @[LSU.scala 184:20]
    node _T_1 = bits(isAdderSub, 0, 0) @[Bitwise.scala 72:15]
    node _T_2 = mux(_T_1, UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_3 = xor(io.src2, _T_2) @[LSU.scala 185:33]
    node _T_4 = add(io.src1, _T_3) @[LSU.scala 185:24]
    node _T_5 = add(_T_4, isAdderSub) @[LSU.scala 185:60]
    node adderRes = tail(_T_5, 1) @[LSU.scala 185:60]
    node xorRes = xor(io.src1, io.src2) @[LSU.scala 186:21]
    node _T_6 = bits(adderRes, 64, 64) @[LSU.scala 187:23]
    node sltu = eq(_T_6, UInt<1>("h0")) @[LSU.scala 187:14]
    node _T_7 = bits(xorRes, 63, 63) @[LSU.scala 188:19]
    node slt = xor(_T_7, sltu) @[LSU.scala 188:28]
    node _T_8 = bits(io.func, 5, 0) @[LSU.scala 190:35]
    node _T_9 = and(io.src1, io.src2) @[LSU.scala 194:32]
    node _T_10 = or(io.src1, io.src2) @[LSU.scala 195:32]
    node _T_11 = bits(slt, 0, 0) @[LSU.scala 196:33]
    node _T_12 = mux(_T_11, io.src1, io.src2) @[LSU.scala 196:29]
    node _T_13 = bits(slt, 0, 0) @[LSU.scala 197:33]
    node _T_14 = mux(_T_13, io.src2, io.src1) @[LSU.scala 197:29]
    node _T_15 = bits(sltu, 0, 0) @[LSU.scala 198:34]
    node _T_16 = mux(_T_15, io.src1, io.src2) @[LSU.scala 198:29]
    node _T_17 = bits(sltu, 0, 0) @[LSU.scala 199:34]
    node _T_18 = mux(_T_17, io.src2, io.src1) @[LSU.scala 199:29]
    node _T_19 = eq(UInt<6>("h22"), _T_8) @[Mux.scala 80:60]
    node _T_20 = mux(_T_19, io.src2, adderRes) @[Mux.scala 80:57]
    node _T_21 = eq(UInt<6>("h24"), _T_8) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, xorRes, _T_20) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<6>("h25"), _T_8) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_9, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<6>("h26"), _T_8) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_10, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<6>("h37"), _T_8) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_12, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<6>("h30"), _T_8) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<6>("h31"), _T_8) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_16, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<6>("h32"), _T_8) @[Mux.scala 80:60]
    node res = mux(_T_33, _T_18, _T_32) @[Mux.scala 80:57]
    node _T_34 = bits(res, 31, 0) @[LSU.scala 202:45]
    node _T_35 = bits(_T_34, 31, 31) @[BitUtils.scala 39:20]
    node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
    node _T_37 = mux(_T_36, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_38 = cat(_T_37, _T_34) @[Cat.scala 30:58]
    node _T_39 = bits(res, 63, 0) @[LSU.scala 202:61]
    node _T_40 = mux(io.isWordOp, _T_38, _T_39) @[LSU.scala 202:20]
    io.result <= _T_40 @[LSU.scala 202:13]

  module UnpipelinedLSU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip wdata : UInt<64>, flip instr : UInt<32>, dmem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, isMMIO : UInt<1>, dtlbPF : UInt<1>, loadAddrMisaligned : UInt<1>, storeAddrMisaligned : UInt<1>}

    inst lsExecUnit of LSExecUnit @[UnpipelinedLSU.scala 47:28]
    lsExecUnit.clock <= clock
    lsExecUnit.reset <= reset
    lsExecUnit.io.instr is invalid @[UnpipelinedLSU.scala 48:25]
    io.dtlbPF <= lsExecUnit.io.dtlbPF @[UnpipelinedLSU.scala 49:15]
    node _T = bits(io.in.bits.func, 3, 3) @[LSU.scala 55:39]
    node storeReq = and(io.in.valid, _T) @[UnpipelinedLSU.scala 51:26]
    node _T_1 = bits(io.in.bits.func, 3, 3) @[LSU.scala 55:39]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[LSU.scala 56:34]
    node _T_3 = bits(io.in.bits.func, 5, 5) @[LSU.scala 54:38]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[LSU.scala 56:51]
    node _T_5 = and(_T_2, _T_4) @[LSU.scala 56:49]
    node loadReq = and(io.in.valid, _T_5) @[UnpipelinedLSU.scala 52:26]
    node _T_6 = bits(io.in.bits.func, 5, 5) @[LSU.scala 54:38]
    node atomReq = and(io.in.valid, _T_6) @[UnpipelinedLSU.scala 53:26]
    node _T_7 = bits(io.in.bits.func, 5, 5) @[LSU.scala 54:38]
    node _T_8 = eq(io.in.bits.func, UInt<6>("h20")) @[LSU.scala 57:37]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[LSU.scala 59:49]
    node _T_10 = and(_T_7, _T_9) @[LSU.scala 59:46]
    node _T_11 = eq(io.in.bits.func, UInt<6>("h21")) @[LSU.scala 58:37]
    node _T_12 = eq(_T_11, UInt<1>("h0")) @[LSU.scala 59:64]
    node _T_13 = and(_T_10, _T_12) @[LSU.scala 59:61]
    node amoReq = and(io.in.valid, _T_13) @[UnpipelinedLSU.scala 54:26]
    node _T_14 = eq(io.in.bits.func, UInt<6>("h20")) @[LSU.scala 57:37]
    node lrReq = and(io.in.valid, _T_14) @[UnpipelinedLSU.scala 55:25]
    node _T_15 = eq(io.in.bits.func, UInt<6>("h21")) @[LSU.scala 58:37]
    node scReq = and(io.in.valid, _T_15) @[UnpipelinedLSU.scala 56:25]
    node aq = bits(io.instr, 26, 26) @[UnpipelinedLSU.scala 62:22]
    node rl = bits(io.instr, 25, 25) @[UnpipelinedLSU.scala 63:22]
    node funct3 = bits(io.instr, 14, 12) @[UnpipelinedLSU.scala 64:26]
    node _T_16 = bits(funct3, 0, 0) @[UnpipelinedLSU.scala 66:29]
    node atomWidthW = eq(_T_16, UInt<1>("h0")) @[UnpipelinedLSU.scala 66:22]
    node atomWidthD = bits(funct3, 0, 0) @[UnpipelinedLSU.scala 67:28]
    wire setLr : UInt<1> @[UnpipelinedLSU.scala 70:21]
    wire setLrVal : UInt<1> @[UnpipelinedLSU.scala 71:24]
    wire setLrAddr : UInt<64> @[UnpipelinedLSU.scala 72:25]
    wire lr : UInt<1>
    lr <= UInt<1>("h0")
    wire lrAddr : UInt<64>
    lrAddr is invalid
    node _T_17 = eq(io.in.bits.src1, lrAddr) @[UnpipelinedLSU.scala 81:28]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[UnpipelinedLSU.scala 81:21]
    node scInvalid = and(_T_18, scReq) @[UnpipelinedLSU.scala 81:40]
    wire dtlbFinish : UInt<1>
    dtlbFinish <= UInt<1>("h0")
    wire dtlbPF : UInt<1>
    dtlbPF <= UInt<1>("h0")
    wire dtlbEnable : UInt<1>
    dtlbEnable <= UInt<1>("h0")
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[UnpipelinedLSU.scala 95:24]
    reg atomMemReg : UInt<64>, clock with :
      reset => (UInt<1>("h0"), atomMemReg) @[UnpipelinedLSU.scala 96:25]
    reg atomRegReg : UInt<64>, clock with :
      reset => (UInt<1>("h0"), atomRegReg) @[UnpipelinedLSU.scala 97:25]
    inst atomALU of AtomALU @[UnpipelinedLSU.scala 98:25]
    atomALU.clock <= clock
    atomALU.reset <= reset
    atomALU.io.src1 <= atomMemReg @[UnpipelinedLSU.scala 99:21]
    atomALU.io.src2 <= io.wdata @[UnpipelinedLSU.scala 100:21]
    atomALU.io.func <= io.in.bits.func @[UnpipelinedLSU.scala 101:21]
    atomALU.io.isWordOp <= atomWidthW @[UnpipelinedLSU.scala 102:25]
    lsExecUnit.io.in.valid <= UInt<1>("h0") @[UnpipelinedLSU.scala 119:32]
    lsExecUnit.io.out.ready is invalid @[UnpipelinedLSU.scala 120:32]
    lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 121:32]
    lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 122:32]
    lsExecUnit.io.in.bits.func is invalid @[UnpipelinedLSU.scala 123:32]
    lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 124:32]
    io.out.valid <= UInt<1>("h0") @[UnpipelinedLSU.scala 125:32]
    io.in.ready <= UInt<1>("h0") @[UnpipelinedLSU.scala 126:32]
    node _T_19 = eq(UInt<3>("h0"), state) @[UnpipelinedLSU.scala 128:20]
    when _T_19 : @[UnpipelinedLSU.scala 128:20]
      lsExecUnit.io.in.valid <= UInt<1>("h0") @[UnpipelinedLSU.scala 130:36]
      lsExecUnit.io.out.ready is invalid @[UnpipelinedLSU.scala 131:36]
      lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 132:36]
      lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 133:36]
      lsExecUnit.io.in.bits.func is invalid @[UnpipelinedLSU.scala 134:36]
      lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 135:36]
      node _T_20 = or(UInt<1>("h0"), scInvalid) @[UnpipelinedLSU.scala 136:47]
      io.in.ready <= _T_20 @[UnpipelinedLSU.scala 136:36]
      node _T_21 = or(UInt<1>("h0"), scInvalid) @[UnpipelinedLSU.scala 137:47]
      io.out.valid <= _T_21 @[UnpipelinedLSU.scala 137:36]
      when io.in.valid : @[UnpipelinedLSU.scala 138:20]
        state <= UInt<3>("h1") @[UnpipelinedLSU.scala 138:27]
      node _T_22 = eq(atomReq, UInt<1>("h0")) @[UnpipelinedLSU.scala 141:56]
      node _T_23 = and(io.in.valid, _T_22) @[UnpipelinedLSU.scala 141:53]
      lsExecUnit.io.in.valid <= _T_23 @[UnpipelinedLSU.scala 141:38]
      lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 142:38]
      node _T_24 = add(io.in.bits.src1, io.in.bits.src2) @[UnpipelinedLSU.scala 143:46]
      node _T_25 = tail(_T_24, 1) @[UnpipelinedLSU.scala 143:46]
      lsExecUnit.io.in.bits.src1 <= _T_25 @[UnpipelinedLSU.scala 143:38]
      lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 144:38]
      lsExecUnit.io.in.bits.func <= io.in.bits.func @[UnpipelinedLSU.scala 145:38]
      lsExecUnit.io.wdata <= io.wdata @[UnpipelinedLSU.scala 146:38]
      node _T_26 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
      node _T_27 = or(_T_26, scInvalid) @[UnpipelinedLSU.scala 147:66]
      io.in.ready <= _T_27 @[UnpipelinedLSU.scala 147:38]
      node _T_28 = or(lsExecUnit.io.out.valid, scInvalid) @[UnpipelinedLSU.scala 148:66]
      io.out.valid <= _T_28 @[UnpipelinedLSU.scala 148:38]
      state <= UInt<3>("h0") @[UnpipelinedLSU.scala 149:17]
      when amoReq : @[UnpipelinedLSU.scala 152:21]
        state <= UInt<3>("h5") @[UnpipelinedLSU.scala 152:28]
      when lrReq : @[UnpipelinedLSU.scala 153:20]
        state <= UInt<3>("h3") @[UnpipelinedLSU.scala 153:27]
      when scReq : @[UnpipelinedLSU.scala 154:20]
        node _T_29 = mux(scInvalid, UInt<3>("h0"), UInt<3>("h4")) @[UnpipelinedLSU.scala 154:33]
        state <= _T_29 @[UnpipelinedLSU.scala 154:27]
    else :
      node _T_30 = eq(UInt<3>("h1"), state) @[UnpipelinedLSU.scala 128:20]
      when _T_30 : @[UnpipelinedLSU.scala 128:20]
        lsExecUnit.io.in.valid <= UInt<1>("h1") @[UnpipelinedLSU.scala 159:36]
        lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 160:36]
        lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 161:36]
        lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 162:36]
        lsExecUnit.io.in.bits.func <= io.in.bits.func @[UnpipelinedLSU.scala 163:36]
        lsExecUnit.io.wdata <= io.wdata @[UnpipelinedLSU.scala 164:36]
        node _T_31 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
        io.in.ready <= _T_31 @[UnpipelinedLSU.scala 165:36]
        io.out.valid <= lsExecUnit.io.out.valid @[UnpipelinedLSU.scala 166:36]
        node _T_32 = eq(atomReq, UInt<1>("h0")) @[UnpipelinedLSU.scala 167:16]
        node _T_33 = eq(amoReq, UInt<1>("h0")) @[UnpipelinedLSU.scala 167:28]
        node _T_34 = or(_T_32, _T_33) @[UnpipelinedLSU.scala 167:25]
        node _T_35 = eq(lrReq, UInt<1>("h0")) @[UnpipelinedLSU.scala 167:39]
        node _T_36 = or(_T_34, _T_35) @[UnpipelinedLSU.scala 167:36]
        node _T_37 = eq(scReq, UInt<1>("h0")) @[UnpipelinedLSU.scala 167:49]
        node _T_38 = or(_T_36, _T_37) @[UnpipelinedLSU.scala 167:46]
        node _T_39 = asUInt(reset) @[UnpipelinedLSU.scala 167:15]
        node _T_40 = or(_T_38, _T_39) @[UnpipelinedLSU.scala 167:15]
        node _T_41 = eq(_T_40, UInt<1>("h0")) @[UnpipelinedLSU.scala 167:15]
        when _T_41 : @[UnpipelinedLSU.scala 167:15]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at UnpipelinedLSU.scala:167 assert(!atomReq || !amoReq || !lrReq || !scReq)\n") : SIM @[UnpipelinedLSU.scala 167:15]
          stop(clock, UInt<1>("h1"), 1) @[UnpipelinedLSU.scala 167:15]
        node _T_42 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
        when _T_42 : @[UnpipelinedLSU.scala 168:28]
          state <= UInt<3>("h0") @[UnpipelinedLSU.scala 168:35]
      else :
        node _T_43 = eq(UInt<3>("h5"), state) @[UnpipelinedLSU.scala 128:20]
        when _T_43 : @[UnpipelinedLSU.scala 128:20]
          lsExecUnit.io.in.valid <= UInt<1>("h1") @[UnpipelinedLSU.scala 184:36]
          lsExecUnit.io.out.ready <= UInt<1>("h1") @[UnpipelinedLSU.scala 185:36]
          lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 186:36]
          lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 187:36]
          node _T_44 = mux(atomWidthD, UInt<2>("h3"), UInt<2>("h2")) @[UnpipelinedLSU.scala 188:42]
          lsExecUnit.io.in.bits.func <= _T_44 @[UnpipelinedLSU.scala 188:36]
          lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 189:36]
          io.in.ready <= UInt<1>("h0") @[UnpipelinedLSU.scala 190:36]
          io.out.valid <= UInt<1>("h0") @[UnpipelinedLSU.scala 191:36]
          node _T_45 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
          when _T_45 : @[UnpipelinedLSU.scala 192:39]
            state <= UInt<3>("h6") @[UnpipelinedLSU.scala 193:17]
            reg REG : UInt<64>, clock with :
              reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
            node _T_46 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
            node _T_47 = tail(_T_46, 1) @[GTimer.scala 25:12]
            REG <= _T_47 @[GTimer.scala 25:7]
            wire _WIRE : UInt<1>
            _WIRE <= UInt<1>("h0")
            node _T_48 = and(UInt<1>("h1"), _WIRE) @[Debug.scala 55:16]
            when _T_48 : @[Debug.scala 55:31]
              node _T_49 = asUInt(reset) @[Debug.scala 56:24]
              node _T_50 = eq(_T_49, UInt<1>("h0")) @[Debug.scala 56:24]
              when _T_50 : @[Debug.scala 56:24]
                printf(clock, UInt<1>("h1"), "[%d] UnpipelinedLSU: ", REG) : SIM_1 @[Debug.scala 56:24]
              node _T_51 = asUInt(reset) @[Debug.scala 57:13]
              node _T_52 = eq(_T_51, UInt<1>("h0")) @[Debug.scala 57:13]
              when _T_52 : @[Debug.scala 57:13]
                printf(clock, UInt<1>("h1"), "[AMO-L] lsExecUnit.io.out.bits %x addr %x src2 %x\n", lsExecUnit.io.out.bits, lsExecUnit.io.in.bits.src1, io.wdata) : SIM_2 @[Debug.scala 57:13]
          atomMemReg <= lsExecUnit.io.out.bits @[UnpipelinedLSU.scala 196:20]
          atomRegReg <= lsExecUnit.io.out.bits @[UnpipelinedLSU.scala 197:20]
        else :
          node _T_53 = eq(UInt<3>("h6"), state) @[UnpipelinedLSU.scala 128:20]
          when _T_53 : @[UnpipelinedLSU.scala 128:20]
            lsExecUnit.io.in.valid <= UInt<1>("h0") @[UnpipelinedLSU.scala 201:36]
            lsExecUnit.io.out.ready <= UInt<1>("h0") @[UnpipelinedLSU.scala 202:36]
            lsExecUnit.io.in.bits.src1 is invalid @[UnpipelinedLSU.scala 203:36]
            lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 204:36]
            lsExecUnit.io.in.bits.func is invalid @[UnpipelinedLSU.scala 205:36]
            lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 206:36]
            io.in.ready <= UInt<1>("h0") @[UnpipelinedLSU.scala 207:36]
            io.out.valid <= UInt<1>("h0") @[UnpipelinedLSU.scala 208:36]
            state <= UInt<3>("h7") @[UnpipelinedLSU.scala 209:15]
            atomMemReg <= atomALU.io.result @[UnpipelinedLSU.scala 210:20]
            reg REG_1 : UInt<64>, clock with :
              reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
            node _T_54 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
            node _T_55 = tail(_T_54, 1) @[GTimer.scala 25:12]
            REG_1 <= _T_55 @[GTimer.scala 25:7]
            wire _WIRE_1 : UInt<1>
            _WIRE_1 <= UInt<1>("h0")
            node _T_56 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 55:16]
            when _T_56 : @[Debug.scala 55:31]
              node _T_57 = asUInt(reset) @[Debug.scala 56:24]
              node _T_58 = eq(_T_57, UInt<1>("h0")) @[Debug.scala 56:24]
              when _T_58 : @[Debug.scala 56:24]
                printf(clock, UInt<1>("h1"), "[%d] UnpipelinedLSU: ", REG_1) : SIM_3 @[Debug.scala 56:24]
              node _T_59 = asUInt(reset) @[Debug.scala 57:13]
              node _T_60 = eq(_T_59, UInt<1>("h0")) @[Debug.scala 57:13]
              when _T_60 : @[Debug.scala 57:13]
                printf(clock, UInt<1>("h1"), "[AMO-A] src1 %x src2 %x res %x\n", atomMemReg, io.wdata, atomALU.io.result) : SIM_4 @[Debug.scala 57:13]
          else :
            node _T_61 = eq(UInt<3>("h7"), state) @[UnpipelinedLSU.scala 128:20]
            when _T_61 : @[UnpipelinedLSU.scala 128:20]
              lsExecUnit.io.in.valid <= UInt<1>("h1") @[UnpipelinedLSU.scala 215:36]
              lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 216:36]
              lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 217:36]
              lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 218:36]
              node _T_62 = mux(atomWidthD, UInt<4>("hb"), UInt<4>("ha")) @[UnpipelinedLSU.scala 219:42]
              lsExecUnit.io.in.bits.func <= _T_62 @[UnpipelinedLSU.scala 219:36]
              lsExecUnit.io.wdata <= atomMemReg @[UnpipelinedLSU.scala 220:36]
              node _T_63 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
              io.in.ready <= _T_63 @[UnpipelinedLSU.scala 221:36]
              node _T_64 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
              io.out.valid <= _T_64 @[UnpipelinedLSU.scala 222:36]
              node _T_65 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
              when _T_65 : @[UnpipelinedLSU.scala 223:39]
                state <= UInt<3>("h0") @[UnpipelinedLSU.scala 224:17]
                reg REG_2 : UInt<64>, clock with :
                  reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                node _T_66 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
                node _T_67 = tail(_T_66, 1) @[GTimer.scala 25:12]
                REG_2 <= _T_67 @[GTimer.scala 25:7]
                wire _WIRE_2 : UInt<1>
                _WIRE_2 <= UInt<1>("h0")
                node _T_68 = and(UInt<1>("h1"), _WIRE_2) @[Debug.scala 55:16]
                when _T_68 : @[Debug.scala 55:31]
                  node _T_69 = asUInt(reset) @[Debug.scala 56:24]
                  node _T_70 = eq(_T_69, UInt<1>("h0")) @[Debug.scala 56:24]
                  when _T_70 : @[Debug.scala 56:24]
                    printf(clock, UInt<1>("h1"), "[%d] UnpipelinedLSU: ", REG_2) : SIM_5 @[Debug.scala 56:24]
                  node _T_71 = asUInt(reset) @[Debug.scala 57:13]
                  node _T_72 = eq(_T_71, UInt<1>("h0")) @[Debug.scala 57:13]
                  when _T_72 : @[Debug.scala 57:13]
                    printf(clock, UInt<1>("h1"), "[AMO-S] atomRegReg %x addr %x\n", atomRegReg, lsExecUnit.io.in.bits.src1) : SIM_6 @[Debug.scala 57:13]
            else :
              node _T_73 = eq(UInt<3>("h3"), state) @[UnpipelinedLSU.scala 128:20]
              when _T_73 : @[UnpipelinedLSU.scala 128:20]
                lsExecUnit.io.in.valid <= UInt<1>("h1") @[UnpipelinedLSU.scala 229:36]
                lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 230:36]
                lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 231:36]
                lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 232:36]
                node _T_74 = mux(atomWidthD, UInt<2>("h3"), UInt<2>("h2")) @[UnpipelinedLSU.scala 233:42]
                lsExecUnit.io.in.bits.func <= _T_74 @[UnpipelinedLSU.scala 233:36]
                lsExecUnit.io.wdata is invalid @[UnpipelinedLSU.scala 234:36]
                node _T_75 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                io.in.ready <= _T_75 @[UnpipelinedLSU.scala 235:36]
                node _T_76 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                io.out.valid <= _T_76 @[UnpipelinedLSU.scala 236:36]
                node _T_77 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                when _T_77 : @[UnpipelinedLSU.scala 237:39]
                  state <= UInt<3>("h0") @[UnpipelinedLSU.scala 238:17]
                  reg REG_3 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_78 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_79 = tail(_T_78, 1) @[GTimer.scala 25:12]
                  REG_3 <= _T_79 @[GTimer.scala 25:7]
                  wire _WIRE_3 : UInt<1>
                  _WIRE_3 <= UInt<1>("h0")
                  node _T_80 = and(UInt<1>("h1"), _WIRE_3) @[Debug.scala 55:16]
                  when _T_80 : @[Debug.scala 55:31]
                    node _T_81 = asUInt(reset) @[Debug.scala 56:24]
                    node _T_82 = eq(_T_81, UInt<1>("h0")) @[Debug.scala 56:24]
                    when _T_82 : @[Debug.scala 56:24]
                      printf(clock, UInt<1>("h1"), "[%d] UnpipelinedLSU: ", REG_3) : SIM_7 @[Debug.scala 56:24]
                    node _T_83 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_84 = eq(_T_83, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_84 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), "[LR]\n") : SIM_8 @[Debug.scala 57:13]
              else :
                node _T_85 = eq(UInt<3>("h4"), state) @[UnpipelinedLSU.scala 128:20]
                when _T_85 : @[UnpipelinedLSU.scala 128:20]
                  lsExecUnit.io.in.valid <= UInt<1>("h1") @[UnpipelinedLSU.scala 243:36]
                  lsExecUnit.io.out.ready <= io.out.ready @[UnpipelinedLSU.scala 244:36]
                  lsExecUnit.io.in.bits.src1 <= io.in.bits.src1 @[UnpipelinedLSU.scala 245:36]
                  lsExecUnit.io.in.bits.src2 is invalid @[UnpipelinedLSU.scala 246:36]
                  node _T_86 = mux(atomWidthD, UInt<4>("hb"), UInt<4>("ha")) @[UnpipelinedLSU.scala 247:42]
                  lsExecUnit.io.in.bits.func <= _T_86 @[UnpipelinedLSU.scala 247:36]
                  lsExecUnit.io.wdata <= io.wdata @[UnpipelinedLSU.scala 248:36]
                  node _T_87 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                  io.in.ready <= _T_87 @[UnpipelinedLSU.scala 249:36]
                  node _T_88 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                  io.out.valid <= _T_88 @[UnpipelinedLSU.scala 250:36]
                  node _T_89 = and(lsExecUnit.io.out.ready, lsExecUnit.io.out.valid) @[Decoupled.scala 40:37]
                  when _T_89 : @[UnpipelinedLSU.scala 251:39]
                    state <= UInt<3>("h0") @[UnpipelinedLSU.scala 252:17]
                    reg REG_4 : UInt<64>, clock with :
                      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                    node _T_90 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
                    node _T_91 = tail(_T_90, 1) @[GTimer.scala 25:12]
                    REG_4 <= _T_91 @[GTimer.scala 25:7]
                    wire _WIRE_4 : UInt<1>
                    _WIRE_4 <= UInt<1>("h0")
                    node _T_92 = and(UInt<1>("h1"), _WIRE_4) @[Debug.scala 55:16]
                    when _T_92 : @[Debug.scala 55:31]
                      node _T_93 = asUInt(reset) @[Debug.scala 56:24]
                      node _T_94 = eq(_T_93, UInt<1>("h0")) @[Debug.scala 56:24]
                      when _T_94 : @[Debug.scala 56:24]
                        printf(clock, UInt<1>("h1"), "[%d] UnpipelinedLSU: ", REG_4) : SIM_9 @[Debug.scala 56:24]
                      node _T_95 = asUInt(reset) @[Debug.scala 57:13]
                      node _T_96 = eq(_T_95, UInt<1>("h0")) @[Debug.scala 57:13]
                      when _T_96 : @[Debug.scala 57:13]
                        printf(clock, UInt<1>("h1"), "[SC] \n") : SIM_10 @[Debug.scala 57:13]
    node _T_97 = or(dtlbPF, io.loadAddrMisaligned) @[UnpipelinedLSU.scala 257:17]
    node _T_98 = or(_T_97, io.storeAddrMisaligned) @[UnpipelinedLSU.scala 257:42]
    when _T_98 : @[UnpipelinedLSU.scala 257:68]
      state <= UInt<3>("h0") @[UnpipelinedLSU.scala 258:13]
      io.out.valid <= UInt<1>("h1") @[UnpipelinedLSU.scala 259:20]
      io.in.ready <= UInt<1>("h1") @[UnpipelinedLSU.scala 260:19]
    node _T_99 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_100 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_101 = tail(_T_100, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_101 @[GTimer.scala 25:7]
    wire _WIRE_5 : UInt<1>
    _WIRE_5 <= UInt<1>("h0")
    node _T_102 = and(_T_99, _WIRE_5) @[Debug.scala 55:16]
    when _T_102 : @[Debug.scala 55:31]
      node _T_103 = asUInt(reset) @[Debug.scala 56:24]
      node _T_104 = eq(_T_103, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_104 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] UnpipelinedLSU: ", REG_5) : SIM_11 @[Debug.scala 56:24]
      node _T_105 = asUInt(reset) @[Debug.scala 57:13]
      node _T_106 = eq(_T_105, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_106 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[LSU-AGU] state %x inv %x inr %x\n", state, io.in.valid, io.in.ready) : SIM_12 @[Debug.scala 57:13]
    node _T_107 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_108 = or(lrReq, scReq) @[UnpipelinedLSU.scala 270:38]
    node _T_109 = and(_T_107, _T_108) @[UnpipelinedLSU.scala 270:28]
    setLr <= _T_109 @[UnpipelinedLSU.scala 270:11]
    setLrVal <= lrReq @[UnpipelinedLSU.scala 271:14]
    setLrAddr <= io.in.bits.src1 @[UnpipelinedLSU.scala 272:15]
    lsExecUnit.io.dmem.resp.bits.rdata <= io.dmem.resp.bits.rdata @[UnpipelinedLSU.scala 274:13]
    lsExecUnit.io.dmem.resp.bits.cmd <= io.dmem.resp.bits.cmd @[UnpipelinedLSU.scala 274:13]
    lsExecUnit.io.dmem.resp.valid <= io.dmem.resp.valid @[UnpipelinedLSU.scala 274:13]
    io.dmem.resp.ready <= lsExecUnit.io.dmem.resp.ready @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.wdata <= lsExecUnit.io.dmem.req.bits.wdata @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.wmask <= lsExecUnit.io.dmem.req.bits.wmask @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.cmd <= lsExecUnit.io.dmem.req.bits.cmd @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.size <= lsExecUnit.io.dmem.req.bits.size @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.bits.addr <= lsExecUnit.io.dmem.req.bits.addr @[UnpipelinedLSU.scala 274:13]
    io.dmem.req.valid <= lsExecUnit.io.dmem.req.valid @[UnpipelinedLSU.scala 274:13]
    lsExecUnit.io.dmem.req.ready <= io.dmem.req.ready @[UnpipelinedLSU.scala 274:13]
    node _T_110 = eq(state, UInt<3>("h7")) @[UnpipelinedLSU.scala 275:52]
    node _T_111 = mux(_T_110, atomRegReg, lsExecUnit.io.out.bits) @[UnpipelinedLSU.scala 275:45]
    node _T_112 = mux(scReq, scInvalid, _T_111) @[UnpipelinedLSU.scala 275:23]
    io.out.bits <= _T_112 @[UnpipelinedLSU.scala 275:17]
    wire lsuMMIO : UInt<1>
    lsuMMIO <= UInt<1>("h0")
    reg mmioReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[UnpipelinedLSU.scala 280:26]
    node _T_113 = eq(mmioReg, UInt<1>("h0")) @[UnpipelinedLSU.scala 281:11]
    when _T_113 : @[UnpipelinedLSU.scala 281:21]
      mmioReg <= lsuMMIO @[UnpipelinedLSU.scala 281:31]
    when io.out.valid : @[UnpipelinedLSU.scala 282:25]
      mmioReg <= UInt<1>("h0") @[UnpipelinedLSU.scala 282:35]
    node _T_114 = and(mmioReg, io.out.valid) @[UnpipelinedLSU.scala 283:26]
    io.isMMIO <= _T_114 @[UnpipelinedLSU.scala 283:15]
    io.loadAddrMisaligned <= lsExecUnit.io.loadAddrMisaligned @[UnpipelinedLSU.scala 285:27]
    io.storeAddrMisaligned <= lsExecUnit.io.storeAddrMisaligned @[UnpipelinedLSU.scala 286:28]

  module Multiplier :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<65>[2]}, flip sign : UInt<1>, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<130>}}

    reg REG : UInt, clock with :
      reset => (UInt<1>("h0"), REG) @[MDU.scala 56:43]
    REG <= io.in.bits[0] @[MDU.scala 56:43]
    node _T = asSInt(REG) @[MDU.scala 58:42]
    reg REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_1) @[MDU.scala 56:43]
    REG_1 <= io.in.bits[1] @[MDU.scala 56:43]
    node _T_1 = asSInt(REG_1) @[MDU.scala 58:76]
    node mulRes = mul(_T, _T_1) @[MDU.scala 58:49]
    reg REG_2 : SInt, clock with :
      reset => (UInt<1>("h0"), REG_2) @[MDU.scala 57:60]
    REG_2 <= mulRes @[MDU.scala 57:60]
    reg REG_3 : SInt, clock with :
      reset => (UInt<1>("h0"), REG_3) @[MDU.scala 57:52]
    REG_3 <= REG_2 @[MDU.scala 57:52]
    reg REG_4 : SInt, clock with :
      reset => (UInt<1>("h0"), REG_4) @[MDU.scala 57:44]
    REG_4 <= REG_3 @[MDU.scala 57:44]
    node _T_2 = asUInt(REG_4) @[MDU.scala 59:37]
    io.out.bits <= _T_2 @[MDU.scala 59:15]
    node _T_3 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_5) @[MDU.scala 56:43]
    REG_5 <= _T_3 @[MDU.scala 56:43]
    reg REG_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_6) @[MDU.scala 57:60]
    REG_6 <= REG_5 @[MDU.scala 57:60]
    reg REG_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_7) @[MDU.scala 57:52]
    REG_7 <= REG_6 @[MDU.scala 57:52]
    reg REG_8 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_8) @[MDU.scala 57:44]
    REG_8 <= REG_7 @[MDU.scala 57:44]
    io.out.valid <= REG_8 @[MDU.scala 60:16]
    reg busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MDU.scala 62:21]
    node _T_4 = eq(busy, UInt<1>("h0")) @[MDU.scala 63:24]
    node _T_5 = and(io.in.valid, _T_4) @[MDU.scala 63:21]
    when _T_5 : @[MDU.scala 63:31]
      busy <= UInt<1>("h1") @[MDU.scala 63:38]
    when io.out.valid : @[MDU.scala 64:23]
      busy <= UInt<1>("h0") @[MDU.scala 64:30]
    node _T_6 = eq(busy, UInt<1>("h0")) @[MDU.scala 65:49]
    io.in.ready <= _T_6 @[MDU.scala 65:15]

  module Divider :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>[2]}, flip sign : UInt<1>, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<128>}}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MDU.scala 77:22]
    node _T = eq(state, UInt<3>("h0")) @[MDU.scala 78:23]
    node _T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node newReq = and(_T, _T_1) @[MDU.scala 78:35]
    node divBy0 = eq(io.in.bits[1], UInt<64>("h0")) @[MDU.scala 81:18]
    reg shiftReg : UInt<129>, clock with :
      reset => (UInt<1>("h0"), shiftReg) @[MDU.scala 83:21]
    node hi = bits(shiftReg, 128, 64) @[MDU.scala 84:20]
    node lo = bits(shiftReg, 63, 0) @[MDU.scala 85:20]
    node _T_2 = bits(io.in.bits[0], 63, 63) @[MDU.scala 72:14]
    node aSign = and(_T_2, io.sign) @[MDU.scala 72:24]
    node _T_3 = sub(UInt<1>("h0"), io.in.bits[0]) @[MDU.scala 73:16]
    node _T_4 = tail(_T_3, 1) @[MDU.scala 73:16]
    node aVal = mux(aSign, _T_4, io.in.bits[0]) @[MDU.scala 73:12]
    node _T_5 = bits(io.in.bits[1], 63, 63) @[MDU.scala 72:14]
    node bSign = and(_T_5, io.sign) @[MDU.scala 72:24]
    node _T_6 = sub(UInt<1>("h0"), io.in.bits[1]) @[MDU.scala 73:16]
    node _T_7 = tail(_T_6, 1) @[MDU.scala 73:16]
    node bVal = mux(bSign, _T_7, io.in.bits[1]) @[MDU.scala 73:12]
    reg aSignReg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), aSignReg) @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      aSignReg <= aSign @[Reg.scala 16:23]
    node _T_8 = xor(aSign, bSign) @[MDU.scala 90:35]
    node _T_9 = eq(divBy0, UInt<1>("h0")) @[MDU.scala 90:47]
    node _T_10 = and(_T_8, _T_9) @[MDU.scala 90:44]
    reg qSignReg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), qSignReg) @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      qSignReg <= _T_10 @[Reg.scala 16:23]
    reg bReg : UInt<64>, clock with :
      reset => (UInt<1>("h0"), bReg) @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      bReg <= bVal @[Reg.scala 16:23]
    node _T_11 = cat(aVal, UInt<1>("h0")) @[Cat.scala 30:58]
    reg aValx2Reg : UInt<65>, clock with :
      reset => (UInt<1>("h0"), aValx2Reg) @[Reg.scala 15:16]
    when newReq : @[Reg.scala 16:19]
      aValx2Reg <= _T_11 @[Reg.scala 16:23]
    reg value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 60:40]
    when newReq : @[MDU.scala 95:17]
      state <= UInt<3>("h1") @[MDU.scala 96:11]
    else :
      node _T_12 = eq(state, UInt<3>("h1")) @[MDU.scala 97:22]
      when _T_12 : @[MDU.scala 97:34]
        node hi_1 = bits(bReg, 63, 32) @[CircuitMath.scala 35:17]
        node lo_1 = bits(bReg, 31, 0) @[CircuitMath.scala 36:17]
        node useHi = orr(hi_1) @[CircuitMath.scala 37:22]
        node hi_2 = bits(hi_1, 31, 16) @[CircuitMath.scala 35:17]
        node lo_2 = bits(hi_1, 15, 0) @[CircuitMath.scala 36:17]
        node useHi_1 = orr(hi_2) @[CircuitMath.scala 37:22]
        node hi_3 = bits(hi_2, 15, 8) @[CircuitMath.scala 35:17]
        node lo_3 = bits(hi_2, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_2 = orr(hi_3) @[CircuitMath.scala 37:22]
        node hi_4 = bits(hi_3, 7, 4) @[CircuitMath.scala 35:17]
        node lo_4 = bits(hi_3, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_3 = orr(hi_4) @[CircuitMath.scala 37:22]
        node _T_13 = bits(hi_4, 3, 3) @[CircuitMath.scala 32:12]
        node _T_14 = bits(hi_4, 2, 2) @[CircuitMath.scala 32:12]
        node _T_15 = bits(hi_4, 1, 1) @[CircuitMath.scala 30:8]
        node _T_16 = mux(_T_14, UInt<2>("h2"), _T_15) @[CircuitMath.scala 32:10]
        node _T_17 = mux(_T_13, UInt<2>("h3"), _T_16) @[CircuitMath.scala 32:10]
        node _T_18 = bits(lo_4, 3, 3) @[CircuitMath.scala 32:12]
        node _T_19 = bits(lo_4, 2, 2) @[CircuitMath.scala 32:12]
        node _T_20 = bits(lo_4, 1, 1) @[CircuitMath.scala 30:8]
        node _T_21 = mux(_T_19, UInt<2>("h2"), _T_20) @[CircuitMath.scala 32:10]
        node _T_22 = mux(_T_18, UInt<2>("h3"), _T_21) @[CircuitMath.scala 32:10]
        node _T_23 = mux(useHi_3, _T_17, _T_22) @[CircuitMath.scala 38:21]
        node _T_24 = cat(useHi_3, _T_23) @[Cat.scala 30:58]
        node hi_5 = bits(lo_3, 7, 4) @[CircuitMath.scala 35:17]
        node lo_5 = bits(lo_3, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_4 = orr(hi_5) @[CircuitMath.scala 37:22]
        node _T_25 = bits(hi_5, 3, 3) @[CircuitMath.scala 32:12]
        node _T_26 = bits(hi_5, 2, 2) @[CircuitMath.scala 32:12]
        node _T_27 = bits(hi_5, 1, 1) @[CircuitMath.scala 30:8]
        node _T_28 = mux(_T_26, UInt<2>("h2"), _T_27) @[CircuitMath.scala 32:10]
        node _T_29 = mux(_T_25, UInt<2>("h3"), _T_28) @[CircuitMath.scala 32:10]
        node _T_30 = bits(lo_5, 3, 3) @[CircuitMath.scala 32:12]
        node _T_31 = bits(lo_5, 2, 2) @[CircuitMath.scala 32:12]
        node _T_32 = bits(lo_5, 1, 1) @[CircuitMath.scala 30:8]
        node _T_33 = mux(_T_31, UInt<2>("h2"), _T_32) @[CircuitMath.scala 32:10]
        node _T_34 = mux(_T_30, UInt<2>("h3"), _T_33) @[CircuitMath.scala 32:10]
        node _T_35 = mux(useHi_4, _T_29, _T_34) @[CircuitMath.scala 38:21]
        node _T_36 = cat(useHi_4, _T_35) @[Cat.scala 30:58]
        node _T_37 = mux(useHi_2, _T_24, _T_36) @[CircuitMath.scala 38:21]
        node _T_38 = cat(useHi_2, _T_37) @[Cat.scala 30:58]
        node hi_6 = bits(lo_2, 15, 8) @[CircuitMath.scala 35:17]
        node lo_6 = bits(lo_2, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_5 = orr(hi_6) @[CircuitMath.scala 37:22]
        node hi_7 = bits(hi_6, 7, 4) @[CircuitMath.scala 35:17]
        node lo_7 = bits(hi_6, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_6 = orr(hi_7) @[CircuitMath.scala 37:22]
        node _T_39 = bits(hi_7, 3, 3) @[CircuitMath.scala 32:12]
        node _T_40 = bits(hi_7, 2, 2) @[CircuitMath.scala 32:12]
        node _T_41 = bits(hi_7, 1, 1) @[CircuitMath.scala 30:8]
        node _T_42 = mux(_T_40, UInt<2>("h2"), _T_41) @[CircuitMath.scala 32:10]
        node _T_43 = mux(_T_39, UInt<2>("h3"), _T_42) @[CircuitMath.scala 32:10]
        node _T_44 = bits(lo_7, 3, 3) @[CircuitMath.scala 32:12]
        node _T_45 = bits(lo_7, 2, 2) @[CircuitMath.scala 32:12]
        node _T_46 = bits(lo_7, 1, 1) @[CircuitMath.scala 30:8]
        node _T_47 = mux(_T_45, UInt<2>("h2"), _T_46) @[CircuitMath.scala 32:10]
        node _T_48 = mux(_T_44, UInt<2>("h3"), _T_47) @[CircuitMath.scala 32:10]
        node _T_49 = mux(useHi_6, _T_43, _T_48) @[CircuitMath.scala 38:21]
        node _T_50 = cat(useHi_6, _T_49) @[Cat.scala 30:58]
        node hi_8 = bits(lo_6, 7, 4) @[CircuitMath.scala 35:17]
        node lo_8 = bits(lo_6, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_7 = orr(hi_8) @[CircuitMath.scala 37:22]
        node _T_51 = bits(hi_8, 3, 3) @[CircuitMath.scala 32:12]
        node _T_52 = bits(hi_8, 2, 2) @[CircuitMath.scala 32:12]
        node _T_53 = bits(hi_8, 1, 1) @[CircuitMath.scala 30:8]
        node _T_54 = mux(_T_52, UInt<2>("h2"), _T_53) @[CircuitMath.scala 32:10]
        node _T_55 = mux(_T_51, UInt<2>("h3"), _T_54) @[CircuitMath.scala 32:10]
        node _T_56 = bits(lo_8, 3, 3) @[CircuitMath.scala 32:12]
        node _T_57 = bits(lo_8, 2, 2) @[CircuitMath.scala 32:12]
        node _T_58 = bits(lo_8, 1, 1) @[CircuitMath.scala 30:8]
        node _T_59 = mux(_T_57, UInt<2>("h2"), _T_58) @[CircuitMath.scala 32:10]
        node _T_60 = mux(_T_56, UInt<2>("h3"), _T_59) @[CircuitMath.scala 32:10]
        node _T_61 = mux(useHi_7, _T_55, _T_60) @[CircuitMath.scala 38:21]
        node _T_62 = cat(useHi_7, _T_61) @[Cat.scala 30:58]
        node _T_63 = mux(useHi_5, _T_50, _T_62) @[CircuitMath.scala 38:21]
        node _T_64 = cat(useHi_5, _T_63) @[Cat.scala 30:58]
        node _T_65 = mux(useHi_1, _T_38, _T_64) @[CircuitMath.scala 38:21]
        node _T_66 = cat(useHi_1, _T_65) @[Cat.scala 30:58]
        node hi_9 = bits(lo_1, 31, 16) @[CircuitMath.scala 35:17]
        node lo_9 = bits(lo_1, 15, 0) @[CircuitMath.scala 36:17]
        node useHi_8 = orr(hi_9) @[CircuitMath.scala 37:22]
        node hi_10 = bits(hi_9, 15, 8) @[CircuitMath.scala 35:17]
        node lo_10 = bits(hi_9, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_9 = orr(hi_10) @[CircuitMath.scala 37:22]
        node hi_11 = bits(hi_10, 7, 4) @[CircuitMath.scala 35:17]
        node lo_11 = bits(hi_10, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_10 = orr(hi_11) @[CircuitMath.scala 37:22]
        node _T_67 = bits(hi_11, 3, 3) @[CircuitMath.scala 32:12]
        node _T_68 = bits(hi_11, 2, 2) @[CircuitMath.scala 32:12]
        node _T_69 = bits(hi_11, 1, 1) @[CircuitMath.scala 30:8]
        node _T_70 = mux(_T_68, UInt<2>("h2"), _T_69) @[CircuitMath.scala 32:10]
        node _T_71 = mux(_T_67, UInt<2>("h3"), _T_70) @[CircuitMath.scala 32:10]
        node _T_72 = bits(lo_11, 3, 3) @[CircuitMath.scala 32:12]
        node _T_73 = bits(lo_11, 2, 2) @[CircuitMath.scala 32:12]
        node _T_74 = bits(lo_11, 1, 1) @[CircuitMath.scala 30:8]
        node _T_75 = mux(_T_73, UInt<2>("h2"), _T_74) @[CircuitMath.scala 32:10]
        node _T_76 = mux(_T_72, UInt<2>("h3"), _T_75) @[CircuitMath.scala 32:10]
        node _T_77 = mux(useHi_10, _T_71, _T_76) @[CircuitMath.scala 38:21]
        node _T_78 = cat(useHi_10, _T_77) @[Cat.scala 30:58]
        node hi_12 = bits(lo_10, 7, 4) @[CircuitMath.scala 35:17]
        node lo_12 = bits(lo_10, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_11 = orr(hi_12) @[CircuitMath.scala 37:22]
        node _T_79 = bits(hi_12, 3, 3) @[CircuitMath.scala 32:12]
        node _T_80 = bits(hi_12, 2, 2) @[CircuitMath.scala 32:12]
        node _T_81 = bits(hi_12, 1, 1) @[CircuitMath.scala 30:8]
        node _T_82 = mux(_T_80, UInt<2>("h2"), _T_81) @[CircuitMath.scala 32:10]
        node _T_83 = mux(_T_79, UInt<2>("h3"), _T_82) @[CircuitMath.scala 32:10]
        node _T_84 = bits(lo_12, 3, 3) @[CircuitMath.scala 32:12]
        node _T_85 = bits(lo_12, 2, 2) @[CircuitMath.scala 32:12]
        node _T_86 = bits(lo_12, 1, 1) @[CircuitMath.scala 30:8]
        node _T_87 = mux(_T_85, UInt<2>("h2"), _T_86) @[CircuitMath.scala 32:10]
        node _T_88 = mux(_T_84, UInt<2>("h3"), _T_87) @[CircuitMath.scala 32:10]
        node _T_89 = mux(useHi_11, _T_83, _T_88) @[CircuitMath.scala 38:21]
        node _T_90 = cat(useHi_11, _T_89) @[Cat.scala 30:58]
        node _T_91 = mux(useHi_9, _T_78, _T_90) @[CircuitMath.scala 38:21]
        node _T_92 = cat(useHi_9, _T_91) @[Cat.scala 30:58]
        node hi_13 = bits(lo_9, 15, 8) @[CircuitMath.scala 35:17]
        node lo_13 = bits(lo_9, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_12 = orr(hi_13) @[CircuitMath.scala 37:22]
        node hi_14 = bits(hi_13, 7, 4) @[CircuitMath.scala 35:17]
        node lo_14 = bits(hi_13, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_13 = orr(hi_14) @[CircuitMath.scala 37:22]
        node _T_93 = bits(hi_14, 3, 3) @[CircuitMath.scala 32:12]
        node _T_94 = bits(hi_14, 2, 2) @[CircuitMath.scala 32:12]
        node _T_95 = bits(hi_14, 1, 1) @[CircuitMath.scala 30:8]
        node _T_96 = mux(_T_94, UInt<2>("h2"), _T_95) @[CircuitMath.scala 32:10]
        node _T_97 = mux(_T_93, UInt<2>("h3"), _T_96) @[CircuitMath.scala 32:10]
        node _T_98 = bits(lo_14, 3, 3) @[CircuitMath.scala 32:12]
        node _T_99 = bits(lo_14, 2, 2) @[CircuitMath.scala 32:12]
        node _T_100 = bits(lo_14, 1, 1) @[CircuitMath.scala 30:8]
        node _T_101 = mux(_T_99, UInt<2>("h2"), _T_100) @[CircuitMath.scala 32:10]
        node _T_102 = mux(_T_98, UInt<2>("h3"), _T_101) @[CircuitMath.scala 32:10]
        node _T_103 = mux(useHi_13, _T_97, _T_102) @[CircuitMath.scala 38:21]
        node _T_104 = cat(useHi_13, _T_103) @[Cat.scala 30:58]
        node hi_15 = bits(lo_13, 7, 4) @[CircuitMath.scala 35:17]
        node lo_15 = bits(lo_13, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_14 = orr(hi_15) @[CircuitMath.scala 37:22]
        node _T_105 = bits(hi_15, 3, 3) @[CircuitMath.scala 32:12]
        node _T_106 = bits(hi_15, 2, 2) @[CircuitMath.scala 32:12]
        node _T_107 = bits(hi_15, 1, 1) @[CircuitMath.scala 30:8]
        node _T_108 = mux(_T_106, UInt<2>("h2"), _T_107) @[CircuitMath.scala 32:10]
        node _T_109 = mux(_T_105, UInt<2>("h3"), _T_108) @[CircuitMath.scala 32:10]
        node _T_110 = bits(lo_15, 3, 3) @[CircuitMath.scala 32:12]
        node _T_111 = bits(lo_15, 2, 2) @[CircuitMath.scala 32:12]
        node _T_112 = bits(lo_15, 1, 1) @[CircuitMath.scala 30:8]
        node _T_113 = mux(_T_111, UInt<2>("h2"), _T_112) @[CircuitMath.scala 32:10]
        node _T_114 = mux(_T_110, UInt<2>("h3"), _T_113) @[CircuitMath.scala 32:10]
        node _T_115 = mux(useHi_14, _T_109, _T_114) @[CircuitMath.scala 38:21]
        node _T_116 = cat(useHi_14, _T_115) @[Cat.scala 30:58]
        node _T_117 = mux(useHi_12, _T_104, _T_116) @[CircuitMath.scala 38:21]
        node _T_118 = cat(useHi_12, _T_117) @[Cat.scala 30:58]
        node _T_119 = mux(useHi_8, _T_92, _T_118) @[CircuitMath.scala 38:21]
        node _T_120 = cat(useHi_8, _T_119) @[Cat.scala 30:58]
        node _T_121 = mux(useHi, _T_66, _T_120) @[CircuitMath.scala 38:21]
        node _T_122 = cat(useHi, _T_121) @[Cat.scala 30:58]
        node _T_123 = or(UInt<7>("h40"), _T_122) @[MDU.scala 105:31]
        node hi_16 = bits(aValx2Reg, 64, 64) @[CircuitMath.scala 35:17]
        node lo_16 = bits(aValx2Reg, 63, 0) @[CircuitMath.scala 36:17]
        node useHi_15 = orr(hi_16) @[CircuitMath.scala 37:22]
        node hi_17 = bits(lo_16, 63, 32) @[CircuitMath.scala 35:17]
        node lo_17 = bits(lo_16, 31, 0) @[CircuitMath.scala 36:17]
        node useHi_16 = orr(hi_17) @[CircuitMath.scala 37:22]
        node hi_18 = bits(hi_17, 31, 16) @[CircuitMath.scala 35:17]
        node lo_18 = bits(hi_17, 15, 0) @[CircuitMath.scala 36:17]
        node useHi_17 = orr(hi_18) @[CircuitMath.scala 37:22]
        node hi_19 = bits(hi_18, 15, 8) @[CircuitMath.scala 35:17]
        node lo_19 = bits(hi_18, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_18 = orr(hi_19) @[CircuitMath.scala 37:22]
        node hi_20 = bits(hi_19, 7, 4) @[CircuitMath.scala 35:17]
        node lo_20 = bits(hi_19, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_19 = orr(hi_20) @[CircuitMath.scala 37:22]
        node _T_124 = bits(hi_20, 3, 3) @[CircuitMath.scala 32:12]
        node _T_125 = bits(hi_20, 2, 2) @[CircuitMath.scala 32:12]
        node _T_126 = bits(hi_20, 1, 1) @[CircuitMath.scala 30:8]
        node _T_127 = mux(_T_125, UInt<2>("h2"), _T_126) @[CircuitMath.scala 32:10]
        node _T_128 = mux(_T_124, UInt<2>("h3"), _T_127) @[CircuitMath.scala 32:10]
        node _T_129 = bits(lo_20, 3, 3) @[CircuitMath.scala 32:12]
        node _T_130 = bits(lo_20, 2, 2) @[CircuitMath.scala 32:12]
        node _T_131 = bits(lo_20, 1, 1) @[CircuitMath.scala 30:8]
        node _T_132 = mux(_T_130, UInt<2>("h2"), _T_131) @[CircuitMath.scala 32:10]
        node _T_133 = mux(_T_129, UInt<2>("h3"), _T_132) @[CircuitMath.scala 32:10]
        node _T_134 = mux(useHi_19, _T_128, _T_133) @[CircuitMath.scala 38:21]
        node _T_135 = cat(useHi_19, _T_134) @[Cat.scala 30:58]
        node hi_21 = bits(lo_19, 7, 4) @[CircuitMath.scala 35:17]
        node lo_21 = bits(lo_19, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_20 = orr(hi_21) @[CircuitMath.scala 37:22]
        node _T_136 = bits(hi_21, 3, 3) @[CircuitMath.scala 32:12]
        node _T_137 = bits(hi_21, 2, 2) @[CircuitMath.scala 32:12]
        node _T_138 = bits(hi_21, 1, 1) @[CircuitMath.scala 30:8]
        node _T_139 = mux(_T_137, UInt<2>("h2"), _T_138) @[CircuitMath.scala 32:10]
        node _T_140 = mux(_T_136, UInt<2>("h3"), _T_139) @[CircuitMath.scala 32:10]
        node _T_141 = bits(lo_21, 3, 3) @[CircuitMath.scala 32:12]
        node _T_142 = bits(lo_21, 2, 2) @[CircuitMath.scala 32:12]
        node _T_143 = bits(lo_21, 1, 1) @[CircuitMath.scala 30:8]
        node _T_144 = mux(_T_142, UInt<2>("h2"), _T_143) @[CircuitMath.scala 32:10]
        node _T_145 = mux(_T_141, UInt<2>("h3"), _T_144) @[CircuitMath.scala 32:10]
        node _T_146 = mux(useHi_20, _T_140, _T_145) @[CircuitMath.scala 38:21]
        node _T_147 = cat(useHi_20, _T_146) @[Cat.scala 30:58]
        node _T_148 = mux(useHi_18, _T_135, _T_147) @[CircuitMath.scala 38:21]
        node _T_149 = cat(useHi_18, _T_148) @[Cat.scala 30:58]
        node hi_22 = bits(lo_18, 15, 8) @[CircuitMath.scala 35:17]
        node lo_22 = bits(lo_18, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_21 = orr(hi_22) @[CircuitMath.scala 37:22]
        node hi_23 = bits(hi_22, 7, 4) @[CircuitMath.scala 35:17]
        node lo_23 = bits(hi_22, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_22 = orr(hi_23) @[CircuitMath.scala 37:22]
        node _T_150 = bits(hi_23, 3, 3) @[CircuitMath.scala 32:12]
        node _T_151 = bits(hi_23, 2, 2) @[CircuitMath.scala 32:12]
        node _T_152 = bits(hi_23, 1, 1) @[CircuitMath.scala 30:8]
        node _T_153 = mux(_T_151, UInt<2>("h2"), _T_152) @[CircuitMath.scala 32:10]
        node _T_154 = mux(_T_150, UInt<2>("h3"), _T_153) @[CircuitMath.scala 32:10]
        node _T_155 = bits(lo_23, 3, 3) @[CircuitMath.scala 32:12]
        node _T_156 = bits(lo_23, 2, 2) @[CircuitMath.scala 32:12]
        node _T_157 = bits(lo_23, 1, 1) @[CircuitMath.scala 30:8]
        node _T_158 = mux(_T_156, UInt<2>("h2"), _T_157) @[CircuitMath.scala 32:10]
        node _T_159 = mux(_T_155, UInt<2>("h3"), _T_158) @[CircuitMath.scala 32:10]
        node _T_160 = mux(useHi_22, _T_154, _T_159) @[CircuitMath.scala 38:21]
        node _T_161 = cat(useHi_22, _T_160) @[Cat.scala 30:58]
        node hi_24 = bits(lo_22, 7, 4) @[CircuitMath.scala 35:17]
        node lo_24 = bits(lo_22, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_23 = orr(hi_24) @[CircuitMath.scala 37:22]
        node _T_162 = bits(hi_24, 3, 3) @[CircuitMath.scala 32:12]
        node _T_163 = bits(hi_24, 2, 2) @[CircuitMath.scala 32:12]
        node _T_164 = bits(hi_24, 1, 1) @[CircuitMath.scala 30:8]
        node _T_165 = mux(_T_163, UInt<2>("h2"), _T_164) @[CircuitMath.scala 32:10]
        node _T_166 = mux(_T_162, UInt<2>("h3"), _T_165) @[CircuitMath.scala 32:10]
        node _T_167 = bits(lo_24, 3, 3) @[CircuitMath.scala 32:12]
        node _T_168 = bits(lo_24, 2, 2) @[CircuitMath.scala 32:12]
        node _T_169 = bits(lo_24, 1, 1) @[CircuitMath.scala 30:8]
        node _T_170 = mux(_T_168, UInt<2>("h2"), _T_169) @[CircuitMath.scala 32:10]
        node _T_171 = mux(_T_167, UInt<2>("h3"), _T_170) @[CircuitMath.scala 32:10]
        node _T_172 = mux(useHi_23, _T_166, _T_171) @[CircuitMath.scala 38:21]
        node _T_173 = cat(useHi_23, _T_172) @[Cat.scala 30:58]
        node _T_174 = mux(useHi_21, _T_161, _T_173) @[CircuitMath.scala 38:21]
        node _T_175 = cat(useHi_21, _T_174) @[Cat.scala 30:58]
        node _T_176 = mux(useHi_17, _T_149, _T_175) @[CircuitMath.scala 38:21]
        node _T_177 = cat(useHi_17, _T_176) @[Cat.scala 30:58]
        node hi_25 = bits(lo_17, 31, 16) @[CircuitMath.scala 35:17]
        node lo_25 = bits(lo_17, 15, 0) @[CircuitMath.scala 36:17]
        node useHi_24 = orr(hi_25) @[CircuitMath.scala 37:22]
        node hi_26 = bits(hi_25, 15, 8) @[CircuitMath.scala 35:17]
        node lo_26 = bits(hi_25, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_25 = orr(hi_26) @[CircuitMath.scala 37:22]
        node hi_27 = bits(hi_26, 7, 4) @[CircuitMath.scala 35:17]
        node lo_27 = bits(hi_26, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_26 = orr(hi_27) @[CircuitMath.scala 37:22]
        node _T_178 = bits(hi_27, 3, 3) @[CircuitMath.scala 32:12]
        node _T_179 = bits(hi_27, 2, 2) @[CircuitMath.scala 32:12]
        node _T_180 = bits(hi_27, 1, 1) @[CircuitMath.scala 30:8]
        node _T_181 = mux(_T_179, UInt<2>("h2"), _T_180) @[CircuitMath.scala 32:10]
        node _T_182 = mux(_T_178, UInt<2>("h3"), _T_181) @[CircuitMath.scala 32:10]
        node _T_183 = bits(lo_27, 3, 3) @[CircuitMath.scala 32:12]
        node _T_184 = bits(lo_27, 2, 2) @[CircuitMath.scala 32:12]
        node _T_185 = bits(lo_27, 1, 1) @[CircuitMath.scala 30:8]
        node _T_186 = mux(_T_184, UInt<2>("h2"), _T_185) @[CircuitMath.scala 32:10]
        node _T_187 = mux(_T_183, UInt<2>("h3"), _T_186) @[CircuitMath.scala 32:10]
        node _T_188 = mux(useHi_26, _T_182, _T_187) @[CircuitMath.scala 38:21]
        node _T_189 = cat(useHi_26, _T_188) @[Cat.scala 30:58]
        node hi_28 = bits(lo_26, 7, 4) @[CircuitMath.scala 35:17]
        node lo_28 = bits(lo_26, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_27 = orr(hi_28) @[CircuitMath.scala 37:22]
        node _T_190 = bits(hi_28, 3, 3) @[CircuitMath.scala 32:12]
        node _T_191 = bits(hi_28, 2, 2) @[CircuitMath.scala 32:12]
        node _T_192 = bits(hi_28, 1, 1) @[CircuitMath.scala 30:8]
        node _T_193 = mux(_T_191, UInt<2>("h2"), _T_192) @[CircuitMath.scala 32:10]
        node _T_194 = mux(_T_190, UInt<2>("h3"), _T_193) @[CircuitMath.scala 32:10]
        node _T_195 = bits(lo_28, 3, 3) @[CircuitMath.scala 32:12]
        node _T_196 = bits(lo_28, 2, 2) @[CircuitMath.scala 32:12]
        node _T_197 = bits(lo_28, 1, 1) @[CircuitMath.scala 30:8]
        node _T_198 = mux(_T_196, UInt<2>("h2"), _T_197) @[CircuitMath.scala 32:10]
        node _T_199 = mux(_T_195, UInt<2>("h3"), _T_198) @[CircuitMath.scala 32:10]
        node _T_200 = mux(useHi_27, _T_194, _T_199) @[CircuitMath.scala 38:21]
        node _T_201 = cat(useHi_27, _T_200) @[Cat.scala 30:58]
        node _T_202 = mux(useHi_25, _T_189, _T_201) @[CircuitMath.scala 38:21]
        node _T_203 = cat(useHi_25, _T_202) @[Cat.scala 30:58]
        node hi_29 = bits(lo_25, 15, 8) @[CircuitMath.scala 35:17]
        node lo_29 = bits(lo_25, 7, 0) @[CircuitMath.scala 36:17]
        node useHi_28 = orr(hi_29) @[CircuitMath.scala 37:22]
        node hi_30 = bits(hi_29, 7, 4) @[CircuitMath.scala 35:17]
        node lo_30 = bits(hi_29, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_29 = orr(hi_30) @[CircuitMath.scala 37:22]
        node _T_204 = bits(hi_30, 3, 3) @[CircuitMath.scala 32:12]
        node _T_205 = bits(hi_30, 2, 2) @[CircuitMath.scala 32:12]
        node _T_206 = bits(hi_30, 1, 1) @[CircuitMath.scala 30:8]
        node _T_207 = mux(_T_205, UInt<2>("h2"), _T_206) @[CircuitMath.scala 32:10]
        node _T_208 = mux(_T_204, UInt<2>("h3"), _T_207) @[CircuitMath.scala 32:10]
        node _T_209 = bits(lo_30, 3, 3) @[CircuitMath.scala 32:12]
        node _T_210 = bits(lo_30, 2, 2) @[CircuitMath.scala 32:12]
        node _T_211 = bits(lo_30, 1, 1) @[CircuitMath.scala 30:8]
        node _T_212 = mux(_T_210, UInt<2>("h2"), _T_211) @[CircuitMath.scala 32:10]
        node _T_213 = mux(_T_209, UInt<2>("h3"), _T_212) @[CircuitMath.scala 32:10]
        node _T_214 = mux(useHi_29, _T_208, _T_213) @[CircuitMath.scala 38:21]
        node _T_215 = cat(useHi_29, _T_214) @[Cat.scala 30:58]
        node hi_31 = bits(lo_29, 7, 4) @[CircuitMath.scala 35:17]
        node lo_31 = bits(lo_29, 3, 0) @[CircuitMath.scala 36:17]
        node useHi_30 = orr(hi_31) @[CircuitMath.scala 37:22]
        node _T_216 = bits(hi_31, 3, 3) @[CircuitMath.scala 32:12]
        node _T_217 = bits(hi_31, 2, 2) @[CircuitMath.scala 32:12]
        node _T_218 = bits(hi_31, 1, 1) @[CircuitMath.scala 30:8]
        node _T_219 = mux(_T_217, UInt<2>("h2"), _T_218) @[CircuitMath.scala 32:10]
        node _T_220 = mux(_T_216, UInt<2>("h3"), _T_219) @[CircuitMath.scala 32:10]
        node _T_221 = bits(lo_31, 3, 3) @[CircuitMath.scala 32:12]
        node _T_222 = bits(lo_31, 2, 2) @[CircuitMath.scala 32:12]
        node _T_223 = bits(lo_31, 1, 1) @[CircuitMath.scala 30:8]
        node _T_224 = mux(_T_222, UInt<2>("h2"), _T_223) @[CircuitMath.scala 32:10]
        node _T_225 = mux(_T_221, UInt<2>("h3"), _T_224) @[CircuitMath.scala 32:10]
        node _T_226 = mux(useHi_30, _T_220, _T_225) @[CircuitMath.scala 38:21]
        node _T_227 = cat(useHi_30, _T_226) @[Cat.scala 30:58]
        node _T_228 = mux(useHi_28, _T_215, _T_227) @[CircuitMath.scala 38:21]
        node _T_229 = cat(useHi_28, _T_228) @[Cat.scala 30:58]
        node _T_230 = mux(useHi_24, _T_203, _T_229) @[CircuitMath.scala 38:21]
        node _T_231 = cat(useHi_24, _T_230) @[Cat.scala 30:58]
        node _T_232 = mux(useHi_16, _T_177, _T_231) @[CircuitMath.scala 38:21]
        node _T_233 = cat(useHi_16, _T_232) @[Cat.scala 30:58]
        node _T_234 = mux(useHi_15, UInt<1>("h0"), _T_233) @[CircuitMath.scala 38:21]
        node _T_235 = cat(useHi_15, _T_234) @[Cat.scala 30:58]
        node _T_236 = sub(_T_123, _T_235) @[MDU.scala 105:45]
        node _T_237 = tail(_T_236, 1) @[MDU.scala 105:45]
        node _value_T = geq(_T_237, UInt<6>("h3f")) @[MDU.scala 109:52]
        node _value_T_1 = mux(_value_T, UInt<6>("h3f"), _T_237) @[MDU.scala 109:38]
        node _value_T_2 = mux(divBy0, UInt<1>("h0"), _value_T_1) @[MDU.scala 109:21]
        value <= _value_T_2 @[MDU.scala 109:15]
        state <= UInt<3>("h2") @[MDU.scala 110:11]
      else :
        node _T_238 = eq(state, UInt<3>("h2")) @[MDU.scala 111:22]
        when _T_238 : @[MDU.scala 111:35]
          node _T_239 = dshl(aValx2Reg, value) @[MDU.scala 112:27]
          shiftReg <= _T_239 @[MDU.scala 112:14]
          state <= UInt<3>("h3") @[MDU.scala 113:11]
        else :
          node _T_240 = eq(state, UInt<3>("h3")) @[MDU.scala 114:22]
          when _T_240 : @[MDU.scala 114:37]
            node _T_241 = geq(hi, bReg) @[MDU.scala 115:28]
            node _T_242 = sub(hi, bReg) @[MDU.scala 116:36]
            node _T_243 = tail(_T_242, 1) @[MDU.scala 116:36]
            node _T_244 = mux(_T_241, _T_243, hi) @[MDU.scala 116:24]
            node _T_245 = bits(_T_244, 63, 0) @[MDU.scala 116:47]
            node hi_32 = cat(_T_245, lo) @[Cat.scala 30:58]
            node _T_246 = cat(hi_32, _T_241) @[Cat.scala 30:58]
            shiftReg <= _T_246 @[MDU.scala 116:14]
            node wrap = eq(value, UInt<6>("h3f")) @[Counter.scala 72:24]
            node _value_T_3 = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
            node _value_T_4 = tail(_value_T_3, 1) @[Counter.scala 76:24]
            value <= _value_T_4 @[Counter.scala 76:15]
            node _T_247 = eq(value, UInt<6>("h3f")) @[MDU.scala 118:21]
            when _T_247 : @[MDU.scala 118:36]
              state <= UInt<3>("h4") @[MDU.scala 118:44]
          else :
            node _T_248 = eq(state, UInt<3>("h4")) @[MDU.scala 119:22]
            when _T_248 : @[MDU.scala 119:36]
              state <= UInt<3>("h0") @[MDU.scala 120:11]
    node r = bits(hi, 64, 1) @[MDU.scala 123:13]
    node _T_249 = sub(UInt<1>("h0"), lo) @[MDU.scala 124:28]
    node _T_250 = tail(_T_249, 1) @[MDU.scala 124:28]
    node resQ = mux(qSignReg, _T_250, lo) @[MDU.scala 124:17]
    node _T_251 = sub(UInt<1>("h0"), r) @[MDU.scala 125:28]
    node _T_252 = tail(_T_251, 1) @[MDU.scala 125:28]
    node resR = mux(aSignReg, _T_252, r) @[MDU.scala 125:17]
    node _T_253 = cat(resR, resQ) @[Cat.scala 30:58]
    io.out.bits <= _T_253 @[MDU.scala 126:15]
    node _T_254 = eq(state, UInt<3>("h4")) @[MDU.scala 128:39]
    io.out.valid <= _T_254 @[MDU.scala 128:16]
    node _T_255 = eq(state, UInt<3>("h0")) @[MDU.scala 129:25]
    io.in.ready <= _T_255 @[MDU.scala 129:15]

  module MDU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}

    node isDiv = bits(io.in.bits.func, 2, 2) @[MDU.scala 41:27]
    node _T = bits(io.in.bits.func, 2, 2) @[MDU.scala 41:27]
    node _T_1 = bits(io.in.bits.func, 0, 0) @[MDU.scala 42:45]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[MDU.scala 42:42]
    node isDivSign = and(_T, _T_2) @[MDU.scala 42:39]
    node isW = bits(io.in.bits.func, 3, 3) @[MDU.scala 43:25]
    inst mul of Multiplier @[MDU.scala 151:19]
    mul.clock <= clock
    mul.reset <= reset
    inst div of Divider @[MDU.scala 152:19]
    div.clock <= clock
    div.reset <= reset
    mul.io.sign <= isDivSign @[MDU.scala 154:12]
    mul.io.out.ready <= io.out.ready @[MDU.scala 155:17]
    div.io.sign <= isDivSign @[MDU.scala 154:12]
    div.io.out.ready <= io.out.ready @[MDU.scala 155:17]
    node _T_3 = bits(io.in.bits.func, 1, 0) @[MDU.scala 166:39]
    node _T_4 = cat(UInt<1>("h0"), io.in.bits.src1) @[Cat.scala 30:58]
    node _T_5 = bits(io.in.bits.src1, 63, 63) @[BitUtils.scala 39:20]
    node _T_6 = cat(_T_5, io.in.bits.src1) @[Cat.scala 30:58]
    node _T_7 = bits(io.in.bits.src1, 63, 63) @[BitUtils.scala 39:20]
    node _T_8 = cat(_T_7, io.in.bits.src1) @[Cat.scala 30:58]
    node _T_9 = cat(UInt<1>("h0"), io.in.bits.src1) @[Cat.scala 30:58]
    node _T_10 = eq(UInt<2>("h0"), _T_3) @[LookupTree.scala 24:34]
    node _T_11 = eq(UInt<2>("h1"), _T_3) @[LookupTree.scala 24:34]
    node _T_12 = eq(UInt<2>("h2"), _T_3) @[LookupTree.scala 24:34]
    node _T_13 = eq(UInt<2>("h3"), _T_3) @[LookupTree.scala 24:34]
    node _T_14 = mux(_T_10, _T_4, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_15 = mux(_T_11, _T_6, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_16 = mux(_T_12, _T_8, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_17 = mux(_T_13, _T_9, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_18 = or(_T_14, _T_15) @[Mux.scala 27:72]
    node _T_19 = or(_T_18, _T_16) @[Mux.scala 27:72]
    node _T_20 = or(_T_19, _T_17) @[Mux.scala 27:72]
    wire _WIRE : UInt<65> @[Mux.scala 27:72]
    _WIRE <= _T_20 @[Mux.scala 27:72]
    mul.io.in.bits[0] <= _WIRE @[MDU.scala 166:21]
    node _T_21 = bits(io.in.bits.func, 1, 0) @[MDU.scala 167:39]
    node _T_22 = cat(UInt<1>("h0"), io.in.bits.src2) @[Cat.scala 30:58]
    node _T_23 = bits(io.in.bits.src2, 63, 63) @[BitUtils.scala 39:20]
    node _T_24 = cat(_T_23, io.in.bits.src2) @[Cat.scala 30:58]
    node _T_25 = cat(UInt<1>("h0"), io.in.bits.src2) @[Cat.scala 30:58]
    node _T_26 = cat(UInt<1>("h0"), io.in.bits.src2) @[Cat.scala 30:58]
    node _T_27 = eq(UInt<2>("h0"), _T_21) @[LookupTree.scala 24:34]
    node _T_28 = eq(UInt<2>("h1"), _T_21) @[LookupTree.scala 24:34]
    node _T_29 = eq(UInt<2>("h2"), _T_21) @[LookupTree.scala 24:34]
    node _T_30 = eq(UInt<2>("h3"), _T_21) @[LookupTree.scala 24:34]
    node _T_31 = mux(_T_27, _T_22, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_32 = mux(_T_28, _T_24, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_33 = mux(_T_29, _T_25, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_34 = mux(_T_30, _T_26, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_35 = or(_T_31, _T_32) @[Mux.scala 27:72]
    node _T_36 = or(_T_35, _T_33) @[Mux.scala 27:72]
    node _T_37 = or(_T_36, _T_34) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<65> @[Mux.scala 27:72]
    _WIRE_1 <= _T_37 @[Mux.scala 27:72]
    mul.io.in.bits[1] <= _WIRE_1 @[MDU.scala 167:21]
    node _T_38 = bits(io.in.bits.src1, 31, 0) @[MDU.scala 169:68]
    node _T_39 = bits(_T_38, 31, 31) @[BitUtils.scala 39:20]
    node _T_40 = bits(_T_39, 0, 0) @[Bitwise.scala 72:15]
    node _T_41 = mux(_T_40, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_42 = cat(_T_41, _T_38) @[Cat.scala 30:58]
    node _T_43 = bits(io.in.bits.src1, 31, 0) @[MDU.scala 169:92]
    node _T_44 = cat(UInt<32>("h0"), _T_43) @[Cat.scala 30:58]
    node _T_45 = mux(isDivSign, _T_42, _T_44) @[MDU.scala 169:47]
    node _T_46 = mux(isW, _T_45, io.in.bits.src1) @[MDU.scala 169:38]
    div.io.in.bits[0] <= _T_46 @[MDU.scala 170:21]
    node _T_47 = bits(io.in.bits.src2, 31, 0) @[MDU.scala 169:68]
    node _T_48 = bits(_T_47, 31, 31) @[BitUtils.scala 39:20]
    node _T_49 = bits(_T_48, 0, 0) @[Bitwise.scala 72:15]
    node _T_50 = mux(_T_49, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_51 = cat(_T_50, _T_47) @[Cat.scala 30:58]
    node _T_52 = bits(io.in.bits.src2, 31, 0) @[MDU.scala 169:92]
    node _T_53 = cat(UInt<32>("h0"), _T_52) @[Cat.scala 30:58]
    node _T_54 = mux(isDivSign, _T_51, _T_53) @[MDU.scala 169:47]
    node _T_55 = mux(isW, _T_54, io.in.bits.src2) @[MDU.scala 169:38]
    div.io.in.bits[1] <= _T_55 @[MDU.scala 171:21]
    node _T_56 = eq(isDiv, UInt<1>("h0")) @[MDU.scala 173:37]
    node _T_57 = and(io.in.valid, _T_56) @[MDU.scala 173:34]
    mul.io.in.valid <= _T_57 @[MDU.scala 173:19]
    node _T_58 = and(io.in.valid, isDiv) @[MDU.scala 174:34]
    div.io.in.valid <= _T_58 @[MDU.scala 174:19]
    node _T_59 = bits(io.in.bits.func, 1, 0) @[MDU.scala 176:24]
    node _T_60 = eq(_T_59, UInt<2>("h0")) @[MDU.scala 176:30]
    node _T_61 = bits(mul.io.out.bits, 63, 0) @[MDU.scala 176:69]
    node _T_62 = bits(mul.io.out.bits, 127, 64) @[MDU.scala 176:96]
    node mulRes = mux(_T_60, _T_61, _T_62) @[MDU.scala 176:19]
    node _T_63 = bits(io.in.bits.func, 1, 1) @[MDU.scala 177:24]
    node _T_64 = bits(div.io.out.bits, 127, 64) @[MDU.scala 177:54]
    node _T_65 = bits(div.io.out.bits, 63, 0) @[MDU.scala 177:86]
    node divRes = mux(_T_63, _T_64, _T_65) @[MDU.scala 177:19]
    node res = mux(isDiv, divRes, mulRes) @[MDU.scala 178:16]
    node _T_66 = bits(res, 31, 0) @[MDU.scala 179:38]
    node _T_67 = bits(_T_66, 31, 31) @[BitUtils.scala 39:20]
    node _T_68 = bits(_T_67, 0, 0) @[Bitwise.scala 72:15]
    node _T_69 = mux(_T_68, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 72:12]
    node _T_70 = cat(_T_69, _T_66) @[Cat.scala 30:58]
    node _T_71 = mux(isW, _T_70, res) @[MDU.scala 179:21]
    io.out.bits <= _T_71 @[MDU.scala 179:15]
    node _T_72 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[MDU.scala 181:50]
    REG <= isDiv @[MDU.scala 181:50]
    node isDivReg = mux(_T_72, isDiv, REG) @[MDU.scala 181:21]
    node _T_73 = mux(isDiv, div.io.in.ready, mul.io.in.ready) @[MDU.scala 182:21]
    io.in.ready <= _T_73 @[MDU.scala 182:15]
    node _T_74 = mux(isDivReg, div.io.out.valid, mul.io.out.valid) @[MDU.scala 183:22]
    io.out.valid <= _T_74 @[MDU.scala 183:16]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_75 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_76 = tail(_T_75, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_76 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_77 = and(UInt<1>("h1"), _WIRE_2) @[Debug.scala 55:16]
    when _T_77 : @[Debug.scala 55:31]
      node _T_78 = asUInt(reset) @[Debug.scala 56:24]
      node _T_79 = eq(_T_78, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_79 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] MDU: ", REG_1) : SIM @[Debug.scala 56:24]
      node _T_80 = asUInt(reset) @[Debug.scala 57:13]
      node _T_81 = eq(_T_80, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_81 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[FU-MDU] irv-orv %d %d - %d %d\n", io.in.ready, io.in.valid, io.out.ready, io.out.valid) : SIM_1 @[Debug.scala 57:13]
    node _T_82 = and(mul.io.out.ready, mul.io.out.valid) @[Decoupled.scala 40:37]

  extmodule DifftestCSRState :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip priviledgeMode : UInt<2>, flip mstatus : UInt<64>, flip sstatus : UInt<64>, flip mepc : UInt<64>, flip sepc : UInt<64>, flip mtval : UInt<64>, flip stval : UInt<64>, flip mtvec : UInt<64>, flip stvec : UInt<64>, flip mcause : UInt<64>, flip scause : UInt<64>, flip satp : UInt<64>, flip mip : UInt<64>, flip mie : UInt<64>, flip mscratch : UInt<64>, flip sscratch : UInt<64>, flip mideleg : UInt<64>, flip medeleg : UInt<64>}
    defname = DifftestCSRState

  extmodule DifftestArchEvent :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip intrNO : UInt<32>, flip cause : UInt<32>, flip exceptionPC : UInt<64>, flip exceptionInst : UInt<32>}
    defname = DifftestArchEvent

  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip cfIn : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, flip instrValid : UInt<1>, flip isBackendException : UInt<1>, intrNO : UInt<64>, flip imemMMU : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, flip dmemMMU : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, wenFix : UInt<1>}

    reg csrNotImplemented : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 213:34]
    reg mtvec : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 252:22]
    reg mcounteren : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 253:27]
    reg mcause : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 254:23]
    reg mtval : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 255:22]
    reg mepc : UInt<64>, clock with :
      reset => (UInt<1>("h0"), mepc) @[CSR.scala 256:17]
    reg mie : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 258:20]
    wire _WIRE : { e : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 259:38]
    _WIRE.s.u <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.s.s <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.s.h <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.s.m <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.t.u <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.t.s <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.t.h <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.t.m <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.e.u <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.e.s <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.e.h <= UInt<1>("h0") @[CSR.scala 259:38]
    _WIRE.e.m <= UInt<1>("h0") @[CSR.scala 259:38]
    wire mipWire : { e : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
    mipWire.s.u <= _WIRE.s.u
    mipWire.s.s <= _WIRE.s.s
    mipWire.s.h <= _WIRE.s.h
    mipWire.s.m <= _WIRE.s.m
    mipWire.t.u <= _WIRE.t.u
    mipWire.t.s <= _WIRE.t.s
    mipWire.t.h <= _WIRE.t.h
    mipWire.t.m <= _WIRE.t.m
    mipWire.e.u <= _WIRE.e.u
    mipWire.e.s <= _WIRE.e.s
    mipWire.e.h <= _WIRE.e.h
    mipWire.e.m <= _WIRE.e.m
    wire _WIRE_1 : { e : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 260:37]
    _WIRE_1.s.u <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.s.s <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.s.h <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.s.m <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.t.u <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.t.s <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.t.h <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.t.m <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.e.u <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.e.s <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.e.h <= UInt<1>("h0") @[CSR.scala 260:37]
    _WIRE_1.e.m <= UInt<1>("h0") @[CSR.scala 260:37]
    node lo_lo_hi = cat(_WIRE_1.s.h, _WIRE_1.s.s) @[CSR.scala 260:53]
    node lo_lo = cat(lo_lo_hi, _WIRE_1.s.u) @[CSR.scala 260:53]
    node lo_hi_hi = cat(_WIRE_1.t.s, _WIRE_1.t.u) @[CSR.scala 260:53]
    node lo_hi = cat(lo_hi_hi, _WIRE_1.s.m) @[CSR.scala 260:53]
    node lo = cat(lo_hi, lo_lo) @[CSR.scala 260:53]
    node hi_lo_hi = cat(_WIRE_1.e.u, _WIRE_1.t.m) @[CSR.scala 260:53]
    node hi_lo = cat(hi_lo_hi, _WIRE_1.t.h) @[CSR.scala 260:53]
    node hi_hi_hi = cat(_WIRE_1.e.m, _WIRE_1.e.h) @[CSR.scala 260:53]
    node hi_hi = cat(hi_hi_hi, _WIRE_1.e.s) @[CSR.scala 260:53]
    node hi = cat(hi_hi, hi_lo) @[CSR.scala 260:53]
    node _T = cat(hi, lo) @[CSR.scala 260:53]
    reg mipReg : UInt, clock with :
      reset => (reset, _T) @[CSR.scala 260:24]
    node lo_lo_hi_1 = cat(mipWire.s.h, mipWire.s.s) @[CSR.scala 262:22]
    node lo_lo_1 = cat(lo_lo_hi_1, mipWire.s.u) @[CSR.scala 262:22]
    node lo_hi_hi_1 = cat(mipWire.t.s, mipWire.t.u) @[CSR.scala 262:22]
    node lo_hi_1 = cat(lo_hi_hi_1, mipWire.s.m) @[CSR.scala 262:22]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[CSR.scala 262:22]
    node hi_lo_hi_1 = cat(mipWire.e.u, mipWire.t.m) @[CSR.scala 262:22]
    node hi_lo_1 = cat(hi_lo_hi_1, mipWire.t.h) @[CSR.scala 262:22]
    node hi_hi_hi_1 = cat(mipWire.e.m, mipWire.e.h) @[CSR.scala 262:22]
    node hi_hi_1 = cat(hi_hi_hi_1, mipWire.e.s) @[CSR.scala 262:22]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[CSR.scala 262:22]
    node _T_1 = cat(hi_1, lo_1) @[CSR.scala 262:22]
    node _T_2 = or(_T_1, mipReg) @[CSR.scala 262:29]
    wire mip : { e : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 262:47]
    wire _WIRE_2 : UInt<12>
    _WIRE_2 <= _T_2
    node _T_3 = bits(_WIRE_2, 0, 0) @[CSR.scala 262:47]
    mip.s.u <= _T_3 @[CSR.scala 262:47]
    node _T_4 = bits(_WIRE_2, 1, 1) @[CSR.scala 262:47]
    mip.s.s <= _T_4 @[CSR.scala 262:47]
    node _T_5 = bits(_WIRE_2, 2, 2) @[CSR.scala 262:47]
    mip.s.h <= _T_5 @[CSR.scala 262:47]
    node _T_6 = bits(_WIRE_2, 3, 3) @[CSR.scala 262:47]
    mip.s.m <= _T_6 @[CSR.scala 262:47]
    node _T_7 = bits(_WIRE_2, 4, 4) @[CSR.scala 262:47]
    mip.t.u <= _T_7 @[CSR.scala 262:47]
    node _T_8 = bits(_WIRE_2, 5, 5) @[CSR.scala 262:47]
    mip.t.s <= _T_8 @[CSR.scala 262:47]
    node _T_9 = bits(_WIRE_2, 6, 6) @[CSR.scala 262:47]
    mip.t.h <= _T_9 @[CSR.scala 262:47]
    node _T_10 = bits(_WIRE_2, 7, 7) @[CSR.scala 262:47]
    mip.t.m <= _T_10 @[CSR.scala 262:47]
    node _T_11 = bits(_WIRE_2, 8, 8) @[CSR.scala 262:47]
    mip.e.u <= _T_11 @[CSR.scala 262:47]
    node _T_12 = bits(_WIRE_2, 9, 9) @[CSR.scala 262:47]
    mip.e.s <= _T_12 @[CSR.scala 262:47]
    node _T_13 = bits(_WIRE_2, 10, 10) @[CSR.scala 262:47]
    mip.e.h <= _T_13 @[CSR.scala 262:47]
    node _T_14 = bits(_WIRE_2, 11, 11) @[CSR.scala 262:47]
    mip.e.m <= _T_14 @[CSR.scala 262:47]
    node _T_15 = shl(UInt<2>("h2"), 62) @[CSR.scala 264:43]
    node _T_16 = shl(UInt<1>("h1"), 0) @[CSR.scala 265:42]
    node _T_17 = or(UInt<1>("h0"), _T_16) @[CSR.scala 269:75]
    node _T_18 = shl(UInt<1>("h1"), 18) @[CSR.scala 265:42]
    node _T_19 = or(_T_17, _T_18) @[CSR.scala 269:75]
    node _T_20 = shl(UInt<1>("h1"), 8) @[CSR.scala 265:42]
    node _T_21 = or(_T_19, _T_20) @[CSR.scala 269:75]
    node _T_22 = shl(UInt<1>("h1"), 20) @[CSR.scala 265:42]
    node _T_23 = or(_T_21, _T_22) @[CSR.scala 269:75]
    node _T_24 = shl(UInt<1>("h1"), 12) @[CSR.scala 265:42]
    node _T_25 = or(_T_23, _T_24) @[CSR.scala 269:75]
    node _T_26 = shl(UInt<1>("h1"), 2) @[CSR.scala 265:42]
    node _T_27 = or(_T_25, _T_26) @[CSR.scala 269:75]
    node misaInitVal = or(_T_15, _T_27) @[CSR.scala 269:35]
    reg misa : UInt<64>, clock with :
      reset => (reset, misaInitVal) @[CSR.scala 270:21]
    reg mvendorid : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 274:26]
    reg marchid : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 275:24]
    reg mimpid : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 276:23]
    reg mhartid : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 277:24]
    reg mstatus : UInt<64>, clock with :
      reset => (reset, UInt<13>("h1800")) @[CSR.scala 278:24]
    wire mstatusStruct : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 299:39]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= mstatus
    node _T_28 = bits(_WIRE_3, 0, 0) @[CSR.scala 299:39]
    mstatusStruct.ie.u <= _T_28 @[CSR.scala 299:39]
    node _T_29 = bits(_WIRE_3, 1, 1) @[CSR.scala 299:39]
    mstatusStruct.ie.s <= _T_29 @[CSR.scala 299:39]
    node _T_30 = bits(_WIRE_3, 2, 2) @[CSR.scala 299:39]
    mstatusStruct.ie.h <= _T_30 @[CSR.scala 299:39]
    node _T_31 = bits(_WIRE_3, 3, 3) @[CSR.scala 299:39]
    mstatusStruct.ie.m <= _T_31 @[CSR.scala 299:39]
    node _T_32 = bits(_WIRE_3, 4, 4) @[CSR.scala 299:39]
    mstatusStruct.pie.u <= _T_32 @[CSR.scala 299:39]
    node _T_33 = bits(_WIRE_3, 5, 5) @[CSR.scala 299:39]
    mstatusStruct.pie.s <= _T_33 @[CSR.scala 299:39]
    node _T_34 = bits(_WIRE_3, 6, 6) @[CSR.scala 299:39]
    mstatusStruct.pie.h <= _T_34 @[CSR.scala 299:39]
    node _T_35 = bits(_WIRE_3, 7, 7) @[CSR.scala 299:39]
    mstatusStruct.pie.m <= _T_35 @[CSR.scala 299:39]
    node _T_36 = bits(_WIRE_3, 8, 8) @[CSR.scala 299:39]
    mstatusStruct.spp <= _T_36 @[CSR.scala 299:39]
    node _T_37 = bits(_WIRE_3, 10, 9) @[CSR.scala 299:39]
    mstatusStruct.hpp <= _T_37 @[CSR.scala 299:39]
    node _T_38 = bits(_WIRE_3, 12, 11) @[CSR.scala 299:39]
    mstatusStruct.mpp <= _T_38 @[CSR.scala 299:39]
    node _T_39 = bits(_WIRE_3, 14, 13) @[CSR.scala 299:39]
    mstatusStruct.fs <= _T_39 @[CSR.scala 299:39]
    node _T_40 = bits(_WIRE_3, 16, 15) @[CSR.scala 299:39]
    mstatusStruct.xs <= _T_40 @[CSR.scala 299:39]
    node _T_41 = bits(_WIRE_3, 17, 17) @[CSR.scala 299:39]
    mstatusStruct.mprv <= _T_41 @[CSR.scala 299:39]
    node _T_42 = bits(_WIRE_3, 18, 18) @[CSR.scala 299:39]
    mstatusStruct.sum <= _T_42 @[CSR.scala 299:39]
    node _T_43 = bits(_WIRE_3, 19, 19) @[CSR.scala 299:39]
    mstatusStruct.mxr <= _T_43 @[CSR.scala 299:39]
    node _T_44 = bits(_WIRE_3, 20, 20) @[CSR.scala 299:39]
    mstatusStruct.tvm <= _T_44 @[CSR.scala 299:39]
    node _T_45 = bits(_WIRE_3, 21, 21) @[CSR.scala 299:39]
    mstatusStruct.tw <= _T_45 @[CSR.scala 299:39]
    node _T_46 = bits(_WIRE_3, 22, 22) @[CSR.scala 299:39]
    mstatusStruct.tsr <= _T_46 @[CSR.scala 299:39]
    node _T_47 = bits(_WIRE_3, 31, 23) @[CSR.scala 299:39]
    mstatusStruct.pad0 <= _T_47 @[CSR.scala 299:39]
    node _T_48 = bits(_WIRE_3, 33, 32) @[CSR.scala 299:39]
    mstatusStruct.uxl <= _T_48 @[CSR.scala 299:39]
    node _T_49 = bits(_WIRE_3, 35, 34) @[CSR.scala 299:39]
    mstatusStruct.sxl <= _T_49 @[CSR.scala 299:39]
    node _T_50 = bits(_WIRE_3, 62, 36) @[CSR.scala 299:39]
    mstatusStruct.pad1 <= _T_50 @[CSR.scala 299:39]
    node _T_51 = bits(_WIRE_3, 63, 63) @[CSR.scala 299:39]
    mstatusStruct.sd <= _T_51 @[CSR.scala 299:39]
    reg medeleg : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 306:24]
    reg mideleg : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 307:24]
    reg mscratch : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 308:25]
    reg pmpcfg0 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 310:24]
    reg pmpcfg1 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 311:24]
    reg pmpcfg2 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 312:24]
    reg pmpcfg3 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 313:24]
    reg pmpaddr0 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 314:25]
    reg pmpaddr1 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 315:25]
    reg pmpaddr2 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 316:25]
    reg pmpaddr3 : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 317:25]
    node sstatusRmask = or(UInt<20>("hc6122"), UInt<64>("h8000000300018000")) @[CSR.scala 329:35]
    reg stvec : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 331:22]
    node sieMask = and(UInt<10>("h222"), mideleg) @[CSR.scala 333:26]
    node sipMask = and(UInt<10>("h222"), mideleg) @[CSR.scala 334:27]
    reg satp : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 336:21]
    reg sepc : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 337:21]
    reg scause : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 338:23]
    reg stval : UInt<64>, clock with :
      reset => (UInt<1>("h0"), stval) @[CSR.scala 339:18]
    reg sscratch : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 340:25]
    reg scounteren : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 341:27]
    reg uepc : UInt<64>, clock with :
      reset => (UInt<1>("h0"), uepc) @[CSR.scala 348:17]
    wire setLr : UInt<1>
    setLr <= UInt<1>("h0")
    wire setLrVal : UInt<1>
    setLrVal <= UInt<1>("h0")
    wire setLrAddr : UInt<64>
    setLrAddr is invalid
    reg lr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 354:19]
    reg lrAddr : UInt<64>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 355:23]
    when setLr : @[CSR.scala 362:14]
      lr <= setLrVal @[CSR.scala 363:8]
      lrAddr <= setLrAddr @[CSR.scala 364:12]
    reg priviledgeMode : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[CSR.scala 368:31]
    reg perfCnts_0 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_6 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_7 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_8 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_9 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_10 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_12 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_13 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_14 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_15 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_16 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_17 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_18 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_19 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_20 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_21 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_22 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_23 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_24 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_25 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_26 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_27 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_28 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_29 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_30 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_31 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_32 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_33 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_34 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_35 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_36 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_37 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_38 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_39 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_40 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_41 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_42 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_43 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_44 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_45 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_46 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_47 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_48 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_49 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_50 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_51 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_52 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_53 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_54 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_55 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_56 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_57 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_58 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_59 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_60 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_61 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_62 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_63 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_64 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_65 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_66 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_67 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_68 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_69 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_70 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_71 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_72 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_73 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_74 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_75 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_76 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_77 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_78 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_79 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_80 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_81 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_82 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_83 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_84 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_85 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_86 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_87 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_88 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_89 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_90 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_91 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_92 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_93 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_94 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_95 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_96 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_97 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_98 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_99 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_100 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_101 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_102 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_103 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_104 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_105 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_106 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_107 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_108 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_109 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_110 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_111 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_112 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_113 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_114 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_115 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_116 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_117 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_118 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_119 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_120 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_121 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_122 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_123 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_124 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_125 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_126 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    reg perfCnts_127 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CSR.scala 373:47]
    node _T_52 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_53 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_54 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_55 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_56 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_57 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_58 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_59 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_60 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_61 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_62 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_63 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_64 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_65 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_66 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_67 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_68 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_69 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_70 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_71 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_72 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_73 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_74 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_75 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_76 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_77 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_78 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_79 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_80 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_81 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_82 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_83 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_84 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_85 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_86 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_87 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_88 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_89 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_90 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_91 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_92 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_93 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_94 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_95 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_96 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_97 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_98 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_99 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_100 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_101 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_102 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_103 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_104 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_105 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_106 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_107 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_108 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_109 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_110 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_111 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_112 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_113 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_114 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_115 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_116 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_117 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_118 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_119 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_120 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_121 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_122 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_123 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_124 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_125 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_126 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_127 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_128 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_129 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_130 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_131 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_132 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_133 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_134 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_135 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_136 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_137 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_138 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_139 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_140 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_141 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_142 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_143 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_144 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_145 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_146 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_147 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_148 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_149 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_150 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_151 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_152 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_153 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_154 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_155 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_156 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_157 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_158 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_159 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_160 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_161 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_162 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_163 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_164 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_165 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_166 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_167 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_168 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_169 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_170 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_171 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_172 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_173 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_174 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_175 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_176 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_177 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_178 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_179 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_180 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_181 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_182 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_183 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_184 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_185 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_186 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_187 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_188 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_189 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_190 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_191 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_192 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_193 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_194 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_195 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_196 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_197 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_198 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_199 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_200 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_201 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_202 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_203 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_204 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_205 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_206 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_207 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_208 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_209 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_210 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_211 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_212 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_213 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_214 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_215 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_216 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_217 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_218 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_219 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_220 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_221 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_222 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_223 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_224 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_225 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_226 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_227 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_228 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_229 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_230 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_231 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_232 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_233 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_234 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_235 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_236 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_237 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_238 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_239 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_240 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_241 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_242 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_243 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_244 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_245 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_246 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_247 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_248 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_249 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_250 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_251 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_252 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_253 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_254 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_255 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_256 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_257 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_258 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_259 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_260 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_261 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_262 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_263 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_264 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_265 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_266 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_267 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_268 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_269 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_270 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_271 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_272 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_273 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_274 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_275 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_276 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_277 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_278 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_279 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_280 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_281 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_282 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_283 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_284 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_285 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_286 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_287 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_288 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_289 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_290 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_291 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_292 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_293 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_294 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_295 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_296 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_297 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_298 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_299 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_300 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_301 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_302 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_303 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_304 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_305 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_306 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_307 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_308 = bits(perfCnts_0, 63, 32) @[CSR.scala 375:99]
    node _T_309 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_310 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_311 = bits(perfCnts_1, 63, 32) @[CSR.scala 375:99]
    node _T_312 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_313 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_314 = bits(perfCnts_2, 63, 32) @[CSR.scala 375:99]
    node _T_315 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_316 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_317 = bits(perfCnts_3, 63, 32) @[CSR.scala 375:99]
    node _T_318 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_319 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_320 = bits(perfCnts_4, 63, 32) @[CSR.scala 375:99]
    node _T_321 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_322 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_323 = bits(perfCnts_5, 63, 32) @[CSR.scala 375:99]
    node _T_324 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_325 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_326 = bits(perfCnts_6, 63, 32) @[CSR.scala 375:99]
    node _T_327 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_328 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_329 = bits(perfCnts_7, 63, 32) @[CSR.scala 375:99]
    node _T_330 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_331 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_332 = bits(perfCnts_8, 63, 32) @[CSR.scala 375:99]
    node _T_333 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_334 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_335 = bits(perfCnts_9, 63, 32) @[CSR.scala 375:99]
    node _T_336 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_337 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_338 = bits(perfCnts_10, 63, 32) @[CSR.scala 375:99]
    node _T_339 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_340 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_341 = bits(perfCnts_11, 63, 32) @[CSR.scala 375:99]
    node _T_342 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_343 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_344 = bits(perfCnts_12, 63, 32) @[CSR.scala 375:99]
    node _T_345 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_346 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_347 = bits(perfCnts_13, 63, 32) @[CSR.scala 375:99]
    node _T_348 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_349 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_350 = bits(perfCnts_14, 63, 32) @[CSR.scala 375:99]
    node _T_351 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_352 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_353 = bits(perfCnts_15, 63, 32) @[CSR.scala 375:99]
    node _T_354 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_355 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_356 = bits(perfCnts_16, 63, 32) @[CSR.scala 375:99]
    node _T_357 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_358 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_359 = bits(perfCnts_17, 63, 32) @[CSR.scala 375:99]
    node _T_360 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_361 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_362 = bits(perfCnts_18, 63, 32) @[CSR.scala 375:99]
    node _T_363 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_364 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_365 = bits(perfCnts_19, 63, 32) @[CSR.scala 375:99]
    node _T_366 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_367 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_368 = bits(perfCnts_20, 63, 32) @[CSR.scala 375:99]
    node _T_369 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_370 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_371 = bits(perfCnts_21, 63, 32) @[CSR.scala 375:99]
    node _T_372 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_373 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_374 = bits(perfCnts_22, 63, 32) @[CSR.scala 375:99]
    node _T_375 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_376 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_377 = bits(perfCnts_23, 63, 32) @[CSR.scala 375:99]
    node _T_378 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_379 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_380 = bits(perfCnts_24, 63, 32) @[CSR.scala 375:99]
    node _T_381 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_382 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_383 = bits(perfCnts_25, 63, 32) @[CSR.scala 375:99]
    node _T_384 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_385 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_386 = bits(perfCnts_26, 63, 32) @[CSR.scala 375:99]
    node _T_387 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_388 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_389 = bits(perfCnts_27, 63, 32) @[CSR.scala 375:99]
    node _T_390 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_391 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_392 = bits(perfCnts_28, 63, 32) @[CSR.scala 375:99]
    node _T_393 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_394 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_395 = bits(perfCnts_29, 63, 32) @[CSR.scala 375:99]
    node _T_396 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_397 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_398 = bits(perfCnts_30, 63, 32) @[CSR.scala 375:99]
    node _T_399 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_400 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_401 = bits(perfCnts_31, 63, 32) @[CSR.scala 375:99]
    node _T_402 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_403 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_404 = bits(perfCnts_32, 63, 32) @[CSR.scala 375:99]
    node _T_405 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_406 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_407 = bits(perfCnts_33, 63, 32) @[CSR.scala 375:99]
    node _T_408 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_409 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_410 = bits(perfCnts_34, 63, 32) @[CSR.scala 375:99]
    node _T_411 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_412 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_413 = bits(perfCnts_35, 63, 32) @[CSR.scala 375:99]
    node _T_414 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_415 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_416 = bits(perfCnts_36, 63, 32) @[CSR.scala 375:99]
    node _T_417 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_418 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_419 = bits(perfCnts_37, 63, 32) @[CSR.scala 375:99]
    node _T_420 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_421 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_422 = bits(perfCnts_38, 63, 32) @[CSR.scala 375:99]
    node _T_423 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_424 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_425 = bits(perfCnts_39, 63, 32) @[CSR.scala 375:99]
    node _T_426 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_427 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_428 = bits(perfCnts_40, 63, 32) @[CSR.scala 375:99]
    node _T_429 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_430 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_431 = bits(perfCnts_41, 63, 32) @[CSR.scala 375:99]
    node _T_432 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_433 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_434 = bits(perfCnts_42, 63, 32) @[CSR.scala 375:99]
    node _T_435 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_436 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_437 = bits(perfCnts_43, 63, 32) @[CSR.scala 375:99]
    node _T_438 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_439 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_440 = bits(perfCnts_44, 63, 32) @[CSR.scala 375:99]
    node _T_441 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_442 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_443 = bits(perfCnts_45, 63, 32) @[CSR.scala 375:99]
    node _T_444 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_445 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_446 = bits(perfCnts_46, 63, 32) @[CSR.scala 375:99]
    node _T_447 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_448 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_449 = bits(perfCnts_47, 63, 32) @[CSR.scala 375:99]
    node _T_450 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_451 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_452 = bits(perfCnts_48, 63, 32) @[CSR.scala 375:99]
    node _T_453 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_454 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_455 = bits(perfCnts_49, 63, 32) @[CSR.scala 375:99]
    node _T_456 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_457 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_458 = bits(perfCnts_50, 63, 32) @[CSR.scala 375:99]
    node _T_459 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_460 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_461 = bits(perfCnts_51, 63, 32) @[CSR.scala 375:99]
    node _T_462 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_463 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_464 = bits(perfCnts_52, 63, 32) @[CSR.scala 375:99]
    node _T_465 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_466 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_467 = bits(perfCnts_53, 63, 32) @[CSR.scala 375:99]
    node _T_468 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_469 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_470 = bits(perfCnts_54, 63, 32) @[CSR.scala 375:99]
    node _T_471 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_472 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_473 = bits(perfCnts_55, 63, 32) @[CSR.scala 375:99]
    node _T_474 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_475 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_476 = bits(perfCnts_56, 63, 32) @[CSR.scala 375:99]
    node _T_477 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_478 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_479 = bits(perfCnts_57, 63, 32) @[CSR.scala 375:99]
    node _T_480 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_481 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_482 = bits(perfCnts_58, 63, 32) @[CSR.scala 375:99]
    node _T_483 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_484 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_485 = bits(perfCnts_59, 63, 32) @[CSR.scala 375:99]
    node _T_486 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_487 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_488 = bits(perfCnts_60, 63, 32) @[CSR.scala 375:99]
    node _T_489 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_490 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_491 = bits(perfCnts_61, 63, 32) @[CSR.scala 375:99]
    node _T_492 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_493 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_494 = bits(perfCnts_62, 63, 32) @[CSR.scala 375:99]
    node _T_495 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_496 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_497 = bits(perfCnts_63, 63, 32) @[CSR.scala 375:99]
    node _T_498 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_499 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_500 = bits(perfCnts_64, 63, 32) @[CSR.scala 375:99]
    node _T_501 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_502 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_503 = bits(perfCnts_65, 63, 32) @[CSR.scala 375:99]
    node _T_504 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_505 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_506 = bits(perfCnts_66, 63, 32) @[CSR.scala 375:99]
    node _T_507 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_508 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_509 = bits(perfCnts_67, 63, 32) @[CSR.scala 375:99]
    node _T_510 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_511 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_512 = bits(perfCnts_68, 63, 32) @[CSR.scala 375:99]
    node _T_513 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_514 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_515 = bits(perfCnts_69, 63, 32) @[CSR.scala 375:99]
    node _T_516 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_517 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_518 = bits(perfCnts_70, 63, 32) @[CSR.scala 375:99]
    node _T_519 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_520 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_521 = bits(perfCnts_71, 63, 32) @[CSR.scala 375:99]
    node _T_522 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_523 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_524 = bits(perfCnts_72, 63, 32) @[CSR.scala 375:99]
    node _T_525 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_526 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_527 = bits(perfCnts_73, 63, 32) @[CSR.scala 375:99]
    node _T_528 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_529 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_530 = bits(perfCnts_74, 63, 32) @[CSR.scala 375:99]
    node _T_531 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_532 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_533 = bits(perfCnts_75, 63, 32) @[CSR.scala 375:99]
    node _T_534 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_535 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_536 = bits(perfCnts_76, 63, 32) @[CSR.scala 375:99]
    node _T_537 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_538 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_539 = bits(perfCnts_77, 63, 32) @[CSR.scala 375:99]
    node _T_540 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_541 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_542 = bits(perfCnts_78, 63, 32) @[CSR.scala 375:99]
    node _T_543 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_544 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_545 = bits(perfCnts_79, 63, 32) @[CSR.scala 375:99]
    node _T_546 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_547 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_548 = bits(perfCnts_80, 63, 32) @[CSR.scala 375:99]
    node _T_549 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_550 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_551 = bits(perfCnts_81, 63, 32) @[CSR.scala 375:99]
    node _T_552 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_553 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_554 = bits(perfCnts_82, 63, 32) @[CSR.scala 375:99]
    node _T_555 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_556 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_557 = bits(perfCnts_83, 63, 32) @[CSR.scala 375:99]
    node _T_558 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_559 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_560 = bits(perfCnts_84, 63, 32) @[CSR.scala 375:99]
    node _T_561 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_562 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_563 = bits(perfCnts_85, 63, 32) @[CSR.scala 375:99]
    node _T_564 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_565 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_566 = bits(perfCnts_86, 63, 32) @[CSR.scala 375:99]
    node _T_567 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_568 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_569 = bits(perfCnts_87, 63, 32) @[CSR.scala 375:99]
    node _T_570 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_571 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_572 = bits(perfCnts_88, 63, 32) @[CSR.scala 375:99]
    node _T_573 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_574 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_575 = bits(perfCnts_89, 63, 32) @[CSR.scala 375:99]
    node _T_576 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_577 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_578 = bits(perfCnts_90, 63, 32) @[CSR.scala 375:99]
    node _T_579 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_580 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_581 = bits(perfCnts_91, 63, 32) @[CSR.scala 375:99]
    node _T_582 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_583 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_584 = bits(perfCnts_92, 63, 32) @[CSR.scala 375:99]
    node _T_585 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_586 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_587 = bits(perfCnts_93, 63, 32) @[CSR.scala 375:99]
    node _T_588 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_589 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_590 = bits(perfCnts_94, 63, 32) @[CSR.scala 375:99]
    node _T_591 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_592 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_593 = bits(perfCnts_95, 63, 32) @[CSR.scala 375:99]
    node _T_594 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_595 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_596 = bits(perfCnts_96, 63, 32) @[CSR.scala 375:99]
    node _T_597 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_598 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_599 = bits(perfCnts_97, 63, 32) @[CSR.scala 375:99]
    node _T_600 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_601 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_602 = bits(perfCnts_98, 63, 32) @[CSR.scala 375:99]
    node _T_603 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_604 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_605 = bits(perfCnts_99, 63, 32) @[CSR.scala 375:99]
    node _T_606 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_607 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_608 = bits(perfCnts_100, 63, 32) @[CSR.scala 375:99]
    node _T_609 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_610 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_611 = bits(perfCnts_101, 63, 32) @[CSR.scala 375:99]
    node _T_612 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_613 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_614 = bits(perfCnts_102, 63, 32) @[CSR.scala 375:99]
    node _T_615 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_616 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_617 = bits(perfCnts_103, 63, 32) @[CSR.scala 375:99]
    node _T_618 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_619 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_620 = bits(perfCnts_104, 63, 32) @[CSR.scala 375:99]
    node _T_621 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_622 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_623 = bits(perfCnts_105, 63, 32) @[CSR.scala 375:99]
    node _T_624 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_625 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_626 = bits(perfCnts_106, 63, 32) @[CSR.scala 375:99]
    node _T_627 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_628 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_629 = bits(perfCnts_107, 63, 32) @[CSR.scala 375:99]
    node _T_630 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_631 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_632 = bits(perfCnts_108, 63, 32) @[CSR.scala 375:99]
    node _T_633 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_634 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_635 = bits(perfCnts_109, 63, 32) @[CSR.scala 375:99]
    node _T_636 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_637 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_638 = bits(perfCnts_110, 63, 32) @[CSR.scala 375:99]
    node _T_639 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_640 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_641 = bits(perfCnts_111, 63, 32) @[CSR.scala 375:99]
    node _T_642 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_643 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_644 = bits(perfCnts_112, 63, 32) @[CSR.scala 375:99]
    node _T_645 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_646 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_647 = bits(perfCnts_113, 63, 32) @[CSR.scala 375:99]
    node _T_648 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_649 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_650 = bits(perfCnts_114, 63, 32) @[CSR.scala 375:99]
    node _T_651 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_652 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_653 = bits(perfCnts_115, 63, 32) @[CSR.scala 375:99]
    node _T_654 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_655 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_656 = bits(perfCnts_116, 63, 32) @[CSR.scala 375:99]
    node _T_657 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_658 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_659 = bits(perfCnts_117, 63, 32) @[CSR.scala 375:99]
    node _T_660 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_661 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_662 = bits(perfCnts_118, 63, 32) @[CSR.scala 375:99]
    node _T_663 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_664 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_665 = bits(perfCnts_119, 63, 32) @[CSR.scala 375:99]
    node _T_666 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_667 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_668 = bits(perfCnts_120, 63, 32) @[CSR.scala 375:99]
    node _T_669 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_670 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_671 = bits(perfCnts_121, 63, 32) @[CSR.scala 375:99]
    node _T_672 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_673 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_674 = bits(perfCnts_122, 63, 32) @[CSR.scala 375:99]
    node _T_675 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_676 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_677 = bits(perfCnts_123, 63, 32) @[CSR.scala 375:99]
    node _T_678 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_679 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_680 = bits(perfCnts_124, 63, 32) @[CSR.scala 375:99]
    node _T_681 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_682 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_683 = bits(perfCnts_125, 63, 32) @[CSR.scala 375:99]
    node _T_684 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_685 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_686 = bits(perfCnts_126, 63, 32) @[CSR.scala 375:99]
    node _T_687 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_688 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_689 = bits(perfCnts_127, 63, 32) @[CSR.scala 375:99]
    node _T_690 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_691 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_692 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_693 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_694 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_695 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_696 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_697 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_698 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_699 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_700 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_701 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_702 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_703 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_hi_2 = cat(mip.s.h, mip.s.s) @[CSR.scala 416:27]
    node lo_lo_2 = cat(lo_lo_hi_2, mip.s.u) @[CSR.scala 416:27]
    node lo_hi_hi_2 = cat(mip.t.s, mip.t.u) @[CSR.scala 416:27]
    node lo_hi_2 = cat(lo_hi_hi_2, mip.s.m) @[CSR.scala 416:27]
    node lo_2 = cat(lo_hi_2, lo_lo_2) @[CSR.scala 416:27]
    node hi_lo_hi_2 = cat(mip.e.u, mip.t.m) @[CSR.scala 416:27]
    node hi_lo_2 = cat(hi_lo_hi_2, mip.t.h) @[CSR.scala 416:27]
    node hi_hi_hi_2 = cat(mip.e.m, mip.e.h) @[CSR.scala 416:27]
    node hi_hi_2 = cat(hi_hi_hi_2, mip.e.s) @[CSR.scala 416:27]
    node hi_2 = cat(hi_hi_2, hi_lo_2) @[CSR.scala 416:27]
    node _T_704 = cat(hi_2, lo_2) @[CSR.scala 416:27]
    node _T_705 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_706 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_707 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_708 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_709 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_710 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_711 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_712 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_713 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_714 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_715 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_716 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_717 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_718 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_719 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_720 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_721 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_722 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_723 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_724 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_725 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_726 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_727 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_728 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_729 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_hi_3 = cat(mip.s.h, mip.s.s) @[CSR.scala 442:27]
    node lo_lo_3 = cat(lo_lo_hi_3, mip.s.u) @[CSR.scala 442:27]
    node lo_hi_hi_3 = cat(mip.t.s, mip.t.u) @[CSR.scala 442:27]
    node lo_hi_3 = cat(lo_hi_hi_3, mip.s.m) @[CSR.scala 442:27]
    node lo_3 = cat(lo_hi_3, lo_lo_3) @[CSR.scala 442:27]
    node hi_lo_hi_3 = cat(mip.e.u, mip.t.m) @[CSR.scala 442:27]
    node hi_lo_3 = cat(hi_lo_hi_3, mip.t.h) @[CSR.scala 442:27]
    node hi_hi_hi_3 = cat(mip.e.m, mip.e.h) @[CSR.scala 442:27]
    node hi_hi_3 = cat(hi_hi_hi_3, mip.e.s) @[CSR.scala 442:27]
    node hi_3 = cat(hi_hi_3, hi_lo_3) @[CSR.scala 442:27]
    node _T_730 = cat(hi_3, lo_3) @[CSR.scala 442:27]
    node _T_731 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_732 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_733 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_734 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_735 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_736 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_737 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_738 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_739 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_740 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_741 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_742 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_743 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_744 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_745 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_746 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node _T_747 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    node addr = bits(io.in.bits.src2, 11, 0) @[CSR.scala 456:18]
    wire rdata : UInt<64> @[CSR.scala 457:19]
    node _T_748 = bits(io.cfIn.instr, 19, 15) @[CSR.scala 458:35]
    node csri = cat(UInt<59>("h0"), _T_748) @[Cat.scala 30:58]
    node _T_749 = or(rdata, io.in.bits.src1) @[CSR.scala 461:30]
    node _T_750 = not(io.in.bits.src1) @[CSR.scala 462:32]
    node _T_751 = and(rdata, _T_750) @[CSR.scala 462:30]
    node _T_752 = or(rdata, csri) @[CSR.scala 464:30]
    node _T_753 = not(csri) @[CSR.scala 465:32]
    node _T_754 = and(rdata, _T_753) @[CSR.scala 465:30]
    node _T_755 = eq(UInt<1>("h1"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_756 = eq(UInt<2>("h2"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_757 = eq(UInt<2>("h3"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_758 = eq(UInt<3>("h5"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_759 = eq(UInt<3>("h6"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_760 = eq(UInt<3>("h7"), io.in.bits.func) @[LookupTree.scala 24:34]
    node _T_761 = mux(_T_755, io.in.bits.src1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_762 = mux(_T_756, _T_749, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_763 = mux(_T_757, _T_751, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_764 = mux(_T_758, csri, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_765 = mux(_T_759, _T_752, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_766 = mux(_T_760, _T_754, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_767 = or(_T_761, _T_762) @[Mux.scala 27:72]
    node _T_768 = or(_T_767, _T_763) @[Mux.scala 27:72]
    node _T_769 = or(_T_768, _T_764) @[Mux.scala 27:72]
    node _T_770 = or(_T_769, _T_765) @[Mux.scala 27:72]
    node _T_771 = or(_T_770, _T_766) @[Mux.scala 27:72]
    wire wdata : UInt<64> @[Mux.scala 27:72]
    wdata <= _T_771 @[Mux.scala 27:72]
    wire _WIRE_4 : { mode : UInt<4>, asid : UInt<16>, ppn : UInt<44>} @[CSR.scala 469:38]
    wire _WIRE_5 : UInt<64>
    _WIRE_5 <= wdata
    node _T_772 = bits(_WIRE_5, 43, 0) @[CSR.scala 469:38]
    _WIRE_4.ppn <= _T_772 @[CSR.scala 469:38]
    node _T_773 = bits(_WIRE_5, 59, 44) @[CSR.scala 469:38]
    _WIRE_4.asid <= _T_773 @[CSR.scala 469:38]
    node _T_774 = bits(_WIRE_5, 63, 60) @[CSR.scala 469:38]
    _WIRE_4.mode <= _T_774 @[CSR.scala 469:38]
    node _T_775 = eq(_WIRE_4.mode, UInt<1>("h0")) @[CSR.scala 469:60]
    wire _WIRE_6 : { mode : UInt<4>, asid : UInt<16>, ppn : UInt<44>} @[CSR.scala 469:87]
    wire _WIRE_7 : UInt<64>
    _WIRE_7 <= wdata
    node _T_776 = bits(_WIRE_7, 43, 0) @[CSR.scala 469:87]
    _WIRE_6.ppn <= _T_776 @[CSR.scala 469:87]
    node _T_777 = bits(_WIRE_7, 59, 44) @[CSR.scala 469:87]
    _WIRE_6.asid <= _T_777 @[CSR.scala 469:87]
    node _T_778 = bits(_WIRE_7, 63, 60) @[CSR.scala 469:87]
    _WIRE_6.mode <= _T_778 @[CSR.scala 469:87]
    node _T_779 = eq(_WIRE_6.mode, UInt<4>("h8")) @[CSR.scala 469:109]
    node satpLegalMode = or(_T_775, _T_779) @[CSR.scala 469:69]
    node _T_780 = neq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 472:28]
    node _T_781 = and(io.in.valid, _T_780) @[CSR.scala 472:20]
    node _T_782 = neq(addr, UInt<9>("h180")) @[CSR.scala 472:56]
    node _T_783 = or(_T_782, satpLegalMode) @[CSR.scala 472:67]
    node _T_784 = and(_T_781, _T_783) @[CSR.scala 472:47]
    node _T_785 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 472:88]
    node wen = and(_T_784, _T_785) @[CSR.scala 472:85]
    node _T_786 = bits(addr, 9, 8) @[CSR.scala 473:45]
    node isIllegalMode = lt(priviledgeMode, _T_786) @[CSR.scala 473:39]
    node _T_787 = eq(io.in.bits.func, UInt<2>("h2")) @[CSR.scala 474:24]
    node _T_788 = eq(io.in.bits.func, UInt<3>("h6")) @[CSR.scala 474:50]
    node _T_789 = or(_T_787, _T_788) @[CSR.scala 474:42]
    node _T_790 = eq(io.in.bits.src1, UInt<1>("h0")) @[CSR.scala 474:78]
    node justRead = and(_T_789, _T_790) @[CSR.scala 474:70]
    node _T_791 = bits(addr, 11, 10) @[CSR.scala 475:36]
    node _T_792 = eq(_T_791, UInt<2>("h3")) @[CSR.scala 475:45]
    node _T_793 = and(wen, _T_792) @[CSR.scala 475:28]
    node _T_794 = eq(justRead, UInt<1>("h0")) @[CSR.scala 475:61]
    node isIllegalWrite = and(_T_793, _T_794) @[CSR.scala 475:58]
    node isIllegalAccess = or(isIllegalMode, isIllegalWrite) @[CSR.scala 476:39]
    node _T_795 = eq(isIllegalAccess, UInt<1>("h0")) @[CSR.scala 478:54]
    node _T_796 = and(wen, _T_795) @[CSR.scala 478:51]
    node _T_797 = and(perfCnts_6, _T_65) @[RegMap.scala 48:84]
    node _T_798 = and(perfCnts_73, _T_199) @[RegMap.scala 48:84]
    node _T_799 = and(perfCnts_60, _T_173) @[RegMap.scala 48:84]
    node _T_800 = and(perfCnts_105, _T_263) @[RegMap.scala 48:84]
    node _T_801 = and(perfCnts_124, _T_301) @[RegMap.scala 48:84]
    node _T_802 = and(marchid, _T_708) @[RegMap.scala 48:84]
    node _T_803 = and(perfCnts_92, _T_237) @[RegMap.scala 48:84]
    node _T_804 = and(perfCnts_21, _T_95) @[RegMap.scala 48:84]
    node _T_805 = and(perfCnts_38, _T_129) @[RegMap.scala 48:84]
    node _T_806 = and(satp, _T_706) @[RegMap.scala 48:84]
    node _T_807 = and(perfCnts_102, _T_257) @[RegMap.scala 48:84]
    node _T_808 = and(perfCnts_117, _T_287) @[RegMap.scala 48:84]
    node _T_809 = and(perfCnts_85, _T_223) @[RegMap.scala 48:84]
    node _T_810 = and(pmpaddr1, _T_743) @[RegMap.scala 48:84]
    node _T_811 = and(perfCnts_28, _T_109) @[RegMap.scala 48:84]
    node _T_812 = and(pmpcfg2, _T_737) @[RegMap.scala 48:84]
    node _T_813 = and(perfCnts_70, _T_193) @[RegMap.scala 48:84]
    node _T_814 = and(sscratch, _T_697) @[RegMap.scala 48:84]
    node _T_815 = and(perfCnts_9, _T_71) @[RegMap.scala 48:84]
    node _T_816 = and(perfCnts_3, _T_59) @[RegMap.scala 48:84]
    node _T_817 = and(perfCnts_53, _T_159) @[RegMap.scala 48:84]
    node _T_818 = and(perfCnts_100, _T_253) @[RegMap.scala 48:84]
    node _T_819 = and(perfCnts_81, _T_215) @[RegMap.scala 48:84]
    node _T_820 = and(perfCnts_41, _T_135) @[RegMap.scala 48:84]
    node _T_821 = and(medeleg, _T_714) @[RegMap.scala 48:84]
    node _T_822 = and(perfCnts_113, _T_279) @[RegMap.scala 48:84]
    node _T_823 = and(perfCnts_36, _T_125) @[RegMap.scala 48:84]
    node _T_824 = and(stvec, _T_693) @[RegMap.scala 48:84]
    node _T_825 = and(perfCnts_13, _T_79) @[RegMap.scala 48:84]
    node _T_826 = and(perfCnts_77, _T_207) @[RegMap.scala 48:84]
    node _T_827 = and(sepc, _T_699) @[RegMap.scala 48:84]
    node _T_828 = and(perfCnts_64, _T_181) @[RegMap.scala 48:84]
    node _T_829 = and(mcause, _T_727) @[RegMap.scala 48:84]
    node _T_830 = and(perfCnts_109, _T_271) @[RegMap.scala 48:84]
    node _T_831 = and(perfCnts_17, _T_87) @[RegMap.scala 48:84]
    node _T_832 = and(perfCnts_45, _T_143) @[RegMap.scala 48:84]
    node _T_833 = and(mcounteren, _T_721) @[RegMap.scala 48:84]
    node _T_834 = and(perfCnts_68, _T_189) @[RegMap.scala 48:84]
    node _T_835 = and(perfCnts_106, _T_265) @[RegMap.scala 48:84]
    node _T_836 = and(mvendorid, _T_707) @[RegMap.scala 48:84]
    node _T_837 = and(perfCnts_94, _T_241) @[RegMap.scala 48:84]
    node _T_838 = and(perfCnts_89, _T_231) @[RegMap.scala 48:84]
    node _T_839 = and(mie, sieMask) @[RegMap.scala 48:84]
    node _T_840 = and(perfCnts_121, _T_295) @[RegMap.scala 48:84]
    node _T_841 = and(perfCnts_74, _T_201) @[RegMap.scala 48:84]
    node _T_842 = and(perfCnts_57, _T_167) @[RegMap.scala 48:84]
    node _T_843 = and(perfCnts_10, _T_73) @[RegMap.scala 48:84]
    node _T_844 = and(perfCnts_4, _T_61) @[RegMap.scala 48:84]
    node _T_845 = and(perfCnts_56, _T_165) @[RegMap.scala 48:84]
    node _T_846 = and(_T_704, sipMask) @[RegMap.scala 48:84]
    node _T_847 = and(perfCnts_24, _T_101) @[RegMap.scala 48:84]
    node _T_848 = and(perfCnts_79, _T_211) @[RegMap.scala 48:84]
    node _T_849 = and(perfCnts_25, _T_103) @[RegMap.scala 48:84]
    node _T_850 = and(perfCnts_42, _T_137) @[RegMap.scala 48:84]
    node _T_851 = and(mstatus, sstatusRmask) @[RegMap.scala 48:84]
    node _T_852 = and(perfCnts_61, _T_175) @[RegMap.scala 48:84]
    node _T_853 = and(perfCnts_14, _T_81) @[RegMap.scala 48:84]
    node _T_854 = and(perfCnts_52, _T_157) @[RegMap.scala 48:84]
    node _T_855 = and(perfCnts_116, _T_285) @[RegMap.scala 48:84]
    node _T_856 = and(perfCnts_20, _T_93) @[RegMap.scala 48:84]
    node _T_857 = and(perfCnts_29, _T_111) @[RegMap.scala 48:84]
    node _T_858 = and(perfCnts_84, _T_221) @[RegMap.scala 48:84]
    node _T_859 = and(perfCnts_35, _T_123) @[RegMap.scala 48:84]
    node _T_860 = and(perfCnts_46, _T_145) @[RegMap.scala 48:84]
    node _T_861 = and(perfCnts_110, _T_273) @[RegMap.scala 48:84]
    node _T_862 = and(perfCnts_67, _T_187) @[RegMap.scala 48:84]
    node _T_863 = and(perfCnts_99, _T_251) @[RegMap.scala 48:84]
    node _T_864 = and(mtvec, _T_719) @[RegMap.scala 48:84]
    node _T_865 = and(perfCnts_93, _T_239) @[RegMap.scala 48:84]
    node _T_866 = and(perfCnts_120, _T_293) @[RegMap.scala 48:84]
    node _T_867 = and(perfCnts_88, _T_229) @[RegMap.scala 48:84]
    node _T_868 = and(perfCnts_125, _T_303) @[RegMap.scala 48:84]
    node _T_869 = and(perfCnts_78, _T_209) @[RegMap.scala 48:84]
    node _T_870 = and(perfCnts_43, _T_139) @[RegMap.scala 48:84]
    node _T_871 = and(perfCnts_122, _T_297) @[RegMap.scala 48:84]
    node _T_872 = and(perfCnts_33, _T_119) @[RegMap.scala 48:84]
    node _T_873 = and(mie, _T_717) @[RegMap.scala 48:84]
    node _T_874 = and(perfCnts_1, _T_55) @[RegMap.scala 48:84]
    node _T_875 = and(perfCnts_11, _T_75) @[RegMap.scala 48:84]
    node _T_876 = and(perfCnts_75, _T_203) @[RegMap.scala 48:84]
    node _T_877 = and(perfCnts_119, _T_291) @[RegMap.scala 48:84]
    node _T_878 = and(pmpaddr3, _T_747) @[RegMap.scala 48:84]
    node _T_879 = and(perfCnts_90, _T_233) @[RegMap.scala 48:84]
    node _T_880 = and(perfCnts_23, _T_99) @[RegMap.scala 48:84]
    node _T_881 = and(perfCnts_127, _T_307) @[RegMap.scala 48:84]
    node _T_882 = and(perfCnts_40, _T_133) @[RegMap.scala 48:84]
    node _T_883 = and(perfCnts_80, _T_213) @[RegMap.scala 48:84]
    node _T_884 = and(perfCnts_55, _T_163) @[RegMap.scala 48:84]
    node _T_885 = and(perfCnts_8, _T_69) @[RegMap.scala 48:84]
    node _T_886 = and(stval, _T_703) @[RegMap.scala 48:84]
    node _T_887 = and(perfCnts_107, _T_267) @[RegMap.scala 48:84]
    node _T_888 = and(perfCnts_58, _T_169) @[RegMap.scala 48:84]
    node _T_889 = and(misa, _T_713) @[RegMap.scala 48:84]
    node _T_890 = and(perfCnts_112, _T_277) @[RegMap.scala 48:84]
    node _T_891 = and(perfCnts_26, _T_105) @[RegMap.scala 48:84]
    node _T_892 = and(perfCnts_95, _T_243) @[RegMap.scala 48:84]
    node _T_893 = and(mstatus, _T_711) @[RegMap.scala 48:84]
    node _T_894 = and(perfCnts_19, _T_91) @[RegMap.scala 48:84]
    node _T_895 = and(perfCnts_115, _T_283) @[RegMap.scala 48:84]
    node _T_896 = and(perfCnts_51, _T_155) @[RegMap.scala 48:84]
    node _T_897 = and(perfCnts_98, _T_249) @[RegMap.scala 48:84]
    node _T_898 = and(perfCnts_0, _T_53) @[RegMap.scala 48:84]
    node _T_899 = and(pmpaddr0, _T_741) @[RegMap.scala 48:84]
    node _T_900 = and(perfCnts_62, _T_177) @[RegMap.scala 48:84]
    node _T_901 = and(perfCnts_111, _T_275) @[RegMap.scala 48:84]
    node _T_902 = and(perfCnts_30, _T_113) @[RegMap.scala 48:84]
    node _T_903 = and(perfCnts_83, _T_219) @[RegMap.scala 48:84]
    node _T_904 = and(_T_730, _T_731) @[RegMap.scala 48:84]
    node _T_905 = and(perfCnts_126, _T_305) @[RegMap.scala 48:84]
    node _T_906 = and(perfCnts_47, _T_147) @[RegMap.scala 48:84]
    node _T_907 = and(perfCnts_5, _T_63) @[RegMap.scala 48:84]
    node _T_908 = and(perfCnts_34, _T_121) @[RegMap.scala 48:84]
    node _T_909 = and(perfCnts_72, _T_197) @[RegMap.scala 48:84]
    node _T_910 = and(perfCnts_66, _T_185) @[RegMap.scala 48:84]
    node _T_911 = and(perfCnts_15, _T_83) @[RegMap.scala 48:84]
    node _T_912 = and(perfCnts_104, _T_261) @[RegMap.scala 48:84]
    node _T_913 = and(perfCnts_87, _T_227) @[RegMap.scala 48:84]
    node _T_914 = and(perfCnts_22, _T_97) @[RegMap.scala 48:84]
    node _T_915 = and(perfCnts_27, _T_107) @[RegMap.scala 48:84]
    node _T_916 = and(perfCnts_44, _T_141) @[RegMap.scala 48:84]
    node _T_917 = and(perfCnts_123, _T_299) @[RegMap.scala 48:84]
    node _T_918 = and(perfCnts_76, _T_205) @[RegMap.scala 48:84]
    node _T_919 = and(perfCnts_32, _T_117) @[RegMap.scala 48:84]
    node _T_920 = and(perfCnts_49, _T_151) @[RegMap.scala 48:84]
    node _T_921 = and(perfCnts_59, _T_171) @[RegMap.scala 48:84]
    node _T_922 = and(perfCnts_108, _T_269) @[RegMap.scala 48:84]
    node _T_923 = and(perfCnts_2, _T_57) @[RegMap.scala 48:84]
    node _T_924 = and(pmpcfg3, _T_739) @[RegMap.scala 48:84]
    node _T_925 = and(perfCnts_69, _T_191) @[RegMap.scala 48:84]
    node _T_926 = and(perfCnts_54, _T_161) @[RegMap.scala 48:84]
    node _T_927 = and(perfCnts_12, _T_77) @[RegMap.scala 48:84]
    node _T_928 = and(perfCnts_103, _T_259) @[RegMap.scala 48:84]
    node _T_929 = and(mideleg, _T_715) @[RegMap.scala 48:84]
    node _T_930 = and(perfCnts_91, _T_235) @[RegMap.scala 48:84]
    node _T_931 = and(perfCnts_39, _T_131) @[RegMap.scala 48:84]
    node _T_932 = and(perfCnts_37, _T_127) @[RegMap.scala 48:84]
    node _T_933 = and(pmpaddr2, _T_745) @[RegMap.scala 48:84]
    node _T_934 = and(perfCnts_7, _T_67) @[RegMap.scala 48:84]
    node _T_935 = and(mimpid, _T_709) @[RegMap.scala 48:84]
    node _T_936 = and(perfCnts_118, _T_289) @[RegMap.scala 48:84]
    node _T_937 = and(perfCnts_96, _T_245) @[RegMap.scala 48:84]
    node _T_938 = and(pmpcfg1, _T_735) @[RegMap.scala 48:84]
    node _T_939 = and(perfCnts_86, _T_225) @[RegMap.scala 48:84]
    node _T_940 = and(mscratch, _T_723) @[RegMap.scala 48:84]
    node _T_941 = and(perfCnts_101, _T_255) @[RegMap.scala 48:84]
    node _T_942 = and(perfCnts_114, _T_281) @[RegMap.scala 48:84]
    node _T_943 = and(mhartid, _T_710) @[RegMap.scala 48:84]
    node _T_944 = and(mepc, _T_725) @[RegMap.scala 48:84]
    node _T_945 = and(mtval, _T_729) @[RegMap.scala 48:84]
    node _T_946 = and(scounteren, _T_695) @[RegMap.scala 48:84]
    node _T_947 = and(perfCnts_97, _T_247) @[RegMap.scala 48:84]
    node _T_948 = and(pmpcfg0, _T_733) @[RegMap.scala 48:84]
    node _T_949 = and(perfCnts_31, _T_115) @[RegMap.scala 48:84]
    node _T_950 = and(perfCnts_82, _T_217) @[RegMap.scala 48:84]
    node _T_951 = and(perfCnts_48, _T_149) @[RegMap.scala 48:84]
    node _T_952 = and(scause, _T_701) @[RegMap.scala 48:84]
    node _T_953 = and(perfCnts_63, _T_179) @[RegMap.scala 48:84]
    node _T_954 = and(perfCnts_65, _T_183) @[RegMap.scala 48:84]
    node _T_955 = and(perfCnts_71, _T_195) @[RegMap.scala 48:84]
    node _T_956 = and(perfCnts_50, _T_153) @[RegMap.scala 48:84]
    node _T_957 = and(perfCnts_16, _T_85) @[RegMap.scala 48:84]
    node _T_958 = and(perfCnts_18, _T_89) @[RegMap.scala 48:84]
    node _T_959 = eq(UInt<12>("hb06"), addr) @[LookupTree.scala 24:34]
    node _T_960 = eq(UInt<12>("hb49"), addr) @[LookupTree.scala 24:34]
    node _T_961 = eq(UInt<12>("hb3c"), addr) @[LookupTree.scala 24:34]
    node _T_962 = eq(UInt<12>("hb69"), addr) @[LookupTree.scala 24:34]
    node _T_963 = eq(UInt<12>("hb7c"), addr) @[LookupTree.scala 24:34]
    node _T_964 = eq(UInt<12>("hf12"), addr) @[LookupTree.scala 24:34]
    node _T_965 = eq(UInt<12>("hb5c"), addr) @[LookupTree.scala 24:34]
    node _T_966 = eq(UInt<12>("hb15"), addr) @[LookupTree.scala 24:34]
    node _T_967 = eq(UInt<12>("hb26"), addr) @[LookupTree.scala 24:34]
    node _T_968 = eq(UInt<9>("h180"), addr) @[LookupTree.scala 24:34]
    node _T_969 = eq(UInt<12>("hb66"), addr) @[LookupTree.scala 24:34]
    node _T_970 = eq(UInt<12>("hb75"), addr) @[LookupTree.scala 24:34]
    node _T_971 = eq(UInt<12>("hb55"), addr) @[LookupTree.scala 24:34]
    node _T_972 = eq(UInt<10>("h3b1"), addr) @[LookupTree.scala 24:34]
    node _T_973 = eq(UInt<12>("hb1c"), addr) @[LookupTree.scala 24:34]
    node _T_974 = eq(UInt<10>("h3a2"), addr) @[LookupTree.scala 24:34]
    node _T_975 = eq(UInt<12>("hb46"), addr) @[LookupTree.scala 24:34]
    node _T_976 = eq(UInt<9>("h140"), addr) @[LookupTree.scala 24:34]
    node _T_977 = eq(UInt<12>("hb09"), addr) @[LookupTree.scala 24:34]
    node _T_978 = eq(UInt<12>("hb03"), addr) @[LookupTree.scala 24:34]
    node _T_979 = eq(UInt<12>("hb35"), addr) @[LookupTree.scala 24:34]
    node _T_980 = eq(UInt<12>("hb64"), addr) @[LookupTree.scala 24:34]
    node _T_981 = eq(UInt<12>("hb51"), addr) @[LookupTree.scala 24:34]
    node _T_982 = eq(UInt<12>("hb29"), addr) @[LookupTree.scala 24:34]
    node _T_983 = eq(UInt<10>("h302"), addr) @[LookupTree.scala 24:34]
    node _T_984 = eq(UInt<12>("hb71"), addr) @[LookupTree.scala 24:34]
    node _T_985 = eq(UInt<12>("hb24"), addr) @[LookupTree.scala 24:34]
    node _T_986 = eq(UInt<9>("h105"), addr) @[LookupTree.scala 24:34]
    node _T_987 = eq(UInt<12>("hb0d"), addr) @[LookupTree.scala 24:34]
    node _T_988 = eq(UInt<12>("hb4d"), addr) @[LookupTree.scala 24:34]
    node _T_989 = eq(UInt<9>("h141"), addr) @[LookupTree.scala 24:34]
    node _T_990 = eq(UInt<12>("hb40"), addr) @[LookupTree.scala 24:34]
    node _T_991 = eq(UInt<10>("h342"), addr) @[LookupTree.scala 24:34]
    node _T_992 = eq(UInt<12>("hb6d"), addr) @[LookupTree.scala 24:34]
    node _T_993 = eq(UInt<12>("hb11"), addr) @[LookupTree.scala 24:34]
    node _T_994 = eq(UInt<12>("hb2d"), addr) @[LookupTree.scala 24:34]
    node _T_995 = eq(UInt<10>("h306"), addr) @[LookupTree.scala 24:34]
    node _T_996 = eq(UInt<12>("hb44"), addr) @[LookupTree.scala 24:34]
    node _T_997 = eq(UInt<12>("hb6a"), addr) @[LookupTree.scala 24:34]
    node _T_998 = eq(UInt<12>("hf11"), addr) @[LookupTree.scala 24:34]
    node _T_999 = eq(UInt<12>("hb5e"), addr) @[LookupTree.scala 24:34]
    node _T_1000 = eq(UInt<12>("hb59"), addr) @[LookupTree.scala 24:34]
    node _T_1001 = eq(UInt<9>("h104"), addr) @[LookupTree.scala 24:34]
    node _T_1002 = eq(UInt<12>("hb79"), addr) @[LookupTree.scala 24:34]
    node _T_1003 = eq(UInt<12>("hb4a"), addr) @[LookupTree.scala 24:34]
    node _T_1004 = eq(UInt<12>("hb39"), addr) @[LookupTree.scala 24:34]
    node _T_1005 = eq(UInt<12>("hb0a"), addr) @[LookupTree.scala 24:34]
    node _T_1006 = eq(UInt<12>("hb04"), addr) @[LookupTree.scala 24:34]
    node _T_1007 = eq(UInt<12>("hb38"), addr) @[LookupTree.scala 24:34]
    node _T_1008 = eq(UInt<9>("h144"), addr) @[LookupTree.scala 24:34]
    node _T_1009 = eq(UInt<12>("hb18"), addr) @[LookupTree.scala 24:34]
    node _T_1010 = eq(UInt<12>("hb4f"), addr) @[LookupTree.scala 24:34]
    node _T_1011 = eq(UInt<12>("hb19"), addr) @[LookupTree.scala 24:34]
    node _T_1012 = eq(UInt<12>("hb2a"), addr) @[LookupTree.scala 24:34]
    node _T_1013 = eq(UInt<9>("h100"), addr) @[LookupTree.scala 24:34]
    node _T_1014 = eq(UInt<12>("hb3d"), addr) @[LookupTree.scala 24:34]
    node _T_1015 = eq(UInt<12>("hb0e"), addr) @[LookupTree.scala 24:34]
    node _T_1016 = eq(UInt<12>("hb34"), addr) @[LookupTree.scala 24:34]
    node _T_1017 = eq(UInt<12>("hb74"), addr) @[LookupTree.scala 24:34]
    node _T_1018 = eq(UInt<12>("hb14"), addr) @[LookupTree.scala 24:34]
    node _T_1019 = eq(UInt<12>("hb1d"), addr) @[LookupTree.scala 24:34]
    node _T_1020 = eq(UInt<12>("hb54"), addr) @[LookupTree.scala 24:34]
    node _T_1021 = eq(UInt<12>("hb23"), addr) @[LookupTree.scala 24:34]
    node _T_1022 = eq(UInt<12>("hb2e"), addr) @[LookupTree.scala 24:34]
    node _T_1023 = eq(UInt<12>("hb6e"), addr) @[LookupTree.scala 24:34]
    node _T_1024 = eq(UInt<12>("hb43"), addr) @[LookupTree.scala 24:34]
    node _T_1025 = eq(UInt<12>("hb63"), addr) @[LookupTree.scala 24:34]
    node _T_1026 = eq(UInt<10>("h305"), addr) @[LookupTree.scala 24:34]
    node _T_1027 = eq(UInt<12>("hb5d"), addr) @[LookupTree.scala 24:34]
    node _T_1028 = eq(UInt<12>("hb78"), addr) @[LookupTree.scala 24:34]
    node _T_1029 = eq(UInt<12>("hb58"), addr) @[LookupTree.scala 24:34]
    node _T_1030 = eq(UInt<12>("hb7d"), addr) @[LookupTree.scala 24:34]
    node _T_1031 = eq(UInt<12>("hb4e"), addr) @[LookupTree.scala 24:34]
    node _T_1032 = eq(UInt<12>("hb2b"), addr) @[LookupTree.scala 24:34]
    node _T_1033 = eq(UInt<12>("hb7a"), addr) @[LookupTree.scala 24:34]
    node _T_1034 = eq(UInt<12>("hb21"), addr) @[LookupTree.scala 24:34]
    node _T_1035 = eq(UInt<10>("h304"), addr) @[LookupTree.scala 24:34]
    node _T_1036 = eq(UInt<12>("hb01"), addr) @[LookupTree.scala 24:34]
    node _T_1037 = eq(UInt<12>("hb0b"), addr) @[LookupTree.scala 24:34]
    node _T_1038 = eq(UInt<12>("hb4b"), addr) @[LookupTree.scala 24:34]
    node _T_1039 = eq(UInt<12>("hb77"), addr) @[LookupTree.scala 24:34]
    node _T_1040 = eq(UInt<10>("h3b3"), addr) @[LookupTree.scala 24:34]
    node _T_1041 = eq(UInt<12>("hb5a"), addr) @[LookupTree.scala 24:34]
    node _T_1042 = eq(UInt<12>("hb17"), addr) @[LookupTree.scala 24:34]
    node _T_1043 = eq(UInt<12>("hb7f"), addr) @[LookupTree.scala 24:34]
    node _T_1044 = eq(UInt<12>("hb28"), addr) @[LookupTree.scala 24:34]
    node _T_1045 = eq(UInt<12>("hb50"), addr) @[LookupTree.scala 24:34]
    node _T_1046 = eq(UInt<12>("hb37"), addr) @[LookupTree.scala 24:34]
    node _T_1047 = eq(UInt<12>("hb08"), addr) @[LookupTree.scala 24:34]
    node _T_1048 = eq(UInt<9>("h143"), addr) @[LookupTree.scala 24:34]
    node _T_1049 = eq(UInt<12>("hb6b"), addr) @[LookupTree.scala 24:34]
    node _T_1050 = eq(UInt<12>("hb3a"), addr) @[LookupTree.scala 24:34]
    node _T_1051 = eq(UInt<10>("h301"), addr) @[LookupTree.scala 24:34]
    node _T_1052 = eq(UInt<12>("hb70"), addr) @[LookupTree.scala 24:34]
    node _T_1053 = eq(UInt<12>("hb1a"), addr) @[LookupTree.scala 24:34]
    node _T_1054 = eq(UInt<12>("hb5f"), addr) @[LookupTree.scala 24:34]
    node _T_1055 = eq(UInt<10>("h300"), addr) @[LookupTree.scala 24:34]
    node _T_1056 = eq(UInt<12>("hb13"), addr) @[LookupTree.scala 24:34]
    node _T_1057 = eq(UInt<12>("hb73"), addr) @[LookupTree.scala 24:34]
    node _T_1058 = eq(UInt<12>("hb33"), addr) @[LookupTree.scala 24:34]
    node _T_1059 = eq(UInt<12>("hb62"), addr) @[LookupTree.scala 24:34]
    node _T_1060 = eq(UInt<12>("hb00"), addr) @[LookupTree.scala 24:34]
    node _T_1061 = eq(UInt<10>("h3b0"), addr) @[LookupTree.scala 24:34]
    node _T_1062 = eq(UInt<12>("hb3e"), addr) @[LookupTree.scala 24:34]
    node _T_1063 = eq(UInt<12>("hb6f"), addr) @[LookupTree.scala 24:34]
    node _T_1064 = eq(UInt<12>("hb1e"), addr) @[LookupTree.scala 24:34]
    node _T_1065 = eq(UInt<12>("hb53"), addr) @[LookupTree.scala 24:34]
    node _T_1066 = eq(UInt<10>("h344"), addr) @[LookupTree.scala 24:34]
    node _T_1067 = eq(UInt<12>("hb7e"), addr) @[LookupTree.scala 24:34]
    node _T_1068 = eq(UInt<12>("hb2f"), addr) @[LookupTree.scala 24:34]
    node _T_1069 = eq(UInt<12>("hb05"), addr) @[LookupTree.scala 24:34]
    node _T_1070 = eq(UInt<12>("hb22"), addr) @[LookupTree.scala 24:34]
    node _T_1071 = eq(UInt<12>("hb48"), addr) @[LookupTree.scala 24:34]
    node _T_1072 = eq(UInt<12>("hb42"), addr) @[LookupTree.scala 24:34]
    node _T_1073 = eq(UInt<12>("hb0f"), addr) @[LookupTree.scala 24:34]
    node _T_1074 = eq(UInt<12>("hb68"), addr) @[LookupTree.scala 24:34]
    node _T_1075 = eq(UInt<12>("hb57"), addr) @[LookupTree.scala 24:34]
    node _T_1076 = eq(UInt<12>("hb16"), addr) @[LookupTree.scala 24:34]
    node _T_1077 = eq(UInt<12>("hb1b"), addr) @[LookupTree.scala 24:34]
    node _T_1078 = eq(UInt<12>("hb2c"), addr) @[LookupTree.scala 24:34]
    node _T_1079 = eq(UInt<12>("hb7b"), addr) @[LookupTree.scala 24:34]
    node _T_1080 = eq(UInt<12>("hb4c"), addr) @[LookupTree.scala 24:34]
    node _T_1081 = eq(UInt<12>("hb20"), addr) @[LookupTree.scala 24:34]
    node _T_1082 = eq(UInt<12>("hb31"), addr) @[LookupTree.scala 24:34]
    node _T_1083 = eq(UInt<12>("hb3b"), addr) @[LookupTree.scala 24:34]
    node _T_1084 = eq(UInt<12>("hb6c"), addr) @[LookupTree.scala 24:34]
    node _T_1085 = eq(UInt<12>("hb02"), addr) @[LookupTree.scala 24:34]
    node _T_1086 = eq(UInt<10>("h3a3"), addr) @[LookupTree.scala 24:34]
    node _T_1087 = eq(UInt<12>("hb45"), addr) @[LookupTree.scala 24:34]
    node _T_1088 = eq(UInt<12>("hb36"), addr) @[LookupTree.scala 24:34]
    node _T_1089 = eq(UInt<12>("hb0c"), addr) @[LookupTree.scala 24:34]
    node _T_1090 = eq(UInt<12>("hb67"), addr) @[LookupTree.scala 24:34]
    node _T_1091 = eq(UInt<10>("h303"), addr) @[LookupTree.scala 24:34]
    node _T_1092 = eq(UInt<12>("hb5b"), addr) @[LookupTree.scala 24:34]
    node _T_1093 = eq(UInt<12>("hb27"), addr) @[LookupTree.scala 24:34]
    node _T_1094 = eq(UInt<12>("hb25"), addr) @[LookupTree.scala 24:34]
    node _T_1095 = eq(UInt<10>("h3b2"), addr) @[LookupTree.scala 24:34]
    node _T_1096 = eq(UInt<12>("hb07"), addr) @[LookupTree.scala 24:34]
    node _T_1097 = eq(UInt<12>("hf13"), addr) @[LookupTree.scala 24:34]
    node _T_1098 = eq(UInt<12>("hb76"), addr) @[LookupTree.scala 24:34]
    node _T_1099 = eq(UInt<12>("hb60"), addr) @[LookupTree.scala 24:34]
    node _T_1100 = eq(UInt<10>("h3a1"), addr) @[LookupTree.scala 24:34]
    node _T_1101 = eq(UInt<12>("hb56"), addr) @[LookupTree.scala 24:34]
    node _T_1102 = eq(UInt<10>("h340"), addr) @[LookupTree.scala 24:34]
    node _T_1103 = eq(UInt<12>("hb65"), addr) @[LookupTree.scala 24:34]
    node _T_1104 = eq(UInt<12>("hb72"), addr) @[LookupTree.scala 24:34]
    node _T_1105 = eq(UInt<12>("hf14"), addr) @[LookupTree.scala 24:34]
    node _T_1106 = eq(UInt<10>("h341"), addr) @[LookupTree.scala 24:34]
    node _T_1107 = eq(UInt<10>("h343"), addr) @[LookupTree.scala 24:34]
    node _T_1108 = eq(UInt<9>("h106"), addr) @[LookupTree.scala 24:34]
    node _T_1109 = eq(UInt<12>("hb61"), addr) @[LookupTree.scala 24:34]
    node _T_1110 = eq(UInt<10>("h3a0"), addr) @[LookupTree.scala 24:34]
    node _T_1111 = eq(UInt<12>("hb1f"), addr) @[LookupTree.scala 24:34]
    node _T_1112 = eq(UInt<12>("hb52"), addr) @[LookupTree.scala 24:34]
    node _T_1113 = eq(UInt<12>("hb30"), addr) @[LookupTree.scala 24:34]
    node _T_1114 = eq(UInt<9>("h142"), addr) @[LookupTree.scala 24:34]
    node _T_1115 = eq(UInt<12>("hb3f"), addr) @[LookupTree.scala 24:34]
    node _T_1116 = eq(UInt<12>("hb41"), addr) @[LookupTree.scala 24:34]
    node _T_1117 = eq(UInt<12>("hb47"), addr) @[LookupTree.scala 24:34]
    node _T_1118 = eq(UInt<12>("hb32"), addr) @[LookupTree.scala 24:34]
    node _T_1119 = eq(UInt<12>("hb10"), addr) @[LookupTree.scala 24:34]
    node _T_1120 = eq(UInt<12>("hb12"), addr) @[LookupTree.scala 24:34]
    node _T_1121 = mux(_T_959, _T_797, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1122 = mux(_T_960, _T_798, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1123 = mux(_T_961, _T_799, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1124 = mux(_T_962, _T_800, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1125 = mux(_T_963, _T_801, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1126 = mux(_T_964, _T_802, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1127 = mux(_T_965, _T_803, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1128 = mux(_T_966, _T_804, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1129 = mux(_T_967, _T_805, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1130 = mux(_T_968, _T_806, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1131 = mux(_T_969, _T_807, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1132 = mux(_T_970, _T_808, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1133 = mux(_T_971, _T_809, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1134 = mux(_T_972, _T_810, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1135 = mux(_T_973, _T_811, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1136 = mux(_T_974, _T_812, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1137 = mux(_T_975, _T_813, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1138 = mux(_T_976, _T_814, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1139 = mux(_T_977, _T_815, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1140 = mux(_T_978, _T_816, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1141 = mux(_T_979, _T_817, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1142 = mux(_T_980, _T_818, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1143 = mux(_T_981, _T_819, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1144 = mux(_T_982, _T_820, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1145 = mux(_T_983, _T_821, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1146 = mux(_T_984, _T_822, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1147 = mux(_T_985, _T_823, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1148 = mux(_T_986, _T_824, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1149 = mux(_T_987, _T_825, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1150 = mux(_T_988, _T_826, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1151 = mux(_T_989, _T_827, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1152 = mux(_T_990, _T_828, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1153 = mux(_T_991, _T_829, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1154 = mux(_T_992, _T_830, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1155 = mux(_T_993, _T_831, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1156 = mux(_T_994, _T_832, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1157 = mux(_T_995, _T_833, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1158 = mux(_T_996, _T_834, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1159 = mux(_T_997, _T_835, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1160 = mux(_T_998, _T_836, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1161 = mux(_T_999, _T_837, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1162 = mux(_T_1000, _T_838, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1163 = mux(_T_1001, _T_839, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1164 = mux(_T_1002, _T_840, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1165 = mux(_T_1003, _T_841, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1166 = mux(_T_1004, _T_842, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1167 = mux(_T_1005, _T_843, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1168 = mux(_T_1006, _T_844, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1169 = mux(_T_1007, _T_845, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1170 = mux(_T_1008, _T_846, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1171 = mux(_T_1009, _T_847, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1172 = mux(_T_1010, _T_848, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1173 = mux(_T_1011, _T_849, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1174 = mux(_T_1012, _T_850, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1175 = mux(_T_1013, _T_851, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1176 = mux(_T_1014, _T_852, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1177 = mux(_T_1015, _T_853, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1178 = mux(_T_1016, _T_854, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1179 = mux(_T_1017, _T_855, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1180 = mux(_T_1018, _T_856, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1181 = mux(_T_1019, _T_857, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1182 = mux(_T_1020, _T_858, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1183 = mux(_T_1021, _T_859, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1184 = mux(_T_1022, _T_860, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1185 = mux(_T_1023, _T_861, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1186 = mux(_T_1024, _T_862, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1187 = mux(_T_1025, _T_863, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1188 = mux(_T_1026, _T_864, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1189 = mux(_T_1027, _T_865, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1190 = mux(_T_1028, _T_866, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1191 = mux(_T_1029, _T_867, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1192 = mux(_T_1030, _T_868, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1193 = mux(_T_1031, _T_869, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1194 = mux(_T_1032, _T_870, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1195 = mux(_T_1033, _T_871, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1196 = mux(_T_1034, _T_872, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1197 = mux(_T_1035, _T_873, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1198 = mux(_T_1036, _T_874, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1199 = mux(_T_1037, _T_875, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1200 = mux(_T_1038, _T_876, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1201 = mux(_T_1039, _T_877, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1202 = mux(_T_1040, _T_878, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1203 = mux(_T_1041, _T_879, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1204 = mux(_T_1042, _T_880, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1205 = mux(_T_1043, _T_881, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1206 = mux(_T_1044, _T_882, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1207 = mux(_T_1045, _T_883, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1208 = mux(_T_1046, _T_884, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1209 = mux(_T_1047, _T_885, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1210 = mux(_T_1048, _T_886, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1211 = mux(_T_1049, _T_887, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1212 = mux(_T_1050, _T_888, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1213 = mux(_T_1051, _T_889, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1214 = mux(_T_1052, _T_890, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1215 = mux(_T_1053, _T_891, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1216 = mux(_T_1054, _T_892, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1217 = mux(_T_1055, _T_893, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1218 = mux(_T_1056, _T_894, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1219 = mux(_T_1057, _T_895, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1220 = mux(_T_1058, _T_896, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1221 = mux(_T_1059, _T_897, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1222 = mux(_T_1060, _T_898, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1223 = mux(_T_1061, _T_899, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1224 = mux(_T_1062, _T_900, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1225 = mux(_T_1063, _T_901, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1226 = mux(_T_1064, _T_902, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1227 = mux(_T_1065, _T_903, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1228 = mux(_T_1066, _T_904, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1229 = mux(_T_1067, _T_905, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1230 = mux(_T_1068, _T_906, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1231 = mux(_T_1069, _T_907, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1232 = mux(_T_1070, _T_908, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1233 = mux(_T_1071, _T_909, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1234 = mux(_T_1072, _T_910, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1235 = mux(_T_1073, _T_911, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1236 = mux(_T_1074, _T_912, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1237 = mux(_T_1075, _T_913, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1238 = mux(_T_1076, _T_914, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1239 = mux(_T_1077, _T_915, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1240 = mux(_T_1078, _T_916, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1241 = mux(_T_1079, _T_917, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1242 = mux(_T_1080, _T_918, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1243 = mux(_T_1081, _T_919, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1244 = mux(_T_1082, _T_920, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1245 = mux(_T_1083, _T_921, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1246 = mux(_T_1084, _T_922, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1247 = mux(_T_1085, _T_923, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1248 = mux(_T_1086, _T_924, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1249 = mux(_T_1087, _T_925, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1250 = mux(_T_1088, _T_926, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1251 = mux(_T_1089, _T_927, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1252 = mux(_T_1090, _T_928, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1253 = mux(_T_1091, _T_929, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1254 = mux(_T_1092, _T_930, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1255 = mux(_T_1093, _T_931, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1256 = mux(_T_1094, _T_932, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1257 = mux(_T_1095, _T_933, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1258 = mux(_T_1096, _T_934, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1259 = mux(_T_1097, _T_935, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1260 = mux(_T_1098, _T_936, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1261 = mux(_T_1099, _T_937, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1262 = mux(_T_1100, _T_938, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1263 = mux(_T_1101, _T_939, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1264 = mux(_T_1102, _T_940, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1265 = mux(_T_1103, _T_941, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1266 = mux(_T_1104, _T_942, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1267 = mux(_T_1105, _T_943, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1268 = mux(_T_1106, _T_944, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1269 = mux(_T_1107, _T_945, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1270 = mux(_T_1108, _T_946, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1271 = mux(_T_1109, _T_947, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1272 = mux(_T_1110, _T_948, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1273 = mux(_T_1111, _T_949, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1274 = mux(_T_1112, _T_950, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1275 = mux(_T_1113, _T_951, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1276 = mux(_T_1114, _T_952, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1277 = mux(_T_1115, _T_953, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1278 = mux(_T_1116, _T_954, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1279 = mux(_T_1117, _T_955, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1280 = mux(_T_1118, _T_956, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1281 = mux(_T_1119, _T_957, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1282 = mux(_T_1120, _T_958, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_1283 = or(_T_1121, _T_1122) @[Mux.scala 27:72]
    node _T_1284 = or(_T_1283, _T_1123) @[Mux.scala 27:72]
    node _T_1285 = or(_T_1284, _T_1124) @[Mux.scala 27:72]
    node _T_1286 = or(_T_1285, _T_1125) @[Mux.scala 27:72]
    node _T_1287 = or(_T_1286, _T_1126) @[Mux.scala 27:72]
    node _T_1288 = or(_T_1287, _T_1127) @[Mux.scala 27:72]
    node _T_1289 = or(_T_1288, _T_1128) @[Mux.scala 27:72]
    node _T_1290 = or(_T_1289, _T_1129) @[Mux.scala 27:72]
    node _T_1291 = or(_T_1290, _T_1130) @[Mux.scala 27:72]
    node _T_1292 = or(_T_1291, _T_1131) @[Mux.scala 27:72]
    node _T_1293 = or(_T_1292, _T_1132) @[Mux.scala 27:72]
    node _T_1294 = or(_T_1293, _T_1133) @[Mux.scala 27:72]
    node _T_1295 = or(_T_1294, _T_1134) @[Mux.scala 27:72]
    node _T_1296 = or(_T_1295, _T_1135) @[Mux.scala 27:72]
    node _T_1297 = or(_T_1296, _T_1136) @[Mux.scala 27:72]
    node _T_1298 = or(_T_1297, _T_1137) @[Mux.scala 27:72]
    node _T_1299 = or(_T_1298, _T_1138) @[Mux.scala 27:72]
    node _T_1300 = or(_T_1299, _T_1139) @[Mux.scala 27:72]
    node _T_1301 = or(_T_1300, _T_1140) @[Mux.scala 27:72]
    node _T_1302 = or(_T_1301, _T_1141) @[Mux.scala 27:72]
    node _T_1303 = or(_T_1302, _T_1142) @[Mux.scala 27:72]
    node _T_1304 = or(_T_1303, _T_1143) @[Mux.scala 27:72]
    node _T_1305 = or(_T_1304, _T_1144) @[Mux.scala 27:72]
    node _T_1306 = or(_T_1305, _T_1145) @[Mux.scala 27:72]
    node _T_1307 = or(_T_1306, _T_1146) @[Mux.scala 27:72]
    node _T_1308 = or(_T_1307, _T_1147) @[Mux.scala 27:72]
    node _T_1309 = or(_T_1308, _T_1148) @[Mux.scala 27:72]
    node _T_1310 = or(_T_1309, _T_1149) @[Mux.scala 27:72]
    node _T_1311 = or(_T_1310, _T_1150) @[Mux.scala 27:72]
    node _T_1312 = or(_T_1311, _T_1151) @[Mux.scala 27:72]
    node _T_1313 = or(_T_1312, _T_1152) @[Mux.scala 27:72]
    node _T_1314 = or(_T_1313, _T_1153) @[Mux.scala 27:72]
    node _T_1315 = or(_T_1314, _T_1154) @[Mux.scala 27:72]
    node _T_1316 = or(_T_1315, _T_1155) @[Mux.scala 27:72]
    node _T_1317 = or(_T_1316, _T_1156) @[Mux.scala 27:72]
    node _T_1318 = or(_T_1317, _T_1157) @[Mux.scala 27:72]
    node _T_1319 = or(_T_1318, _T_1158) @[Mux.scala 27:72]
    node _T_1320 = or(_T_1319, _T_1159) @[Mux.scala 27:72]
    node _T_1321 = or(_T_1320, _T_1160) @[Mux.scala 27:72]
    node _T_1322 = or(_T_1321, _T_1161) @[Mux.scala 27:72]
    node _T_1323 = or(_T_1322, _T_1162) @[Mux.scala 27:72]
    node _T_1324 = or(_T_1323, _T_1163) @[Mux.scala 27:72]
    node _T_1325 = or(_T_1324, _T_1164) @[Mux.scala 27:72]
    node _T_1326 = or(_T_1325, _T_1165) @[Mux.scala 27:72]
    node _T_1327 = or(_T_1326, _T_1166) @[Mux.scala 27:72]
    node _T_1328 = or(_T_1327, _T_1167) @[Mux.scala 27:72]
    node _T_1329 = or(_T_1328, _T_1168) @[Mux.scala 27:72]
    node _T_1330 = or(_T_1329, _T_1169) @[Mux.scala 27:72]
    node _T_1331 = or(_T_1330, _T_1170) @[Mux.scala 27:72]
    node _T_1332 = or(_T_1331, _T_1171) @[Mux.scala 27:72]
    node _T_1333 = or(_T_1332, _T_1172) @[Mux.scala 27:72]
    node _T_1334 = or(_T_1333, _T_1173) @[Mux.scala 27:72]
    node _T_1335 = or(_T_1334, _T_1174) @[Mux.scala 27:72]
    node _T_1336 = or(_T_1335, _T_1175) @[Mux.scala 27:72]
    node _T_1337 = or(_T_1336, _T_1176) @[Mux.scala 27:72]
    node _T_1338 = or(_T_1337, _T_1177) @[Mux.scala 27:72]
    node _T_1339 = or(_T_1338, _T_1178) @[Mux.scala 27:72]
    node _T_1340 = or(_T_1339, _T_1179) @[Mux.scala 27:72]
    node _T_1341 = or(_T_1340, _T_1180) @[Mux.scala 27:72]
    node _T_1342 = or(_T_1341, _T_1181) @[Mux.scala 27:72]
    node _T_1343 = or(_T_1342, _T_1182) @[Mux.scala 27:72]
    node _T_1344 = or(_T_1343, _T_1183) @[Mux.scala 27:72]
    node _T_1345 = or(_T_1344, _T_1184) @[Mux.scala 27:72]
    node _T_1346 = or(_T_1345, _T_1185) @[Mux.scala 27:72]
    node _T_1347 = or(_T_1346, _T_1186) @[Mux.scala 27:72]
    node _T_1348 = or(_T_1347, _T_1187) @[Mux.scala 27:72]
    node _T_1349 = or(_T_1348, _T_1188) @[Mux.scala 27:72]
    node _T_1350 = or(_T_1349, _T_1189) @[Mux.scala 27:72]
    node _T_1351 = or(_T_1350, _T_1190) @[Mux.scala 27:72]
    node _T_1352 = or(_T_1351, _T_1191) @[Mux.scala 27:72]
    node _T_1353 = or(_T_1352, _T_1192) @[Mux.scala 27:72]
    node _T_1354 = or(_T_1353, _T_1193) @[Mux.scala 27:72]
    node _T_1355 = or(_T_1354, _T_1194) @[Mux.scala 27:72]
    node _T_1356 = or(_T_1355, _T_1195) @[Mux.scala 27:72]
    node _T_1357 = or(_T_1356, _T_1196) @[Mux.scala 27:72]
    node _T_1358 = or(_T_1357, _T_1197) @[Mux.scala 27:72]
    node _T_1359 = or(_T_1358, _T_1198) @[Mux.scala 27:72]
    node _T_1360 = or(_T_1359, _T_1199) @[Mux.scala 27:72]
    node _T_1361 = or(_T_1360, _T_1200) @[Mux.scala 27:72]
    node _T_1362 = or(_T_1361, _T_1201) @[Mux.scala 27:72]
    node _T_1363 = or(_T_1362, _T_1202) @[Mux.scala 27:72]
    node _T_1364 = or(_T_1363, _T_1203) @[Mux.scala 27:72]
    node _T_1365 = or(_T_1364, _T_1204) @[Mux.scala 27:72]
    node _T_1366 = or(_T_1365, _T_1205) @[Mux.scala 27:72]
    node _T_1367 = or(_T_1366, _T_1206) @[Mux.scala 27:72]
    node _T_1368 = or(_T_1367, _T_1207) @[Mux.scala 27:72]
    node _T_1369 = or(_T_1368, _T_1208) @[Mux.scala 27:72]
    node _T_1370 = or(_T_1369, _T_1209) @[Mux.scala 27:72]
    node _T_1371 = or(_T_1370, _T_1210) @[Mux.scala 27:72]
    node _T_1372 = or(_T_1371, _T_1211) @[Mux.scala 27:72]
    node _T_1373 = or(_T_1372, _T_1212) @[Mux.scala 27:72]
    node _T_1374 = or(_T_1373, _T_1213) @[Mux.scala 27:72]
    node _T_1375 = or(_T_1374, _T_1214) @[Mux.scala 27:72]
    node _T_1376 = or(_T_1375, _T_1215) @[Mux.scala 27:72]
    node _T_1377 = or(_T_1376, _T_1216) @[Mux.scala 27:72]
    node _T_1378 = or(_T_1377, _T_1217) @[Mux.scala 27:72]
    node _T_1379 = or(_T_1378, _T_1218) @[Mux.scala 27:72]
    node _T_1380 = or(_T_1379, _T_1219) @[Mux.scala 27:72]
    node _T_1381 = or(_T_1380, _T_1220) @[Mux.scala 27:72]
    node _T_1382 = or(_T_1381, _T_1221) @[Mux.scala 27:72]
    node _T_1383 = or(_T_1382, _T_1222) @[Mux.scala 27:72]
    node _T_1384 = or(_T_1383, _T_1223) @[Mux.scala 27:72]
    node _T_1385 = or(_T_1384, _T_1224) @[Mux.scala 27:72]
    node _T_1386 = or(_T_1385, _T_1225) @[Mux.scala 27:72]
    node _T_1387 = or(_T_1386, _T_1226) @[Mux.scala 27:72]
    node _T_1388 = or(_T_1387, _T_1227) @[Mux.scala 27:72]
    node _T_1389 = or(_T_1388, _T_1228) @[Mux.scala 27:72]
    node _T_1390 = or(_T_1389, _T_1229) @[Mux.scala 27:72]
    node _T_1391 = or(_T_1390, _T_1230) @[Mux.scala 27:72]
    node _T_1392 = or(_T_1391, _T_1231) @[Mux.scala 27:72]
    node _T_1393 = or(_T_1392, _T_1232) @[Mux.scala 27:72]
    node _T_1394 = or(_T_1393, _T_1233) @[Mux.scala 27:72]
    node _T_1395 = or(_T_1394, _T_1234) @[Mux.scala 27:72]
    node _T_1396 = or(_T_1395, _T_1235) @[Mux.scala 27:72]
    node _T_1397 = or(_T_1396, _T_1236) @[Mux.scala 27:72]
    node _T_1398 = or(_T_1397, _T_1237) @[Mux.scala 27:72]
    node _T_1399 = or(_T_1398, _T_1238) @[Mux.scala 27:72]
    node _T_1400 = or(_T_1399, _T_1239) @[Mux.scala 27:72]
    node _T_1401 = or(_T_1400, _T_1240) @[Mux.scala 27:72]
    node _T_1402 = or(_T_1401, _T_1241) @[Mux.scala 27:72]
    node _T_1403 = or(_T_1402, _T_1242) @[Mux.scala 27:72]
    node _T_1404 = or(_T_1403, _T_1243) @[Mux.scala 27:72]
    node _T_1405 = or(_T_1404, _T_1244) @[Mux.scala 27:72]
    node _T_1406 = or(_T_1405, _T_1245) @[Mux.scala 27:72]
    node _T_1407 = or(_T_1406, _T_1246) @[Mux.scala 27:72]
    node _T_1408 = or(_T_1407, _T_1247) @[Mux.scala 27:72]
    node _T_1409 = or(_T_1408, _T_1248) @[Mux.scala 27:72]
    node _T_1410 = or(_T_1409, _T_1249) @[Mux.scala 27:72]
    node _T_1411 = or(_T_1410, _T_1250) @[Mux.scala 27:72]
    node _T_1412 = or(_T_1411, _T_1251) @[Mux.scala 27:72]
    node _T_1413 = or(_T_1412, _T_1252) @[Mux.scala 27:72]
    node _T_1414 = or(_T_1413, _T_1253) @[Mux.scala 27:72]
    node _T_1415 = or(_T_1414, _T_1254) @[Mux.scala 27:72]
    node _T_1416 = or(_T_1415, _T_1255) @[Mux.scala 27:72]
    node _T_1417 = or(_T_1416, _T_1256) @[Mux.scala 27:72]
    node _T_1418 = or(_T_1417, _T_1257) @[Mux.scala 27:72]
    node _T_1419 = or(_T_1418, _T_1258) @[Mux.scala 27:72]
    node _T_1420 = or(_T_1419, _T_1259) @[Mux.scala 27:72]
    node _T_1421 = or(_T_1420, _T_1260) @[Mux.scala 27:72]
    node _T_1422 = or(_T_1421, _T_1261) @[Mux.scala 27:72]
    node _T_1423 = or(_T_1422, _T_1262) @[Mux.scala 27:72]
    node _T_1424 = or(_T_1423, _T_1263) @[Mux.scala 27:72]
    node _T_1425 = or(_T_1424, _T_1264) @[Mux.scala 27:72]
    node _T_1426 = or(_T_1425, _T_1265) @[Mux.scala 27:72]
    node _T_1427 = or(_T_1426, _T_1266) @[Mux.scala 27:72]
    node _T_1428 = or(_T_1427, _T_1267) @[Mux.scala 27:72]
    node _T_1429 = or(_T_1428, _T_1268) @[Mux.scala 27:72]
    node _T_1430 = or(_T_1429, _T_1269) @[Mux.scala 27:72]
    node _T_1431 = or(_T_1430, _T_1270) @[Mux.scala 27:72]
    node _T_1432 = or(_T_1431, _T_1271) @[Mux.scala 27:72]
    node _T_1433 = or(_T_1432, _T_1272) @[Mux.scala 27:72]
    node _T_1434 = or(_T_1433, _T_1273) @[Mux.scala 27:72]
    node _T_1435 = or(_T_1434, _T_1274) @[Mux.scala 27:72]
    node _T_1436 = or(_T_1435, _T_1275) @[Mux.scala 27:72]
    node _T_1437 = or(_T_1436, _T_1276) @[Mux.scala 27:72]
    node _T_1438 = or(_T_1437, _T_1277) @[Mux.scala 27:72]
    node _T_1439 = or(_T_1438, _T_1278) @[Mux.scala 27:72]
    node _T_1440 = or(_T_1439, _T_1279) @[Mux.scala 27:72]
    node _T_1441 = or(_T_1440, _T_1280) @[Mux.scala 27:72]
    node _T_1442 = or(_T_1441, _T_1281) @[Mux.scala 27:72]
    node _T_1443 = or(_T_1442, _T_1282) @[Mux.scala 27:72]
    wire _WIRE_8 : UInt<64> @[Mux.scala 27:72]
    _WIRE_8 <= _T_1443 @[Mux.scala 27:72]
    rdata <= _WIRE_8 @[RegMap.scala 48:11]
    node _T_1444 = eq(addr, UInt<12>("hb06")) @[RegMap.scala 50:65]
    node _T_1445 = and(_T_796, _T_1444) @[RegMap.scala 50:56]
    when _T_1445 : @[RegMap.scala 50:72]
      node _T_1446 = and(wdata, _T_64) @[BitUtils.scala 32:13]
      node _T_1447 = not(_T_64) @[BitUtils.scala 32:38]
      node _T_1448 = and(perfCnts_6, _T_1447) @[BitUtils.scala 32:36]
      node _T_1449 = or(_T_1446, _T_1448) @[BitUtils.scala 32:25]
      perfCnts_6 <= _T_1449 @[RegMap.scala 50:76]
    node _T_1450 = eq(addr, UInt<12>("hb49")) @[RegMap.scala 50:65]
    node _T_1451 = and(_T_796, _T_1450) @[RegMap.scala 50:56]
    when _T_1451 : @[RegMap.scala 50:72]
      node _T_1452 = and(wdata, _T_198) @[BitUtils.scala 32:13]
      node _T_1453 = not(_T_198) @[BitUtils.scala 32:38]
      node _T_1454 = and(perfCnts_73, _T_1453) @[BitUtils.scala 32:36]
      node _T_1455 = or(_T_1452, _T_1454) @[BitUtils.scala 32:25]
      perfCnts_73 <= _T_1455 @[RegMap.scala 50:76]
    node _T_1456 = eq(addr, UInt<12>("hb3c")) @[RegMap.scala 50:65]
    node _T_1457 = and(_T_796, _T_1456) @[RegMap.scala 50:56]
    when _T_1457 : @[RegMap.scala 50:72]
      node _T_1458 = and(wdata, _T_172) @[BitUtils.scala 32:13]
      node _T_1459 = not(_T_172) @[BitUtils.scala 32:38]
      node _T_1460 = and(perfCnts_60, _T_1459) @[BitUtils.scala 32:36]
      node _T_1461 = or(_T_1458, _T_1460) @[BitUtils.scala 32:25]
      perfCnts_60 <= _T_1461 @[RegMap.scala 50:76]
    node _T_1462 = eq(addr, UInt<12>("hb69")) @[RegMap.scala 50:65]
    node _T_1463 = and(_T_796, _T_1462) @[RegMap.scala 50:56]
    when _T_1463 : @[RegMap.scala 50:72]
      node _T_1464 = and(wdata, _T_262) @[BitUtils.scala 32:13]
      node _T_1465 = not(_T_262) @[BitUtils.scala 32:38]
      node _T_1466 = and(perfCnts_105, _T_1465) @[BitUtils.scala 32:36]
      node _T_1467 = or(_T_1464, _T_1466) @[BitUtils.scala 32:25]
      perfCnts_105 <= _T_1467 @[RegMap.scala 50:76]
    node _T_1468 = eq(addr, UInt<12>("hb7c")) @[RegMap.scala 50:65]
    node _T_1469 = and(_T_796, _T_1468) @[RegMap.scala 50:56]
    when _T_1469 : @[RegMap.scala 50:72]
      node _T_1470 = and(wdata, _T_300) @[BitUtils.scala 32:13]
      node _T_1471 = not(_T_300) @[BitUtils.scala 32:38]
      node _T_1472 = and(perfCnts_124, _T_1471) @[BitUtils.scala 32:36]
      node _T_1473 = or(_T_1470, _T_1472) @[BitUtils.scala 32:25]
      perfCnts_124 <= _T_1473 @[RegMap.scala 50:76]
    node _T_1474 = eq(addr, UInt<12>("hb5c")) @[RegMap.scala 50:65]
    node _T_1475 = and(_T_796, _T_1474) @[RegMap.scala 50:56]
    when _T_1475 : @[RegMap.scala 50:72]
      node _T_1476 = and(wdata, _T_236) @[BitUtils.scala 32:13]
      node _T_1477 = not(_T_236) @[BitUtils.scala 32:38]
      node _T_1478 = and(perfCnts_92, _T_1477) @[BitUtils.scala 32:36]
      node _T_1479 = or(_T_1476, _T_1478) @[BitUtils.scala 32:25]
      perfCnts_92 <= _T_1479 @[RegMap.scala 50:76]
    node _T_1480 = eq(addr, UInt<12>("hb15")) @[RegMap.scala 50:65]
    node _T_1481 = and(_T_796, _T_1480) @[RegMap.scala 50:56]
    when _T_1481 : @[RegMap.scala 50:72]
      node _T_1482 = and(wdata, _T_94) @[BitUtils.scala 32:13]
      node _T_1483 = not(_T_94) @[BitUtils.scala 32:38]
      node _T_1484 = and(perfCnts_21, _T_1483) @[BitUtils.scala 32:36]
      node _T_1485 = or(_T_1482, _T_1484) @[BitUtils.scala 32:25]
      perfCnts_21 <= _T_1485 @[RegMap.scala 50:76]
    node _T_1486 = eq(addr, UInt<12>("hb26")) @[RegMap.scala 50:65]
    node _T_1487 = and(_T_796, _T_1486) @[RegMap.scala 50:56]
    when _T_1487 : @[RegMap.scala 50:72]
      node _T_1488 = and(wdata, _T_128) @[BitUtils.scala 32:13]
      node _T_1489 = not(_T_128) @[BitUtils.scala 32:38]
      node _T_1490 = and(perfCnts_38, _T_1489) @[BitUtils.scala 32:36]
      node _T_1491 = or(_T_1488, _T_1490) @[BitUtils.scala 32:25]
      perfCnts_38 <= _T_1491 @[RegMap.scala 50:76]
    node _T_1492 = eq(addr, UInt<9>("h180")) @[RegMap.scala 50:65]
    node _T_1493 = and(_T_796, _T_1492) @[RegMap.scala 50:56]
    when _T_1493 : @[RegMap.scala 50:72]
      node _T_1494 = and(wdata, _T_705) @[BitUtils.scala 32:13]
      node _T_1495 = not(_T_705) @[BitUtils.scala 32:38]
      node _T_1496 = and(satp, _T_1495) @[BitUtils.scala 32:36]
      node _T_1497 = or(_T_1494, _T_1496) @[BitUtils.scala 32:25]
      satp <= _T_1497 @[RegMap.scala 50:76]
    node _T_1498 = eq(addr, UInt<12>("hb66")) @[RegMap.scala 50:65]
    node _T_1499 = and(_T_796, _T_1498) @[RegMap.scala 50:56]
    when _T_1499 : @[RegMap.scala 50:72]
      node _T_1500 = and(wdata, _T_256) @[BitUtils.scala 32:13]
      node _T_1501 = not(_T_256) @[BitUtils.scala 32:38]
      node _T_1502 = and(perfCnts_102, _T_1501) @[BitUtils.scala 32:36]
      node _T_1503 = or(_T_1500, _T_1502) @[BitUtils.scala 32:25]
      perfCnts_102 <= _T_1503 @[RegMap.scala 50:76]
    node _T_1504 = eq(addr, UInt<12>("hb75")) @[RegMap.scala 50:65]
    node _T_1505 = and(_T_796, _T_1504) @[RegMap.scala 50:56]
    when _T_1505 : @[RegMap.scala 50:72]
      node _T_1506 = and(wdata, _T_286) @[BitUtils.scala 32:13]
      node _T_1507 = not(_T_286) @[BitUtils.scala 32:38]
      node _T_1508 = and(perfCnts_117, _T_1507) @[BitUtils.scala 32:36]
      node _T_1509 = or(_T_1506, _T_1508) @[BitUtils.scala 32:25]
      perfCnts_117 <= _T_1509 @[RegMap.scala 50:76]
    node _T_1510 = eq(addr, UInt<12>("hb55")) @[RegMap.scala 50:65]
    node _T_1511 = and(_T_796, _T_1510) @[RegMap.scala 50:56]
    when _T_1511 : @[RegMap.scala 50:72]
      node _T_1512 = and(wdata, _T_222) @[BitUtils.scala 32:13]
      node _T_1513 = not(_T_222) @[BitUtils.scala 32:38]
      node _T_1514 = and(perfCnts_85, _T_1513) @[BitUtils.scala 32:36]
      node _T_1515 = or(_T_1512, _T_1514) @[BitUtils.scala 32:25]
      perfCnts_85 <= _T_1515 @[RegMap.scala 50:76]
    node _T_1516 = eq(addr, UInt<10>("h3b1")) @[RegMap.scala 50:65]
    node _T_1517 = and(_T_796, _T_1516) @[RegMap.scala 50:56]
    when _T_1517 : @[RegMap.scala 50:72]
      node _T_1518 = and(wdata, _T_742) @[BitUtils.scala 32:13]
      node _T_1519 = not(_T_742) @[BitUtils.scala 32:38]
      node _T_1520 = and(pmpaddr1, _T_1519) @[BitUtils.scala 32:36]
      node _T_1521 = or(_T_1518, _T_1520) @[BitUtils.scala 32:25]
      pmpaddr1 <= _T_1521 @[RegMap.scala 50:76]
    node _T_1522 = eq(addr, UInt<12>("hb1c")) @[RegMap.scala 50:65]
    node _T_1523 = and(_T_796, _T_1522) @[RegMap.scala 50:56]
    when _T_1523 : @[RegMap.scala 50:72]
      node _T_1524 = and(wdata, _T_108) @[BitUtils.scala 32:13]
      node _T_1525 = not(_T_108) @[BitUtils.scala 32:38]
      node _T_1526 = and(perfCnts_28, _T_1525) @[BitUtils.scala 32:36]
      node _T_1527 = or(_T_1524, _T_1526) @[BitUtils.scala 32:25]
      perfCnts_28 <= _T_1527 @[RegMap.scala 50:76]
    node _T_1528 = eq(addr, UInt<10>("h3a2")) @[RegMap.scala 50:65]
    node _T_1529 = and(_T_796, _T_1528) @[RegMap.scala 50:56]
    when _T_1529 : @[RegMap.scala 50:72]
      node _T_1530 = and(wdata, _T_736) @[BitUtils.scala 32:13]
      node _T_1531 = not(_T_736) @[BitUtils.scala 32:38]
      node _T_1532 = and(pmpcfg2, _T_1531) @[BitUtils.scala 32:36]
      node _T_1533 = or(_T_1530, _T_1532) @[BitUtils.scala 32:25]
      pmpcfg2 <= _T_1533 @[RegMap.scala 50:76]
    node _T_1534 = eq(addr, UInt<12>("hb46")) @[RegMap.scala 50:65]
    node _T_1535 = and(_T_796, _T_1534) @[RegMap.scala 50:56]
    when _T_1535 : @[RegMap.scala 50:72]
      node _T_1536 = and(wdata, _T_192) @[BitUtils.scala 32:13]
      node _T_1537 = not(_T_192) @[BitUtils.scala 32:38]
      node _T_1538 = and(perfCnts_70, _T_1537) @[BitUtils.scala 32:36]
      node _T_1539 = or(_T_1536, _T_1538) @[BitUtils.scala 32:25]
      perfCnts_70 <= _T_1539 @[RegMap.scala 50:76]
    node _T_1540 = eq(addr, UInt<9>("h140")) @[RegMap.scala 50:65]
    node _T_1541 = and(_T_796, _T_1540) @[RegMap.scala 50:56]
    when _T_1541 : @[RegMap.scala 50:72]
      node _T_1542 = and(wdata, _T_696) @[BitUtils.scala 32:13]
      node _T_1543 = not(_T_696) @[BitUtils.scala 32:38]
      node _T_1544 = and(sscratch, _T_1543) @[BitUtils.scala 32:36]
      node _T_1545 = or(_T_1542, _T_1544) @[BitUtils.scala 32:25]
      sscratch <= _T_1545 @[RegMap.scala 50:76]
    node _T_1546 = eq(addr, UInt<12>("hb09")) @[RegMap.scala 50:65]
    node _T_1547 = and(_T_796, _T_1546) @[RegMap.scala 50:56]
    when _T_1547 : @[RegMap.scala 50:72]
      node _T_1548 = and(wdata, _T_70) @[BitUtils.scala 32:13]
      node _T_1549 = not(_T_70) @[BitUtils.scala 32:38]
      node _T_1550 = and(perfCnts_9, _T_1549) @[BitUtils.scala 32:36]
      node _T_1551 = or(_T_1548, _T_1550) @[BitUtils.scala 32:25]
      perfCnts_9 <= _T_1551 @[RegMap.scala 50:76]
    node _T_1552 = eq(addr, UInt<12>("hb03")) @[RegMap.scala 50:65]
    node _T_1553 = and(_T_796, _T_1552) @[RegMap.scala 50:56]
    when _T_1553 : @[RegMap.scala 50:72]
      node _T_1554 = and(wdata, _T_58) @[BitUtils.scala 32:13]
      node _T_1555 = not(_T_58) @[BitUtils.scala 32:38]
      node _T_1556 = and(perfCnts_3, _T_1555) @[BitUtils.scala 32:36]
      node _T_1557 = or(_T_1554, _T_1556) @[BitUtils.scala 32:25]
      perfCnts_3 <= _T_1557 @[RegMap.scala 50:76]
    node _T_1558 = eq(addr, UInt<12>("hb35")) @[RegMap.scala 50:65]
    node _T_1559 = and(_T_796, _T_1558) @[RegMap.scala 50:56]
    when _T_1559 : @[RegMap.scala 50:72]
      node _T_1560 = and(wdata, _T_158) @[BitUtils.scala 32:13]
      node _T_1561 = not(_T_158) @[BitUtils.scala 32:38]
      node _T_1562 = and(perfCnts_53, _T_1561) @[BitUtils.scala 32:36]
      node _T_1563 = or(_T_1560, _T_1562) @[BitUtils.scala 32:25]
      perfCnts_53 <= _T_1563 @[RegMap.scala 50:76]
    node _T_1564 = eq(addr, UInt<12>("hb64")) @[RegMap.scala 50:65]
    node _T_1565 = and(_T_796, _T_1564) @[RegMap.scala 50:56]
    when _T_1565 : @[RegMap.scala 50:72]
      node _T_1566 = and(wdata, _T_252) @[BitUtils.scala 32:13]
      node _T_1567 = not(_T_252) @[BitUtils.scala 32:38]
      node _T_1568 = and(perfCnts_100, _T_1567) @[BitUtils.scala 32:36]
      node _T_1569 = or(_T_1566, _T_1568) @[BitUtils.scala 32:25]
      perfCnts_100 <= _T_1569 @[RegMap.scala 50:76]
    node _T_1570 = eq(addr, UInt<12>("hb51")) @[RegMap.scala 50:65]
    node _T_1571 = and(_T_796, _T_1570) @[RegMap.scala 50:56]
    when _T_1571 : @[RegMap.scala 50:72]
      node _T_1572 = and(wdata, _T_214) @[BitUtils.scala 32:13]
      node _T_1573 = not(_T_214) @[BitUtils.scala 32:38]
      node _T_1574 = and(perfCnts_81, _T_1573) @[BitUtils.scala 32:36]
      node _T_1575 = or(_T_1572, _T_1574) @[BitUtils.scala 32:25]
      perfCnts_81 <= _T_1575 @[RegMap.scala 50:76]
    node _T_1576 = eq(addr, UInt<12>("hb29")) @[RegMap.scala 50:65]
    node _T_1577 = and(_T_796, _T_1576) @[RegMap.scala 50:56]
    when _T_1577 : @[RegMap.scala 50:72]
      node _T_1578 = and(wdata, _T_134) @[BitUtils.scala 32:13]
      node _T_1579 = not(_T_134) @[BitUtils.scala 32:38]
      node _T_1580 = and(perfCnts_41, _T_1579) @[BitUtils.scala 32:36]
      node _T_1581 = or(_T_1578, _T_1580) @[BitUtils.scala 32:25]
      perfCnts_41 <= _T_1581 @[RegMap.scala 50:76]
    node _T_1582 = eq(addr, UInt<10>("h302")) @[RegMap.scala 50:65]
    node _T_1583 = and(_T_796, _T_1582) @[RegMap.scala 50:56]
    when _T_1583 : @[RegMap.scala 50:72]
      node _T_1584 = and(wdata, UInt<16>("hbbff")) @[BitUtils.scala 32:13]
      node _T_1585 = not(UInt<16>("hbbff")) @[BitUtils.scala 32:38]
      node _T_1586 = and(medeleg, _T_1585) @[BitUtils.scala 32:36]
      node _T_1587 = or(_T_1584, _T_1586) @[BitUtils.scala 32:25]
      medeleg <= _T_1587 @[RegMap.scala 50:76]
    node _T_1588 = eq(addr, UInt<12>("hb71")) @[RegMap.scala 50:65]
    node _T_1589 = and(_T_796, _T_1588) @[RegMap.scala 50:56]
    when _T_1589 : @[RegMap.scala 50:72]
      node _T_1590 = and(wdata, _T_278) @[BitUtils.scala 32:13]
      node _T_1591 = not(_T_278) @[BitUtils.scala 32:38]
      node _T_1592 = and(perfCnts_113, _T_1591) @[BitUtils.scala 32:36]
      node _T_1593 = or(_T_1590, _T_1592) @[BitUtils.scala 32:25]
      perfCnts_113 <= _T_1593 @[RegMap.scala 50:76]
    node _T_1594 = eq(addr, UInt<12>("hb24")) @[RegMap.scala 50:65]
    node _T_1595 = and(_T_796, _T_1594) @[RegMap.scala 50:56]
    when _T_1595 : @[RegMap.scala 50:72]
      node _T_1596 = and(wdata, _T_124) @[BitUtils.scala 32:13]
      node _T_1597 = not(_T_124) @[BitUtils.scala 32:38]
      node _T_1598 = and(perfCnts_36, _T_1597) @[BitUtils.scala 32:36]
      node _T_1599 = or(_T_1596, _T_1598) @[BitUtils.scala 32:25]
      perfCnts_36 <= _T_1599 @[RegMap.scala 50:76]
    node _T_1600 = eq(addr, UInt<9>("h105")) @[RegMap.scala 50:65]
    node _T_1601 = and(_T_796, _T_1600) @[RegMap.scala 50:56]
    when _T_1601 : @[RegMap.scala 50:72]
      node _T_1602 = and(wdata, _T_692) @[BitUtils.scala 32:13]
      node _T_1603 = not(_T_692) @[BitUtils.scala 32:38]
      node _T_1604 = and(stvec, _T_1603) @[BitUtils.scala 32:36]
      node _T_1605 = or(_T_1602, _T_1604) @[BitUtils.scala 32:25]
      stvec <= _T_1605 @[RegMap.scala 50:76]
    node _T_1606 = eq(addr, UInt<12>("hb0d")) @[RegMap.scala 50:65]
    node _T_1607 = and(_T_796, _T_1606) @[RegMap.scala 50:56]
    when _T_1607 : @[RegMap.scala 50:72]
      node _T_1608 = and(wdata, _T_78) @[BitUtils.scala 32:13]
      node _T_1609 = not(_T_78) @[BitUtils.scala 32:38]
      node _T_1610 = and(perfCnts_13, _T_1609) @[BitUtils.scala 32:36]
      node _T_1611 = or(_T_1608, _T_1610) @[BitUtils.scala 32:25]
      perfCnts_13 <= _T_1611 @[RegMap.scala 50:76]
    node _T_1612 = eq(addr, UInt<12>("hb4d")) @[RegMap.scala 50:65]
    node _T_1613 = and(_T_796, _T_1612) @[RegMap.scala 50:56]
    when _T_1613 : @[RegMap.scala 50:72]
      node _T_1614 = and(wdata, _T_206) @[BitUtils.scala 32:13]
      node _T_1615 = not(_T_206) @[BitUtils.scala 32:38]
      node _T_1616 = and(perfCnts_77, _T_1615) @[BitUtils.scala 32:36]
      node _T_1617 = or(_T_1614, _T_1616) @[BitUtils.scala 32:25]
      perfCnts_77 <= _T_1617 @[RegMap.scala 50:76]
    node _T_1618 = eq(addr, UInt<9>("h141")) @[RegMap.scala 50:65]
    node _T_1619 = and(_T_796, _T_1618) @[RegMap.scala 50:56]
    when _T_1619 : @[RegMap.scala 50:72]
      node _T_1620 = and(wdata, _T_698) @[BitUtils.scala 32:13]
      node _T_1621 = not(_T_698) @[BitUtils.scala 32:38]
      node _T_1622 = and(sepc, _T_1621) @[BitUtils.scala 32:36]
      node _T_1623 = or(_T_1620, _T_1622) @[BitUtils.scala 32:25]
      sepc <= _T_1623 @[RegMap.scala 50:76]
    node _T_1624 = eq(addr, UInt<12>("hb40")) @[RegMap.scala 50:65]
    node _T_1625 = and(_T_796, _T_1624) @[RegMap.scala 50:56]
    when _T_1625 : @[RegMap.scala 50:72]
      node _T_1626 = and(wdata, _T_180) @[BitUtils.scala 32:13]
      node _T_1627 = not(_T_180) @[BitUtils.scala 32:38]
      node _T_1628 = and(perfCnts_64, _T_1627) @[BitUtils.scala 32:36]
      node _T_1629 = or(_T_1626, _T_1628) @[BitUtils.scala 32:25]
      perfCnts_64 <= _T_1629 @[RegMap.scala 50:76]
    node _T_1630 = eq(addr, UInt<10>("h342")) @[RegMap.scala 50:65]
    node _T_1631 = and(_T_796, _T_1630) @[RegMap.scala 50:56]
    when _T_1631 : @[RegMap.scala 50:72]
      node _T_1632 = and(wdata, _T_726) @[BitUtils.scala 32:13]
      node _T_1633 = not(_T_726) @[BitUtils.scala 32:38]
      node _T_1634 = and(mcause, _T_1633) @[BitUtils.scala 32:36]
      node _T_1635 = or(_T_1632, _T_1634) @[BitUtils.scala 32:25]
      mcause <= _T_1635 @[RegMap.scala 50:76]
    node _T_1636 = eq(addr, UInt<12>("hb6d")) @[RegMap.scala 50:65]
    node _T_1637 = and(_T_796, _T_1636) @[RegMap.scala 50:56]
    when _T_1637 : @[RegMap.scala 50:72]
      node _T_1638 = and(wdata, _T_270) @[BitUtils.scala 32:13]
      node _T_1639 = not(_T_270) @[BitUtils.scala 32:38]
      node _T_1640 = and(perfCnts_109, _T_1639) @[BitUtils.scala 32:36]
      node _T_1641 = or(_T_1638, _T_1640) @[BitUtils.scala 32:25]
      perfCnts_109 <= _T_1641 @[RegMap.scala 50:76]
    node _T_1642 = eq(addr, UInt<12>("hb11")) @[RegMap.scala 50:65]
    node _T_1643 = and(_T_796, _T_1642) @[RegMap.scala 50:56]
    when _T_1643 : @[RegMap.scala 50:72]
      node _T_1644 = and(wdata, _T_86) @[BitUtils.scala 32:13]
      node _T_1645 = not(_T_86) @[BitUtils.scala 32:38]
      node _T_1646 = and(perfCnts_17, _T_1645) @[BitUtils.scala 32:36]
      node _T_1647 = or(_T_1644, _T_1646) @[BitUtils.scala 32:25]
      perfCnts_17 <= _T_1647 @[RegMap.scala 50:76]
    node _T_1648 = eq(addr, UInt<12>("hb2d")) @[RegMap.scala 50:65]
    node _T_1649 = and(_T_796, _T_1648) @[RegMap.scala 50:56]
    when _T_1649 : @[RegMap.scala 50:72]
      node _T_1650 = and(wdata, _T_142) @[BitUtils.scala 32:13]
      node _T_1651 = not(_T_142) @[BitUtils.scala 32:38]
      node _T_1652 = and(perfCnts_45, _T_1651) @[BitUtils.scala 32:36]
      node _T_1653 = or(_T_1650, _T_1652) @[BitUtils.scala 32:25]
      perfCnts_45 <= _T_1653 @[RegMap.scala 50:76]
    node _T_1654 = eq(addr, UInt<10>("h306")) @[RegMap.scala 50:65]
    node _T_1655 = and(_T_796, _T_1654) @[RegMap.scala 50:56]
    when _T_1655 : @[RegMap.scala 50:72]
      node _T_1656 = and(wdata, _T_720) @[BitUtils.scala 32:13]
      node _T_1657 = not(_T_720) @[BitUtils.scala 32:38]
      node _T_1658 = and(mcounteren, _T_1657) @[BitUtils.scala 32:36]
      node _T_1659 = or(_T_1656, _T_1658) @[BitUtils.scala 32:25]
      mcounteren <= _T_1659 @[RegMap.scala 50:76]
    node _T_1660 = eq(addr, UInt<12>("hb44")) @[RegMap.scala 50:65]
    node _T_1661 = and(_T_796, _T_1660) @[RegMap.scala 50:56]
    when _T_1661 : @[RegMap.scala 50:72]
      node _T_1662 = and(wdata, _T_188) @[BitUtils.scala 32:13]
      node _T_1663 = not(_T_188) @[BitUtils.scala 32:38]
      node _T_1664 = and(perfCnts_68, _T_1663) @[BitUtils.scala 32:36]
      node _T_1665 = or(_T_1662, _T_1664) @[BitUtils.scala 32:25]
      perfCnts_68 <= _T_1665 @[RegMap.scala 50:76]
    node _T_1666 = eq(addr, UInt<12>("hb6a")) @[RegMap.scala 50:65]
    node _T_1667 = and(_T_796, _T_1666) @[RegMap.scala 50:56]
    when _T_1667 : @[RegMap.scala 50:72]
      node _T_1668 = and(wdata, _T_264) @[BitUtils.scala 32:13]
      node _T_1669 = not(_T_264) @[BitUtils.scala 32:38]
      node _T_1670 = and(perfCnts_106, _T_1669) @[BitUtils.scala 32:36]
      node _T_1671 = or(_T_1668, _T_1670) @[BitUtils.scala 32:25]
      perfCnts_106 <= _T_1671 @[RegMap.scala 50:76]
    node _T_1672 = eq(addr, UInt<12>("hb5e")) @[RegMap.scala 50:65]
    node _T_1673 = and(_T_796, _T_1672) @[RegMap.scala 50:56]
    when _T_1673 : @[RegMap.scala 50:72]
      node _T_1674 = and(wdata, _T_240) @[BitUtils.scala 32:13]
      node _T_1675 = not(_T_240) @[BitUtils.scala 32:38]
      node _T_1676 = and(perfCnts_94, _T_1675) @[BitUtils.scala 32:36]
      node _T_1677 = or(_T_1674, _T_1676) @[BitUtils.scala 32:25]
      perfCnts_94 <= _T_1677 @[RegMap.scala 50:76]
    node _T_1678 = eq(addr, UInt<12>("hb59")) @[RegMap.scala 50:65]
    node _T_1679 = and(_T_796, _T_1678) @[RegMap.scala 50:56]
    when _T_1679 : @[RegMap.scala 50:72]
      node _T_1680 = and(wdata, _T_230) @[BitUtils.scala 32:13]
      node _T_1681 = not(_T_230) @[BitUtils.scala 32:38]
      node _T_1682 = and(perfCnts_89, _T_1681) @[BitUtils.scala 32:36]
      node _T_1683 = or(_T_1680, _T_1682) @[BitUtils.scala 32:25]
      perfCnts_89 <= _T_1683 @[RegMap.scala 50:76]
    node _T_1684 = eq(addr, UInt<9>("h104")) @[RegMap.scala 50:65]
    node _T_1685 = and(_T_796, _T_1684) @[RegMap.scala 50:56]
    when _T_1685 : @[RegMap.scala 50:72]
      node _T_1686 = and(wdata, sieMask) @[BitUtils.scala 32:13]
      node _T_1687 = not(sieMask) @[BitUtils.scala 32:38]
      node _T_1688 = and(mie, _T_1687) @[BitUtils.scala 32:36]
      node _T_1689 = or(_T_1686, _T_1688) @[BitUtils.scala 32:25]
      mie <= _T_1689 @[RegMap.scala 50:76]
    node _T_1690 = eq(addr, UInt<12>("hb79")) @[RegMap.scala 50:65]
    node _T_1691 = and(_T_796, _T_1690) @[RegMap.scala 50:56]
    when _T_1691 : @[RegMap.scala 50:72]
      node _T_1692 = and(wdata, _T_294) @[BitUtils.scala 32:13]
      node _T_1693 = not(_T_294) @[BitUtils.scala 32:38]
      node _T_1694 = and(perfCnts_121, _T_1693) @[BitUtils.scala 32:36]
      node _T_1695 = or(_T_1692, _T_1694) @[BitUtils.scala 32:25]
      perfCnts_121 <= _T_1695 @[RegMap.scala 50:76]
    node _T_1696 = eq(addr, UInt<12>("hb4a")) @[RegMap.scala 50:65]
    node _T_1697 = and(_T_796, _T_1696) @[RegMap.scala 50:56]
    when _T_1697 : @[RegMap.scala 50:72]
      node _T_1698 = and(wdata, _T_200) @[BitUtils.scala 32:13]
      node _T_1699 = not(_T_200) @[BitUtils.scala 32:38]
      node _T_1700 = and(perfCnts_74, _T_1699) @[BitUtils.scala 32:36]
      node _T_1701 = or(_T_1698, _T_1700) @[BitUtils.scala 32:25]
      perfCnts_74 <= _T_1701 @[RegMap.scala 50:76]
    node _T_1702 = eq(addr, UInt<12>("hb39")) @[RegMap.scala 50:65]
    node _T_1703 = and(_T_796, _T_1702) @[RegMap.scala 50:56]
    when _T_1703 : @[RegMap.scala 50:72]
      node _T_1704 = and(wdata, _T_166) @[BitUtils.scala 32:13]
      node _T_1705 = not(_T_166) @[BitUtils.scala 32:38]
      node _T_1706 = and(perfCnts_57, _T_1705) @[BitUtils.scala 32:36]
      node _T_1707 = or(_T_1704, _T_1706) @[BitUtils.scala 32:25]
      perfCnts_57 <= _T_1707 @[RegMap.scala 50:76]
    node _T_1708 = eq(addr, UInt<12>("hb0a")) @[RegMap.scala 50:65]
    node _T_1709 = and(_T_796, _T_1708) @[RegMap.scala 50:56]
    when _T_1709 : @[RegMap.scala 50:72]
      node _T_1710 = and(wdata, _T_72) @[BitUtils.scala 32:13]
      node _T_1711 = not(_T_72) @[BitUtils.scala 32:38]
      node _T_1712 = and(perfCnts_10, _T_1711) @[BitUtils.scala 32:36]
      node _T_1713 = or(_T_1710, _T_1712) @[BitUtils.scala 32:25]
      perfCnts_10 <= _T_1713 @[RegMap.scala 50:76]
    node _T_1714 = eq(addr, UInt<12>("hb04")) @[RegMap.scala 50:65]
    node _T_1715 = and(_T_796, _T_1714) @[RegMap.scala 50:56]
    when _T_1715 : @[RegMap.scala 50:72]
      node _T_1716 = and(wdata, _T_60) @[BitUtils.scala 32:13]
      node _T_1717 = not(_T_60) @[BitUtils.scala 32:38]
      node _T_1718 = and(perfCnts_4, _T_1717) @[BitUtils.scala 32:36]
      node _T_1719 = or(_T_1716, _T_1718) @[BitUtils.scala 32:25]
      perfCnts_4 <= _T_1719 @[RegMap.scala 50:76]
    node _T_1720 = eq(addr, UInt<12>("hb38")) @[RegMap.scala 50:65]
    node _T_1721 = and(_T_796, _T_1720) @[RegMap.scala 50:56]
    when _T_1721 : @[RegMap.scala 50:72]
      node _T_1722 = and(wdata, _T_164) @[BitUtils.scala 32:13]
      node _T_1723 = not(_T_164) @[BitUtils.scala 32:38]
      node _T_1724 = and(perfCnts_56, _T_1723) @[BitUtils.scala 32:36]
      node _T_1725 = or(_T_1722, _T_1724) @[BitUtils.scala 32:25]
      perfCnts_56 <= _T_1725 @[RegMap.scala 50:76]
    node _T_1726 = eq(addr, UInt<12>("hb18")) @[RegMap.scala 50:65]
    node _T_1727 = and(_T_796, _T_1726) @[RegMap.scala 50:56]
    when _T_1727 : @[RegMap.scala 50:72]
      node _T_1728 = and(wdata, _T_100) @[BitUtils.scala 32:13]
      node _T_1729 = not(_T_100) @[BitUtils.scala 32:38]
      node _T_1730 = and(perfCnts_24, _T_1729) @[BitUtils.scala 32:36]
      node _T_1731 = or(_T_1728, _T_1730) @[BitUtils.scala 32:25]
      perfCnts_24 <= _T_1731 @[RegMap.scala 50:76]
    node _T_1732 = eq(addr, UInt<12>("hb4f")) @[RegMap.scala 50:65]
    node _T_1733 = and(_T_796, _T_1732) @[RegMap.scala 50:56]
    when _T_1733 : @[RegMap.scala 50:72]
      node _T_1734 = and(wdata, _T_210) @[BitUtils.scala 32:13]
      node _T_1735 = not(_T_210) @[BitUtils.scala 32:38]
      node _T_1736 = and(perfCnts_79, _T_1735) @[BitUtils.scala 32:36]
      node _T_1737 = or(_T_1734, _T_1736) @[BitUtils.scala 32:25]
      perfCnts_79 <= _T_1737 @[RegMap.scala 50:76]
    node _T_1738 = eq(addr, UInt<12>("hb19")) @[RegMap.scala 50:65]
    node _T_1739 = and(_T_796, _T_1738) @[RegMap.scala 50:56]
    when _T_1739 : @[RegMap.scala 50:72]
      node _T_1740 = and(wdata, _T_102) @[BitUtils.scala 32:13]
      node _T_1741 = not(_T_102) @[BitUtils.scala 32:38]
      node _T_1742 = and(perfCnts_25, _T_1741) @[BitUtils.scala 32:36]
      node _T_1743 = or(_T_1740, _T_1742) @[BitUtils.scala 32:25]
      perfCnts_25 <= _T_1743 @[RegMap.scala 50:76]
    node _T_1744 = eq(addr, UInt<12>("hb2a")) @[RegMap.scala 50:65]
    node _T_1745 = and(_T_796, _T_1744) @[RegMap.scala 50:56]
    when _T_1745 : @[RegMap.scala 50:72]
      node _T_1746 = and(wdata, _T_136) @[BitUtils.scala 32:13]
      node _T_1747 = not(_T_136) @[BitUtils.scala 32:38]
      node _T_1748 = and(perfCnts_42, _T_1747) @[BitUtils.scala 32:36]
      node _T_1749 = or(_T_1746, _T_1748) @[BitUtils.scala 32:25]
      perfCnts_42 <= _T_1749 @[RegMap.scala 50:76]
    node _T_1750 = eq(addr, UInt<9>("h100")) @[RegMap.scala 50:65]
    node _T_1751 = and(_T_796, _T_1750) @[RegMap.scala 50:56]
    when _T_1751 : @[RegMap.scala 50:72]
      node _T_1752 = and(wdata, UInt<20>("hc6122")) @[BitUtils.scala 32:13]
      node _T_1753 = not(UInt<20>("hc6122")) @[BitUtils.scala 32:38]
      node _T_1754 = and(mstatus, _T_1753) @[BitUtils.scala 32:36]
      node _T_1755 = or(_T_1752, _T_1754) @[BitUtils.scala 32:25]
      wire _WIRE_9 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 301:47]
      wire _WIRE_10 : UInt<64>
      _WIRE_10 <= _T_1755
      node _T_1756 = bits(_WIRE_10, 0, 0) @[CSR.scala 301:47]
      _WIRE_9.ie.u <= _T_1756 @[CSR.scala 301:47]
      node _T_1757 = bits(_WIRE_10, 1, 1) @[CSR.scala 301:47]
      _WIRE_9.ie.s <= _T_1757 @[CSR.scala 301:47]
      node _T_1758 = bits(_WIRE_10, 2, 2) @[CSR.scala 301:47]
      _WIRE_9.ie.h <= _T_1758 @[CSR.scala 301:47]
      node _T_1759 = bits(_WIRE_10, 3, 3) @[CSR.scala 301:47]
      _WIRE_9.ie.m <= _T_1759 @[CSR.scala 301:47]
      node _T_1760 = bits(_WIRE_10, 4, 4) @[CSR.scala 301:47]
      _WIRE_9.pie.u <= _T_1760 @[CSR.scala 301:47]
      node _T_1761 = bits(_WIRE_10, 5, 5) @[CSR.scala 301:47]
      _WIRE_9.pie.s <= _T_1761 @[CSR.scala 301:47]
      node _T_1762 = bits(_WIRE_10, 6, 6) @[CSR.scala 301:47]
      _WIRE_9.pie.h <= _T_1762 @[CSR.scala 301:47]
      node _T_1763 = bits(_WIRE_10, 7, 7) @[CSR.scala 301:47]
      _WIRE_9.pie.m <= _T_1763 @[CSR.scala 301:47]
      node _T_1764 = bits(_WIRE_10, 8, 8) @[CSR.scala 301:47]
      _WIRE_9.spp <= _T_1764 @[CSR.scala 301:47]
      node _T_1765 = bits(_WIRE_10, 10, 9) @[CSR.scala 301:47]
      _WIRE_9.hpp <= _T_1765 @[CSR.scala 301:47]
      node _T_1766 = bits(_WIRE_10, 12, 11) @[CSR.scala 301:47]
      _WIRE_9.mpp <= _T_1766 @[CSR.scala 301:47]
      node _T_1767 = bits(_WIRE_10, 14, 13) @[CSR.scala 301:47]
      _WIRE_9.fs <= _T_1767 @[CSR.scala 301:47]
      node _T_1768 = bits(_WIRE_10, 16, 15) @[CSR.scala 301:47]
      _WIRE_9.xs <= _T_1768 @[CSR.scala 301:47]
      node _T_1769 = bits(_WIRE_10, 17, 17) @[CSR.scala 301:47]
      _WIRE_9.mprv <= _T_1769 @[CSR.scala 301:47]
      node _T_1770 = bits(_WIRE_10, 18, 18) @[CSR.scala 301:47]
      _WIRE_9.sum <= _T_1770 @[CSR.scala 301:47]
      node _T_1771 = bits(_WIRE_10, 19, 19) @[CSR.scala 301:47]
      _WIRE_9.mxr <= _T_1771 @[CSR.scala 301:47]
      node _T_1772 = bits(_WIRE_10, 20, 20) @[CSR.scala 301:47]
      _WIRE_9.tvm <= _T_1772 @[CSR.scala 301:47]
      node _T_1773 = bits(_WIRE_10, 21, 21) @[CSR.scala 301:47]
      _WIRE_9.tw <= _T_1773 @[CSR.scala 301:47]
      node _T_1774 = bits(_WIRE_10, 22, 22) @[CSR.scala 301:47]
      _WIRE_9.tsr <= _T_1774 @[CSR.scala 301:47]
      node _T_1775 = bits(_WIRE_10, 31, 23) @[CSR.scala 301:47]
      _WIRE_9.pad0 <= _T_1775 @[CSR.scala 301:47]
      node _T_1776 = bits(_WIRE_10, 33, 32) @[CSR.scala 301:47]
      _WIRE_9.uxl <= _T_1776 @[CSR.scala 301:47]
      node _T_1777 = bits(_WIRE_10, 35, 34) @[CSR.scala 301:47]
      _WIRE_9.sxl <= _T_1777 @[CSR.scala 301:47]
      node _T_1778 = bits(_WIRE_10, 62, 36) @[CSR.scala 301:47]
      _WIRE_9.pad1 <= _T_1778 @[CSR.scala 301:47]
      node _T_1779 = bits(_WIRE_10, 63, 63) @[CSR.scala 301:47]
      _WIRE_9.sd <= _T_1779 @[CSR.scala 301:47]
      wire _WIRE_11 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_11.ie.u <= _WIRE_9.ie.u
      _WIRE_11.ie.s <= _WIRE_9.ie.s
      _WIRE_11.ie.h <= _WIRE_9.ie.h
      _WIRE_11.ie.m <= _WIRE_9.ie.m
      _WIRE_11.pie.u <= _WIRE_9.pie.u
      _WIRE_11.pie.s <= _WIRE_9.pie.s
      _WIRE_11.pie.h <= _WIRE_9.pie.h
      _WIRE_11.pie.m <= _WIRE_9.pie.m
      _WIRE_11.spp <= _WIRE_9.spp
      _WIRE_11.hpp <= _WIRE_9.hpp
      _WIRE_11.mpp <= _WIRE_9.mpp
      _WIRE_11.fs <= _WIRE_9.fs
      _WIRE_11.xs <= _WIRE_9.xs
      _WIRE_11.mprv <= _WIRE_9.mprv
      _WIRE_11.sum <= _WIRE_9.sum
      _WIRE_11.mxr <= _WIRE_9.mxr
      _WIRE_11.tvm <= _WIRE_9.tvm
      _WIRE_11.tw <= _WIRE_9.tw
      _WIRE_11.tsr <= _WIRE_9.tsr
      _WIRE_11.pad0 <= _WIRE_9.pad0
      _WIRE_11.uxl <= _WIRE_9.uxl
      _WIRE_11.sxl <= _WIRE_9.sxl
      _WIRE_11.pad1 <= _WIRE_9.pad1
      _WIRE_11.sd <= _WIRE_9.sd
      node _T_1780 = eq(_WIRE_11.fs, UInt<2>("h3")) @[CSR.scala 302:40]
      node _T_1781 = bits(_T_1755, 62, 0) @[CSR.scala 302:60]
      node _T_1782 = cat(_T_1780, _T_1781) @[Cat.scala 30:58]
      mstatus <= _T_1782 @[RegMap.scala 50:76]
    node _T_1783 = eq(addr, UInt<12>("hb3d")) @[RegMap.scala 50:65]
    node _T_1784 = and(_T_796, _T_1783) @[RegMap.scala 50:56]
    when _T_1784 : @[RegMap.scala 50:72]
      node _T_1785 = and(wdata, _T_174) @[BitUtils.scala 32:13]
      node _T_1786 = not(_T_174) @[BitUtils.scala 32:38]
      node _T_1787 = and(perfCnts_61, _T_1786) @[BitUtils.scala 32:36]
      node _T_1788 = or(_T_1785, _T_1787) @[BitUtils.scala 32:25]
      perfCnts_61 <= _T_1788 @[RegMap.scala 50:76]
    node _T_1789 = eq(addr, UInt<12>("hb0e")) @[RegMap.scala 50:65]
    node _T_1790 = and(_T_796, _T_1789) @[RegMap.scala 50:56]
    when _T_1790 : @[RegMap.scala 50:72]
      node _T_1791 = and(wdata, _T_80) @[BitUtils.scala 32:13]
      node _T_1792 = not(_T_80) @[BitUtils.scala 32:38]
      node _T_1793 = and(perfCnts_14, _T_1792) @[BitUtils.scala 32:36]
      node _T_1794 = or(_T_1791, _T_1793) @[BitUtils.scala 32:25]
      perfCnts_14 <= _T_1794 @[RegMap.scala 50:76]
    node _T_1795 = eq(addr, UInt<12>("hb34")) @[RegMap.scala 50:65]
    node _T_1796 = and(_T_796, _T_1795) @[RegMap.scala 50:56]
    when _T_1796 : @[RegMap.scala 50:72]
      node _T_1797 = and(wdata, _T_156) @[BitUtils.scala 32:13]
      node _T_1798 = not(_T_156) @[BitUtils.scala 32:38]
      node _T_1799 = and(perfCnts_52, _T_1798) @[BitUtils.scala 32:36]
      node _T_1800 = or(_T_1797, _T_1799) @[BitUtils.scala 32:25]
      perfCnts_52 <= _T_1800 @[RegMap.scala 50:76]
    node _T_1801 = eq(addr, UInt<12>("hb74")) @[RegMap.scala 50:65]
    node _T_1802 = and(_T_796, _T_1801) @[RegMap.scala 50:56]
    when _T_1802 : @[RegMap.scala 50:72]
      node _T_1803 = and(wdata, _T_284) @[BitUtils.scala 32:13]
      node _T_1804 = not(_T_284) @[BitUtils.scala 32:38]
      node _T_1805 = and(perfCnts_116, _T_1804) @[BitUtils.scala 32:36]
      node _T_1806 = or(_T_1803, _T_1805) @[BitUtils.scala 32:25]
      perfCnts_116 <= _T_1806 @[RegMap.scala 50:76]
    node _T_1807 = eq(addr, UInt<12>("hb14")) @[RegMap.scala 50:65]
    node _T_1808 = and(_T_796, _T_1807) @[RegMap.scala 50:56]
    when _T_1808 : @[RegMap.scala 50:72]
      node _T_1809 = and(wdata, _T_92) @[BitUtils.scala 32:13]
      node _T_1810 = not(_T_92) @[BitUtils.scala 32:38]
      node _T_1811 = and(perfCnts_20, _T_1810) @[BitUtils.scala 32:36]
      node _T_1812 = or(_T_1809, _T_1811) @[BitUtils.scala 32:25]
      perfCnts_20 <= _T_1812 @[RegMap.scala 50:76]
    node _T_1813 = eq(addr, UInt<12>("hb1d")) @[RegMap.scala 50:65]
    node _T_1814 = and(_T_796, _T_1813) @[RegMap.scala 50:56]
    when _T_1814 : @[RegMap.scala 50:72]
      node _T_1815 = and(wdata, _T_110) @[BitUtils.scala 32:13]
      node _T_1816 = not(_T_110) @[BitUtils.scala 32:38]
      node _T_1817 = and(perfCnts_29, _T_1816) @[BitUtils.scala 32:36]
      node _T_1818 = or(_T_1815, _T_1817) @[BitUtils.scala 32:25]
      perfCnts_29 <= _T_1818 @[RegMap.scala 50:76]
    node _T_1819 = eq(addr, UInt<12>("hb54")) @[RegMap.scala 50:65]
    node _T_1820 = and(_T_796, _T_1819) @[RegMap.scala 50:56]
    when _T_1820 : @[RegMap.scala 50:72]
      node _T_1821 = and(wdata, _T_220) @[BitUtils.scala 32:13]
      node _T_1822 = not(_T_220) @[BitUtils.scala 32:38]
      node _T_1823 = and(perfCnts_84, _T_1822) @[BitUtils.scala 32:36]
      node _T_1824 = or(_T_1821, _T_1823) @[BitUtils.scala 32:25]
      perfCnts_84 <= _T_1824 @[RegMap.scala 50:76]
    node _T_1825 = eq(addr, UInt<12>("hb23")) @[RegMap.scala 50:65]
    node _T_1826 = and(_T_796, _T_1825) @[RegMap.scala 50:56]
    when _T_1826 : @[RegMap.scala 50:72]
      node _T_1827 = and(wdata, _T_122) @[BitUtils.scala 32:13]
      node _T_1828 = not(_T_122) @[BitUtils.scala 32:38]
      node _T_1829 = and(perfCnts_35, _T_1828) @[BitUtils.scala 32:36]
      node _T_1830 = or(_T_1827, _T_1829) @[BitUtils.scala 32:25]
      perfCnts_35 <= _T_1830 @[RegMap.scala 50:76]
    node _T_1831 = eq(addr, UInt<12>("hb2e")) @[RegMap.scala 50:65]
    node _T_1832 = and(_T_796, _T_1831) @[RegMap.scala 50:56]
    when _T_1832 : @[RegMap.scala 50:72]
      node _T_1833 = and(wdata, _T_144) @[BitUtils.scala 32:13]
      node _T_1834 = not(_T_144) @[BitUtils.scala 32:38]
      node _T_1835 = and(perfCnts_46, _T_1834) @[BitUtils.scala 32:36]
      node _T_1836 = or(_T_1833, _T_1835) @[BitUtils.scala 32:25]
      perfCnts_46 <= _T_1836 @[RegMap.scala 50:76]
    node _T_1837 = eq(addr, UInt<12>("hb6e")) @[RegMap.scala 50:65]
    node _T_1838 = and(_T_796, _T_1837) @[RegMap.scala 50:56]
    when _T_1838 : @[RegMap.scala 50:72]
      node _T_1839 = and(wdata, _T_272) @[BitUtils.scala 32:13]
      node _T_1840 = not(_T_272) @[BitUtils.scala 32:38]
      node _T_1841 = and(perfCnts_110, _T_1840) @[BitUtils.scala 32:36]
      node _T_1842 = or(_T_1839, _T_1841) @[BitUtils.scala 32:25]
      perfCnts_110 <= _T_1842 @[RegMap.scala 50:76]
    node _T_1843 = eq(addr, UInt<12>("hb43")) @[RegMap.scala 50:65]
    node _T_1844 = and(_T_796, _T_1843) @[RegMap.scala 50:56]
    when _T_1844 : @[RegMap.scala 50:72]
      node _T_1845 = and(wdata, _T_186) @[BitUtils.scala 32:13]
      node _T_1846 = not(_T_186) @[BitUtils.scala 32:38]
      node _T_1847 = and(perfCnts_67, _T_1846) @[BitUtils.scala 32:36]
      node _T_1848 = or(_T_1845, _T_1847) @[BitUtils.scala 32:25]
      perfCnts_67 <= _T_1848 @[RegMap.scala 50:76]
    node _T_1849 = eq(addr, UInt<12>("hb63")) @[RegMap.scala 50:65]
    node _T_1850 = and(_T_796, _T_1849) @[RegMap.scala 50:56]
    when _T_1850 : @[RegMap.scala 50:72]
      node _T_1851 = and(wdata, _T_250) @[BitUtils.scala 32:13]
      node _T_1852 = not(_T_250) @[BitUtils.scala 32:38]
      node _T_1853 = and(perfCnts_99, _T_1852) @[BitUtils.scala 32:36]
      node _T_1854 = or(_T_1851, _T_1853) @[BitUtils.scala 32:25]
      perfCnts_99 <= _T_1854 @[RegMap.scala 50:76]
    node _T_1855 = eq(addr, UInt<10>("h305")) @[RegMap.scala 50:65]
    node _T_1856 = and(_T_796, _T_1855) @[RegMap.scala 50:56]
    when _T_1856 : @[RegMap.scala 50:72]
      node _T_1857 = and(wdata, _T_718) @[BitUtils.scala 32:13]
      node _T_1858 = not(_T_718) @[BitUtils.scala 32:38]
      node _T_1859 = and(mtvec, _T_1858) @[BitUtils.scala 32:36]
      node _T_1860 = or(_T_1857, _T_1859) @[BitUtils.scala 32:25]
      mtvec <= _T_1860 @[RegMap.scala 50:76]
    node _T_1861 = eq(addr, UInt<12>("hb5d")) @[RegMap.scala 50:65]
    node _T_1862 = and(_T_796, _T_1861) @[RegMap.scala 50:56]
    when _T_1862 : @[RegMap.scala 50:72]
      node _T_1863 = and(wdata, _T_238) @[BitUtils.scala 32:13]
      node _T_1864 = not(_T_238) @[BitUtils.scala 32:38]
      node _T_1865 = and(perfCnts_93, _T_1864) @[BitUtils.scala 32:36]
      node _T_1866 = or(_T_1863, _T_1865) @[BitUtils.scala 32:25]
      perfCnts_93 <= _T_1866 @[RegMap.scala 50:76]
    node _T_1867 = eq(addr, UInt<12>("hb78")) @[RegMap.scala 50:65]
    node _T_1868 = and(_T_796, _T_1867) @[RegMap.scala 50:56]
    when _T_1868 : @[RegMap.scala 50:72]
      node _T_1869 = and(wdata, _T_292) @[BitUtils.scala 32:13]
      node _T_1870 = not(_T_292) @[BitUtils.scala 32:38]
      node _T_1871 = and(perfCnts_120, _T_1870) @[BitUtils.scala 32:36]
      node _T_1872 = or(_T_1869, _T_1871) @[BitUtils.scala 32:25]
      perfCnts_120 <= _T_1872 @[RegMap.scala 50:76]
    node _T_1873 = eq(addr, UInt<12>("hb58")) @[RegMap.scala 50:65]
    node _T_1874 = and(_T_796, _T_1873) @[RegMap.scala 50:56]
    when _T_1874 : @[RegMap.scala 50:72]
      node _T_1875 = and(wdata, _T_228) @[BitUtils.scala 32:13]
      node _T_1876 = not(_T_228) @[BitUtils.scala 32:38]
      node _T_1877 = and(perfCnts_88, _T_1876) @[BitUtils.scala 32:36]
      node _T_1878 = or(_T_1875, _T_1877) @[BitUtils.scala 32:25]
      perfCnts_88 <= _T_1878 @[RegMap.scala 50:76]
    node _T_1879 = eq(addr, UInt<12>("hb7d")) @[RegMap.scala 50:65]
    node _T_1880 = and(_T_796, _T_1879) @[RegMap.scala 50:56]
    when _T_1880 : @[RegMap.scala 50:72]
      node _T_1881 = and(wdata, _T_302) @[BitUtils.scala 32:13]
      node _T_1882 = not(_T_302) @[BitUtils.scala 32:38]
      node _T_1883 = and(perfCnts_125, _T_1882) @[BitUtils.scala 32:36]
      node _T_1884 = or(_T_1881, _T_1883) @[BitUtils.scala 32:25]
      perfCnts_125 <= _T_1884 @[RegMap.scala 50:76]
    node _T_1885 = eq(addr, UInt<12>("hb4e")) @[RegMap.scala 50:65]
    node _T_1886 = and(_T_796, _T_1885) @[RegMap.scala 50:56]
    when _T_1886 : @[RegMap.scala 50:72]
      node _T_1887 = and(wdata, _T_208) @[BitUtils.scala 32:13]
      node _T_1888 = not(_T_208) @[BitUtils.scala 32:38]
      node _T_1889 = and(perfCnts_78, _T_1888) @[BitUtils.scala 32:36]
      node _T_1890 = or(_T_1887, _T_1889) @[BitUtils.scala 32:25]
      perfCnts_78 <= _T_1890 @[RegMap.scala 50:76]
    node _T_1891 = eq(addr, UInt<12>("hb2b")) @[RegMap.scala 50:65]
    node _T_1892 = and(_T_796, _T_1891) @[RegMap.scala 50:56]
    when _T_1892 : @[RegMap.scala 50:72]
      node _T_1893 = and(wdata, _T_138) @[BitUtils.scala 32:13]
      node _T_1894 = not(_T_138) @[BitUtils.scala 32:38]
      node _T_1895 = and(perfCnts_43, _T_1894) @[BitUtils.scala 32:36]
      node _T_1896 = or(_T_1893, _T_1895) @[BitUtils.scala 32:25]
      perfCnts_43 <= _T_1896 @[RegMap.scala 50:76]
    node _T_1897 = eq(addr, UInt<12>("hb7a")) @[RegMap.scala 50:65]
    node _T_1898 = and(_T_796, _T_1897) @[RegMap.scala 50:56]
    when _T_1898 : @[RegMap.scala 50:72]
      node _T_1899 = and(wdata, _T_296) @[BitUtils.scala 32:13]
      node _T_1900 = not(_T_296) @[BitUtils.scala 32:38]
      node _T_1901 = and(perfCnts_122, _T_1900) @[BitUtils.scala 32:36]
      node _T_1902 = or(_T_1899, _T_1901) @[BitUtils.scala 32:25]
      perfCnts_122 <= _T_1902 @[RegMap.scala 50:76]
    node _T_1903 = eq(addr, UInt<12>("hb21")) @[RegMap.scala 50:65]
    node _T_1904 = and(_T_796, _T_1903) @[RegMap.scala 50:56]
    when _T_1904 : @[RegMap.scala 50:72]
      node _T_1905 = and(wdata, _T_118) @[BitUtils.scala 32:13]
      node _T_1906 = not(_T_118) @[BitUtils.scala 32:38]
      node _T_1907 = and(perfCnts_33, _T_1906) @[BitUtils.scala 32:36]
      node _T_1908 = or(_T_1905, _T_1907) @[BitUtils.scala 32:25]
      perfCnts_33 <= _T_1908 @[RegMap.scala 50:76]
    node _T_1909 = eq(addr, UInt<10>("h304")) @[RegMap.scala 50:65]
    node _T_1910 = and(_T_796, _T_1909) @[RegMap.scala 50:56]
    when _T_1910 : @[RegMap.scala 50:72]
      node _T_1911 = and(wdata, _T_716) @[BitUtils.scala 32:13]
      node _T_1912 = not(_T_716) @[BitUtils.scala 32:38]
      node _T_1913 = and(mie, _T_1912) @[BitUtils.scala 32:36]
      node _T_1914 = or(_T_1911, _T_1913) @[BitUtils.scala 32:25]
      mie <= _T_1914 @[RegMap.scala 50:76]
    node _T_1915 = eq(addr, UInt<12>("hb01")) @[RegMap.scala 50:65]
    node _T_1916 = and(_T_796, _T_1915) @[RegMap.scala 50:56]
    when _T_1916 : @[RegMap.scala 50:72]
      node _T_1917 = and(wdata, _T_54) @[BitUtils.scala 32:13]
      node _T_1918 = not(_T_54) @[BitUtils.scala 32:38]
      node _T_1919 = and(perfCnts_1, _T_1918) @[BitUtils.scala 32:36]
      node _T_1920 = or(_T_1917, _T_1919) @[BitUtils.scala 32:25]
      perfCnts_1 <= _T_1920 @[RegMap.scala 50:76]
    node _T_1921 = eq(addr, UInt<12>("hb0b")) @[RegMap.scala 50:65]
    node _T_1922 = and(_T_796, _T_1921) @[RegMap.scala 50:56]
    when _T_1922 : @[RegMap.scala 50:72]
      node _T_1923 = and(wdata, _T_74) @[BitUtils.scala 32:13]
      node _T_1924 = not(_T_74) @[BitUtils.scala 32:38]
      node _T_1925 = and(perfCnts_11, _T_1924) @[BitUtils.scala 32:36]
      node _T_1926 = or(_T_1923, _T_1925) @[BitUtils.scala 32:25]
      perfCnts_11 <= _T_1926 @[RegMap.scala 50:76]
    node _T_1927 = eq(addr, UInt<12>("hb4b")) @[RegMap.scala 50:65]
    node _T_1928 = and(_T_796, _T_1927) @[RegMap.scala 50:56]
    when _T_1928 : @[RegMap.scala 50:72]
      node _T_1929 = and(wdata, _T_202) @[BitUtils.scala 32:13]
      node _T_1930 = not(_T_202) @[BitUtils.scala 32:38]
      node _T_1931 = and(perfCnts_75, _T_1930) @[BitUtils.scala 32:36]
      node _T_1932 = or(_T_1929, _T_1931) @[BitUtils.scala 32:25]
      perfCnts_75 <= _T_1932 @[RegMap.scala 50:76]
    node _T_1933 = eq(addr, UInt<12>("hb77")) @[RegMap.scala 50:65]
    node _T_1934 = and(_T_796, _T_1933) @[RegMap.scala 50:56]
    when _T_1934 : @[RegMap.scala 50:72]
      node _T_1935 = and(wdata, _T_290) @[BitUtils.scala 32:13]
      node _T_1936 = not(_T_290) @[BitUtils.scala 32:38]
      node _T_1937 = and(perfCnts_119, _T_1936) @[BitUtils.scala 32:36]
      node _T_1938 = or(_T_1935, _T_1937) @[BitUtils.scala 32:25]
      perfCnts_119 <= _T_1938 @[RegMap.scala 50:76]
    node _T_1939 = eq(addr, UInt<10>("h3b3")) @[RegMap.scala 50:65]
    node _T_1940 = and(_T_796, _T_1939) @[RegMap.scala 50:56]
    when _T_1940 : @[RegMap.scala 50:72]
      node _T_1941 = and(wdata, _T_746) @[BitUtils.scala 32:13]
      node _T_1942 = not(_T_746) @[BitUtils.scala 32:38]
      node _T_1943 = and(pmpaddr3, _T_1942) @[BitUtils.scala 32:36]
      node _T_1944 = or(_T_1941, _T_1943) @[BitUtils.scala 32:25]
      pmpaddr3 <= _T_1944 @[RegMap.scala 50:76]
    node _T_1945 = eq(addr, UInt<12>("hb5a")) @[RegMap.scala 50:65]
    node _T_1946 = and(_T_796, _T_1945) @[RegMap.scala 50:56]
    when _T_1946 : @[RegMap.scala 50:72]
      node _T_1947 = and(wdata, _T_232) @[BitUtils.scala 32:13]
      node _T_1948 = not(_T_232) @[BitUtils.scala 32:38]
      node _T_1949 = and(perfCnts_90, _T_1948) @[BitUtils.scala 32:36]
      node _T_1950 = or(_T_1947, _T_1949) @[BitUtils.scala 32:25]
      perfCnts_90 <= _T_1950 @[RegMap.scala 50:76]
    node _T_1951 = eq(addr, UInt<12>("hb17")) @[RegMap.scala 50:65]
    node _T_1952 = and(_T_796, _T_1951) @[RegMap.scala 50:56]
    when _T_1952 : @[RegMap.scala 50:72]
      node _T_1953 = and(wdata, _T_98) @[BitUtils.scala 32:13]
      node _T_1954 = not(_T_98) @[BitUtils.scala 32:38]
      node _T_1955 = and(perfCnts_23, _T_1954) @[BitUtils.scala 32:36]
      node _T_1956 = or(_T_1953, _T_1955) @[BitUtils.scala 32:25]
      perfCnts_23 <= _T_1956 @[RegMap.scala 50:76]
    node _T_1957 = eq(addr, UInt<12>("hb7f")) @[RegMap.scala 50:65]
    node _T_1958 = and(_T_796, _T_1957) @[RegMap.scala 50:56]
    when _T_1958 : @[RegMap.scala 50:72]
      node _T_1959 = and(wdata, _T_306) @[BitUtils.scala 32:13]
      node _T_1960 = not(_T_306) @[BitUtils.scala 32:38]
      node _T_1961 = and(perfCnts_127, _T_1960) @[BitUtils.scala 32:36]
      node _T_1962 = or(_T_1959, _T_1961) @[BitUtils.scala 32:25]
      perfCnts_127 <= _T_1962 @[RegMap.scala 50:76]
    node _T_1963 = eq(addr, UInt<12>("hb28")) @[RegMap.scala 50:65]
    node _T_1964 = and(_T_796, _T_1963) @[RegMap.scala 50:56]
    when _T_1964 : @[RegMap.scala 50:72]
      node _T_1965 = and(wdata, _T_132) @[BitUtils.scala 32:13]
      node _T_1966 = not(_T_132) @[BitUtils.scala 32:38]
      node _T_1967 = and(perfCnts_40, _T_1966) @[BitUtils.scala 32:36]
      node _T_1968 = or(_T_1965, _T_1967) @[BitUtils.scala 32:25]
      perfCnts_40 <= _T_1968 @[RegMap.scala 50:76]
    node _T_1969 = eq(addr, UInt<12>("hb50")) @[RegMap.scala 50:65]
    node _T_1970 = and(_T_796, _T_1969) @[RegMap.scala 50:56]
    when _T_1970 : @[RegMap.scala 50:72]
      node _T_1971 = and(wdata, _T_212) @[BitUtils.scala 32:13]
      node _T_1972 = not(_T_212) @[BitUtils.scala 32:38]
      node _T_1973 = and(perfCnts_80, _T_1972) @[BitUtils.scala 32:36]
      node _T_1974 = or(_T_1971, _T_1973) @[BitUtils.scala 32:25]
      perfCnts_80 <= _T_1974 @[RegMap.scala 50:76]
    node _T_1975 = eq(addr, UInt<12>("hb37")) @[RegMap.scala 50:65]
    node _T_1976 = and(_T_796, _T_1975) @[RegMap.scala 50:56]
    when _T_1976 : @[RegMap.scala 50:72]
      node _T_1977 = and(wdata, _T_162) @[BitUtils.scala 32:13]
      node _T_1978 = not(_T_162) @[BitUtils.scala 32:38]
      node _T_1979 = and(perfCnts_55, _T_1978) @[BitUtils.scala 32:36]
      node _T_1980 = or(_T_1977, _T_1979) @[BitUtils.scala 32:25]
      perfCnts_55 <= _T_1980 @[RegMap.scala 50:76]
    node _T_1981 = eq(addr, UInt<12>("hb08")) @[RegMap.scala 50:65]
    node _T_1982 = and(_T_796, _T_1981) @[RegMap.scala 50:56]
    when _T_1982 : @[RegMap.scala 50:72]
      node _T_1983 = and(wdata, _T_68) @[BitUtils.scala 32:13]
      node _T_1984 = not(_T_68) @[BitUtils.scala 32:38]
      node _T_1985 = and(perfCnts_8, _T_1984) @[BitUtils.scala 32:36]
      node _T_1986 = or(_T_1983, _T_1985) @[BitUtils.scala 32:25]
      perfCnts_8 <= _T_1986 @[RegMap.scala 50:76]
    node _T_1987 = eq(addr, UInt<9>("h143")) @[RegMap.scala 50:65]
    node _T_1988 = and(_T_796, _T_1987) @[RegMap.scala 50:56]
    when _T_1988 : @[RegMap.scala 50:72]
      node _T_1989 = and(wdata, _T_702) @[BitUtils.scala 32:13]
      node _T_1990 = not(_T_702) @[BitUtils.scala 32:38]
      node _T_1991 = and(stval, _T_1990) @[BitUtils.scala 32:36]
      node _T_1992 = or(_T_1989, _T_1991) @[BitUtils.scala 32:25]
      stval <= _T_1992 @[RegMap.scala 50:76]
    node _T_1993 = eq(addr, UInt<12>("hb6b")) @[RegMap.scala 50:65]
    node _T_1994 = and(_T_796, _T_1993) @[RegMap.scala 50:56]
    when _T_1994 : @[RegMap.scala 50:72]
      node _T_1995 = and(wdata, _T_266) @[BitUtils.scala 32:13]
      node _T_1996 = not(_T_266) @[BitUtils.scala 32:38]
      node _T_1997 = and(perfCnts_107, _T_1996) @[BitUtils.scala 32:36]
      node _T_1998 = or(_T_1995, _T_1997) @[BitUtils.scala 32:25]
      perfCnts_107 <= _T_1998 @[RegMap.scala 50:76]
    node _T_1999 = eq(addr, UInt<12>("hb3a")) @[RegMap.scala 50:65]
    node _T_2000 = and(_T_796, _T_1999) @[RegMap.scala 50:56]
    when _T_2000 : @[RegMap.scala 50:72]
      node _T_2001 = and(wdata, _T_168) @[BitUtils.scala 32:13]
      node _T_2002 = not(_T_168) @[BitUtils.scala 32:38]
      node _T_2003 = and(perfCnts_58, _T_2002) @[BitUtils.scala 32:36]
      node _T_2004 = or(_T_2001, _T_2003) @[BitUtils.scala 32:25]
      perfCnts_58 <= _T_2004 @[RegMap.scala 50:76]
    node _T_2005 = eq(addr, UInt<10>("h301")) @[RegMap.scala 50:65]
    node _T_2006 = and(_T_796, _T_2005) @[RegMap.scala 50:56]
    when _T_2006 : @[RegMap.scala 50:72]
      node _T_2007 = and(wdata, _T_712) @[BitUtils.scala 32:13]
      node _T_2008 = not(_T_712) @[BitUtils.scala 32:38]
      node _T_2009 = and(misa, _T_2008) @[BitUtils.scala 32:36]
      node _T_2010 = or(_T_2007, _T_2009) @[BitUtils.scala 32:25]
      misa <= _T_2010 @[RegMap.scala 50:76]
    node _T_2011 = eq(addr, UInt<12>("hb70")) @[RegMap.scala 50:65]
    node _T_2012 = and(_T_796, _T_2011) @[RegMap.scala 50:56]
    when _T_2012 : @[RegMap.scala 50:72]
      node _T_2013 = and(wdata, _T_276) @[BitUtils.scala 32:13]
      node _T_2014 = not(_T_276) @[BitUtils.scala 32:38]
      node _T_2015 = and(perfCnts_112, _T_2014) @[BitUtils.scala 32:36]
      node _T_2016 = or(_T_2013, _T_2015) @[BitUtils.scala 32:25]
      perfCnts_112 <= _T_2016 @[RegMap.scala 50:76]
    node _T_2017 = eq(addr, UInt<12>("hb1a")) @[RegMap.scala 50:65]
    node _T_2018 = and(_T_796, _T_2017) @[RegMap.scala 50:56]
    when _T_2018 : @[RegMap.scala 50:72]
      node _T_2019 = and(wdata, _T_104) @[BitUtils.scala 32:13]
      node _T_2020 = not(_T_104) @[BitUtils.scala 32:38]
      node _T_2021 = and(perfCnts_26, _T_2020) @[BitUtils.scala 32:36]
      node _T_2022 = or(_T_2019, _T_2021) @[BitUtils.scala 32:25]
      perfCnts_26 <= _T_2022 @[RegMap.scala 50:76]
    node _T_2023 = eq(addr, UInt<12>("hb5f")) @[RegMap.scala 50:65]
    node _T_2024 = and(_T_796, _T_2023) @[RegMap.scala 50:56]
    when _T_2024 : @[RegMap.scala 50:72]
      node _T_2025 = and(wdata, _T_242) @[BitUtils.scala 32:13]
      node _T_2026 = not(_T_242) @[BitUtils.scala 32:38]
      node _T_2027 = and(perfCnts_95, _T_2026) @[BitUtils.scala 32:36]
      node _T_2028 = or(_T_2025, _T_2027) @[BitUtils.scala 32:25]
      perfCnts_95 <= _T_2028 @[RegMap.scala 50:76]
    node _T_2029 = eq(addr, UInt<10>("h300")) @[RegMap.scala 50:65]
    node _T_2030 = and(_T_796, _T_2029) @[RegMap.scala 50:56]
    when _T_2030 : @[RegMap.scala 50:72]
      node _T_2031 = and(wdata, UInt<64>("hffffffffffffffff")) @[BitUtils.scala 32:13]
      node _T_2032 = not(UInt<64>("hffffffffffffffff")) @[BitUtils.scala 32:38]
      node _T_2033 = and(mstatus, _T_2032) @[BitUtils.scala 32:36]
      node _T_2034 = or(_T_2031, _T_2033) @[BitUtils.scala 32:25]
      wire _WIRE_12 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 301:47]
      wire _WIRE_13 : UInt<64>
      _WIRE_13 <= _T_2034
      node _T_2035 = bits(_WIRE_13, 0, 0) @[CSR.scala 301:47]
      _WIRE_12.ie.u <= _T_2035 @[CSR.scala 301:47]
      node _T_2036 = bits(_WIRE_13, 1, 1) @[CSR.scala 301:47]
      _WIRE_12.ie.s <= _T_2036 @[CSR.scala 301:47]
      node _T_2037 = bits(_WIRE_13, 2, 2) @[CSR.scala 301:47]
      _WIRE_12.ie.h <= _T_2037 @[CSR.scala 301:47]
      node _T_2038 = bits(_WIRE_13, 3, 3) @[CSR.scala 301:47]
      _WIRE_12.ie.m <= _T_2038 @[CSR.scala 301:47]
      node _T_2039 = bits(_WIRE_13, 4, 4) @[CSR.scala 301:47]
      _WIRE_12.pie.u <= _T_2039 @[CSR.scala 301:47]
      node _T_2040 = bits(_WIRE_13, 5, 5) @[CSR.scala 301:47]
      _WIRE_12.pie.s <= _T_2040 @[CSR.scala 301:47]
      node _T_2041 = bits(_WIRE_13, 6, 6) @[CSR.scala 301:47]
      _WIRE_12.pie.h <= _T_2041 @[CSR.scala 301:47]
      node _T_2042 = bits(_WIRE_13, 7, 7) @[CSR.scala 301:47]
      _WIRE_12.pie.m <= _T_2042 @[CSR.scala 301:47]
      node _T_2043 = bits(_WIRE_13, 8, 8) @[CSR.scala 301:47]
      _WIRE_12.spp <= _T_2043 @[CSR.scala 301:47]
      node _T_2044 = bits(_WIRE_13, 10, 9) @[CSR.scala 301:47]
      _WIRE_12.hpp <= _T_2044 @[CSR.scala 301:47]
      node _T_2045 = bits(_WIRE_13, 12, 11) @[CSR.scala 301:47]
      _WIRE_12.mpp <= _T_2045 @[CSR.scala 301:47]
      node _T_2046 = bits(_WIRE_13, 14, 13) @[CSR.scala 301:47]
      _WIRE_12.fs <= _T_2046 @[CSR.scala 301:47]
      node _T_2047 = bits(_WIRE_13, 16, 15) @[CSR.scala 301:47]
      _WIRE_12.xs <= _T_2047 @[CSR.scala 301:47]
      node _T_2048 = bits(_WIRE_13, 17, 17) @[CSR.scala 301:47]
      _WIRE_12.mprv <= _T_2048 @[CSR.scala 301:47]
      node _T_2049 = bits(_WIRE_13, 18, 18) @[CSR.scala 301:47]
      _WIRE_12.sum <= _T_2049 @[CSR.scala 301:47]
      node _T_2050 = bits(_WIRE_13, 19, 19) @[CSR.scala 301:47]
      _WIRE_12.mxr <= _T_2050 @[CSR.scala 301:47]
      node _T_2051 = bits(_WIRE_13, 20, 20) @[CSR.scala 301:47]
      _WIRE_12.tvm <= _T_2051 @[CSR.scala 301:47]
      node _T_2052 = bits(_WIRE_13, 21, 21) @[CSR.scala 301:47]
      _WIRE_12.tw <= _T_2052 @[CSR.scala 301:47]
      node _T_2053 = bits(_WIRE_13, 22, 22) @[CSR.scala 301:47]
      _WIRE_12.tsr <= _T_2053 @[CSR.scala 301:47]
      node _T_2054 = bits(_WIRE_13, 31, 23) @[CSR.scala 301:47]
      _WIRE_12.pad0 <= _T_2054 @[CSR.scala 301:47]
      node _T_2055 = bits(_WIRE_13, 33, 32) @[CSR.scala 301:47]
      _WIRE_12.uxl <= _T_2055 @[CSR.scala 301:47]
      node _T_2056 = bits(_WIRE_13, 35, 34) @[CSR.scala 301:47]
      _WIRE_12.sxl <= _T_2056 @[CSR.scala 301:47]
      node _T_2057 = bits(_WIRE_13, 62, 36) @[CSR.scala 301:47]
      _WIRE_12.pad1 <= _T_2057 @[CSR.scala 301:47]
      node _T_2058 = bits(_WIRE_13, 63, 63) @[CSR.scala 301:47]
      _WIRE_12.sd <= _T_2058 @[CSR.scala 301:47]
      wire _WIRE_14 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_14.ie.u <= _WIRE_12.ie.u
      _WIRE_14.ie.s <= _WIRE_12.ie.s
      _WIRE_14.ie.h <= _WIRE_12.ie.h
      _WIRE_14.ie.m <= _WIRE_12.ie.m
      _WIRE_14.pie.u <= _WIRE_12.pie.u
      _WIRE_14.pie.s <= _WIRE_12.pie.s
      _WIRE_14.pie.h <= _WIRE_12.pie.h
      _WIRE_14.pie.m <= _WIRE_12.pie.m
      _WIRE_14.spp <= _WIRE_12.spp
      _WIRE_14.hpp <= _WIRE_12.hpp
      _WIRE_14.mpp <= _WIRE_12.mpp
      _WIRE_14.fs <= _WIRE_12.fs
      _WIRE_14.xs <= _WIRE_12.xs
      _WIRE_14.mprv <= _WIRE_12.mprv
      _WIRE_14.sum <= _WIRE_12.sum
      _WIRE_14.mxr <= _WIRE_12.mxr
      _WIRE_14.tvm <= _WIRE_12.tvm
      _WIRE_14.tw <= _WIRE_12.tw
      _WIRE_14.tsr <= _WIRE_12.tsr
      _WIRE_14.pad0 <= _WIRE_12.pad0
      _WIRE_14.uxl <= _WIRE_12.uxl
      _WIRE_14.sxl <= _WIRE_12.sxl
      _WIRE_14.pad1 <= _WIRE_12.pad1
      _WIRE_14.sd <= _WIRE_12.sd
      node _T_2059 = eq(_WIRE_14.fs, UInt<2>("h3")) @[CSR.scala 302:40]
      node _T_2060 = bits(_T_2034, 62, 0) @[CSR.scala 302:60]
      node _T_2061 = cat(_T_2059, _T_2060) @[Cat.scala 30:58]
      mstatus <= _T_2061 @[RegMap.scala 50:76]
    node _T_2062 = eq(addr, UInt<12>("hb13")) @[RegMap.scala 50:65]
    node _T_2063 = and(_T_796, _T_2062) @[RegMap.scala 50:56]
    when _T_2063 : @[RegMap.scala 50:72]
      node _T_2064 = and(wdata, _T_90) @[BitUtils.scala 32:13]
      node _T_2065 = not(_T_90) @[BitUtils.scala 32:38]
      node _T_2066 = and(perfCnts_19, _T_2065) @[BitUtils.scala 32:36]
      node _T_2067 = or(_T_2064, _T_2066) @[BitUtils.scala 32:25]
      perfCnts_19 <= _T_2067 @[RegMap.scala 50:76]
    node _T_2068 = eq(addr, UInt<12>("hb73")) @[RegMap.scala 50:65]
    node _T_2069 = and(_T_796, _T_2068) @[RegMap.scala 50:56]
    when _T_2069 : @[RegMap.scala 50:72]
      node _T_2070 = and(wdata, _T_282) @[BitUtils.scala 32:13]
      node _T_2071 = not(_T_282) @[BitUtils.scala 32:38]
      node _T_2072 = and(perfCnts_115, _T_2071) @[BitUtils.scala 32:36]
      node _T_2073 = or(_T_2070, _T_2072) @[BitUtils.scala 32:25]
      perfCnts_115 <= _T_2073 @[RegMap.scala 50:76]
    node _T_2074 = eq(addr, UInt<12>("hb33")) @[RegMap.scala 50:65]
    node _T_2075 = and(_T_796, _T_2074) @[RegMap.scala 50:56]
    when _T_2075 : @[RegMap.scala 50:72]
      node _T_2076 = and(wdata, _T_154) @[BitUtils.scala 32:13]
      node _T_2077 = not(_T_154) @[BitUtils.scala 32:38]
      node _T_2078 = and(perfCnts_51, _T_2077) @[BitUtils.scala 32:36]
      node _T_2079 = or(_T_2076, _T_2078) @[BitUtils.scala 32:25]
      perfCnts_51 <= _T_2079 @[RegMap.scala 50:76]
    node _T_2080 = eq(addr, UInt<12>("hb62")) @[RegMap.scala 50:65]
    node _T_2081 = and(_T_796, _T_2080) @[RegMap.scala 50:56]
    when _T_2081 : @[RegMap.scala 50:72]
      node _T_2082 = and(wdata, _T_248) @[BitUtils.scala 32:13]
      node _T_2083 = not(_T_248) @[BitUtils.scala 32:38]
      node _T_2084 = and(perfCnts_98, _T_2083) @[BitUtils.scala 32:36]
      node _T_2085 = or(_T_2082, _T_2084) @[BitUtils.scala 32:25]
      perfCnts_98 <= _T_2085 @[RegMap.scala 50:76]
    node _T_2086 = eq(addr, UInt<12>("hb00")) @[RegMap.scala 50:65]
    node _T_2087 = and(_T_796, _T_2086) @[RegMap.scala 50:56]
    when _T_2087 : @[RegMap.scala 50:72]
      node _T_2088 = and(wdata, _T_52) @[BitUtils.scala 32:13]
      node _T_2089 = not(_T_52) @[BitUtils.scala 32:38]
      node _T_2090 = and(perfCnts_0, _T_2089) @[BitUtils.scala 32:36]
      node _T_2091 = or(_T_2088, _T_2090) @[BitUtils.scala 32:25]
      perfCnts_0 <= _T_2091 @[RegMap.scala 50:76]
    node _T_2092 = eq(addr, UInt<10>("h3b0")) @[RegMap.scala 50:65]
    node _T_2093 = and(_T_796, _T_2092) @[RegMap.scala 50:56]
    when _T_2093 : @[RegMap.scala 50:72]
      node _T_2094 = and(wdata, _T_740) @[BitUtils.scala 32:13]
      node _T_2095 = not(_T_740) @[BitUtils.scala 32:38]
      node _T_2096 = and(pmpaddr0, _T_2095) @[BitUtils.scala 32:36]
      node _T_2097 = or(_T_2094, _T_2096) @[BitUtils.scala 32:25]
      pmpaddr0 <= _T_2097 @[RegMap.scala 50:76]
    node _T_2098 = eq(addr, UInt<12>("hb3e")) @[RegMap.scala 50:65]
    node _T_2099 = and(_T_796, _T_2098) @[RegMap.scala 50:56]
    when _T_2099 : @[RegMap.scala 50:72]
      node _T_2100 = and(wdata, _T_176) @[BitUtils.scala 32:13]
      node _T_2101 = not(_T_176) @[BitUtils.scala 32:38]
      node _T_2102 = and(perfCnts_62, _T_2101) @[BitUtils.scala 32:36]
      node _T_2103 = or(_T_2100, _T_2102) @[BitUtils.scala 32:25]
      perfCnts_62 <= _T_2103 @[RegMap.scala 50:76]
    node _T_2104 = eq(addr, UInt<12>("hb6f")) @[RegMap.scala 50:65]
    node _T_2105 = and(_T_796, _T_2104) @[RegMap.scala 50:56]
    when _T_2105 : @[RegMap.scala 50:72]
      node _T_2106 = and(wdata, _T_274) @[BitUtils.scala 32:13]
      node _T_2107 = not(_T_274) @[BitUtils.scala 32:38]
      node _T_2108 = and(perfCnts_111, _T_2107) @[BitUtils.scala 32:36]
      node _T_2109 = or(_T_2106, _T_2108) @[BitUtils.scala 32:25]
      perfCnts_111 <= _T_2109 @[RegMap.scala 50:76]
    node _T_2110 = eq(addr, UInt<12>("hb1e")) @[RegMap.scala 50:65]
    node _T_2111 = and(_T_796, _T_2110) @[RegMap.scala 50:56]
    when _T_2111 : @[RegMap.scala 50:72]
      node _T_2112 = and(wdata, _T_112) @[BitUtils.scala 32:13]
      node _T_2113 = not(_T_112) @[BitUtils.scala 32:38]
      node _T_2114 = and(perfCnts_30, _T_2113) @[BitUtils.scala 32:36]
      node _T_2115 = or(_T_2112, _T_2114) @[BitUtils.scala 32:25]
      perfCnts_30 <= _T_2115 @[RegMap.scala 50:76]
    node _T_2116 = eq(addr, UInt<12>("hb53")) @[RegMap.scala 50:65]
    node _T_2117 = and(_T_796, _T_2116) @[RegMap.scala 50:56]
    when _T_2117 : @[RegMap.scala 50:72]
      node _T_2118 = and(wdata, _T_218) @[BitUtils.scala 32:13]
      node _T_2119 = not(_T_218) @[BitUtils.scala 32:38]
      node _T_2120 = and(perfCnts_83, _T_2119) @[BitUtils.scala 32:36]
      node _T_2121 = or(_T_2118, _T_2120) @[BitUtils.scala 32:25]
      perfCnts_83 <= _T_2121 @[RegMap.scala 50:76]
    node _T_2122 = eq(addr, UInt<12>("hb7e")) @[RegMap.scala 50:65]
    node _T_2123 = and(_T_796, _T_2122) @[RegMap.scala 50:56]
    when _T_2123 : @[RegMap.scala 50:72]
      node _T_2124 = and(wdata, _T_304) @[BitUtils.scala 32:13]
      node _T_2125 = not(_T_304) @[BitUtils.scala 32:38]
      node _T_2126 = and(perfCnts_126, _T_2125) @[BitUtils.scala 32:36]
      node _T_2127 = or(_T_2124, _T_2126) @[BitUtils.scala 32:25]
      perfCnts_126 <= _T_2127 @[RegMap.scala 50:76]
    node _T_2128 = eq(addr, UInt<12>("hb2f")) @[RegMap.scala 50:65]
    node _T_2129 = and(_T_796, _T_2128) @[RegMap.scala 50:56]
    when _T_2129 : @[RegMap.scala 50:72]
      node _T_2130 = and(wdata, _T_146) @[BitUtils.scala 32:13]
      node _T_2131 = not(_T_146) @[BitUtils.scala 32:38]
      node _T_2132 = and(perfCnts_47, _T_2131) @[BitUtils.scala 32:36]
      node _T_2133 = or(_T_2130, _T_2132) @[BitUtils.scala 32:25]
      perfCnts_47 <= _T_2133 @[RegMap.scala 50:76]
    node _T_2134 = eq(addr, UInt<12>("hb05")) @[RegMap.scala 50:65]
    node _T_2135 = and(_T_796, _T_2134) @[RegMap.scala 50:56]
    when _T_2135 : @[RegMap.scala 50:72]
      node _T_2136 = and(wdata, _T_62) @[BitUtils.scala 32:13]
      node _T_2137 = not(_T_62) @[BitUtils.scala 32:38]
      node _T_2138 = and(perfCnts_5, _T_2137) @[BitUtils.scala 32:36]
      node _T_2139 = or(_T_2136, _T_2138) @[BitUtils.scala 32:25]
      perfCnts_5 <= _T_2139 @[RegMap.scala 50:76]
    node _T_2140 = eq(addr, UInt<12>("hb22")) @[RegMap.scala 50:65]
    node _T_2141 = and(_T_796, _T_2140) @[RegMap.scala 50:56]
    when _T_2141 : @[RegMap.scala 50:72]
      node _T_2142 = and(wdata, _T_120) @[BitUtils.scala 32:13]
      node _T_2143 = not(_T_120) @[BitUtils.scala 32:38]
      node _T_2144 = and(perfCnts_34, _T_2143) @[BitUtils.scala 32:36]
      node _T_2145 = or(_T_2142, _T_2144) @[BitUtils.scala 32:25]
      perfCnts_34 <= _T_2145 @[RegMap.scala 50:76]
    node _T_2146 = eq(addr, UInt<12>("hb48")) @[RegMap.scala 50:65]
    node _T_2147 = and(_T_796, _T_2146) @[RegMap.scala 50:56]
    when _T_2147 : @[RegMap.scala 50:72]
      node _T_2148 = and(wdata, _T_196) @[BitUtils.scala 32:13]
      node _T_2149 = not(_T_196) @[BitUtils.scala 32:38]
      node _T_2150 = and(perfCnts_72, _T_2149) @[BitUtils.scala 32:36]
      node _T_2151 = or(_T_2148, _T_2150) @[BitUtils.scala 32:25]
      perfCnts_72 <= _T_2151 @[RegMap.scala 50:76]
    node _T_2152 = eq(addr, UInt<12>("hb42")) @[RegMap.scala 50:65]
    node _T_2153 = and(_T_796, _T_2152) @[RegMap.scala 50:56]
    when _T_2153 : @[RegMap.scala 50:72]
      node _T_2154 = and(wdata, _T_184) @[BitUtils.scala 32:13]
      node _T_2155 = not(_T_184) @[BitUtils.scala 32:38]
      node _T_2156 = and(perfCnts_66, _T_2155) @[BitUtils.scala 32:36]
      node _T_2157 = or(_T_2154, _T_2156) @[BitUtils.scala 32:25]
      perfCnts_66 <= _T_2157 @[RegMap.scala 50:76]
    node _T_2158 = eq(addr, UInt<12>("hb0f")) @[RegMap.scala 50:65]
    node _T_2159 = and(_T_796, _T_2158) @[RegMap.scala 50:56]
    when _T_2159 : @[RegMap.scala 50:72]
      node _T_2160 = and(wdata, _T_82) @[BitUtils.scala 32:13]
      node _T_2161 = not(_T_82) @[BitUtils.scala 32:38]
      node _T_2162 = and(perfCnts_15, _T_2161) @[BitUtils.scala 32:36]
      node _T_2163 = or(_T_2160, _T_2162) @[BitUtils.scala 32:25]
      perfCnts_15 <= _T_2163 @[RegMap.scala 50:76]
    node _T_2164 = eq(addr, UInt<12>("hb68")) @[RegMap.scala 50:65]
    node _T_2165 = and(_T_796, _T_2164) @[RegMap.scala 50:56]
    when _T_2165 : @[RegMap.scala 50:72]
      node _T_2166 = and(wdata, _T_260) @[BitUtils.scala 32:13]
      node _T_2167 = not(_T_260) @[BitUtils.scala 32:38]
      node _T_2168 = and(perfCnts_104, _T_2167) @[BitUtils.scala 32:36]
      node _T_2169 = or(_T_2166, _T_2168) @[BitUtils.scala 32:25]
      perfCnts_104 <= _T_2169 @[RegMap.scala 50:76]
    node _T_2170 = eq(addr, UInt<12>("hb57")) @[RegMap.scala 50:65]
    node _T_2171 = and(_T_796, _T_2170) @[RegMap.scala 50:56]
    when _T_2171 : @[RegMap.scala 50:72]
      node _T_2172 = and(wdata, _T_226) @[BitUtils.scala 32:13]
      node _T_2173 = not(_T_226) @[BitUtils.scala 32:38]
      node _T_2174 = and(perfCnts_87, _T_2173) @[BitUtils.scala 32:36]
      node _T_2175 = or(_T_2172, _T_2174) @[BitUtils.scala 32:25]
      perfCnts_87 <= _T_2175 @[RegMap.scala 50:76]
    node _T_2176 = eq(addr, UInt<12>("hb16")) @[RegMap.scala 50:65]
    node _T_2177 = and(_T_796, _T_2176) @[RegMap.scala 50:56]
    when _T_2177 : @[RegMap.scala 50:72]
      node _T_2178 = and(wdata, _T_96) @[BitUtils.scala 32:13]
      node _T_2179 = not(_T_96) @[BitUtils.scala 32:38]
      node _T_2180 = and(perfCnts_22, _T_2179) @[BitUtils.scala 32:36]
      node _T_2181 = or(_T_2178, _T_2180) @[BitUtils.scala 32:25]
      perfCnts_22 <= _T_2181 @[RegMap.scala 50:76]
    node _T_2182 = eq(addr, UInt<12>("hb1b")) @[RegMap.scala 50:65]
    node _T_2183 = and(_T_796, _T_2182) @[RegMap.scala 50:56]
    when _T_2183 : @[RegMap.scala 50:72]
      node _T_2184 = and(wdata, _T_106) @[BitUtils.scala 32:13]
      node _T_2185 = not(_T_106) @[BitUtils.scala 32:38]
      node _T_2186 = and(perfCnts_27, _T_2185) @[BitUtils.scala 32:36]
      node _T_2187 = or(_T_2184, _T_2186) @[BitUtils.scala 32:25]
      perfCnts_27 <= _T_2187 @[RegMap.scala 50:76]
    node _T_2188 = eq(addr, UInt<12>("hb2c")) @[RegMap.scala 50:65]
    node _T_2189 = and(_T_796, _T_2188) @[RegMap.scala 50:56]
    when _T_2189 : @[RegMap.scala 50:72]
      node _T_2190 = and(wdata, _T_140) @[BitUtils.scala 32:13]
      node _T_2191 = not(_T_140) @[BitUtils.scala 32:38]
      node _T_2192 = and(perfCnts_44, _T_2191) @[BitUtils.scala 32:36]
      node _T_2193 = or(_T_2190, _T_2192) @[BitUtils.scala 32:25]
      perfCnts_44 <= _T_2193 @[RegMap.scala 50:76]
    node _T_2194 = eq(addr, UInt<12>("hb7b")) @[RegMap.scala 50:65]
    node _T_2195 = and(_T_796, _T_2194) @[RegMap.scala 50:56]
    when _T_2195 : @[RegMap.scala 50:72]
      node _T_2196 = and(wdata, _T_298) @[BitUtils.scala 32:13]
      node _T_2197 = not(_T_298) @[BitUtils.scala 32:38]
      node _T_2198 = and(perfCnts_123, _T_2197) @[BitUtils.scala 32:36]
      node _T_2199 = or(_T_2196, _T_2198) @[BitUtils.scala 32:25]
      perfCnts_123 <= _T_2199 @[RegMap.scala 50:76]
    node _T_2200 = eq(addr, UInt<12>("hb4c")) @[RegMap.scala 50:65]
    node _T_2201 = and(_T_796, _T_2200) @[RegMap.scala 50:56]
    when _T_2201 : @[RegMap.scala 50:72]
      node _T_2202 = and(wdata, _T_204) @[BitUtils.scala 32:13]
      node _T_2203 = not(_T_204) @[BitUtils.scala 32:38]
      node _T_2204 = and(perfCnts_76, _T_2203) @[BitUtils.scala 32:36]
      node _T_2205 = or(_T_2202, _T_2204) @[BitUtils.scala 32:25]
      perfCnts_76 <= _T_2205 @[RegMap.scala 50:76]
    node _T_2206 = eq(addr, UInt<12>("hb20")) @[RegMap.scala 50:65]
    node _T_2207 = and(_T_796, _T_2206) @[RegMap.scala 50:56]
    when _T_2207 : @[RegMap.scala 50:72]
      node _T_2208 = and(wdata, _T_116) @[BitUtils.scala 32:13]
      node _T_2209 = not(_T_116) @[BitUtils.scala 32:38]
      node _T_2210 = and(perfCnts_32, _T_2209) @[BitUtils.scala 32:36]
      node _T_2211 = or(_T_2208, _T_2210) @[BitUtils.scala 32:25]
      perfCnts_32 <= _T_2211 @[RegMap.scala 50:76]
    node _T_2212 = eq(addr, UInt<12>("hb31")) @[RegMap.scala 50:65]
    node _T_2213 = and(_T_796, _T_2212) @[RegMap.scala 50:56]
    when _T_2213 : @[RegMap.scala 50:72]
      node _T_2214 = and(wdata, _T_150) @[BitUtils.scala 32:13]
      node _T_2215 = not(_T_150) @[BitUtils.scala 32:38]
      node _T_2216 = and(perfCnts_49, _T_2215) @[BitUtils.scala 32:36]
      node _T_2217 = or(_T_2214, _T_2216) @[BitUtils.scala 32:25]
      perfCnts_49 <= _T_2217 @[RegMap.scala 50:76]
    node _T_2218 = eq(addr, UInt<12>("hb3b")) @[RegMap.scala 50:65]
    node _T_2219 = and(_T_796, _T_2218) @[RegMap.scala 50:56]
    when _T_2219 : @[RegMap.scala 50:72]
      node _T_2220 = and(wdata, _T_170) @[BitUtils.scala 32:13]
      node _T_2221 = not(_T_170) @[BitUtils.scala 32:38]
      node _T_2222 = and(perfCnts_59, _T_2221) @[BitUtils.scala 32:36]
      node _T_2223 = or(_T_2220, _T_2222) @[BitUtils.scala 32:25]
      perfCnts_59 <= _T_2223 @[RegMap.scala 50:76]
    node _T_2224 = eq(addr, UInt<12>("hb6c")) @[RegMap.scala 50:65]
    node _T_2225 = and(_T_796, _T_2224) @[RegMap.scala 50:56]
    when _T_2225 : @[RegMap.scala 50:72]
      node _T_2226 = and(wdata, _T_268) @[BitUtils.scala 32:13]
      node _T_2227 = not(_T_268) @[BitUtils.scala 32:38]
      node _T_2228 = and(perfCnts_108, _T_2227) @[BitUtils.scala 32:36]
      node _T_2229 = or(_T_2226, _T_2228) @[BitUtils.scala 32:25]
      perfCnts_108 <= _T_2229 @[RegMap.scala 50:76]
    node _T_2230 = eq(addr, UInt<12>("hb02")) @[RegMap.scala 50:65]
    node _T_2231 = and(_T_796, _T_2230) @[RegMap.scala 50:56]
    when _T_2231 : @[RegMap.scala 50:72]
      node _T_2232 = and(wdata, _T_56) @[BitUtils.scala 32:13]
      node _T_2233 = not(_T_56) @[BitUtils.scala 32:38]
      node _T_2234 = and(perfCnts_2, _T_2233) @[BitUtils.scala 32:36]
      node _T_2235 = or(_T_2232, _T_2234) @[BitUtils.scala 32:25]
      perfCnts_2 <= _T_2235 @[RegMap.scala 50:76]
    node _T_2236 = eq(addr, UInt<10>("h3a3")) @[RegMap.scala 50:65]
    node _T_2237 = and(_T_796, _T_2236) @[RegMap.scala 50:56]
    when _T_2237 : @[RegMap.scala 50:72]
      node _T_2238 = and(wdata, _T_738) @[BitUtils.scala 32:13]
      node _T_2239 = not(_T_738) @[BitUtils.scala 32:38]
      node _T_2240 = and(pmpcfg3, _T_2239) @[BitUtils.scala 32:36]
      node _T_2241 = or(_T_2238, _T_2240) @[BitUtils.scala 32:25]
      pmpcfg3 <= _T_2241 @[RegMap.scala 50:76]
    node _T_2242 = eq(addr, UInt<12>("hb45")) @[RegMap.scala 50:65]
    node _T_2243 = and(_T_796, _T_2242) @[RegMap.scala 50:56]
    when _T_2243 : @[RegMap.scala 50:72]
      node _T_2244 = and(wdata, _T_190) @[BitUtils.scala 32:13]
      node _T_2245 = not(_T_190) @[BitUtils.scala 32:38]
      node _T_2246 = and(perfCnts_69, _T_2245) @[BitUtils.scala 32:36]
      node _T_2247 = or(_T_2244, _T_2246) @[BitUtils.scala 32:25]
      perfCnts_69 <= _T_2247 @[RegMap.scala 50:76]
    node _T_2248 = eq(addr, UInt<12>("hb36")) @[RegMap.scala 50:65]
    node _T_2249 = and(_T_796, _T_2248) @[RegMap.scala 50:56]
    when _T_2249 : @[RegMap.scala 50:72]
      node _T_2250 = and(wdata, _T_160) @[BitUtils.scala 32:13]
      node _T_2251 = not(_T_160) @[BitUtils.scala 32:38]
      node _T_2252 = and(perfCnts_54, _T_2251) @[BitUtils.scala 32:36]
      node _T_2253 = or(_T_2250, _T_2252) @[BitUtils.scala 32:25]
      perfCnts_54 <= _T_2253 @[RegMap.scala 50:76]
    node _T_2254 = eq(addr, UInt<12>("hb0c")) @[RegMap.scala 50:65]
    node _T_2255 = and(_T_796, _T_2254) @[RegMap.scala 50:56]
    when _T_2255 : @[RegMap.scala 50:72]
      node _T_2256 = and(wdata, _T_76) @[BitUtils.scala 32:13]
      node _T_2257 = not(_T_76) @[BitUtils.scala 32:38]
      node _T_2258 = and(perfCnts_12, _T_2257) @[BitUtils.scala 32:36]
      node _T_2259 = or(_T_2256, _T_2258) @[BitUtils.scala 32:25]
      perfCnts_12 <= _T_2259 @[RegMap.scala 50:76]
    node _T_2260 = eq(addr, UInt<12>("hb67")) @[RegMap.scala 50:65]
    node _T_2261 = and(_T_796, _T_2260) @[RegMap.scala 50:56]
    when _T_2261 : @[RegMap.scala 50:72]
      node _T_2262 = and(wdata, _T_258) @[BitUtils.scala 32:13]
      node _T_2263 = not(_T_258) @[BitUtils.scala 32:38]
      node _T_2264 = and(perfCnts_103, _T_2263) @[BitUtils.scala 32:36]
      node _T_2265 = or(_T_2262, _T_2264) @[BitUtils.scala 32:25]
      perfCnts_103 <= _T_2265 @[RegMap.scala 50:76]
    node _T_2266 = eq(addr, UInt<10>("h303")) @[RegMap.scala 50:65]
    node _T_2267 = and(_T_796, _T_2266) @[RegMap.scala 50:56]
    when _T_2267 : @[RegMap.scala 50:72]
      node _T_2268 = and(wdata, UInt<10>("h222")) @[BitUtils.scala 32:13]
      node _T_2269 = not(UInt<10>("h222")) @[BitUtils.scala 32:38]
      node _T_2270 = and(mideleg, _T_2269) @[BitUtils.scala 32:36]
      node _T_2271 = or(_T_2268, _T_2270) @[BitUtils.scala 32:25]
      mideleg <= _T_2271 @[RegMap.scala 50:76]
    node _T_2272 = eq(addr, UInt<12>("hb5b")) @[RegMap.scala 50:65]
    node _T_2273 = and(_T_796, _T_2272) @[RegMap.scala 50:56]
    when _T_2273 : @[RegMap.scala 50:72]
      node _T_2274 = and(wdata, _T_234) @[BitUtils.scala 32:13]
      node _T_2275 = not(_T_234) @[BitUtils.scala 32:38]
      node _T_2276 = and(perfCnts_91, _T_2275) @[BitUtils.scala 32:36]
      node _T_2277 = or(_T_2274, _T_2276) @[BitUtils.scala 32:25]
      perfCnts_91 <= _T_2277 @[RegMap.scala 50:76]
    node _T_2278 = eq(addr, UInt<12>("hb27")) @[RegMap.scala 50:65]
    node _T_2279 = and(_T_796, _T_2278) @[RegMap.scala 50:56]
    when _T_2279 : @[RegMap.scala 50:72]
      node _T_2280 = and(wdata, _T_130) @[BitUtils.scala 32:13]
      node _T_2281 = not(_T_130) @[BitUtils.scala 32:38]
      node _T_2282 = and(perfCnts_39, _T_2281) @[BitUtils.scala 32:36]
      node _T_2283 = or(_T_2280, _T_2282) @[BitUtils.scala 32:25]
      perfCnts_39 <= _T_2283 @[RegMap.scala 50:76]
    node _T_2284 = eq(addr, UInt<12>("hb25")) @[RegMap.scala 50:65]
    node _T_2285 = and(_T_796, _T_2284) @[RegMap.scala 50:56]
    when _T_2285 : @[RegMap.scala 50:72]
      node _T_2286 = and(wdata, _T_126) @[BitUtils.scala 32:13]
      node _T_2287 = not(_T_126) @[BitUtils.scala 32:38]
      node _T_2288 = and(perfCnts_37, _T_2287) @[BitUtils.scala 32:36]
      node _T_2289 = or(_T_2286, _T_2288) @[BitUtils.scala 32:25]
      perfCnts_37 <= _T_2289 @[RegMap.scala 50:76]
    node _T_2290 = eq(addr, UInt<10>("h3b2")) @[RegMap.scala 50:65]
    node _T_2291 = and(_T_796, _T_2290) @[RegMap.scala 50:56]
    when _T_2291 : @[RegMap.scala 50:72]
      node _T_2292 = and(wdata, _T_744) @[BitUtils.scala 32:13]
      node _T_2293 = not(_T_744) @[BitUtils.scala 32:38]
      node _T_2294 = and(pmpaddr2, _T_2293) @[BitUtils.scala 32:36]
      node _T_2295 = or(_T_2292, _T_2294) @[BitUtils.scala 32:25]
      pmpaddr2 <= _T_2295 @[RegMap.scala 50:76]
    node _T_2296 = eq(addr, UInt<12>("hb07")) @[RegMap.scala 50:65]
    node _T_2297 = and(_T_796, _T_2296) @[RegMap.scala 50:56]
    when _T_2297 : @[RegMap.scala 50:72]
      node _T_2298 = and(wdata, _T_66) @[BitUtils.scala 32:13]
      node _T_2299 = not(_T_66) @[BitUtils.scala 32:38]
      node _T_2300 = and(perfCnts_7, _T_2299) @[BitUtils.scala 32:36]
      node _T_2301 = or(_T_2298, _T_2300) @[BitUtils.scala 32:25]
      perfCnts_7 <= _T_2301 @[RegMap.scala 50:76]
    node _T_2302 = eq(addr, UInt<12>("hb76")) @[RegMap.scala 50:65]
    node _T_2303 = and(_T_796, _T_2302) @[RegMap.scala 50:56]
    when _T_2303 : @[RegMap.scala 50:72]
      node _T_2304 = and(wdata, _T_288) @[BitUtils.scala 32:13]
      node _T_2305 = not(_T_288) @[BitUtils.scala 32:38]
      node _T_2306 = and(perfCnts_118, _T_2305) @[BitUtils.scala 32:36]
      node _T_2307 = or(_T_2304, _T_2306) @[BitUtils.scala 32:25]
      perfCnts_118 <= _T_2307 @[RegMap.scala 50:76]
    node _T_2308 = eq(addr, UInt<12>("hb60")) @[RegMap.scala 50:65]
    node _T_2309 = and(_T_796, _T_2308) @[RegMap.scala 50:56]
    when _T_2309 : @[RegMap.scala 50:72]
      node _T_2310 = and(wdata, _T_244) @[BitUtils.scala 32:13]
      node _T_2311 = not(_T_244) @[BitUtils.scala 32:38]
      node _T_2312 = and(perfCnts_96, _T_2311) @[BitUtils.scala 32:36]
      node _T_2313 = or(_T_2310, _T_2312) @[BitUtils.scala 32:25]
      perfCnts_96 <= _T_2313 @[RegMap.scala 50:76]
    node _T_2314 = eq(addr, UInt<10>("h3a1")) @[RegMap.scala 50:65]
    node _T_2315 = and(_T_796, _T_2314) @[RegMap.scala 50:56]
    when _T_2315 : @[RegMap.scala 50:72]
      node _T_2316 = and(wdata, _T_734) @[BitUtils.scala 32:13]
      node _T_2317 = not(_T_734) @[BitUtils.scala 32:38]
      node _T_2318 = and(pmpcfg1, _T_2317) @[BitUtils.scala 32:36]
      node _T_2319 = or(_T_2316, _T_2318) @[BitUtils.scala 32:25]
      pmpcfg1 <= _T_2319 @[RegMap.scala 50:76]
    node _T_2320 = eq(addr, UInt<12>("hb56")) @[RegMap.scala 50:65]
    node _T_2321 = and(_T_796, _T_2320) @[RegMap.scala 50:56]
    when _T_2321 : @[RegMap.scala 50:72]
      node _T_2322 = and(wdata, _T_224) @[BitUtils.scala 32:13]
      node _T_2323 = not(_T_224) @[BitUtils.scala 32:38]
      node _T_2324 = and(perfCnts_86, _T_2323) @[BitUtils.scala 32:36]
      node _T_2325 = or(_T_2322, _T_2324) @[BitUtils.scala 32:25]
      perfCnts_86 <= _T_2325 @[RegMap.scala 50:76]
    node _T_2326 = eq(addr, UInt<10>("h340")) @[RegMap.scala 50:65]
    node _T_2327 = and(_T_796, _T_2326) @[RegMap.scala 50:56]
    when _T_2327 : @[RegMap.scala 50:72]
      node _T_2328 = and(wdata, _T_722) @[BitUtils.scala 32:13]
      node _T_2329 = not(_T_722) @[BitUtils.scala 32:38]
      node _T_2330 = and(mscratch, _T_2329) @[BitUtils.scala 32:36]
      node _T_2331 = or(_T_2328, _T_2330) @[BitUtils.scala 32:25]
      mscratch <= _T_2331 @[RegMap.scala 50:76]
    node _T_2332 = eq(addr, UInt<12>("hb65")) @[RegMap.scala 50:65]
    node _T_2333 = and(_T_796, _T_2332) @[RegMap.scala 50:56]
    when _T_2333 : @[RegMap.scala 50:72]
      node _T_2334 = and(wdata, _T_254) @[BitUtils.scala 32:13]
      node _T_2335 = not(_T_254) @[BitUtils.scala 32:38]
      node _T_2336 = and(perfCnts_101, _T_2335) @[BitUtils.scala 32:36]
      node _T_2337 = or(_T_2334, _T_2336) @[BitUtils.scala 32:25]
      perfCnts_101 <= _T_2337 @[RegMap.scala 50:76]
    node _T_2338 = eq(addr, UInt<12>("hb72")) @[RegMap.scala 50:65]
    node _T_2339 = and(_T_796, _T_2338) @[RegMap.scala 50:56]
    when _T_2339 : @[RegMap.scala 50:72]
      node _T_2340 = and(wdata, _T_280) @[BitUtils.scala 32:13]
      node _T_2341 = not(_T_280) @[BitUtils.scala 32:38]
      node _T_2342 = and(perfCnts_114, _T_2341) @[BitUtils.scala 32:36]
      node _T_2343 = or(_T_2340, _T_2342) @[BitUtils.scala 32:25]
      perfCnts_114 <= _T_2343 @[RegMap.scala 50:76]
    node _T_2344 = eq(addr, UInt<10>("h341")) @[RegMap.scala 50:65]
    node _T_2345 = and(_T_796, _T_2344) @[RegMap.scala 50:56]
    when _T_2345 : @[RegMap.scala 50:72]
      node _T_2346 = and(wdata, _T_724) @[BitUtils.scala 32:13]
      node _T_2347 = not(_T_724) @[BitUtils.scala 32:38]
      node _T_2348 = and(mepc, _T_2347) @[BitUtils.scala 32:36]
      node _T_2349 = or(_T_2346, _T_2348) @[BitUtils.scala 32:25]
      mepc <= _T_2349 @[RegMap.scala 50:76]
    node _T_2350 = eq(addr, UInt<10>("h343")) @[RegMap.scala 50:65]
    node _T_2351 = and(_T_796, _T_2350) @[RegMap.scala 50:56]
    when _T_2351 : @[RegMap.scala 50:72]
      node _T_2352 = and(wdata, _T_728) @[BitUtils.scala 32:13]
      node _T_2353 = not(_T_728) @[BitUtils.scala 32:38]
      node _T_2354 = and(mtval, _T_2353) @[BitUtils.scala 32:36]
      node _T_2355 = or(_T_2352, _T_2354) @[BitUtils.scala 32:25]
      mtval <= _T_2355 @[RegMap.scala 50:76]
    node _T_2356 = eq(addr, UInt<9>("h106")) @[RegMap.scala 50:65]
    node _T_2357 = and(_T_796, _T_2356) @[RegMap.scala 50:56]
    when _T_2357 : @[RegMap.scala 50:72]
      node _T_2358 = and(wdata, _T_694) @[BitUtils.scala 32:13]
      node _T_2359 = not(_T_694) @[BitUtils.scala 32:38]
      node _T_2360 = and(scounteren, _T_2359) @[BitUtils.scala 32:36]
      node _T_2361 = or(_T_2358, _T_2360) @[BitUtils.scala 32:25]
      scounteren <= _T_2361 @[RegMap.scala 50:76]
    node _T_2362 = eq(addr, UInt<12>("hb61")) @[RegMap.scala 50:65]
    node _T_2363 = and(_T_796, _T_2362) @[RegMap.scala 50:56]
    when _T_2363 : @[RegMap.scala 50:72]
      node _T_2364 = and(wdata, _T_246) @[BitUtils.scala 32:13]
      node _T_2365 = not(_T_246) @[BitUtils.scala 32:38]
      node _T_2366 = and(perfCnts_97, _T_2365) @[BitUtils.scala 32:36]
      node _T_2367 = or(_T_2364, _T_2366) @[BitUtils.scala 32:25]
      perfCnts_97 <= _T_2367 @[RegMap.scala 50:76]
    node _T_2368 = eq(addr, UInt<10>("h3a0")) @[RegMap.scala 50:65]
    node _T_2369 = and(_T_796, _T_2368) @[RegMap.scala 50:56]
    when _T_2369 : @[RegMap.scala 50:72]
      node _T_2370 = and(wdata, _T_732) @[BitUtils.scala 32:13]
      node _T_2371 = not(_T_732) @[BitUtils.scala 32:38]
      node _T_2372 = and(pmpcfg0, _T_2371) @[BitUtils.scala 32:36]
      node _T_2373 = or(_T_2370, _T_2372) @[BitUtils.scala 32:25]
      pmpcfg0 <= _T_2373 @[RegMap.scala 50:76]
    node _T_2374 = eq(addr, UInt<12>("hb1f")) @[RegMap.scala 50:65]
    node _T_2375 = and(_T_796, _T_2374) @[RegMap.scala 50:56]
    when _T_2375 : @[RegMap.scala 50:72]
      node _T_2376 = and(wdata, _T_114) @[BitUtils.scala 32:13]
      node _T_2377 = not(_T_114) @[BitUtils.scala 32:38]
      node _T_2378 = and(perfCnts_31, _T_2377) @[BitUtils.scala 32:36]
      node _T_2379 = or(_T_2376, _T_2378) @[BitUtils.scala 32:25]
      perfCnts_31 <= _T_2379 @[RegMap.scala 50:76]
    node _T_2380 = eq(addr, UInt<12>("hb52")) @[RegMap.scala 50:65]
    node _T_2381 = and(_T_796, _T_2380) @[RegMap.scala 50:56]
    when _T_2381 : @[RegMap.scala 50:72]
      node _T_2382 = and(wdata, _T_216) @[BitUtils.scala 32:13]
      node _T_2383 = not(_T_216) @[BitUtils.scala 32:38]
      node _T_2384 = and(perfCnts_82, _T_2383) @[BitUtils.scala 32:36]
      node _T_2385 = or(_T_2382, _T_2384) @[BitUtils.scala 32:25]
      perfCnts_82 <= _T_2385 @[RegMap.scala 50:76]
    node _T_2386 = eq(addr, UInt<12>("hb30")) @[RegMap.scala 50:65]
    node _T_2387 = and(_T_796, _T_2386) @[RegMap.scala 50:56]
    when _T_2387 : @[RegMap.scala 50:72]
      node _T_2388 = and(wdata, _T_148) @[BitUtils.scala 32:13]
      node _T_2389 = not(_T_148) @[BitUtils.scala 32:38]
      node _T_2390 = and(perfCnts_48, _T_2389) @[BitUtils.scala 32:36]
      node _T_2391 = or(_T_2388, _T_2390) @[BitUtils.scala 32:25]
      perfCnts_48 <= _T_2391 @[RegMap.scala 50:76]
    node _T_2392 = eq(addr, UInt<9>("h142")) @[RegMap.scala 50:65]
    node _T_2393 = and(_T_796, _T_2392) @[RegMap.scala 50:56]
    when _T_2393 : @[RegMap.scala 50:72]
      node _T_2394 = and(wdata, _T_700) @[BitUtils.scala 32:13]
      node _T_2395 = not(_T_700) @[BitUtils.scala 32:38]
      node _T_2396 = and(scause, _T_2395) @[BitUtils.scala 32:36]
      node _T_2397 = or(_T_2394, _T_2396) @[BitUtils.scala 32:25]
      scause <= _T_2397 @[RegMap.scala 50:76]
    node _T_2398 = eq(addr, UInt<12>("hb3f")) @[RegMap.scala 50:65]
    node _T_2399 = and(_T_796, _T_2398) @[RegMap.scala 50:56]
    when _T_2399 : @[RegMap.scala 50:72]
      node _T_2400 = and(wdata, _T_178) @[BitUtils.scala 32:13]
      node _T_2401 = not(_T_178) @[BitUtils.scala 32:38]
      node _T_2402 = and(perfCnts_63, _T_2401) @[BitUtils.scala 32:36]
      node _T_2403 = or(_T_2400, _T_2402) @[BitUtils.scala 32:25]
      perfCnts_63 <= _T_2403 @[RegMap.scala 50:76]
    node _T_2404 = eq(addr, UInt<12>("hb41")) @[RegMap.scala 50:65]
    node _T_2405 = and(_T_796, _T_2404) @[RegMap.scala 50:56]
    when _T_2405 : @[RegMap.scala 50:72]
      node _T_2406 = and(wdata, _T_182) @[BitUtils.scala 32:13]
      node _T_2407 = not(_T_182) @[BitUtils.scala 32:38]
      node _T_2408 = and(perfCnts_65, _T_2407) @[BitUtils.scala 32:36]
      node _T_2409 = or(_T_2406, _T_2408) @[BitUtils.scala 32:25]
      perfCnts_65 <= _T_2409 @[RegMap.scala 50:76]
    node _T_2410 = eq(addr, UInt<12>("hb47")) @[RegMap.scala 50:65]
    node _T_2411 = and(_T_796, _T_2410) @[RegMap.scala 50:56]
    when _T_2411 : @[RegMap.scala 50:72]
      node _T_2412 = and(wdata, _T_194) @[BitUtils.scala 32:13]
      node _T_2413 = not(_T_194) @[BitUtils.scala 32:38]
      node _T_2414 = and(perfCnts_71, _T_2413) @[BitUtils.scala 32:36]
      node _T_2415 = or(_T_2412, _T_2414) @[BitUtils.scala 32:25]
      perfCnts_71 <= _T_2415 @[RegMap.scala 50:76]
    node _T_2416 = eq(addr, UInt<12>("hb32")) @[RegMap.scala 50:65]
    node _T_2417 = and(_T_796, _T_2416) @[RegMap.scala 50:56]
    when _T_2417 : @[RegMap.scala 50:72]
      node _T_2418 = and(wdata, _T_152) @[BitUtils.scala 32:13]
      node _T_2419 = not(_T_152) @[BitUtils.scala 32:38]
      node _T_2420 = and(perfCnts_50, _T_2419) @[BitUtils.scala 32:36]
      node _T_2421 = or(_T_2418, _T_2420) @[BitUtils.scala 32:25]
      perfCnts_50 <= _T_2421 @[RegMap.scala 50:76]
    node _T_2422 = eq(addr, UInt<12>("hb10")) @[RegMap.scala 50:65]
    node _T_2423 = and(_T_796, _T_2422) @[RegMap.scala 50:56]
    when _T_2423 : @[RegMap.scala 50:72]
      node _T_2424 = and(wdata, _T_84) @[BitUtils.scala 32:13]
      node _T_2425 = not(_T_84) @[BitUtils.scala 32:38]
      node _T_2426 = and(perfCnts_16, _T_2425) @[BitUtils.scala 32:36]
      node _T_2427 = or(_T_2424, _T_2426) @[BitUtils.scala 32:25]
      perfCnts_16 <= _T_2427 @[RegMap.scala 50:76]
    node _T_2428 = eq(addr, UInt<12>("hb12")) @[RegMap.scala 50:65]
    node _T_2429 = and(_T_796, _T_2428) @[RegMap.scala 50:56]
    when _T_2429 : @[RegMap.scala 50:72]
      node _T_2430 = and(wdata, _T_88) @[BitUtils.scala 32:13]
      node _T_2431 = not(_T_88) @[BitUtils.scala 32:38]
      node _T_2432 = and(perfCnts_18, _T_2431) @[BitUtils.scala 32:36]
      node _T_2433 = or(_T_2430, _T_2432) @[BitUtils.scala 32:25]
      perfCnts_18 <= _T_2433 @[RegMap.scala 50:76]
    wire isIllegalAddr : UInt<1> @[RegMap.scala 54:27]
    node _T_2434 = eq(UInt<12>("hb06"), addr) @[Mux.scala 80:60]
    node _T_2435 = mux(_T_2434, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 80:57]
    node _T_2436 = eq(UInt<12>("hb49"), addr) @[Mux.scala 80:60]
    node _T_2437 = mux(_T_2436, UInt<1>("h0"), _T_2435) @[Mux.scala 80:57]
    node _T_2438 = eq(UInt<12>("hb3c"), addr) @[Mux.scala 80:60]
    node _T_2439 = mux(_T_2438, UInt<1>("h0"), _T_2437) @[Mux.scala 80:57]
    node _T_2440 = eq(UInt<12>("hb69"), addr) @[Mux.scala 80:60]
    node _T_2441 = mux(_T_2440, UInt<1>("h0"), _T_2439) @[Mux.scala 80:57]
    node _T_2442 = eq(UInt<12>("hb7c"), addr) @[Mux.scala 80:60]
    node _T_2443 = mux(_T_2442, UInt<1>("h0"), _T_2441) @[Mux.scala 80:57]
    node _T_2444 = eq(UInt<12>("hf12"), addr) @[Mux.scala 80:60]
    node _T_2445 = mux(_T_2444, UInt<1>("h0"), _T_2443) @[Mux.scala 80:57]
    node _T_2446 = eq(UInt<12>("hb5c"), addr) @[Mux.scala 80:60]
    node _T_2447 = mux(_T_2446, UInt<1>("h0"), _T_2445) @[Mux.scala 80:57]
    node _T_2448 = eq(UInt<12>("hb15"), addr) @[Mux.scala 80:60]
    node _T_2449 = mux(_T_2448, UInt<1>("h0"), _T_2447) @[Mux.scala 80:57]
    node _T_2450 = eq(UInt<12>("hb26"), addr) @[Mux.scala 80:60]
    node _T_2451 = mux(_T_2450, UInt<1>("h0"), _T_2449) @[Mux.scala 80:57]
    node _T_2452 = eq(UInt<9>("h180"), addr) @[Mux.scala 80:60]
    node _T_2453 = mux(_T_2452, UInt<1>("h0"), _T_2451) @[Mux.scala 80:57]
    node _T_2454 = eq(UInt<12>("hb66"), addr) @[Mux.scala 80:60]
    node _T_2455 = mux(_T_2454, UInt<1>("h0"), _T_2453) @[Mux.scala 80:57]
    node _T_2456 = eq(UInt<12>("hb75"), addr) @[Mux.scala 80:60]
    node _T_2457 = mux(_T_2456, UInt<1>("h0"), _T_2455) @[Mux.scala 80:57]
    node _T_2458 = eq(UInt<12>("hb55"), addr) @[Mux.scala 80:60]
    node _T_2459 = mux(_T_2458, UInt<1>("h0"), _T_2457) @[Mux.scala 80:57]
    node _T_2460 = eq(UInt<10>("h3b1"), addr) @[Mux.scala 80:60]
    node _T_2461 = mux(_T_2460, UInt<1>("h0"), _T_2459) @[Mux.scala 80:57]
    node _T_2462 = eq(UInt<12>("hb1c"), addr) @[Mux.scala 80:60]
    node _T_2463 = mux(_T_2462, UInt<1>("h0"), _T_2461) @[Mux.scala 80:57]
    node _T_2464 = eq(UInt<10>("h3a2"), addr) @[Mux.scala 80:60]
    node _T_2465 = mux(_T_2464, UInt<1>("h0"), _T_2463) @[Mux.scala 80:57]
    node _T_2466 = eq(UInt<12>("hb46"), addr) @[Mux.scala 80:60]
    node _T_2467 = mux(_T_2466, UInt<1>("h0"), _T_2465) @[Mux.scala 80:57]
    node _T_2468 = eq(UInt<9>("h140"), addr) @[Mux.scala 80:60]
    node _T_2469 = mux(_T_2468, UInt<1>("h0"), _T_2467) @[Mux.scala 80:57]
    node _T_2470 = eq(UInt<12>("hb09"), addr) @[Mux.scala 80:60]
    node _T_2471 = mux(_T_2470, UInt<1>("h0"), _T_2469) @[Mux.scala 80:57]
    node _T_2472 = eq(UInt<12>("hb03"), addr) @[Mux.scala 80:60]
    node _T_2473 = mux(_T_2472, UInt<1>("h0"), _T_2471) @[Mux.scala 80:57]
    node _T_2474 = eq(UInt<12>("hb35"), addr) @[Mux.scala 80:60]
    node _T_2475 = mux(_T_2474, UInt<1>("h0"), _T_2473) @[Mux.scala 80:57]
    node _T_2476 = eq(UInt<12>("hb64"), addr) @[Mux.scala 80:60]
    node _T_2477 = mux(_T_2476, UInt<1>("h0"), _T_2475) @[Mux.scala 80:57]
    node _T_2478 = eq(UInt<12>("hb51"), addr) @[Mux.scala 80:60]
    node _T_2479 = mux(_T_2478, UInt<1>("h0"), _T_2477) @[Mux.scala 80:57]
    node _T_2480 = eq(UInt<12>("hb29"), addr) @[Mux.scala 80:60]
    node _T_2481 = mux(_T_2480, UInt<1>("h0"), _T_2479) @[Mux.scala 80:57]
    node _T_2482 = eq(UInt<10>("h302"), addr) @[Mux.scala 80:60]
    node _T_2483 = mux(_T_2482, UInt<1>("h0"), _T_2481) @[Mux.scala 80:57]
    node _T_2484 = eq(UInt<12>("hb71"), addr) @[Mux.scala 80:60]
    node _T_2485 = mux(_T_2484, UInt<1>("h0"), _T_2483) @[Mux.scala 80:57]
    node _T_2486 = eq(UInt<12>("hb24"), addr) @[Mux.scala 80:60]
    node _T_2487 = mux(_T_2486, UInt<1>("h0"), _T_2485) @[Mux.scala 80:57]
    node _T_2488 = eq(UInt<9>("h105"), addr) @[Mux.scala 80:60]
    node _T_2489 = mux(_T_2488, UInt<1>("h0"), _T_2487) @[Mux.scala 80:57]
    node _T_2490 = eq(UInt<12>("hb0d"), addr) @[Mux.scala 80:60]
    node _T_2491 = mux(_T_2490, UInt<1>("h0"), _T_2489) @[Mux.scala 80:57]
    node _T_2492 = eq(UInt<12>("hb4d"), addr) @[Mux.scala 80:60]
    node _T_2493 = mux(_T_2492, UInt<1>("h0"), _T_2491) @[Mux.scala 80:57]
    node _T_2494 = eq(UInt<9>("h141"), addr) @[Mux.scala 80:60]
    node _T_2495 = mux(_T_2494, UInt<1>("h0"), _T_2493) @[Mux.scala 80:57]
    node _T_2496 = eq(UInt<12>("hb40"), addr) @[Mux.scala 80:60]
    node _T_2497 = mux(_T_2496, UInt<1>("h0"), _T_2495) @[Mux.scala 80:57]
    node _T_2498 = eq(UInt<10>("h342"), addr) @[Mux.scala 80:60]
    node _T_2499 = mux(_T_2498, UInt<1>("h0"), _T_2497) @[Mux.scala 80:57]
    node _T_2500 = eq(UInt<12>("hb6d"), addr) @[Mux.scala 80:60]
    node _T_2501 = mux(_T_2500, UInt<1>("h0"), _T_2499) @[Mux.scala 80:57]
    node _T_2502 = eq(UInt<12>("hb11"), addr) @[Mux.scala 80:60]
    node _T_2503 = mux(_T_2502, UInt<1>("h0"), _T_2501) @[Mux.scala 80:57]
    node _T_2504 = eq(UInt<12>("hb2d"), addr) @[Mux.scala 80:60]
    node _T_2505 = mux(_T_2504, UInt<1>("h0"), _T_2503) @[Mux.scala 80:57]
    node _T_2506 = eq(UInt<10>("h306"), addr) @[Mux.scala 80:60]
    node _T_2507 = mux(_T_2506, UInt<1>("h0"), _T_2505) @[Mux.scala 80:57]
    node _T_2508 = eq(UInt<12>("hb44"), addr) @[Mux.scala 80:60]
    node _T_2509 = mux(_T_2508, UInt<1>("h0"), _T_2507) @[Mux.scala 80:57]
    node _T_2510 = eq(UInt<12>("hb6a"), addr) @[Mux.scala 80:60]
    node _T_2511 = mux(_T_2510, UInt<1>("h0"), _T_2509) @[Mux.scala 80:57]
    node _T_2512 = eq(UInt<12>("hf11"), addr) @[Mux.scala 80:60]
    node _T_2513 = mux(_T_2512, UInt<1>("h0"), _T_2511) @[Mux.scala 80:57]
    node _T_2514 = eq(UInt<12>("hb5e"), addr) @[Mux.scala 80:60]
    node _T_2515 = mux(_T_2514, UInt<1>("h0"), _T_2513) @[Mux.scala 80:57]
    node _T_2516 = eq(UInt<12>("hb59"), addr) @[Mux.scala 80:60]
    node _T_2517 = mux(_T_2516, UInt<1>("h0"), _T_2515) @[Mux.scala 80:57]
    node _T_2518 = eq(UInt<9>("h104"), addr) @[Mux.scala 80:60]
    node _T_2519 = mux(_T_2518, UInt<1>("h0"), _T_2517) @[Mux.scala 80:57]
    node _T_2520 = eq(UInt<12>("hb79"), addr) @[Mux.scala 80:60]
    node _T_2521 = mux(_T_2520, UInt<1>("h0"), _T_2519) @[Mux.scala 80:57]
    node _T_2522 = eq(UInt<12>("hb4a"), addr) @[Mux.scala 80:60]
    node _T_2523 = mux(_T_2522, UInt<1>("h0"), _T_2521) @[Mux.scala 80:57]
    node _T_2524 = eq(UInt<12>("hb39"), addr) @[Mux.scala 80:60]
    node _T_2525 = mux(_T_2524, UInt<1>("h0"), _T_2523) @[Mux.scala 80:57]
    node _T_2526 = eq(UInt<12>("hb0a"), addr) @[Mux.scala 80:60]
    node _T_2527 = mux(_T_2526, UInt<1>("h0"), _T_2525) @[Mux.scala 80:57]
    node _T_2528 = eq(UInt<12>("hb04"), addr) @[Mux.scala 80:60]
    node _T_2529 = mux(_T_2528, UInt<1>("h0"), _T_2527) @[Mux.scala 80:57]
    node _T_2530 = eq(UInt<12>("hb38"), addr) @[Mux.scala 80:60]
    node _T_2531 = mux(_T_2530, UInt<1>("h0"), _T_2529) @[Mux.scala 80:57]
    node _T_2532 = eq(UInt<9>("h144"), addr) @[Mux.scala 80:60]
    node _T_2533 = mux(_T_2532, UInt<1>("h0"), _T_2531) @[Mux.scala 80:57]
    node _T_2534 = eq(UInt<12>("hb18"), addr) @[Mux.scala 80:60]
    node _T_2535 = mux(_T_2534, UInt<1>("h0"), _T_2533) @[Mux.scala 80:57]
    node _T_2536 = eq(UInt<12>("hb4f"), addr) @[Mux.scala 80:60]
    node _T_2537 = mux(_T_2536, UInt<1>("h0"), _T_2535) @[Mux.scala 80:57]
    node _T_2538 = eq(UInt<12>("hb19"), addr) @[Mux.scala 80:60]
    node _T_2539 = mux(_T_2538, UInt<1>("h0"), _T_2537) @[Mux.scala 80:57]
    node _T_2540 = eq(UInt<12>("hb2a"), addr) @[Mux.scala 80:60]
    node _T_2541 = mux(_T_2540, UInt<1>("h0"), _T_2539) @[Mux.scala 80:57]
    node _T_2542 = eq(UInt<9>("h100"), addr) @[Mux.scala 80:60]
    node _T_2543 = mux(_T_2542, UInt<1>("h0"), _T_2541) @[Mux.scala 80:57]
    node _T_2544 = eq(UInt<12>("hb3d"), addr) @[Mux.scala 80:60]
    node _T_2545 = mux(_T_2544, UInt<1>("h0"), _T_2543) @[Mux.scala 80:57]
    node _T_2546 = eq(UInt<12>("hb0e"), addr) @[Mux.scala 80:60]
    node _T_2547 = mux(_T_2546, UInt<1>("h0"), _T_2545) @[Mux.scala 80:57]
    node _T_2548 = eq(UInt<12>("hb34"), addr) @[Mux.scala 80:60]
    node _T_2549 = mux(_T_2548, UInt<1>("h0"), _T_2547) @[Mux.scala 80:57]
    node _T_2550 = eq(UInt<12>("hb74"), addr) @[Mux.scala 80:60]
    node _T_2551 = mux(_T_2550, UInt<1>("h0"), _T_2549) @[Mux.scala 80:57]
    node _T_2552 = eq(UInt<12>("hb14"), addr) @[Mux.scala 80:60]
    node _T_2553 = mux(_T_2552, UInt<1>("h0"), _T_2551) @[Mux.scala 80:57]
    node _T_2554 = eq(UInt<12>("hb1d"), addr) @[Mux.scala 80:60]
    node _T_2555 = mux(_T_2554, UInt<1>("h0"), _T_2553) @[Mux.scala 80:57]
    node _T_2556 = eq(UInt<12>("hb54"), addr) @[Mux.scala 80:60]
    node _T_2557 = mux(_T_2556, UInt<1>("h0"), _T_2555) @[Mux.scala 80:57]
    node _T_2558 = eq(UInt<12>("hb23"), addr) @[Mux.scala 80:60]
    node _T_2559 = mux(_T_2558, UInt<1>("h0"), _T_2557) @[Mux.scala 80:57]
    node _T_2560 = eq(UInt<12>("hb2e"), addr) @[Mux.scala 80:60]
    node _T_2561 = mux(_T_2560, UInt<1>("h0"), _T_2559) @[Mux.scala 80:57]
    node _T_2562 = eq(UInt<12>("hb6e"), addr) @[Mux.scala 80:60]
    node _T_2563 = mux(_T_2562, UInt<1>("h0"), _T_2561) @[Mux.scala 80:57]
    node _T_2564 = eq(UInt<12>("hb43"), addr) @[Mux.scala 80:60]
    node _T_2565 = mux(_T_2564, UInt<1>("h0"), _T_2563) @[Mux.scala 80:57]
    node _T_2566 = eq(UInt<12>("hb63"), addr) @[Mux.scala 80:60]
    node _T_2567 = mux(_T_2566, UInt<1>("h0"), _T_2565) @[Mux.scala 80:57]
    node _T_2568 = eq(UInt<10>("h305"), addr) @[Mux.scala 80:60]
    node _T_2569 = mux(_T_2568, UInt<1>("h0"), _T_2567) @[Mux.scala 80:57]
    node _T_2570 = eq(UInt<12>("hb5d"), addr) @[Mux.scala 80:60]
    node _T_2571 = mux(_T_2570, UInt<1>("h0"), _T_2569) @[Mux.scala 80:57]
    node _T_2572 = eq(UInt<12>("hb78"), addr) @[Mux.scala 80:60]
    node _T_2573 = mux(_T_2572, UInt<1>("h0"), _T_2571) @[Mux.scala 80:57]
    node _T_2574 = eq(UInt<12>("hb58"), addr) @[Mux.scala 80:60]
    node _T_2575 = mux(_T_2574, UInt<1>("h0"), _T_2573) @[Mux.scala 80:57]
    node _T_2576 = eq(UInt<12>("hb7d"), addr) @[Mux.scala 80:60]
    node _T_2577 = mux(_T_2576, UInt<1>("h0"), _T_2575) @[Mux.scala 80:57]
    node _T_2578 = eq(UInt<12>("hb4e"), addr) @[Mux.scala 80:60]
    node _T_2579 = mux(_T_2578, UInt<1>("h0"), _T_2577) @[Mux.scala 80:57]
    node _T_2580 = eq(UInt<12>("hb2b"), addr) @[Mux.scala 80:60]
    node _T_2581 = mux(_T_2580, UInt<1>("h0"), _T_2579) @[Mux.scala 80:57]
    node _T_2582 = eq(UInt<12>("hb7a"), addr) @[Mux.scala 80:60]
    node _T_2583 = mux(_T_2582, UInt<1>("h0"), _T_2581) @[Mux.scala 80:57]
    node _T_2584 = eq(UInt<12>("hb21"), addr) @[Mux.scala 80:60]
    node _T_2585 = mux(_T_2584, UInt<1>("h0"), _T_2583) @[Mux.scala 80:57]
    node _T_2586 = eq(UInt<10>("h304"), addr) @[Mux.scala 80:60]
    node _T_2587 = mux(_T_2586, UInt<1>("h0"), _T_2585) @[Mux.scala 80:57]
    node _T_2588 = eq(UInt<12>("hb01"), addr) @[Mux.scala 80:60]
    node _T_2589 = mux(_T_2588, UInt<1>("h0"), _T_2587) @[Mux.scala 80:57]
    node _T_2590 = eq(UInt<12>("hb0b"), addr) @[Mux.scala 80:60]
    node _T_2591 = mux(_T_2590, UInt<1>("h0"), _T_2589) @[Mux.scala 80:57]
    node _T_2592 = eq(UInt<12>("hb4b"), addr) @[Mux.scala 80:60]
    node _T_2593 = mux(_T_2592, UInt<1>("h0"), _T_2591) @[Mux.scala 80:57]
    node _T_2594 = eq(UInt<12>("hb77"), addr) @[Mux.scala 80:60]
    node _T_2595 = mux(_T_2594, UInt<1>("h0"), _T_2593) @[Mux.scala 80:57]
    node _T_2596 = eq(UInt<10>("h3b3"), addr) @[Mux.scala 80:60]
    node _T_2597 = mux(_T_2596, UInt<1>("h0"), _T_2595) @[Mux.scala 80:57]
    node _T_2598 = eq(UInt<12>("hb5a"), addr) @[Mux.scala 80:60]
    node _T_2599 = mux(_T_2598, UInt<1>("h0"), _T_2597) @[Mux.scala 80:57]
    node _T_2600 = eq(UInt<12>("hb17"), addr) @[Mux.scala 80:60]
    node _T_2601 = mux(_T_2600, UInt<1>("h0"), _T_2599) @[Mux.scala 80:57]
    node _T_2602 = eq(UInt<12>("hb7f"), addr) @[Mux.scala 80:60]
    node _T_2603 = mux(_T_2602, UInt<1>("h0"), _T_2601) @[Mux.scala 80:57]
    node _T_2604 = eq(UInt<12>("hb28"), addr) @[Mux.scala 80:60]
    node _T_2605 = mux(_T_2604, UInt<1>("h0"), _T_2603) @[Mux.scala 80:57]
    node _T_2606 = eq(UInt<12>("hb50"), addr) @[Mux.scala 80:60]
    node _T_2607 = mux(_T_2606, UInt<1>("h0"), _T_2605) @[Mux.scala 80:57]
    node _T_2608 = eq(UInt<12>("hb37"), addr) @[Mux.scala 80:60]
    node _T_2609 = mux(_T_2608, UInt<1>("h0"), _T_2607) @[Mux.scala 80:57]
    node _T_2610 = eq(UInt<12>("hb08"), addr) @[Mux.scala 80:60]
    node _T_2611 = mux(_T_2610, UInt<1>("h0"), _T_2609) @[Mux.scala 80:57]
    node _T_2612 = eq(UInt<9>("h143"), addr) @[Mux.scala 80:60]
    node _T_2613 = mux(_T_2612, UInt<1>("h0"), _T_2611) @[Mux.scala 80:57]
    node _T_2614 = eq(UInt<12>("hb6b"), addr) @[Mux.scala 80:60]
    node _T_2615 = mux(_T_2614, UInt<1>("h0"), _T_2613) @[Mux.scala 80:57]
    node _T_2616 = eq(UInt<12>("hb3a"), addr) @[Mux.scala 80:60]
    node _T_2617 = mux(_T_2616, UInt<1>("h0"), _T_2615) @[Mux.scala 80:57]
    node _T_2618 = eq(UInt<10>("h301"), addr) @[Mux.scala 80:60]
    node _T_2619 = mux(_T_2618, UInt<1>("h0"), _T_2617) @[Mux.scala 80:57]
    node _T_2620 = eq(UInt<12>("hb70"), addr) @[Mux.scala 80:60]
    node _T_2621 = mux(_T_2620, UInt<1>("h0"), _T_2619) @[Mux.scala 80:57]
    node _T_2622 = eq(UInt<12>("hb1a"), addr) @[Mux.scala 80:60]
    node _T_2623 = mux(_T_2622, UInt<1>("h0"), _T_2621) @[Mux.scala 80:57]
    node _T_2624 = eq(UInt<12>("hb5f"), addr) @[Mux.scala 80:60]
    node _T_2625 = mux(_T_2624, UInt<1>("h0"), _T_2623) @[Mux.scala 80:57]
    node _T_2626 = eq(UInt<10>("h300"), addr) @[Mux.scala 80:60]
    node _T_2627 = mux(_T_2626, UInt<1>("h0"), _T_2625) @[Mux.scala 80:57]
    node _T_2628 = eq(UInt<12>("hb13"), addr) @[Mux.scala 80:60]
    node _T_2629 = mux(_T_2628, UInt<1>("h0"), _T_2627) @[Mux.scala 80:57]
    node _T_2630 = eq(UInt<12>("hb73"), addr) @[Mux.scala 80:60]
    node _T_2631 = mux(_T_2630, UInt<1>("h0"), _T_2629) @[Mux.scala 80:57]
    node _T_2632 = eq(UInt<12>("hb33"), addr) @[Mux.scala 80:60]
    node _T_2633 = mux(_T_2632, UInt<1>("h0"), _T_2631) @[Mux.scala 80:57]
    node _T_2634 = eq(UInt<12>("hb62"), addr) @[Mux.scala 80:60]
    node _T_2635 = mux(_T_2634, UInt<1>("h0"), _T_2633) @[Mux.scala 80:57]
    node _T_2636 = eq(UInt<12>("hb00"), addr) @[Mux.scala 80:60]
    node _T_2637 = mux(_T_2636, UInt<1>("h0"), _T_2635) @[Mux.scala 80:57]
    node _T_2638 = eq(UInt<10>("h3b0"), addr) @[Mux.scala 80:60]
    node _T_2639 = mux(_T_2638, UInt<1>("h0"), _T_2637) @[Mux.scala 80:57]
    node _T_2640 = eq(UInt<12>("hb3e"), addr) @[Mux.scala 80:60]
    node _T_2641 = mux(_T_2640, UInt<1>("h0"), _T_2639) @[Mux.scala 80:57]
    node _T_2642 = eq(UInt<12>("hb6f"), addr) @[Mux.scala 80:60]
    node _T_2643 = mux(_T_2642, UInt<1>("h0"), _T_2641) @[Mux.scala 80:57]
    node _T_2644 = eq(UInt<12>("hb1e"), addr) @[Mux.scala 80:60]
    node _T_2645 = mux(_T_2644, UInt<1>("h0"), _T_2643) @[Mux.scala 80:57]
    node _T_2646 = eq(UInt<12>("hb53"), addr) @[Mux.scala 80:60]
    node _T_2647 = mux(_T_2646, UInt<1>("h0"), _T_2645) @[Mux.scala 80:57]
    node _T_2648 = eq(UInt<10>("h344"), addr) @[Mux.scala 80:60]
    node _T_2649 = mux(_T_2648, UInt<1>("h0"), _T_2647) @[Mux.scala 80:57]
    node _T_2650 = eq(UInt<12>("hb7e"), addr) @[Mux.scala 80:60]
    node _T_2651 = mux(_T_2650, UInt<1>("h0"), _T_2649) @[Mux.scala 80:57]
    node _T_2652 = eq(UInt<12>("hb2f"), addr) @[Mux.scala 80:60]
    node _T_2653 = mux(_T_2652, UInt<1>("h0"), _T_2651) @[Mux.scala 80:57]
    node _T_2654 = eq(UInt<12>("hb05"), addr) @[Mux.scala 80:60]
    node _T_2655 = mux(_T_2654, UInt<1>("h0"), _T_2653) @[Mux.scala 80:57]
    node _T_2656 = eq(UInt<12>("hb22"), addr) @[Mux.scala 80:60]
    node _T_2657 = mux(_T_2656, UInt<1>("h0"), _T_2655) @[Mux.scala 80:57]
    node _T_2658 = eq(UInt<12>("hb48"), addr) @[Mux.scala 80:60]
    node _T_2659 = mux(_T_2658, UInt<1>("h0"), _T_2657) @[Mux.scala 80:57]
    node _T_2660 = eq(UInt<12>("hb42"), addr) @[Mux.scala 80:60]
    node _T_2661 = mux(_T_2660, UInt<1>("h0"), _T_2659) @[Mux.scala 80:57]
    node _T_2662 = eq(UInt<12>("hb0f"), addr) @[Mux.scala 80:60]
    node _T_2663 = mux(_T_2662, UInt<1>("h0"), _T_2661) @[Mux.scala 80:57]
    node _T_2664 = eq(UInt<12>("hb68"), addr) @[Mux.scala 80:60]
    node _T_2665 = mux(_T_2664, UInt<1>("h0"), _T_2663) @[Mux.scala 80:57]
    node _T_2666 = eq(UInt<12>("hb57"), addr) @[Mux.scala 80:60]
    node _T_2667 = mux(_T_2666, UInt<1>("h0"), _T_2665) @[Mux.scala 80:57]
    node _T_2668 = eq(UInt<12>("hb16"), addr) @[Mux.scala 80:60]
    node _T_2669 = mux(_T_2668, UInt<1>("h0"), _T_2667) @[Mux.scala 80:57]
    node _T_2670 = eq(UInt<12>("hb1b"), addr) @[Mux.scala 80:60]
    node _T_2671 = mux(_T_2670, UInt<1>("h0"), _T_2669) @[Mux.scala 80:57]
    node _T_2672 = eq(UInt<12>("hb2c"), addr) @[Mux.scala 80:60]
    node _T_2673 = mux(_T_2672, UInt<1>("h0"), _T_2671) @[Mux.scala 80:57]
    node _T_2674 = eq(UInt<12>("hb7b"), addr) @[Mux.scala 80:60]
    node _T_2675 = mux(_T_2674, UInt<1>("h0"), _T_2673) @[Mux.scala 80:57]
    node _T_2676 = eq(UInt<12>("hb4c"), addr) @[Mux.scala 80:60]
    node _T_2677 = mux(_T_2676, UInt<1>("h0"), _T_2675) @[Mux.scala 80:57]
    node _T_2678 = eq(UInt<12>("hb20"), addr) @[Mux.scala 80:60]
    node _T_2679 = mux(_T_2678, UInt<1>("h0"), _T_2677) @[Mux.scala 80:57]
    node _T_2680 = eq(UInt<12>("hb31"), addr) @[Mux.scala 80:60]
    node _T_2681 = mux(_T_2680, UInt<1>("h0"), _T_2679) @[Mux.scala 80:57]
    node _T_2682 = eq(UInt<12>("hb3b"), addr) @[Mux.scala 80:60]
    node _T_2683 = mux(_T_2682, UInt<1>("h0"), _T_2681) @[Mux.scala 80:57]
    node _T_2684 = eq(UInt<12>("hb6c"), addr) @[Mux.scala 80:60]
    node _T_2685 = mux(_T_2684, UInt<1>("h0"), _T_2683) @[Mux.scala 80:57]
    node _T_2686 = eq(UInt<12>("hb02"), addr) @[Mux.scala 80:60]
    node _T_2687 = mux(_T_2686, UInt<1>("h0"), _T_2685) @[Mux.scala 80:57]
    node _T_2688 = eq(UInt<10>("h3a3"), addr) @[Mux.scala 80:60]
    node _T_2689 = mux(_T_2688, UInt<1>("h0"), _T_2687) @[Mux.scala 80:57]
    node _T_2690 = eq(UInt<12>("hb45"), addr) @[Mux.scala 80:60]
    node _T_2691 = mux(_T_2690, UInt<1>("h0"), _T_2689) @[Mux.scala 80:57]
    node _T_2692 = eq(UInt<12>("hb36"), addr) @[Mux.scala 80:60]
    node _T_2693 = mux(_T_2692, UInt<1>("h0"), _T_2691) @[Mux.scala 80:57]
    node _T_2694 = eq(UInt<12>("hb0c"), addr) @[Mux.scala 80:60]
    node _T_2695 = mux(_T_2694, UInt<1>("h0"), _T_2693) @[Mux.scala 80:57]
    node _T_2696 = eq(UInt<12>("hb67"), addr) @[Mux.scala 80:60]
    node _T_2697 = mux(_T_2696, UInt<1>("h0"), _T_2695) @[Mux.scala 80:57]
    node _T_2698 = eq(UInt<10>("h303"), addr) @[Mux.scala 80:60]
    node _T_2699 = mux(_T_2698, UInt<1>("h0"), _T_2697) @[Mux.scala 80:57]
    node _T_2700 = eq(UInt<12>("hb5b"), addr) @[Mux.scala 80:60]
    node _T_2701 = mux(_T_2700, UInt<1>("h0"), _T_2699) @[Mux.scala 80:57]
    node _T_2702 = eq(UInt<12>("hb27"), addr) @[Mux.scala 80:60]
    node _T_2703 = mux(_T_2702, UInt<1>("h0"), _T_2701) @[Mux.scala 80:57]
    node _T_2704 = eq(UInt<12>("hb25"), addr) @[Mux.scala 80:60]
    node _T_2705 = mux(_T_2704, UInt<1>("h0"), _T_2703) @[Mux.scala 80:57]
    node _T_2706 = eq(UInt<10>("h3b2"), addr) @[Mux.scala 80:60]
    node _T_2707 = mux(_T_2706, UInt<1>("h0"), _T_2705) @[Mux.scala 80:57]
    node _T_2708 = eq(UInt<12>("hb07"), addr) @[Mux.scala 80:60]
    node _T_2709 = mux(_T_2708, UInt<1>("h0"), _T_2707) @[Mux.scala 80:57]
    node _T_2710 = eq(UInt<12>("hf13"), addr) @[Mux.scala 80:60]
    node _T_2711 = mux(_T_2710, UInt<1>("h0"), _T_2709) @[Mux.scala 80:57]
    node _T_2712 = eq(UInt<12>("hb76"), addr) @[Mux.scala 80:60]
    node _T_2713 = mux(_T_2712, UInt<1>("h0"), _T_2711) @[Mux.scala 80:57]
    node _T_2714 = eq(UInt<12>("hb60"), addr) @[Mux.scala 80:60]
    node _T_2715 = mux(_T_2714, UInt<1>("h0"), _T_2713) @[Mux.scala 80:57]
    node _T_2716 = eq(UInt<10>("h3a1"), addr) @[Mux.scala 80:60]
    node _T_2717 = mux(_T_2716, UInt<1>("h0"), _T_2715) @[Mux.scala 80:57]
    node _T_2718 = eq(UInt<12>("hb56"), addr) @[Mux.scala 80:60]
    node _T_2719 = mux(_T_2718, UInt<1>("h0"), _T_2717) @[Mux.scala 80:57]
    node _T_2720 = eq(UInt<10>("h340"), addr) @[Mux.scala 80:60]
    node _T_2721 = mux(_T_2720, UInt<1>("h0"), _T_2719) @[Mux.scala 80:57]
    node _T_2722 = eq(UInt<12>("hb65"), addr) @[Mux.scala 80:60]
    node _T_2723 = mux(_T_2722, UInt<1>("h0"), _T_2721) @[Mux.scala 80:57]
    node _T_2724 = eq(UInt<12>("hb72"), addr) @[Mux.scala 80:60]
    node _T_2725 = mux(_T_2724, UInt<1>("h0"), _T_2723) @[Mux.scala 80:57]
    node _T_2726 = eq(UInt<12>("hf14"), addr) @[Mux.scala 80:60]
    node _T_2727 = mux(_T_2726, UInt<1>("h0"), _T_2725) @[Mux.scala 80:57]
    node _T_2728 = eq(UInt<10>("h341"), addr) @[Mux.scala 80:60]
    node _T_2729 = mux(_T_2728, UInt<1>("h0"), _T_2727) @[Mux.scala 80:57]
    node _T_2730 = eq(UInt<10>("h343"), addr) @[Mux.scala 80:60]
    node _T_2731 = mux(_T_2730, UInt<1>("h0"), _T_2729) @[Mux.scala 80:57]
    node _T_2732 = eq(UInt<9>("h106"), addr) @[Mux.scala 80:60]
    node _T_2733 = mux(_T_2732, UInt<1>("h0"), _T_2731) @[Mux.scala 80:57]
    node _T_2734 = eq(UInt<12>("hb61"), addr) @[Mux.scala 80:60]
    node _T_2735 = mux(_T_2734, UInt<1>("h0"), _T_2733) @[Mux.scala 80:57]
    node _T_2736 = eq(UInt<10>("h3a0"), addr) @[Mux.scala 80:60]
    node _T_2737 = mux(_T_2736, UInt<1>("h0"), _T_2735) @[Mux.scala 80:57]
    node _T_2738 = eq(UInt<12>("hb1f"), addr) @[Mux.scala 80:60]
    node _T_2739 = mux(_T_2738, UInt<1>("h0"), _T_2737) @[Mux.scala 80:57]
    node _T_2740 = eq(UInt<12>("hb52"), addr) @[Mux.scala 80:60]
    node _T_2741 = mux(_T_2740, UInt<1>("h0"), _T_2739) @[Mux.scala 80:57]
    node _T_2742 = eq(UInt<12>("hb30"), addr) @[Mux.scala 80:60]
    node _T_2743 = mux(_T_2742, UInt<1>("h0"), _T_2741) @[Mux.scala 80:57]
    node _T_2744 = eq(UInt<9>("h142"), addr) @[Mux.scala 80:60]
    node _T_2745 = mux(_T_2744, UInt<1>("h0"), _T_2743) @[Mux.scala 80:57]
    node _T_2746 = eq(UInt<12>("hb3f"), addr) @[Mux.scala 80:60]
    node _T_2747 = mux(_T_2746, UInt<1>("h0"), _T_2745) @[Mux.scala 80:57]
    node _T_2748 = eq(UInt<12>("hb41"), addr) @[Mux.scala 80:60]
    node _T_2749 = mux(_T_2748, UInt<1>("h0"), _T_2747) @[Mux.scala 80:57]
    node _T_2750 = eq(UInt<12>("hb47"), addr) @[Mux.scala 80:60]
    node _T_2751 = mux(_T_2750, UInt<1>("h0"), _T_2749) @[Mux.scala 80:57]
    node _T_2752 = eq(UInt<12>("hb32"), addr) @[Mux.scala 80:60]
    node _T_2753 = mux(_T_2752, UInt<1>("h0"), _T_2751) @[Mux.scala 80:57]
    node _T_2754 = eq(UInt<12>("hb10"), addr) @[Mux.scala 80:60]
    node _T_2755 = mux(_T_2754, UInt<1>("h0"), _T_2753) @[Mux.scala 80:57]
    node _T_2756 = eq(UInt<12>("hb12"), addr) @[Mux.scala 80:60]
    node _T_2757 = mux(_T_2756, UInt<1>("h0"), _T_2755) @[Mux.scala 80:57]
    isIllegalAddr <= _T_2757 @[RegMap.scala 56:17]
    node _T_2758 = eq(addr, UInt<9>("h180")) @[CSR.scala 480:24]
    node resetSatp = and(_T_2758, wen) @[CSR.scala 480:35]
    io.out.bits <= rdata @[CSR.scala 481:15]
    node _T_2759 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 72:12]
    wire rdataDummy : UInt<64> @[CSR.scala 488:24]
    node _T_2760 = eq(isIllegalAccess, UInt<1>("h0")) @[CSR.scala 489:62]
    node _T_2761 = and(wen, _T_2760) @[CSR.scala 489:59]
    node _T_2762 = and(mipReg, _T_2759) @[RegMap.scala 48:84]
    node _T_2763 = and(mipReg, sipMask) @[RegMap.scala 48:84]
    node _T_2764 = eq(UInt<10>("h344"), addr) @[LookupTree.scala 24:34]
    node _T_2765 = eq(UInt<9>("h144"), addr) @[LookupTree.scala 24:34]
    node _T_2766 = mux(_T_2764, _T_2762, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_2767 = mux(_T_2765, _T_2763, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_2768 = or(_T_2766, _T_2767) @[Mux.scala 27:72]
    wire _WIRE_15 : UInt @[Mux.scala 27:72]
    _WIRE_15 <= _T_2768 @[Mux.scala 27:72]
    rdataDummy <= _WIRE_15 @[RegMap.scala 48:11]
    node _T_2769 = eq(addr, UInt<10>("h344")) @[RegMap.scala 50:65]
    node _T_2770 = and(_T_2761, _T_2769) @[RegMap.scala 50:56]
    when _T_2770 : @[RegMap.scala 50:72]
      node _T_2771 = and(wdata, UInt<11>("h77f")) @[BitUtils.scala 32:13]
      node _T_2772 = not(UInt<11>("h77f")) @[BitUtils.scala 32:38]
      node _T_2773 = and(mipReg, _T_2772) @[BitUtils.scala 32:36]
      node _T_2774 = or(_T_2771, _T_2773) @[BitUtils.scala 32:25]
      mipReg <= _T_2774 @[RegMap.scala 50:76]
    node _T_2775 = eq(addr, UInt<9>("h144")) @[RegMap.scala 50:65]
    node _T_2776 = and(_T_2761, _T_2775) @[RegMap.scala 50:56]
    when _T_2776 : @[RegMap.scala 50:72]
      node _T_2777 = and(wdata, sipMask) @[BitUtils.scala 32:13]
      node _T_2778 = not(sipMask) @[BitUtils.scala 32:38]
      node _T_2779 = and(mipReg, _T_2778) @[BitUtils.scala 32:36]
      node _T_2780 = or(_T_2777, _T_2779) @[BitUtils.scala 32:25]
      mipReg <= _T_2780 @[RegMap.scala 50:76]
    wire ret : UInt<1> @[CSR.scala 492:17]
    node _T_2781 = eq(addr, UInt<1>("h1")) @[CSR.scala 493:23]
    node _T_2782 = eq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 493:46]
    node _T_2783 = and(_T_2781, _T_2782) @[CSR.scala 493:38]
    node _T_2784 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 493:67]
    node isEbreak = and(_T_2783, _T_2784) @[CSR.scala 493:64]
    node _T_2785 = eq(addr, UInt<1>("h0")) @[CSR.scala 494:22]
    node _T_2786 = eq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 494:44]
    node _T_2787 = and(_T_2785, _T_2786) @[CSR.scala 494:36]
    node _T_2788 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 494:65]
    node isEcall = and(_T_2787, _T_2788) @[CSR.scala 494:62]
    node _T_2789 = eq(addr, UInt<10>("h302")) @[CSR.scala 495:21]
    node _T_2790 = eq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 495:44]
    node _T_2791 = and(_T_2789, _T_2790) @[CSR.scala 495:36]
    node _T_2792 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 495:65]
    node isMret = and(_T_2791, _T_2792) @[CSR.scala 495:62]
    node _T_2793 = eq(addr, UInt<9>("h102")) @[CSR.scala 496:21]
    node _T_2794 = eq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 496:44]
    node _T_2795 = and(_T_2793, _T_2794) @[CSR.scala 496:36]
    node _T_2796 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 496:65]
    node isSret = and(_T_2795, _T_2796) @[CSR.scala 496:62]
    node _T_2797 = eq(addr, UInt<2>("h2")) @[CSR.scala 497:21]
    node _T_2798 = eq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 497:44]
    node _T_2799 = and(_T_2797, _T_2798) @[CSR.scala 497:36]
    node _T_2800 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 497:65]
    node isUret = and(_T_2799, _T_2800) @[CSR.scala 497:62]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_2801 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_2802 = tail(_T_2801, 1) @[GTimer.scala 25:12]
    REG <= _T_2802 @[GTimer.scala 25:7]
    wire _WIRE_16 : UInt<1>
    _WIRE_16 <= UInt<1>("h0")
    node _T_2803 = and(wen, _WIRE_16) @[Debug.scala 55:16]
    when _T_2803 : @[Debug.scala 55:31]
      node _T_2804 = asUInt(reset) @[Debug.scala 56:24]
      node _T_2805 = eq(_T_2804, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_2805 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG) : SIM @[Debug.scala 56:24]
      node _T_2806 = asUInt(reset) @[Debug.scala 57:13]
      node _T_2807 = eq(_T_2806, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_2807 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "csr write: pc %x addr %x rdata %x wdata %x func %x\n", io.cfIn.pc, addr, rdata, wdata, io.in.bits.func) : SIM_1 @[Debug.scala 57:13]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_2808 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_2809 = tail(_T_2808, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_2809 @[GTimer.scala 25:7]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_2810 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_2811 = tail(_T_2810, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_2811 @[GTimer.scala 25:7]
    wire _WIRE_17 : UInt<1>
    _WIRE_17 <= UInt<1>("h0")
    node _T_2812 = and(wen, _WIRE_17) @[Debug.scala 55:16]
    when _T_2812 : @[Debug.scala 55:31]
      node _T_2813 = asUInt(reset) @[Debug.scala 56:24]
      node _T_2814 = eq(_T_2813, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_2814 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_2) : SIM_2 @[Debug.scala 56:24]
      node _T_2815 = asUInt(reset) @[Debug.scala 57:13]
      node _T_2816 = eq(_T_2815, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_2816 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[MST] time %d pc %x mstatus %x mideleg %x medeleg %x mode %x\n", REG_1, io.cfIn.pc, mstatus, mideleg, medeleg, priviledgeMode) : SIM_3 @[Debug.scala 57:13]
    io.imemMMU.priviledgeMode <= priviledgeMode @[CSR.scala 528:29]
    node _T_2817 = bits(mstatusStruct.mprv, 0, 0) @[CSR.scala 529:55]
    node _T_2818 = mux(_T_2817, mstatusStruct.mpp, priviledgeMode) @[CSR.scala 529:35]
    io.dmemMMU.priviledgeMode <= _T_2818 @[CSR.scala 529:29]
    node _T_2819 = bits(mstatusStruct.sum, 0, 0) @[CSR.scala 530:46]
    io.imemMMU.status_sum <= _T_2819 @[CSR.scala 530:25]
    node _T_2820 = bits(mstatusStruct.sum, 0, 0) @[CSR.scala 531:46]
    io.dmemMMU.status_sum <= _T_2820 @[CSR.scala 531:25]
    io.imemMMU.status_mxr is invalid @[CSR.scala 532:25]
    node _T_2821 = bits(mstatusStruct.mxr, 0, 0) @[CSR.scala 533:46]
    io.dmemMMU.status_mxr <= _T_2821 @[CSR.scala 533:25]
    wire hasInstrPageFault : UInt<1> @[CSR.scala 535:31]
    wire hasLoadPageFault : UInt<1> @[CSR.scala 536:30]
    wire hasStorePageFault : UInt<1> @[CSR.scala 537:31]
    wire hasStoreAddrMisaligned : UInt<1> @[CSR.scala 538:36]
    wire hasLoadAddrMisaligned : UInt<1> @[CSR.scala 539:35]
    wire dmemPagefaultAddr : UInt<39> @[CSR.scala 541:31]
    wire dmemAddrMisalignedAddr : UInt<39> @[CSR.scala 542:36]
    wire lsuAddr : UInt<64>
    lsuAddr <= UInt<64>("h0")
    node _T_2822 = and(io.cfIn.exceptionVec[12], io.in.valid) @[CSR.scala 554:63]
    hasInstrPageFault <= _T_2822 @[CSR.scala 554:23]
    hasLoadPageFault <= io.dmemMMU.loadPF @[CSR.scala 555:22]
    hasStorePageFault <= io.dmemMMU.storePF @[CSR.scala 556:23]
    hasStoreAddrMisaligned <= io.cfIn.exceptionVec[6] @[CSR.scala 557:28]
    hasLoadAddrMisaligned <= io.cfIn.exceptionVec[4] @[CSR.scala 558:27]
    dmemPagefaultAddr <= io.dmemMMU.addr @[CSR.scala 559:23]
    dmemAddrMisalignedAddr <= lsuAddr @[CSR.scala 560:28]
    node _T_2823 = or(hasInstrPageFault, hasLoadPageFault) @[CSR.scala 563:26]
    node _T_2824 = or(_T_2823, hasStorePageFault) @[CSR.scala 563:46]
    when _T_2824 : @[CSR.scala 563:67]
      node _T_2825 = add(io.cfIn.pc, UInt<2>("h2")) @[CSR.scala 564:88]
      node _T_2826 = tail(_T_2825, 1) @[CSR.scala 564:88]
      node _T_2827 = bits(_T_2826, 38, 0) @[CSR.scala 564:94]
      node _T_2828 = bits(_T_2827, 38, 38) @[BitUtils.scala 39:20]
      node _T_2829 = bits(_T_2828, 0, 0) @[Bitwise.scala 72:15]
      node _T_2830 = mux(_T_2829, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
      node _T_2831 = cat(_T_2830, _T_2827) @[Cat.scala 30:58]
      node _T_2832 = bits(io.cfIn.pc, 38, 0) @[CSR.scala 564:136]
      node _T_2833 = bits(_T_2832, 38, 38) @[BitUtils.scala 39:20]
      node _T_2834 = bits(_T_2833, 0, 0) @[Bitwise.scala 72:15]
      node _T_2835 = mux(_T_2834, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
      node _T_2836 = cat(_T_2835, _T_2832) @[Cat.scala 30:58]
      node _T_2837 = mux(io.cfIn.crossPageIPFFix, _T_2831, _T_2836) @[CSR.scala 564:42]
      node _T_2838 = bits(dmemPagefaultAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_2839 = bits(_T_2838, 0, 0) @[Bitwise.scala 72:15]
      node _T_2840 = mux(_T_2839, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
      node _T_2841 = cat(_T_2840, dmemPagefaultAddr) @[Cat.scala 30:58]
      node _T_2842 = mux(hasInstrPageFault, _T_2837, _T_2841) @[CSR.scala 564:19]
      node _T_2843 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 565:25]
      when _T_2843 : @[CSR.scala 565:35]
        mtval <= _T_2842 @[CSR.scala 566:13]
      else :
        stval <= _T_2842 @[CSR.scala 568:13]
      reg REG_3 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_2844 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_2845 = tail(_T_2844, 1) @[GTimer.scala 25:12]
      REG_3 <= _T_2845 @[GTimer.scala 25:7]
      node _T_2846 = bits(dmemPagefaultAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_2847 = bits(_T_2846, 0, 0) @[Bitwise.scala 72:15]
      node _T_2848 = mux(_T_2847, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
      node _T_2849 = cat(_T_2848, dmemPagefaultAddr) @[Cat.scala 30:58]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_2850 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_2851 = tail(_T_2850, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_2851 @[GTimer.scala 25:7]
      wire _WIRE_18 : UInt<1>
      _WIRE_18 <= UInt<1>("h0")
      node _T_2852 = and(UInt<1>("h1"), _WIRE_18) @[Debug.scala 55:16]
      when _T_2852 : @[Debug.scala 55:31]
        node _T_2853 = asUInt(reset) @[Debug.scala 56:24]
        node _T_2854 = eq(_T_2853, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_2854 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_4) : SIM_4 @[Debug.scala 56:24]
        node _T_2855 = asUInt(reset) @[Debug.scala 57:13]
        node _T_2856 = eq(_T_2855, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_2856 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[PF] %d: ipf %b tval %x := addr %x pc %x priviledgeMode %x\n", REG_3, hasInstrPageFault, _T_2842, _T_2849, io.cfIn.pc, priviledgeMode) : SIM_5 @[Debug.scala 57:13]
    node _T_2857 = or(hasLoadAddrMisaligned, hasStoreAddrMisaligned) @[CSR.scala 573:30]
    when _T_2857 : @[CSR.scala 574:3]
      node _T_2858 = bits(dmemAddrMisalignedAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_2859 = bits(_T_2858, 0, 0) @[Bitwise.scala 72:15]
      node _T_2860 = mux(_T_2859, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
      node _T_2861 = cat(_T_2860, dmemAddrMisalignedAddr) @[Cat.scala 30:58]
      mtval <= _T_2861 @[CSR.scala 575:11]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_2862 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_2863 = tail(_T_2862, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_2863 @[GTimer.scala 25:7]
      node _T_2864 = bits(dmemAddrMisalignedAddr, 38, 38) @[BitUtils.scala 39:20]
      node _T_2865 = bits(_T_2864, 0, 0) @[Bitwise.scala 72:15]
      node _T_2866 = mux(_T_2865, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
      node _T_2867 = cat(_T_2866, dmemAddrMisalignedAddr) @[Cat.scala 30:58]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_2868 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_2869 = tail(_T_2868, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_2869 @[GTimer.scala 25:7]
      wire _WIRE_19 : UInt<1>
      _WIRE_19 <= UInt<1>("h0")
      node _T_2870 = and(UInt<1>("h1"), _WIRE_19) @[Debug.scala 55:16]
      when _T_2870 : @[Debug.scala 55:31]
        node _T_2871 = asUInt(reset) @[Debug.scala 56:24]
        node _T_2872 = eq(_T_2871, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_2872 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_6) : SIM_6 @[Debug.scala 56:24]
        node _T_2873 = asUInt(reset) @[Debug.scala 57:13]
        node _T_2874 = eq(_T_2873, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_2874 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ML] %d: addr %x pc %x priviledgeMode %x\n", REG_5, _T_2867, io.cfIn.pc, priviledgeMode) : SIM_7 @[Debug.scala 57:13]
    wire mtip : UInt<1>
    mtip <= UInt<1>("h0")
    wire meip : UInt<1>
    meip <= UInt<1>("h0")
    wire msip : UInt<1>
    msip <= UInt<1>("h0")
    mipWire.t.m <= mtip @[CSR.scala 589:15]
    mipWire.e.m <= meip @[CSR.scala 590:15]
    mipWire.s.m <= msip @[CSR.scala 591:15]
    wire mipRaiseIntr : { e : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, t : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, s : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
    mipRaiseIntr.s.u <= mip.s.u
    mipRaiseIntr.s.s <= mip.s.s
    mipRaiseIntr.s.h <= mip.s.h
    mipRaiseIntr.s.m <= mip.s.m
    mipRaiseIntr.t.u <= mip.t.u
    mipRaiseIntr.t.s <= mip.t.s
    mipRaiseIntr.t.h <= mip.t.h
    mipRaiseIntr.t.m <= mip.t.m
    mipRaiseIntr.e.u <= mip.e.u
    mipRaiseIntr.e.s <= mip.e.s
    mipRaiseIntr.e.h <= mip.e.h
    mipRaiseIntr.e.m <= mip.e.m
    node _T_2875 = or(mip.e.s, meip) @[CSR.scala 597:31]
    mipRaiseIntr.e.s <= _T_2875 @[CSR.scala 597:20]
    node lo_lo_hi_4 = cat(mipRaiseIntr.s.h, mipRaiseIntr.s.s) @[CSR.scala 599:41]
    node lo_lo_4 = cat(lo_lo_hi_4, mipRaiseIntr.s.u) @[CSR.scala 599:41]
    node lo_hi_hi_4 = cat(mipRaiseIntr.t.s, mipRaiseIntr.t.u) @[CSR.scala 599:41]
    node lo_hi_4 = cat(lo_hi_hi_4, mipRaiseIntr.s.m) @[CSR.scala 599:41]
    node lo_4 = cat(lo_hi_4, lo_lo_4) @[CSR.scala 599:41]
    node hi_lo_hi_4 = cat(mipRaiseIntr.e.u, mipRaiseIntr.t.m) @[CSR.scala 599:41]
    node hi_lo_4 = cat(hi_lo_hi_4, mipRaiseIntr.t.h) @[CSR.scala 599:41]
    node hi_hi_hi_4 = cat(mipRaiseIntr.e.m, mipRaiseIntr.e.h) @[CSR.scala 599:41]
    node hi_hi_4 = cat(hi_hi_hi_4, mipRaiseIntr.e.s) @[CSR.scala 599:41]
    node hi_4 = cat(hi_hi_4, hi_lo_4) @[CSR.scala 599:41]
    node _T_2876 = cat(hi_4, lo_4) @[CSR.scala 599:41]
    node ideleg = and(mideleg, _T_2876) @[CSR.scala 599:26]
    wire intrVecEnable : UInt<1>[12] @[CSR.scala 603:27]
    node _T_2877 = bits(ideleg, 0, 0) @[CSR.scala 604:28]
    node _T_2878 = bits(ideleg, 1, 1) @[CSR.scala 604:28]
    node _T_2879 = bits(ideleg, 2, 2) @[CSR.scala 604:28]
    node _T_2880 = bits(ideleg, 3, 3) @[CSR.scala 604:28]
    node _T_2881 = bits(ideleg, 4, 4) @[CSR.scala 604:28]
    node _T_2882 = bits(ideleg, 5, 5) @[CSR.scala 604:28]
    node _T_2883 = bits(ideleg, 6, 6) @[CSR.scala 604:28]
    node _T_2884 = bits(ideleg, 7, 7) @[CSR.scala 604:28]
    node _T_2885 = bits(ideleg, 8, 8) @[CSR.scala 604:28]
    node _T_2886 = bits(ideleg, 9, 9) @[CSR.scala 604:28]
    node _T_2887 = bits(ideleg, 10, 10) @[CSR.scala 604:28]
    node _T_2888 = bits(ideleg, 11, 11) @[CSR.scala 604:28]
    node _T_2889 = bits(ideleg, 12, 12) @[CSR.scala 604:28]
    node _T_2890 = bits(ideleg, 13, 13) @[CSR.scala 604:28]
    node _T_2891 = bits(ideleg, 14, 14) @[CSR.scala 604:28]
    node _T_2892 = bits(ideleg, 15, 15) @[CSR.scala 604:28]
    node _T_2893 = bits(ideleg, 16, 16) @[CSR.scala 604:28]
    node _T_2894 = bits(ideleg, 17, 17) @[CSR.scala 604:28]
    node _T_2895 = bits(ideleg, 18, 18) @[CSR.scala 604:28]
    node _T_2896 = bits(ideleg, 19, 19) @[CSR.scala 604:28]
    node _T_2897 = bits(ideleg, 20, 20) @[CSR.scala 604:28]
    node _T_2898 = bits(ideleg, 21, 21) @[CSR.scala 604:28]
    node _T_2899 = bits(ideleg, 22, 22) @[CSR.scala 604:28]
    node _T_2900 = bits(ideleg, 23, 23) @[CSR.scala 604:28]
    node _T_2901 = bits(ideleg, 24, 24) @[CSR.scala 604:28]
    node _T_2902 = bits(ideleg, 25, 25) @[CSR.scala 604:28]
    node _T_2903 = bits(ideleg, 26, 26) @[CSR.scala 604:28]
    node _T_2904 = bits(ideleg, 27, 27) @[CSR.scala 604:28]
    node _T_2905 = bits(ideleg, 28, 28) @[CSR.scala 604:28]
    node _T_2906 = bits(ideleg, 29, 29) @[CSR.scala 604:28]
    node _T_2907 = bits(ideleg, 30, 30) @[CSR.scala 604:28]
    node _T_2908 = bits(ideleg, 31, 31) @[CSR.scala 604:28]
    node _T_2909 = bits(ideleg, 32, 32) @[CSR.scala 604:28]
    node _T_2910 = bits(ideleg, 33, 33) @[CSR.scala 604:28]
    node _T_2911 = bits(ideleg, 34, 34) @[CSR.scala 604:28]
    node _T_2912 = bits(ideleg, 35, 35) @[CSR.scala 604:28]
    node _T_2913 = bits(ideleg, 36, 36) @[CSR.scala 604:28]
    node _T_2914 = bits(ideleg, 37, 37) @[CSR.scala 604:28]
    node _T_2915 = bits(ideleg, 38, 38) @[CSR.scala 604:28]
    node _T_2916 = bits(ideleg, 39, 39) @[CSR.scala 604:28]
    node _T_2917 = bits(ideleg, 40, 40) @[CSR.scala 604:28]
    node _T_2918 = bits(ideleg, 41, 41) @[CSR.scala 604:28]
    node _T_2919 = bits(ideleg, 42, 42) @[CSR.scala 604:28]
    node _T_2920 = bits(ideleg, 43, 43) @[CSR.scala 604:28]
    node _T_2921 = bits(ideleg, 44, 44) @[CSR.scala 604:28]
    node _T_2922 = bits(ideleg, 45, 45) @[CSR.scala 604:28]
    node _T_2923 = bits(ideleg, 46, 46) @[CSR.scala 604:28]
    node _T_2924 = bits(ideleg, 47, 47) @[CSR.scala 604:28]
    node _T_2925 = bits(ideleg, 48, 48) @[CSR.scala 604:28]
    node _T_2926 = bits(ideleg, 49, 49) @[CSR.scala 604:28]
    node _T_2927 = bits(ideleg, 50, 50) @[CSR.scala 604:28]
    node _T_2928 = bits(ideleg, 51, 51) @[CSR.scala 604:28]
    node _T_2929 = bits(ideleg, 52, 52) @[CSR.scala 604:28]
    node _T_2930 = bits(ideleg, 53, 53) @[CSR.scala 604:28]
    node _T_2931 = bits(ideleg, 54, 54) @[CSR.scala 604:28]
    node _T_2932 = bits(ideleg, 55, 55) @[CSR.scala 604:28]
    node _T_2933 = bits(ideleg, 56, 56) @[CSR.scala 604:28]
    node _T_2934 = bits(ideleg, 57, 57) @[CSR.scala 604:28]
    node _T_2935 = bits(ideleg, 58, 58) @[CSR.scala 604:28]
    node _T_2936 = bits(ideleg, 59, 59) @[CSR.scala 604:28]
    node _T_2937 = bits(ideleg, 60, 60) @[CSR.scala 604:28]
    node _T_2938 = bits(ideleg, 61, 61) @[CSR.scala 604:28]
    node _T_2939 = bits(ideleg, 62, 62) @[CSR.scala 604:28]
    node _T_2940 = bits(ideleg, 63, 63) @[CSR.scala 604:28]
    node _T_2941 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2942 = and(_T_2941, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2943 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2944 = or(_T_2942, _T_2943) @[CSR.scala 600:106]
    node _T_2945 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_2946 = and(_T_2945, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_2947 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_2948 = or(_T_2946, _T_2947) @[CSR.scala 601:87]
    node _T_2949 = mux(_T_2877, _T_2944, _T_2948) @[CSR.scala 600:51]
    intrVecEnable[0] <= _T_2949 @[CSR.scala 604:56]
    node _T_2950 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2951 = and(_T_2950, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2952 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2953 = or(_T_2951, _T_2952) @[CSR.scala 600:106]
    node _T_2954 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_2955 = and(_T_2954, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_2956 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_2957 = or(_T_2955, _T_2956) @[CSR.scala 601:87]
    node _T_2958 = mux(_T_2878, _T_2953, _T_2957) @[CSR.scala 600:51]
    intrVecEnable[1] <= _T_2958 @[CSR.scala 604:56]
    node _T_2959 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2960 = and(_T_2959, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2961 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2962 = or(_T_2960, _T_2961) @[CSR.scala 600:106]
    node _T_2963 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_2964 = and(_T_2963, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_2965 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_2966 = or(_T_2964, _T_2965) @[CSR.scala 601:87]
    node _T_2967 = mux(_T_2879, _T_2962, _T_2966) @[CSR.scala 600:51]
    intrVecEnable[2] <= _T_2967 @[CSR.scala 604:56]
    node _T_2968 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2969 = and(_T_2968, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2970 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2971 = or(_T_2969, _T_2970) @[CSR.scala 600:106]
    node _T_2972 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_2973 = and(_T_2972, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_2974 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_2975 = or(_T_2973, _T_2974) @[CSR.scala 601:87]
    node _T_2976 = mux(_T_2880, _T_2971, _T_2975) @[CSR.scala 600:51]
    intrVecEnable[3] <= _T_2976 @[CSR.scala 604:56]
    node _T_2977 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2978 = and(_T_2977, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2979 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2980 = or(_T_2978, _T_2979) @[CSR.scala 600:106]
    node _T_2981 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_2982 = and(_T_2981, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_2983 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_2984 = or(_T_2982, _T_2983) @[CSR.scala 601:87]
    node _T_2985 = mux(_T_2881, _T_2980, _T_2984) @[CSR.scala 600:51]
    intrVecEnable[4] <= _T_2985 @[CSR.scala 604:56]
    node _T_2986 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2987 = and(_T_2986, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2988 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2989 = or(_T_2987, _T_2988) @[CSR.scala 600:106]
    node _T_2990 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_2991 = and(_T_2990, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_2992 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_2993 = or(_T_2991, _T_2992) @[CSR.scala 601:87]
    node _T_2994 = mux(_T_2882, _T_2989, _T_2993) @[CSR.scala 600:51]
    intrVecEnable[5] <= _T_2994 @[CSR.scala 604:56]
    node _T_2995 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_2996 = and(_T_2995, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_2997 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_2998 = or(_T_2996, _T_2997) @[CSR.scala 600:106]
    node _T_2999 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_3000 = and(_T_2999, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_3001 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_3002 = or(_T_3000, _T_3001) @[CSR.scala 601:87]
    node _T_3003 = mux(_T_2883, _T_2998, _T_3002) @[CSR.scala 600:51]
    intrVecEnable[6] <= _T_3003 @[CSR.scala 604:56]
    node _T_3004 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_3005 = and(_T_3004, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_3006 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_3007 = or(_T_3005, _T_3006) @[CSR.scala 600:106]
    node _T_3008 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_3009 = and(_T_3008, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_3010 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_3011 = or(_T_3009, _T_3010) @[CSR.scala 601:87]
    node _T_3012 = mux(_T_2884, _T_3007, _T_3011) @[CSR.scala 600:51]
    intrVecEnable[7] <= _T_3012 @[CSR.scala 604:56]
    node _T_3013 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_3014 = and(_T_3013, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_3015 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_3016 = or(_T_3014, _T_3015) @[CSR.scala 600:106]
    node _T_3017 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_3018 = and(_T_3017, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_3019 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_3020 = or(_T_3018, _T_3019) @[CSR.scala 601:87]
    node _T_3021 = mux(_T_2885, _T_3016, _T_3020) @[CSR.scala 600:51]
    intrVecEnable[8] <= _T_3021 @[CSR.scala 604:56]
    node _T_3022 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_3023 = and(_T_3022, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_3024 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_3025 = or(_T_3023, _T_3024) @[CSR.scala 600:106]
    node _T_3026 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_3027 = and(_T_3026, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_3028 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_3029 = or(_T_3027, _T_3028) @[CSR.scala 601:87]
    node _T_3030 = mux(_T_2886, _T_3025, _T_3029) @[CSR.scala 600:51]
    intrVecEnable[9] <= _T_3030 @[CSR.scala 604:56]
    node _T_3031 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_3032 = and(_T_3031, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_3033 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_3034 = or(_T_3032, _T_3033) @[CSR.scala 600:106]
    node _T_3035 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_3036 = and(_T_3035, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_3037 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_3038 = or(_T_3036, _T_3037) @[CSR.scala 601:87]
    node _T_3039 = mux(_T_2887, _T_3034, _T_3038) @[CSR.scala 600:51]
    intrVecEnable[10] <= _T_3039 @[CSR.scala 604:56]
    node _T_3040 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:72]
    node _T_3041 = and(_T_3040, mstatusStruct.ie.s) @[CSR.scala 600:83]
    node _T_3042 = lt(priviledgeMode, UInt<1>("h1")) @[CSR.scala 600:125]
    node _T_3043 = or(_T_3041, _T_3042) @[CSR.scala 600:106]
    node _T_3044 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:53]
    node _T_3045 = and(_T_3044, mstatusStruct.ie.m) @[CSR.scala 601:64]
    node _T_3046 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 601:106]
    node _T_3047 = or(_T_3045, _T_3046) @[CSR.scala 601:87]
    node _T_3048 = mux(_T_2888, _T_3043, _T_3047) @[CSR.scala 600:51]
    intrVecEnable[11] <= _T_3048 @[CSR.scala 604:56]
    node _T_3049 = bits(mie, 11, 0) @[CSR.scala 605:20]
    node lo_lo_hi_5 = cat(mipRaiseIntr.s.h, mipRaiseIntr.s.s) @[CSR.scala 605:42]
    node lo_lo_5 = cat(lo_lo_hi_5, mipRaiseIntr.s.u) @[CSR.scala 605:42]
    node lo_hi_hi_5 = cat(mipRaiseIntr.t.s, mipRaiseIntr.t.u) @[CSR.scala 605:42]
    node lo_hi_5 = cat(lo_hi_hi_5, mipRaiseIntr.s.m) @[CSR.scala 605:42]
    node lo_5 = cat(lo_hi_5, lo_lo_5) @[CSR.scala 605:42]
    node hi_lo_hi_5 = cat(mipRaiseIntr.e.u, mipRaiseIntr.t.m) @[CSR.scala 605:42]
    node hi_lo_5 = cat(hi_lo_hi_5, mipRaiseIntr.t.h) @[CSR.scala 605:42]
    node hi_hi_hi_5 = cat(mipRaiseIntr.e.m, mipRaiseIntr.e.h) @[CSR.scala 605:42]
    node hi_hi_5 = cat(hi_hi_hi_5, mipRaiseIntr.e.s) @[CSR.scala 605:42]
    node hi_5 = cat(hi_hi_5, hi_lo_5) @[CSR.scala 605:42]
    node _T_3050 = cat(hi_5, lo_5) @[CSR.scala 605:42]
    node _T_3051 = and(_T_3049, _T_3050) @[CSR.scala 605:27]
    node lo_lo_hi_6 = cat(intrVecEnable[2], intrVecEnable[1]) @[CSR.scala 605:65]
    node lo_lo_6 = cat(lo_lo_hi_6, intrVecEnable[0]) @[CSR.scala 605:65]
    node lo_hi_hi_6 = cat(intrVecEnable[5], intrVecEnable[4]) @[CSR.scala 605:65]
    node lo_hi_6 = cat(lo_hi_hi_6, intrVecEnable[3]) @[CSR.scala 605:65]
    node lo_6 = cat(lo_hi_6, lo_lo_6) @[CSR.scala 605:65]
    node hi_lo_hi_6 = cat(intrVecEnable[8], intrVecEnable[7]) @[CSR.scala 605:65]
    node hi_lo_6 = cat(hi_lo_hi_6, intrVecEnable[6]) @[CSR.scala 605:65]
    node hi_hi_hi_6 = cat(intrVecEnable[11], intrVecEnable[10]) @[CSR.scala 605:65]
    node hi_hi_6 = cat(hi_hi_hi_6, intrVecEnable[9]) @[CSR.scala 605:65]
    node hi_6 = cat(hi_hi_6, hi_lo_6) @[CSR.scala 605:65]
    node _T_3052 = cat(hi_6, lo_6) @[CSR.scala 605:65]
    node intrVec = and(_T_3051, _T_3052) @[CSR.scala 605:49]
    node _T_3053 = mux(io.cfIn.intrVec[4], UInt<3>("h4"), UInt<1>("h0")) @[CSR.scala 609:69]
    node _T_3054 = mux(io.cfIn.intrVec[8], UInt<4>("h8"), _T_3053) @[CSR.scala 609:69]
    node _T_3055 = mux(io.cfIn.intrVec[0], UInt<1>("h0"), _T_3054) @[CSR.scala 609:69]
    node _T_3056 = mux(io.cfIn.intrVec[5], UInt<3>("h5"), _T_3055) @[CSR.scala 609:69]
    node _T_3057 = mux(io.cfIn.intrVec[9], UInt<4>("h9"), _T_3056) @[CSR.scala 609:69]
    node _T_3058 = mux(io.cfIn.intrVec[1], UInt<1>("h1"), _T_3057) @[CSR.scala 609:69]
    node _T_3059 = mux(io.cfIn.intrVec[7], UInt<3>("h7"), _T_3058) @[CSR.scala 609:69]
    node _T_3060 = mux(io.cfIn.intrVec[11], UInt<4>("hb"), _T_3059) @[CSR.scala 609:69]
    node intrNO = mux(io.cfIn.intrVec[3], UInt<2>("h3"), _T_3060) @[CSR.scala 609:69]
    node lo_lo_hi_7 = cat(io.cfIn.intrVec[2], io.cfIn.intrVec[1]) @[CSR.scala 611:35]
    node lo_lo_7 = cat(lo_lo_hi_7, io.cfIn.intrVec[0]) @[CSR.scala 611:35]
    node lo_hi_hi_7 = cat(io.cfIn.intrVec[5], io.cfIn.intrVec[4]) @[CSR.scala 611:35]
    node lo_hi_7 = cat(lo_hi_hi_7, io.cfIn.intrVec[3]) @[CSR.scala 611:35]
    node lo_7 = cat(lo_hi_7, lo_lo_7) @[CSR.scala 611:35]
    node hi_lo_hi_7 = cat(io.cfIn.intrVec[8], io.cfIn.intrVec[7]) @[CSR.scala 611:35]
    node hi_lo_7 = cat(hi_lo_hi_7, io.cfIn.intrVec[6]) @[CSR.scala 611:35]
    node hi_hi_hi_7 = cat(io.cfIn.intrVec[11], io.cfIn.intrVec[10]) @[CSR.scala 611:35]
    node hi_hi_7 = cat(hi_hi_hi_7, io.cfIn.intrVec[9]) @[CSR.scala 611:35]
    node hi_7 = cat(hi_hi_7, hi_lo_7) @[CSR.scala 611:35]
    node _T_3061 = cat(hi_7, lo_7) @[CSR.scala 611:35]
    node raiseIntr = orr(_T_3061) @[CSR.scala 611:42]
    wire csrExceptionVec : UInt<1>[16] @[CSR.scala 616:29]
    csrExceptionVec[0] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[1] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[2] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[3] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[4] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[5] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[6] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[7] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[8] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[9] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[10] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[11] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[12] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[13] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[14] <= UInt<1>("h0") @[CSR.scala 617:25]
    csrExceptionVec[15] <= UInt<1>("h0") @[CSR.scala 617:25]
    node _T_3062 = and(io.in.valid, isEbreak) @[CSR.scala 618:46]
    csrExceptionVec[3] <= _T_3062 @[CSR.scala 618:31]
    node _T_3063 = eq(priviledgeMode, UInt<2>("h3")) @[CSR.scala 619:45]
    node _T_3064 = and(_T_3063, io.in.valid) @[CSR.scala 619:55]
    node _T_3065 = and(_T_3064, isEcall) @[CSR.scala 619:70]
    csrExceptionVec[11] <= _T_3065 @[CSR.scala 619:27]
    node _T_3066 = eq(priviledgeMode, UInt<1>("h1")) @[CSR.scala 620:45]
    node _T_3067 = and(_T_3066, io.in.valid) @[CSR.scala 620:55]
    node _T_3068 = and(_T_3067, isEcall) @[CSR.scala 620:70]
    csrExceptionVec[9] <= _T_3068 @[CSR.scala 620:27]
    node _T_3069 = eq(priviledgeMode, UInt<1>("h0")) @[CSR.scala 621:45]
    node _T_3070 = and(_T_3069, io.in.valid) @[CSR.scala 621:55]
    node _T_3071 = and(_T_3070, isEcall) @[CSR.scala 621:70]
    csrExceptionVec[8] <= _T_3071 @[CSR.scala 621:27]
    node _T_3072 = or(isIllegalAddr, isIllegalAccess) @[CSR.scala 622:51]
    node _T_3073 = and(_T_3072, wen) @[CSR.scala 622:71]
    node _T_3074 = eq(io.isBackendException, UInt<1>("h0")) @[CSR.scala 622:81]
    node _T_3075 = and(_T_3073, _T_3074) @[CSR.scala 622:78]
    csrExceptionVec[2] <= _T_3075 @[CSR.scala 622:33]
    csrExceptionVec[13] <= hasLoadPageFault @[CSR.scala 623:34]
    csrExceptionVec[15] <= hasStorePageFault @[CSR.scala 624:35]
    node lo_lo_lo = cat(csrExceptionVec[1], csrExceptionVec[0]) @[CSR.scala 626:49]
    node lo_lo_hi_8 = cat(csrExceptionVec[3], csrExceptionVec[2]) @[CSR.scala 626:49]
    node lo_lo_8 = cat(lo_lo_hi_8, lo_lo_lo) @[CSR.scala 626:49]
    node lo_hi_lo = cat(csrExceptionVec[5], csrExceptionVec[4]) @[CSR.scala 626:49]
    node lo_hi_hi_8 = cat(csrExceptionVec[7], csrExceptionVec[6]) @[CSR.scala 626:49]
    node lo_hi_8 = cat(lo_hi_hi_8, lo_hi_lo) @[CSR.scala 626:49]
    node lo_8 = cat(lo_hi_8, lo_lo_8) @[CSR.scala 626:49]
    node hi_lo_lo = cat(csrExceptionVec[9], csrExceptionVec[8]) @[CSR.scala 626:49]
    node hi_lo_hi_8 = cat(csrExceptionVec[11], csrExceptionVec[10]) @[CSR.scala 626:49]
    node hi_lo_8 = cat(hi_lo_hi_8, hi_lo_lo) @[CSR.scala 626:49]
    node hi_hi_lo = cat(csrExceptionVec[13], csrExceptionVec[12]) @[CSR.scala 626:49]
    node hi_hi_hi_8 = cat(csrExceptionVec[15], csrExceptionVec[14]) @[CSR.scala 626:49]
    node hi_hi_8 = cat(hi_hi_hi_8, hi_hi_lo) @[CSR.scala 626:49]
    node hi_8 = cat(hi_hi_8, hi_lo_8) @[CSR.scala 626:49]
    node _T_3076 = cat(hi_8, lo_8) @[CSR.scala 626:49]
    node lo_lo_lo_1 = cat(io.cfIn.exceptionVec[1], io.cfIn.exceptionVec[0]) @[CSR.scala 626:76]
    node lo_lo_hi_9 = cat(io.cfIn.exceptionVec[3], io.cfIn.exceptionVec[2]) @[CSR.scala 626:76]
    node lo_lo_9 = cat(lo_lo_hi_9, lo_lo_lo_1) @[CSR.scala 626:76]
    node lo_hi_lo_1 = cat(io.cfIn.exceptionVec[5], io.cfIn.exceptionVec[4]) @[CSR.scala 626:76]
    node lo_hi_hi_9 = cat(io.cfIn.exceptionVec[7], io.cfIn.exceptionVec[6]) @[CSR.scala 626:76]
    node lo_hi_9 = cat(lo_hi_hi_9, lo_hi_lo_1) @[CSR.scala 626:76]
    node lo_9 = cat(lo_hi_9, lo_lo_9) @[CSR.scala 626:76]
    node hi_lo_lo_1 = cat(io.cfIn.exceptionVec[9], io.cfIn.exceptionVec[8]) @[CSR.scala 626:76]
    node hi_lo_hi_9 = cat(io.cfIn.exceptionVec[11], io.cfIn.exceptionVec[10]) @[CSR.scala 626:76]
    node hi_lo_9 = cat(hi_lo_hi_9, hi_lo_lo_1) @[CSR.scala 626:76]
    node hi_hi_lo_1 = cat(io.cfIn.exceptionVec[13], io.cfIn.exceptionVec[12]) @[CSR.scala 626:76]
    node hi_hi_hi_9 = cat(io.cfIn.exceptionVec[15], io.cfIn.exceptionVec[14]) @[CSR.scala 626:76]
    node hi_hi_9 = cat(hi_hi_hi_9, hi_hi_lo_1) @[CSR.scala 626:76]
    node hi_9 = cat(hi_hi_9, hi_lo_9) @[CSR.scala 626:76]
    node _T_3077 = cat(hi_9, lo_9) @[CSR.scala 626:76]
    node raiseExceptionVec = or(_T_3076, _T_3077) @[CSR.scala 626:52]
    node raiseException = orr(raiseExceptionVec) @[CSR.scala 627:42]
    node _T_3078 = bits(raiseExceptionVec, 5, 5) @[CSR.scala 628:92]
    node _T_3079 = mux(_T_3078, UInt<3>("h5"), UInt<1>("h0")) @[CSR.scala 628:74]
    node _T_3080 = bits(raiseExceptionVec, 7, 7) @[CSR.scala 628:92]
    node _T_3081 = mux(_T_3080, UInt<3>("h7"), _T_3079) @[CSR.scala 628:74]
    node _T_3082 = bits(raiseExceptionVec, 13, 13) @[CSR.scala 628:92]
    node _T_3083 = mux(_T_3082, UInt<4>("hd"), _T_3081) @[CSR.scala 628:74]
    node _T_3084 = bits(raiseExceptionVec, 15, 15) @[CSR.scala 628:92]
    node _T_3085 = mux(_T_3084, UInt<4>("hf"), _T_3083) @[CSR.scala 628:74]
    node _T_3086 = bits(raiseExceptionVec, 4, 4) @[CSR.scala 628:92]
    node _T_3087 = mux(_T_3086, UInt<3>("h4"), _T_3085) @[CSR.scala 628:74]
    node _T_3088 = bits(raiseExceptionVec, 6, 6) @[CSR.scala 628:92]
    node _T_3089 = mux(_T_3088, UInt<3>("h6"), _T_3087) @[CSR.scala 628:74]
    node _T_3090 = bits(raiseExceptionVec, 8, 8) @[CSR.scala 628:92]
    node _T_3091 = mux(_T_3090, UInt<4>("h8"), _T_3089) @[CSR.scala 628:74]
    node _T_3092 = bits(raiseExceptionVec, 9, 9) @[CSR.scala 628:92]
    node _T_3093 = mux(_T_3092, UInt<4>("h9"), _T_3091) @[CSR.scala 628:74]
    node _T_3094 = bits(raiseExceptionVec, 11, 11) @[CSR.scala 628:92]
    node _T_3095 = mux(_T_3094, UInt<4>("hb"), _T_3093) @[CSR.scala 628:74]
    node _T_3096 = bits(raiseExceptionVec, 0, 0) @[CSR.scala 628:92]
    node _T_3097 = mux(_T_3096, UInt<1>("h0"), _T_3095) @[CSR.scala 628:74]
    node _T_3098 = bits(raiseExceptionVec, 2, 2) @[CSR.scala 628:92]
    node _T_3099 = mux(_T_3098, UInt<2>("h2"), _T_3097) @[CSR.scala 628:74]
    node _T_3100 = bits(raiseExceptionVec, 1, 1) @[CSR.scala 628:92]
    node _T_3101 = mux(_T_3100, UInt<1>("h1"), _T_3099) @[CSR.scala 628:74]
    node _T_3102 = bits(raiseExceptionVec, 12, 12) @[CSR.scala 628:92]
    node _T_3103 = mux(_T_3102, UInt<4>("hc"), _T_3101) @[CSR.scala 628:74]
    node _T_3104 = bits(raiseExceptionVec, 3, 3) @[CSR.scala 628:92]
    node exceptionNO = mux(_T_3104, UInt<2>("h3"), _T_3103) @[CSR.scala 628:74]
    io.wenFix <= raiseException @[CSR.scala 629:13]
    node _T_3105 = shl(raiseIntr, 63) @[CSR.scala 631:28]
    node _T_3106 = mux(raiseIntr, intrNO, exceptionNO) @[CSR.scala 631:46]
    node causeNO = or(_T_3105, _T_3106) @[CSR.scala 631:41]
    node _T_3107 = mux(raiseIntr, causeNO, UInt<1>("h0")) @[CSR.scala 632:19]
    io.intrNO <= _T_3107 @[CSR.scala 632:13]
    node _T_3108 = or(raiseException, raiseIntr) @[CSR.scala 634:44]
    node raiseExceptionIntr = and(_T_3108, io.instrValid) @[CSR.scala 634:58]
    wire retTarget : UInt<39> @[CSR.scala 635:23]
    wire trapTarget : UInt<39> @[CSR.scala 636:24]
    node _T_3109 = eq(io.in.bits.func, UInt<1>("h0")) @[CSR.scala 637:39]
    node _T_3110 = and(io.in.valid, _T_3109) @[CSR.scala 637:31]
    node _T_3111 = or(_T_3110, raiseExceptionIntr) @[CSR.scala 637:58]
    node _T_3112 = or(_T_3111, resetSatp) @[CSR.scala 637:80]
    io.redirect.valid <= _T_3112 @[CSR.scala 637:21]
    io.redirect.rtype <= UInt<1>("h0") @[CSR.scala 638:21]
    node _T_3113 = add(io.cfIn.pc, UInt<3>("h4")) @[CSR.scala 639:51]
    node _T_3114 = tail(_T_3113, 1) @[CSR.scala 639:51]
    node _T_3115 = mux(raiseExceptionIntr, trapTarget, retTarget) @[CSR.scala 639:61]
    node _T_3116 = mux(resetSatp, _T_3114, _T_3115) @[CSR.scala 639:28]
    io.redirect.target <= _T_3116 @[CSR.scala 639:22]
    node lo_lo_lo_2 = cat(csrExceptionVec[1], csrExceptionVec[0]) @[CSR.scala 641:73]
    node lo_lo_hi_10 = cat(csrExceptionVec[3], csrExceptionVec[2]) @[CSR.scala 641:73]
    node lo_lo_10 = cat(lo_lo_hi_10, lo_lo_lo_2) @[CSR.scala 641:73]
    node lo_hi_lo_2 = cat(csrExceptionVec[5], csrExceptionVec[4]) @[CSR.scala 641:73]
    node lo_hi_hi_10 = cat(csrExceptionVec[7], csrExceptionVec[6]) @[CSR.scala 641:73]
    node lo_hi_10 = cat(lo_hi_hi_10, lo_hi_lo_2) @[CSR.scala 641:73]
    node lo_10 = cat(lo_hi_10, lo_lo_10) @[CSR.scala 641:73]
    node hi_lo_lo_2 = cat(csrExceptionVec[9], csrExceptionVec[8]) @[CSR.scala 641:73]
    node hi_lo_hi_10 = cat(csrExceptionVec[11], csrExceptionVec[10]) @[CSR.scala 641:73]
    node hi_lo_10 = cat(hi_lo_hi_10, hi_lo_lo_2) @[CSR.scala 641:73]
    node hi_hi_lo_2 = cat(csrExceptionVec[13], csrExceptionVec[12]) @[CSR.scala 641:73]
    node hi_hi_hi_10 = cat(csrExceptionVec[15], csrExceptionVec[14]) @[CSR.scala 641:73]
    node hi_hi_10 = cat(hi_hi_hi_10, hi_hi_lo_2) @[CSR.scala 641:73]
    node hi_10 = cat(hi_hi_10, hi_lo_10) @[CSR.scala 641:73]
    node _T_3117 = cat(hi_10, lo_10) @[CSR.scala 641:73]
    node lo_lo_lo_3 = cat(io.cfIn.exceptionVec[1], io.cfIn.exceptionVec[0]) @[CSR.scala 641:99]
    node lo_lo_hi_11 = cat(io.cfIn.exceptionVec[3], io.cfIn.exceptionVec[2]) @[CSR.scala 641:99]
    node lo_lo_11 = cat(lo_lo_hi_11, lo_lo_lo_3) @[CSR.scala 641:99]
    node lo_hi_lo_3 = cat(io.cfIn.exceptionVec[5], io.cfIn.exceptionVec[4]) @[CSR.scala 641:99]
    node lo_hi_hi_11 = cat(io.cfIn.exceptionVec[7], io.cfIn.exceptionVec[6]) @[CSR.scala 641:99]
    node lo_hi_11 = cat(lo_hi_hi_11, lo_hi_lo_3) @[CSR.scala 641:99]
    node lo_11 = cat(lo_hi_11, lo_lo_11) @[CSR.scala 641:99]
    node hi_lo_lo_3 = cat(io.cfIn.exceptionVec[9], io.cfIn.exceptionVec[8]) @[CSR.scala 641:99]
    node hi_lo_hi_11 = cat(io.cfIn.exceptionVec[11], io.cfIn.exceptionVec[10]) @[CSR.scala 641:99]
    node hi_lo_11 = cat(hi_lo_hi_11, hi_lo_lo_3) @[CSR.scala 641:99]
    node hi_hi_lo_3 = cat(io.cfIn.exceptionVec[13], io.cfIn.exceptionVec[12]) @[CSR.scala 641:99]
    node hi_hi_hi_11 = cat(io.cfIn.exceptionVec[15], io.cfIn.exceptionVec[14]) @[CSR.scala 641:99]
    node hi_hi_11 = cat(hi_hi_hi_11, hi_hi_lo_3) @[CSR.scala 641:99]
    node hi_11 = cat(hi_hi_11, hi_lo_11) @[CSR.scala 641:99]
    node _T_3118 = cat(hi_11, lo_11) @[CSR.scala 641:99]
    reg REG_7 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3119 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3120 = tail(_T_3119, 1) @[GTimer.scala 25:12]
    REG_7 <= _T_3120 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_3121 = and(raiseExceptionIntr, _WIRE_20) @[Debug.scala 55:16]
    when _T_3121 : @[Debug.scala 55:31]
      node _T_3122 = asUInt(reset) @[Debug.scala 56:24]
      node _T_3123 = eq(_T_3122, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_3123 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_7) : SIM_8 @[Debug.scala 56:24]
      node _T_3124 = asUInt(reset) @[Debug.scala 57:13]
      node _T_3125 = eq(_T_3124, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_3125 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "excin %b excgen %b", _T_3117, _T_3118) : SIM_9 @[Debug.scala 57:13]
    node lo_lo_hi_12 = cat(io.cfIn.intrVec[2], io.cfIn.intrVec[1]) @[CSR.scala 642:109]
    node lo_lo_12 = cat(lo_lo_hi_12, io.cfIn.intrVec[0]) @[CSR.scala 642:109]
    node lo_hi_hi_12 = cat(io.cfIn.intrVec[5], io.cfIn.intrVec[4]) @[CSR.scala 642:109]
    node lo_hi_12 = cat(lo_hi_hi_12, io.cfIn.intrVec[3]) @[CSR.scala 642:109]
    node lo_12 = cat(lo_hi_12, lo_lo_12) @[CSR.scala 642:109]
    node hi_lo_hi_12 = cat(io.cfIn.intrVec[8], io.cfIn.intrVec[7]) @[CSR.scala 642:109]
    node hi_lo_12 = cat(hi_lo_hi_12, io.cfIn.intrVec[6]) @[CSR.scala 642:109]
    node hi_hi_hi_12 = cat(io.cfIn.intrVec[11], io.cfIn.intrVec[10]) @[CSR.scala 642:109]
    node hi_hi_12 = cat(hi_hi_hi_12, io.cfIn.intrVec[9]) @[CSR.scala 642:109]
    node hi_12 = cat(hi_hi_12, hi_lo_12) @[CSR.scala 642:109]
    node _T_3126 = cat(hi_12, lo_12) @[CSR.scala 642:109]
    reg REG_8 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3127 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3128 = tail(_T_3127, 1) @[GTimer.scala 25:12]
    REG_8 <= _T_3128 @[GTimer.scala 25:7]
    wire _WIRE_21 : UInt<1>
    _WIRE_21 <= UInt<1>("h0")
    node _T_3129 = and(raiseExceptionIntr, _WIRE_21) @[Debug.scala 55:16]
    when _T_3129 : @[Debug.scala 55:31]
      node _T_3130 = asUInt(reset) @[Debug.scala 56:24]
      node _T_3131 = eq(_T_3130, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_3131 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_8) : SIM_10 @[Debug.scala 56:24]
      node _T_3132 = asUInt(reset) @[Debug.scala 57:13]
      node _T_3133 = eq(_T_3132, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_3133 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "int/exc: pc %x int (%d):%x exc: (%d):%x\n", io.cfIn.pc, intrNO, _T_3126, exceptionNO, raiseExceptionVec) : SIM_11 @[Debug.scala 57:13]
    reg REG_9 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3134 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3135 = tail(_T_3134, 1) @[GTimer.scala 25:12]
    REG_9 <= _T_3135 @[GTimer.scala 25:7]
    reg REG_10 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3136 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3137 = tail(_T_3136, 1) @[GTimer.scala 25:12]
    REG_10 <= _T_3137 @[GTimer.scala 25:7]
    wire _WIRE_22 : UInt<1>
    _WIRE_22 <= UInt<1>("h0")
    node _T_3138 = and(raiseExceptionIntr, _WIRE_22) @[Debug.scala 55:16]
    when _T_3138 : @[Debug.scala 55:31]
      node _T_3139 = asUInt(reset) @[Debug.scala 56:24]
      node _T_3140 = eq(_T_3139, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_3140 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_10) : SIM_12 @[Debug.scala 56:24]
      node _T_3141 = asUInt(reset) @[Debug.scala 57:13]
      node _T_3142 = eq(_T_3141, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_3142 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[MST] time %d pc %x mstatus %x mideleg %x medeleg %x mode %x\n", REG_9, io.cfIn.pc, mstatus, mideleg, medeleg, priviledgeMode) : SIM_13 @[Debug.scala 57:13]
    reg REG_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3143 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3144 = tail(_T_3143, 1) @[GTimer.scala 25:12]
    REG_11 <= _T_3144 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_3145 = and(io.redirect.valid, _WIRE_23) @[Debug.scala 55:16]
    when _T_3145 : @[Debug.scala 55:31]
      node _T_3146 = asUInt(reset) @[Debug.scala 56:24]
      node _T_3147 = eq(_T_3146, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_3147 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_11) : SIM_14 @[Debug.scala 56:24]
      node _T_3148 = asUInt(reset) @[Debug.scala 57:13]
      node _T_3149 = eq(_T_3148, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_3149 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "redirect to %x\n", io.redirect.target) : SIM_15 @[Debug.scala 57:13]
    reg REG_12 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3150 = add(REG_12, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3151 = tail(_T_3150, 1) @[GTimer.scala 25:12]
    REG_12 <= _T_3151 @[GTimer.scala 25:7]
    wire _WIRE_24 : UInt<1>
    _WIRE_24 <= UInt<1>("h0")
    node _T_3152 = and(resetSatp, _WIRE_24) @[Debug.scala 55:16]
    when _T_3152 : @[Debug.scala 55:31]
      node _T_3153 = asUInt(reset) @[Debug.scala 56:24]
      node _T_3154 = eq(_T_3153, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_3154 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CSR: ", REG_12) : SIM_16 @[Debug.scala 56:24]
      node _T_3155 = asUInt(reset) @[Debug.scala 57:13]
      node _T_3156 = eq(_T_3155, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_3156 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "satp reset\n") : SIM_17 @[Debug.scala 57:13]
    node deleg = mux(raiseIntr, mideleg, medeleg) @[CSR.scala 649:18]
    node _T_3157 = bits(causeNO, 3, 0) @[CSR.scala 651:30]
    node _T_3158 = dshr(deleg, _T_3157) @[CSR.scala 651:22]
    node _T_3159 = bits(_T_3158, 0, 0) @[CSR.scala 651:22]
    node _T_3160 = lt(priviledgeMode, UInt<2>("h3")) @[CSR.scala 651:57]
    node delegS = and(_T_3159, _T_3160) @[CSR.scala 651:38]
    node _T_3161 = or(hasInstrPageFault, hasLoadPageFault) @[CSR.scala 652:37]
    node _T_3162 = or(_T_3161, hasStorePageFault) @[CSR.scala 652:57]
    node _T_3163 = or(_T_3162, hasLoadAddrMisaligned) @[CSR.scala 652:78]
    node _T_3164 = or(_T_3163, hasStoreAddrMisaligned) @[CSR.scala 652:103]
    node _T_3165 = eq(_T_3164, UInt<1>("h0")) @[CSR.scala 652:17]
    node tvalWen = or(_T_3165, raiseIntr) @[CSR.scala 652:130]
    node _T_3166 = or(isMret, isSret) @[CSR.scala 654:17]
    node _T_3167 = or(_T_3166, isUret) @[CSR.scala 654:27]
    ret <= _T_3167 @[CSR.scala 654:7]
    node _T_3168 = mux(delegS, stvec, mtvec) @[CSR.scala 655:20]
    node _T_3169 = bits(_T_3168, 38, 0) @[CSR.scala 655:42]
    trapTarget <= _T_3169 @[CSR.scala 655:14]
    retTarget is invalid @[CSR.scala 656:13]
    node _T_3170 = and(io.in.valid, isMret) @[CSR.scala 660:15]
    when _T_3170 : @[CSR.scala 660:26]
      wire _WIRE_25 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 661:47]
      wire _WIRE_26 : UInt<64>
      _WIRE_26 <= mstatus
      node _T_3171 = bits(_WIRE_26, 0, 0) @[CSR.scala 661:47]
      _WIRE_25.ie.u <= _T_3171 @[CSR.scala 661:47]
      node _T_3172 = bits(_WIRE_26, 1, 1) @[CSR.scala 661:47]
      _WIRE_25.ie.s <= _T_3172 @[CSR.scala 661:47]
      node _T_3173 = bits(_WIRE_26, 2, 2) @[CSR.scala 661:47]
      _WIRE_25.ie.h <= _T_3173 @[CSR.scala 661:47]
      node _T_3174 = bits(_WIRE_26, 3, 3) @[CSR.scala 661:47]
      _WIRE_25.ie.m <= _T_3174 @[CSR.scala 661:47]
      node _T_3175 = bits(_WIRE_26, 4, 4) @[CSR.scala 661:47]
      _WIRE_25.pie.u <= _T_3175 @[CSR.scala 661:47]
      node _T_3176 = bits(_WIRE_26, 5, 5) @[CSR.scala 661:47]
      _WIRE_25.pie.s <= _T_3176 @[CSR.scala 661:47]
      node _T_3177 = bits(_WIRE_26, 6, 6) @[CSR.scala 661:47]
      _WIRE_25.pie.h <= _T_3177 @[CSR.scala 661:47]
      node _T_3178 = bits(_WIRE_26, 7, 7) @[CSR.scala 661:47]
      _WIRE_25.pie.m <= _T_3178 @[CSR.scala 661:47]
      node _T_3179 = bits(_WIRE_26, 8, 8) @[CSR.scala 661:47]
      _WIRE_25.spp <= _T_3179 @[CSR.scala 661:47]
      node _T_3180 = bits(_WIRE_26, 10, 9) @[CSR.scala 661:47]
      _WIRE_25.hpp <= _T_3180 @[CSR.scala 661:47]
      node _T_3181 = bits(_WIRE_26, 12, 11) @[CSR.scala 661:47]
      _WIRE_25.mpp <= _T_3181 @[CSR.scala 661:47]
      node _T_3182 = bits(_WIRE_26, 14, 13) @[CSR.scala 661:47]
      _WIRE_25.fs <= _T_3182 @[CSR.scala 661:47]
      node _T_3183 = bits(_WIRE_26, 16, 15) @[CSR.scala 661:47]
      _WIRE_25.xs <= _T_3183 @[CSR.scala 661:47]
      node _T_3184 = bits(_WIRE_26, 17, 17) @[CSR.scala 661:47]
      _WIRE_25.mprv <= _T_3184 @[CSR.scala 661:47]
      node _T_3185 = bits(_WIRE_26, 18, 18) @[CSR.scala 661:47]
      _WIRE_25.sum <= _T_3185 @[CSR.scala 661:47]
      node _T_3186 = bits(_WIRE_26, 19, 19) @[CSR.scala 661:47]
      _WIRE_25.mxr <= _T_3186 @[CSR.scala 661:47]
      node _T_3187 = bits(_WIRE_26, 20, 20) @[CSR.scala 661:47]
      _WIRE_25.tvm <= _T_3187 @[CSR.scala 661:47]
      node _T_3188 = bits(_WIRE_26, 21, 21) @[CSR.scala 661:47]
      _WIRE_25.tw <= _T_3188 @[CSR.scala 661:47]
      node _T_3189 = bits(_WIRE_26, 22, 22) @[CSR.scala 661:47]
      _WIRE_25.tsr <= _T_3189 @[CSR.scala 661:47]
      node _T_3190 = bits(_WIRE_26, 31, 23) @[CSR.scala 661:47]
      _WIRE_25.pad0 <= _T_3190 @[CSR.scala 661:47]
      node _T_3191 = bits(_WIRE_26, 33, 32) @[CSR.scala 661:47]
      _WIRE_25.uxl <= _T_3191 @[CSR.scala 661:47]
      node _T_3192 = bits(_WIRE_26, 35, 34) @[CSR.scala 661:47]
      _WIRE_25.sxl <= _T_3192 @[CSR.scala 661:47]
      node _T_3193 = bits(_WIRE_26, 62, 36) @[CSR.scala 661:47]
      _WIRE_25.pad1 <= _T_3193 @[CSR.scala 661:47]
      node _T_3194 = bits(_WIRE_26, 63, 63) @[CSR.scala 661:47]
      _WIRE_25.sd <= _T_3194 @[CSR.scala 661:47]
      wire _WIRE_27 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_27.ie.u <= _WIRE_25.ie.u
      _WIRE_27.ie.s <= _WIRE_25.ie.s
      _WIRE_27.ie.h <= _WIRE_25.ie.h
      _WIRE_27.ie.m <= _WIRE_25.ie.m
      _WIRE_27.pie.u <= _WIRE_25.pie.u
      _WIRE_27.pie.s <= _WIRE_25.pie.s
      _WIRE_27.pie.h <= _WIRE_25.pie.h
      _WIRE_27.pie.m <= _WIRE_25.pie.m
      _WIRE_27.spp <= _WIRE_25.spp
      _WIRE_27.hpp <= _WIRE_25.hpp
      _WIRE_27.mpp <= _WIRE_25.mpp
      _WIRE_27.fs <= _WIRE_25.fs
      _WIRE_27.xs <= _WIRE_25.xs
      _WIRE_27.mprv <= _WIRE_25.mprv
      _WIRE_27.sum <= _WIRE_25.sum
      _WIRE_27.mxr <= _WIRE_25.mxr
      _WIRE_27.tvm <= _WIRE_25.tvm
      _WIRE_27.tw <= _WIRE_25.tw
      _WIRE_27.tsr <= _WIRE_25.tsr
      _WIRE_27.pad0 <= _WIRE_25.pad0
      _WIRE_27.uxl <= _WIRE_25.uxl
      _WIRE_27.sxl <= _WIRE_25.sxl
      _WIRE_27.pad1 <= _WIRE_25.pad1
      _WIRE_27.sd <= _WIRE_25.sd
      wire _WIRE_28 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 662:47]
      wire _WIRE_29 : UInt<64>
      _WIRE_29 <= mstatus
      node _T_3195 = bits(_WIRE_29, 0, 0) @[CSR.scala 662:47]
      _WIRE_28.ie.u <= _T_3195 @[CSR.scala 662:47]
      node _T_3196 = bits(_WIRE_29, 1, 1) @[CSR.scala 662:47]
      _WIRE_28.ie.s <= _T_3196 @[CSR.scala 662:47]
      node _T_3197 = bits(_WIRE_29, 2, 2) @[CSR.scala 662:47]
      _WIRE_28.ie.h <= _T_3197 @[CSR.scala 662:47]
      node _T_3198 = bits(_WIRE_29, 3, 3) @[CSR.scala 662:47]
      _WIRE_28.ie.m <= _T_3198 @[CSR.scala 662:47]
      node _T_3199 = bits(_WIRE_29, 4, 4) @[CSR.scala 662:47]
      _WIRE_28.pie.u <= _T_3199 @[CSR.scala 662:47]
      node _T_3200 = bits(_WIRE_29, 5, 5) @[CSR.scala 662:47]
      _WIRE_28.pie.s <= _T_3200 @[CSR.scala 662:47]
      node _T_3201 = bits(_WIRE_29, 6, 6) @[CSR.scala 662:47]
      _WIRE_28.pie.h <= _T_3201 @[CSR.scala 662:47]
      node _T_3202 = bits(_WIRE_29, 7, 7) @[CSR.scala 662:47]
      _WIRE_28.pie.m <= _T_3202 @[CSR.scala 662:47]
      node _T_3203 = bits(_WIRE_29, 8, 8) @[CSR.scala 662:47]
      _WIRE_28.spp <= _T_3203 @[CSR.scala 662:47]
      node _T_3204 = bits(_WIRE_29, 10, 9) @[CSR.scala 662:47]
      _WIRE_28.hpp <= _T_3204 @[CSR.scala 662:47]
      node _T_3205 = bits(_WIRE_29, 12, 11) @[CSR.scala 662:47]
      _WIRE_28.mpp <= _T_3205 @[CSR.scala 662:47]
      node _T_3206 = bits(_WIRE_29, 14, 13) @[CSR.scala 662:47]
      _WIRE_28.fs <= _T_3206 @[CSR.scala 662:47]
      node _T_3207 = bits(_WIRE_29, 16, 15) @[CSR.scala 662:47]
      _WIRE_28.xs <= _T_3207 @[CSR.scala 662:47]
      node _T_3208 = bits(_WIRE_29, 17, 17) @[CSR.scala 662:47]
      _WIRE_28.mprv <= _T_3208 @[CSR.scala 662:47]
      node _T_3209 = bits(_WIRE_29, 18, 18) @[CSR.scala 662:47]
      _WIRE_28.sum <= _T_3209 @[CSR.scala 662:47]
      node _T_3210 = bits(_WIRE_29, 19, 19) @[CSR.scala 662:47]
      _WIRE_28.mxr <= _T_3210 @[CSR.scala 662:47]
      node _T_3211 = bits(_WIRE_29, 20, 20) @[CSR.scala 662:47]
      _WIRE_28.tvm <= _T_3211 @[CSR.scala 662:47]
      node _T_3212 = bits(_WIRE_29, 21, 21) @[CSR.scala 662:47]
      _WIRE_28.tw <= _T_3212 @[CSR.scala 662:47]
      node _T_3213 = bits(_WIRE_29, 22, 22) @[CSR.scala 662:47]
      _WIRE_28.tsr <= _T_3213 @[CSR.scala 662:47]
      node _T_3214 = bits(_WIRE_29, 31, 23) @[CSR.scala 662:47]
      _WIRE_28.pad0 <= _T_3214 @[CSR.scala 662:47]
      node _T_3215 = bits(_WIRE_29, 33, 32) @[CSR.scala 662:47]
      _WIRE_28.uxl <= _T_3215 @[CSR.scala 662:47]
      node _T_3216 = bits(_WIRE_29, 35, 34) @[CSR.scala 662:47]
      _WIRE_28.sxl <= _T_3216 @[CSR.scala 662:47]
      node _T_3217 = bits(_WIRE_29, 62, 36) @[CSR.scala 662:47]
      _WIRE_28.pad1 <= _T_3217 @[CSR.scala 662:47]
      node _T_3218 = bits(_WIRE_29, 63, 63) @[CSR.scala 662:47]
      _WIRE_28.sd <= _T_3218 @[CSR.scala 662:47]
      wire _WIRE_30 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_30.ie.u <= _WIRE_28.ie.u
      _WIRE_30.ie.s <= _WIRE_28.ie.s
      _WIRE_30.ie.h <= _WIRE_28.ie.h
      _WIRE_30.ie.m <= _WIRE_28.ie.m
      _WIRE_30.pie.u <= _WIRE_28.pie.u
      _WIRE_30.pie.s <= _WIRE_28.pie.s
      _WIRE_30.pie.h <= _WIRE_28.pie.h
      _WIRE_30.pie.m <= _WIRE_28.pie.m
      _WIRE_30.spp <= _WIRE_28.spp
      _WIRE_30.hpp <= _WIRE_28.hpp
      _WIRE_30.mpp <= _WIRE_28.mpp
      _WIRE_30.fs <= _WIRE_28.fs
      _WIRE_30.xs <= _WIRE_28.xs
      _WIRE_30.mprv <= _WIRE_28.mprv
      _WIRE_30.sum <= _WIRE_28.sum
      _WIRE_30.mxr <= _WIRE_28.mxr
      _WIRE_30.tvm <= _WIRE_28.tvm
      _WIRE_30.tw <= _WIRE_28.tw
      _WIRE_30.tsr <= _WIRE_28.tsr
      _WIRE_30.pad0 <= _WIRE_28.pad0
      _WIRE_30.uxl <= _WIRE_28.uxl
      _WIRE_30.sxl <= _WIRE_28.sxl
      _WIRE_30.pad1 <= _WIRE_28.pad1
      _WIRE_30.sd <= _WIRE_28.sd
      _WIRE_30.ie.m <= _WIRE_27.pie.m @[CSR.scala 664:21]
      priviledgeMode <= _WIRE_27.mpp @[CSR.scala 665:20]
      _WIRE_30.pie.m <= UInt<1>("h1") @[CSR.scala 666:22]
      _WIRE_30.mpp <= UInt<1>("h0") @[CSR.scala 667:20]
      node lo_lo_lo_hi = cat(_WIRE_30.ie.h, _WIRE_30.ie.s) @[CSR.scala 668:27]
      node lo_lo_lo_4 = cat(lo_lo_lo_hi, _WIRE_30.ie.u) @[CSR.scala 668:27]
      node lo_lo_hi_hi = cat(_WIRE_30.pie.s, _WIRE_30.pie.u) @[CSR.scala 668:27]
      node lo_lo_hi_13 = cat(lo_lo_hi_hi, _WIRE_30.ie.m) @[CSR.scala 668:27]
      node lo_lo_13 = cat(lo_lo_hi_13, lo_lo_lo_4) @[CSR.scala 668:27]
      node lo_hi_lo_hi = cat(_WIRE_30.spp, _WIRE_30.pie.m) @[CSR.scala 668:27]
      node lo_hi_lo_4 = cat(lo_hi_lo_hi, _WIRE_30.pie.h) @[CSR.scala 668:27]
      node lo_hi_hi_hi = cat(_WIRE_30.fs, _WIRE_30.mpp) @[CSR.scala 668:27]
      node lo_hi_hi_13 = cat(lo_hi_hi_hi, _WIRE_30.hpp) @[CSR.scala 668:27]
      node lo_hi_13 = cat(lo_hi_hi_13, lo_hi_lo_4) @[CSR.scala 668:27]
      node lo_13 = cat(lo_hi_13, lo_lo_13) @[CSR.scala 668:27]
      node hi_lo_lo_hi = cat(_WIRE_30.sum, _WIRE_30.mprv) @[CSR.scala 668:27]
      node hi_lo_lo_4 = cat(hi_lo_lo_hi, _WIRE_30.xs) @[CSR.scala 668:27]
      node hi_lo_hi_hi = cat(_WIRE_30.tw, _WIRE_30.tvm) @[CSR.scala 668:27]
      node hi_lo_hi_13 = cat(hi_lo_hi_hi, _WIRE_30.mxr) @[CSR.scala 668:27]
      node hi_lo_13 = cat(hi_lo_hi_13, hi_lo_lo_4) @[CSR.scala 668:27]
      node hi_hi_lo_hi = cat(_WIRE_30.uxl, _WIRE_30.pad0) @[CSR.scala 668:27]
      node hi_hi_lo_4 = cat(hi_hi_lo_hi, _WIRE_30.tsr) @[CSR.scala 668:27]
      node hi_hi_hi_hi = cat(_WIRE_30.sd, _WIRE_30.pad1) @[CSR.scala 668:27]
      node hi_hi_hi_13 = cat(hi_hi_hi_hi, _WIRE_30.sxl) @[CSR.scala 668:27]
      node hi_hi_13 = cat(hi_hi_hi_13, hi_hi_lo_4) @[CSR.scala 668:27]
      node hi_13 = cat(hi_hi_13, hi_lo_13) @[CSR.scala 668:27]
      node _T_3219 = cat(hi_13, lo_13) @[CSR.scala 668:27]
      mstatus <= _T_3219 @[CSR.scala 668:13]
      lr <= UInt<1>("h0") @[CSR.scala 669:8]
      node _T_3220 = bits(mepc, 38, 0) @[CSR.scala 670:22]
      retTarget <= _T_3220 @[CSR.scala 670:15]
    node _T_3221 = and(io.in.valid, isSret) @[CSR.scala 673:15]
    when _T_3221 : @[CSR.scala 673:26]
      wire _WIRE_31 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 674:47]
      wire _WIRE_32 : UInt<64>
      _WIRE_32 <= mstatus
      node _T_3222 = bits(_WIRE_32, 0, 0) @[CSR.scala 674:47]
      _WIRE_31.ie.u <= _T_3222 @[CSR.scala 674:47]
      node _T_3223 = bits(_WIRE_32, 1, 1) @[CSR.scala 674:47]
      _WIRE_31.ie.s <= _T_3223 @[CSR.scala 674:47]
      node _T_3224 = bits(_WIRE_32, 2, 2) @[CSR.scala 674:47]
      _WIRE_31.ie.h <= _T_3224 @[CSR.scala 674:47]
      node _T_3225 = bits(_WIRE_32, 3, 3) @[CSR.scala 674:47]
      _WIRE_31.ie.m <= _T_3225 @[CSR.scala 674:47]
      node _T_3226 = bits(_WIRE_32, 4, 4) @[CSR.scala 674:47]
      _WIRE_31.pie.u <= _T_3226 @[CSR.scala 674:47]
      node _T_3227 = bits(_WIRE_32, 5, 5) @[CSR.scala 674:47]
      _WIRE_31.pie.s <= _T_3227 @[CSR.scala 674:47]
      node _T_3228 = bits(_WIRE_32, 6, 6) @[CSR.scala 674:47]
      _WIRE_31.pie.h <= _T_3228 @[CSR.scala 674:47]
      node _T_3229 = bits(_WIRE_32, 7, 7) @[CSR.scala 674:47]
      _WIRE_31.pie.m <= _T_3229 @[CSR.scala 674:47]
      node _T_3230 = bits(_WIRE_32, 8, 8) @[CSR.scala 674:47]
      _WIRE_31.spp <= _T_3230 @[CSR.scala 674:47]
      node _T_3231 = bits(_WIRE_32, 10, 9) @[CSR.scala 674:47]
      _WIRE_31.hpp <= _T_3231 @[CSR.scala 674:47]
      node _T_3232 = bits(_WIRE_32, 12, 11) @[CSR.scala 674:47]
      _WIRE_31.mpp <= _T_3232 @[CSR.scala 674:47]
      node _T_3233 = bits(_WIRE_32, 14, 13) @[CSR.scala 674:47]
      _WIRE_31.fs <= _T_3233 @[CSR.scala 674:47]
      node _T_3234 = bits(_WIRE_32, 16, 15) @[CSR.scala 674:47]
      _WIRE_31.xs <= _T_3234 @[CSR.scala 674:47]
      node _T_3235 = bits(_WIRE_32, 17, 17) @[CSR.scala 674:47]
      _WIRE_31.mprv <= _T_3235 @[CSR.scala 674:47]
      node _T_3236 = bits(_WIRE_32, 18, 18) @[CSR.scala 674:47]
      _WIRE_31.sum <= _T_3236 @[CSR.scala 674:47]
      node _T_3237 = bits(_WIRE_32, 19, 19) @[CSR.scala 674:47]
      _WIRE_31.mxr <= _T_3237 @[CSR.scala 674:47]
      node _T_3238 = bits(_WIRE_32, 20, 20) @[CSR.scala 674:47]
      _WIRE_31.tvm <= _T_3238 @[CSR.scala 674:47]
      node _T_3239 = bits(_WIRE_32, 21, 21) @[CSR.scala 674:47]
      _WIRE_31.tw <= _T_3239 @[CSR.scala 674:47]
      node _T_3240 = bits(_WIRE_32, 22, 22) @[CSR.scala 674:47]
      _WIRE_31.tsr <= _T_3240 @[CSR.scala 674:47]
      node _T_3241 = bits(_WIRE_32, 31, 23) @[CSR.scala 674:47]
      _WIRE_31.pad0 <= _T_3241 @[CSR.scala 674:47]
      node _T_3242 = bits(_WIRE_32, 33, 32) @[CSR.scala 674:47]
      _WIRE_31.uxl <= _T_3242 @[CSR.scala 674:47]
      node _T_3243 = bits(_WIRE_32, 35, 34) @[CSR.scala 674:47]
      _WIRE_31.sxl <= _T_3243 @[CSR.scala 674:47]
      node _T_3244 = bits(_WIRE_32, 62, 36) @[CSR.scala 674:47]
      _WIRE_31.pad1 <= _T_3244 @[CSR.scala 674:47]
      node _T_3245 = bits(_WIRE_32, 63, 63) @[CSR.scala 674:47]
      _WIRE_31.sd <= _T_3245 @[CSR.scala 674:47]
      wire _WIRE_33 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_33.ie.u <= _WIRE_31.ie.u
      _WIRE_33.ie.s <= _WIRE_31.ie.s
      _WIRE_33.ie.h <= _WIRE_31.ie.h
      _WIRE_33.ie.m <= _WIRE_31.ie.m
      _WIRE_33.pie.u <= _WIRE_31.pie.u
      _WIRE_33.pie.s <= _WIRE_31.pie.s
      _WIRE_33.pie.h <= _WIRE_31.pie.h
      _WIRE_33.pie.m <= _WIRE_31.pie.m
      _WIRE_33.spp <= _WIRE_31.spp
      _WIRE_33.hpp <= _WIRE_31.hpp
      _WIRE_33.mpp <= _WIRE_31.mpp
      _WIRE_33.fs <= _WIRE_31.fs
      _WIRE_33.xs <= _WIRE_31.xs
      _WIRE_33.mprv <= _WIRE_31.mprv
      _WIRE_33.sum <= _WIRE_31.sum
      _WIRE_33.mxr <= _WIRE_31.mxr
      _WIRE_33.tvm <= _WIRE_31.tvm
      _WIRE_33.tw <= _WIRE_31.tw
      _WIRE_33.tsr <= _WIRE_31.tsr
      _WIRE_33.pad0 <= _WIRE_31.pad0
      _WIRE_33.uxl <= _WIRE_31.uxl
      _WIRE_33.sxl <= _WIRE_31.sxl
      _WIRE_33.pad1 <= _WIRE_31.pad1
      _WIRE_33.sd <= _WIRE_31.sd
      wire _WIRE_34 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 675:47]
      wire _WIRE_35 : UInt<64>
      _WIRE_35 <= mstatus
      node _T_3246 = bits(_WIRE_35, 0, 0) @[CSR.scala 675:47]
      _WIRE_34.ie.u <= _T_3246 @[CSR.scala 675:47]
      node _T_3247 = bits(_WIRE_35, 1, 1) @[CSR.scala 675:47]
      _WIRE_34.ie.s <= _T_3247 @[CSR.scala 675:47]
      node _T_3248 = bits(_WIRE_35, 2, 2) @[CSR.scala 675:47]
      _WIRE_34.ie.h <= _T_3248 @[CSR.scala 675:47]
      node _T_3249 = bits(_WIRE_35, 3, 3) @[CSR.scala 675:47]
      _WIRE_34.ie.m <= _T_3249 @[CSR.scala 675:47]
      node _T_3250 = bits(_WIRE_35, 4, 4) @[CSR.scala 675:47]
      _WIRE_34.pie.u <= _T_3250 @[CSR.scala 675:47]
      node _T_3251 = bits(_WIRE_35, 5, 5) @[CSR.scala 675:47]
      _WIRE_34.pie.s <= _T_3251 @[CSR.scala 675:47]
      node _T_3252 = bits(_WIRE_35, 6, 6) @[CSR.scala 675:47]
      _WIRE_34.pie.h <= _T_3252 @[CSR.scala 675:47]
      node _T_3253 = bits(_WIRE_35, 7, 7) @[CSR.scala 675:47]
      _WIRE_34.pie.m <= _T_3253 @[CSR.scala 675:47]
      node _T_3254 = bits(_WIRE_35, 8, 8) @[CSR.scala 675:47]
      _WIRE_34.spp <= _T_3254 @[CSR.scala 675:47]
      node _T_3255 = bits(_WIRE_35, 10, 9) @[CSR.scala 675:47]
      _WIRE_34.hpp <= _T_3255 @[CSR.scala 675:47]
      node _T_3256 = bits(_WIRE_35, 12, 11) @[CSR.scala 675:47]
      _WIRE_34.mpp <= _T_3256 @[CSR.scala 675:47]
      node _T_3257 = bits(_WIRE_35, 14, 13) @[CSR.scala 675:47]
      _WIRE_34.fs <= _T_3257 @[CSR.scala 675:47]
      node _T_3258 = bits(_WIRE_35, 16, 15) @[CSR.scala 675:47]
      _WIRE_34.xs <= _T_3258 @[CSR.scala 675:47]
      node _T_3259 = bits(_WIRE_35, 17, 17) @[CSR.scala 675:47]
      _WIRE_34.mprv <= _T_3259 @[CSR.scala 675:47]
      node _T_3260 = bits(_WIRE_35, 18, 18) @[CSR.scala 675:47]
      _WIRE_34.sum <= _T_3260 @[CSR.scala 675:47]
      node _T_3261 = bits(_WIRE_35, 19, 19) @[CSR.scala 675:47]
      _WIRE_34.mxr <= _T_3261 @[CSR.scala 675:47]
      node _T_3262 = bits(_WIRE_35, 20, 20) @[CSR.scala 675:47]
      _WIRE_34.tvm <= _T_3262 @[CSR.scala 675:47]
      node _T_3263 = bits(_WIRE_35, 21, 21) @[CSR.scala 675:47]
      _WIRE_34.tw <= _T_3263 @[CSR.scala 675:47]
      node _T_3264 = bits(_WIRE_35, 22, 22) @[CSR.scala 675:47]
      _WIRE_34.tsr <= _T_3264 @[CSR.scala 675:47]
      node _T_3265 = bits(_WIRE_35, 31, 23) @[CSR.scala 675:47]
      _WIRE_34.pad0 <= _T_3265 @[CSR.scala 675:47]
      node _T_3266 = bits(_WIRE_35, 33, 32) @[CSR.scala 675:47]
      _WIRE_34.uxl <= _T_3266 @[CSR.scala 675:47]
      node _T_3267 = bits(_WIRE_35, 35, 34) @[CSR.scala 675:47]
      _WIRE_34.sxl <= _T_3267 @[CSR.scala 675:47]
      node _T_3268 = bits(_WIRE_35, 62, 36) @[CSR.scala 675:47]
      _WIRE_34.pad1 <= _T_3268 @[CSR.scala 675:47]
      node _T_3269 = bits(_WIRE_35, 63, 63) @[CSR.scala 675:47]
      _WIRE_34.sd <= _T_3269 @[CSR.scala 675:47]
      wire _WIRE_36 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_36.ie.u <= _WIRE_34.ie.u
      _WIRE_36.ie.s <= _WIRE_34.ie.s
      _WIRE_36.ie.h <= _WIRE_34.ie.h
      _WIRE_36.ie.m <= _WIRE_34.ie.m
      _WIRE_36.pie.u <= _WIRE_34.pie.u
      _WIRE_36.pie.s <= _WIRE_34.pie.s
      _WIRE_36.pie.h <= _WIRE_34.pie.h
      _WIRE_36.pie.m <= _WIRE_34.pie.m
      _WIRE_36.spp <= _WIRE_34.spp
      _WIRE_36.hpp <= _WIRE_34.hpp
      _WIRE_36.mpp <= _WIRE_34.mpp
      _WIRE_36.fs <= _WIRE_34.fs
      _WIRE_36.xs <= _WIRE_34.xs
      _WIRE_36.mprv <= _WIRE_34.mprv
      _WIRE_36.sum <= _WIRE_34.sum
      _WIRE_36.mxr <= _WIRE_34.mxr
      _WIRE_36.tvm <= _WIRE_34.tvm
      _WIRE_36.tw <= _WIRE_34.tw
      _WIRE_36.tsr <= _WIRE_34.tsr
      _WIRE_36.pad0 <= _WIRE_34.pad0
      _WIRE_36.uxl <= _WIRE_34.uxl
      _WIRE_36.sxl <= _WIRE_34.sxl
      _WIRE_36.pad1 <= _WIRE_34.pad1
      _WIRE_36.sd <= _WIRE_34.sd
      _WIRE_36.ie.s <= _WIRE_33.pie.s @[CSR.scala 677:21]
      node _T_3270 = cat(UInt<1>("h0"), _WIRE_33.spp) @[Cat.scala 30:58]
      priviledgeMode <= _T_3270 @[CSR.scala 678:20]
      _WIRE_36.pie.s <= UInt<1>("h1") @[CSR.scala 679:22]
      _WIRE_36.spp <= UInt<1>("h0") @[CSR.scala 680:20]
      node lo_lo_lo_hi_1 = cat(_WIRE_36.ie.h, _WIRE_36.ie.s) @[CSR.scala 681:27]
      node lo_lo_lo_5 = cat(lo_lo_lo_hi_1, _WIRE_36.ie.u) @[CSR.scala 681:27]
      node lo_lo_hi_hi_1 = cat(_WIRE_36.pie.s, _WIRE_36.pie.u) @[CSR.scala 681:27]
      node lo_lo_hi_14 = cat(lo_lo_hi_hi_1, _WIRE_36.ie.m) @[CSR.scala 681:27]
      node lo_lo_14 = cat(lo_lo_hi_14, lo_lo_lo_5) @[CSR.scala 681:27]
      node lo_hi_lo_hi_1 = cat(_WIRE_36.spp, _WIRE_36.pie.m) @[CSR.scala 681:27]
      node lo_hi_lo_5 = cat(lo_hi_lo_hi_1, _WIRE_36.pie.h) @[CSR.scala 681:27]
      node lo_hi_hi_hi_1 = cat(_WIRE_36.fs, _WIRE_36.mpp) @[CSR.scala 681:27]
      node lo_hi_hi_14 = cat(lo_hi_hi_hi_1, _WIRE_36.hpp) @[CSR.scala 681:27]
      node lo_hi_14 = cat(lo_hi_hi_14, lo_hi_lo_5) @[CSR.scala 681:27]
      node lo_14 = cat(lo_hi_14, lo_lo_14) @[CSR.scala 681:27]
      node hi_lo_lo_hi_1 = cat(_WIRE_36.sum, _WIRE_36.mprv) @[CSR.scala 681:27]
      node hi_lo_lo_5 = cat(hi_lo_lo_hi_1, _WIRE_36.xs) @[CSR.scala 681:27]
      node hi_lo_hi_hi_1 = cat(_WIRE_36.tw, _WIRE_36.tvm) @[CSR.scala 681:27]
      node hi_lo_hi_14 = cat(hi_lo_hi_hi_1, _WIRE_36.mxr) @[CSR.scala 681:27]
      node hi_lo_14 = cat(hi_lo_hi_14, hi_lo_lo_5) @[CSR.scala 681:27]
      node hi_hi_lo_hi_1 = cat(_WIRE_36.uxl, _WIRE_36.pad0) @[CSR.scala 681:27]
      node hi_hi_lo_5 = cat(hi_hi_lo_hi_1, _WIRE_36.tsr) @[CSR.scala 681:27]
      node hi_hi_hi_hi_1 = cat(_WIRE_36.sd, _WIRE_36.pad1) @[CSR.scala 681:27]
      node hi_hi_hi_14 = cat(hi_hi_hi_hi_1, _WIRE_36.sxl) @[CSR.scala 681:27]
      node hi_hi_14 = cat(hi_hi_hi_14, hi_hi_lo_5) @[CSR.scala 681:27]
      node hi_14 = cat(hi_hi_14, hi_lo_14) @[CSR.scala 681:27]
      node _T_3271 = cat(hi_14, lo_14) @[CSR.scala 681:27]
      mstatus <= _T_3271 @[CSR.scala 681:13]
      lr <= UInt<1>("h0") @[CSR.scala 682:8]
      node _T_3272 = bits(sepc, 38, 0) @[CSR.scala 683:22]
      retTarget <= _T_3272 @[CSR.scala 683:15]
    node _T_3273 = and(io.in.valid, isUret) @[CSR.scala 686:15]
    when _T_3273 : @[CSR.scala 686:26]
      wire _WIRE_37 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 687:47]
      wire _WIRE_38 : UInt<64>
      _WIRE_38 <= mstatus
      node _T_3274 = bits(_WIRE_38, 0, 0) @[CSR.scala 687:47]
      _WIRE_37.ie.u <= _T_3274 @[CSR.scala 687:47]
      node _T_3275 = bits(_WIRE_38, 1, 1) @[CSR.scala 687:47]
      _WIRE_37.ie.s <= _T_3275 @[CSR.scala 687:47]
      node _T_3276 = bits(_WIRE_38, 2, 2) @[CSR.scala 687:47]
      _WIRE_37.ie.h <= _T_3276 @[CSR.scala 687:47]
      node _T_3277 = bits(_WIRE_38, 3, 3) @[CSR.scala 687:47]
      _WIRE_37.ie.m <= _T_3277 @[CSR.scala 687:47]
      node _T_3278 = bits(_WIRE_38, 4, 4) @[CSR.scala 687:47]
      _WIRE_37.pie.u <= _T_3278 @[CSR.scala 687:47]
      node _T_3279 = bits(_WIRE_38, 5, 5) @[CSR.scala 687:47]
      _WIRE_37.pie.s <= _T_3279 @[CSR.scala 687:47]
      node _T_3280 = bits(_WIRE_38, 6, 6) @[CSR.scala 687:47]
      _WIRE_37.pie.h <= _T_3280 @[CSR.scala 687:47]
      node _T_3281 = bits(_WIRE_38, 7, 7) @[CSR.scala 687:47]
      _WIRE_37.pie.m <= _T_3281 @[CSR.scala 687:47]
      node _T_3282 = bits(_WIRE_38, 8, 8) @[CSR.scala 687:47]
      _WIRE_37.spp <= _T_3282 @[CSR.scala 687:47]
      node _T_3283 = bits(_WIRE_38, 10, 9) @[CSR.scala 687:47]
      _WIRE_37.hpp <= _T_3283 @[CSR.scala 687:47]
      node _T_3284 = bits(_WIRE_38, 12, 11) @[CSR.scala 687:47]
      _WIRE_37.mpp <= _T_3284 @[CSR.scala 687:47]
      node _T_3285 = bits(_WIRE_38, 14, 13) @[CSR.scala 687:47]
      _WIRE_37.fs <= _T_3285 @[CSR.scala 687:47]
      node _T_3286 = bits(_WIRE_38, 16, 15) @[CSR.scala 687:47]
      _WIRE_37.xs <= _T_3286 @[CSR.scala 687:47]
      node _T_3287 = bits(_WIRE_38, 17, 17) @[CSR.scala 687:47]
      _WIRE_37.mprv <= _T_3287 @[CSR.scala 687:47]
      node _T_3288 = bits(_WIRE_38, 18, 18) @[CSR.scala 687:47]
      _WIRE_37.sum <= _T_3288 @[CSR.scala 687:47]
      node _T_3289 = bits(_WIRE_38, 19, 19) @[CSR.scala 687:47]
      _WIRE_37.mxr <= _T_3289 @[CSR.scala 687:47]
      node _T_3290 = bits(_WIRE_38, 20, 20) @[CSR.scala 687:47]
      _WIRE_37.tvm <= _T_3290 @[CSR.scala 687:47]
      node _T_3291 = bits(_WIRE_38, 21, 21) @[CSR.scala 687:47]
      _WIRE_37.tw <= _T_3291 @[CSR.scala 687:47]
      node _T_3292 = bits(_WIRE_38, 22, 22) @[CSR.scala 687:47]
      _WIRE_37.tsr <= _T_3292 @[CSR.scala 687:47]
      node _T_3293 = bits(_WIRE_38, 31, 23) @[CSR.scala 687:47]
      _WIRE_37.pad0 <= _T_3293 @[CSR.scala 687:47]
      node _T_3294 = bits(_WIRE_38, 33, 32) @[CSR.scala 687:47]
      _WIRE_37.uxl <= _T_3294 @[CSR.scala 687:47]
      node _T_3295 = bits(_WIRE_38, 35, 34) @[CSR.scala 687:47]
      _WIRE_37.sxl <= _T_3295 @[CSR.scala 687:47]
      node _T_3296 = bits(_WIRE_38, 62, 36) @[CSR.scala 687:47]
      _WIRE_37.pad1 <= _T_3296 @[CSR.scala 687:47]
      node _T_3297 = bits(_WIRE_38, 63, 63) @[CSR.scala 687:47]
      _WIRE_37.sd <= _T_3297 @[CSR.scala 687:47]
      wire _WIRE_39 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_39.ie.u <= _WIRE_37.ie.u
      _WIRE_39.ie.s <= _WIRE_37.ie.s
      _WIRE_39.ie.h <= _WIRE_37.ie.h
      _WIRE_39.ie.m <= _WIRE_37.ie.m
      _WIRE_39.pie.u <= _WIRE_37.pie.u
      _WIRE_39.pie.s <= _WIRE_37.pie.s
      _WIRE_39.pie.h <= _WIRE_37.pie.h
      _WIRE_39.pie.m <= _WIRE_37.pie.m
      _WIRE_39.spp <= _WIRE_37.spp
      _WIRE_39.hpp <= _WIRE_37.hpp
      _WIRE_39.mpp <= _WIRE_37.mpp
      _WIRE_39.fs <= _WIRE_37.fs
      _WIRE_39.xs <= _WIRE_37.xs
      _WIRE_39.mprv <= _WIRE_37.mprv
      _WIRE_39.sum <= _WIRE_37.sum
      _WIRE_39.mxr <= _WIRE_37.mxr
      _WIRE_39.tvm <= _WIRE_37.tvm
      _WIRE_39.tw <= _WIRE_37.tw
      _WIRE_39.tsr <= _WIRE_37.tsr
      _WIRE_39.pad0 <= _WIRE_37.pad0
      _WIRE_39.uxl <= _WIRE_37.uxl
      _WIRE_39.sxl <= _WIRE_37.sxl
      _WIRE_39.pad1 <= _WIRE_37.pad1
      _WIRE_39.sd <= _WIRE_37.sd
      wire _WIRE_40 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 688:47]
      wire _WIRE_41 : UInt<64>
      _WIRE_41 <= mstatus
      node _T_3298 = bits(_WIRE_41, 0, 0) @[CSR.scala 688:47]
      _WIRE_40.ie.u <= _T_3298 @[CSR.scala 688:47]
      node _T_3299 = bits(_WIRE_41, 1, 1) @[CSR.scala 688:47]
      _WIRE_40.ie.s <= _T_3299 @[CSR.scala 688:47]
      node _T_3300 = bits(_WIRE_41, 2, 2) @[CSR.scala 688:47]
      _WIRE_40.ie.h <= _T_3300 @[CSR.scala 688:47]
      node _T_3301 = bits(_WIRE_41, 3, 3) @[CSR.scala 688:47]
      _WIRE_40.ie.m <= _T_3301 @[CSR.scala 688:47]
      node _T_3302 = bits(_WIRE_41, 4, 4) @[CSR.scala 688:47]
      _WIRE_40.pie.u <= _T_3302 @[CSR.scala 688:47]
      node _T_3303 = bits(_WIRE_41, 5, 5) @[CSR.scala 688:47]
      _WIRE_40.pie.s <= _T_3303 @[CSR.scala 688:47]
      node _T_3304 = bits(_WIRE_41, 6, 6) @[CSR.scala 688:47]
      _WIRE_40.pie.h <= _T_3304 @[CSR.scala 688:47]
      node _T_3305 = bits(_WIRE_41, 7, 7) @[CSR.scala 688:47]
      _WIRE_40.pie.m <= _T_3305 @[CSR.scala 688:47]
      node _T_3306 = bits(_WIRE_41, 8, 8) @[CSR.scala 688:47]
      _WIRE_40.spp <= _T_3306 @[CSR.scala 688:47]
      node _T_3307 = bits(_WIRE_41, 10, 9) @[CSR.scala 688:47]
      _WIRE_40.hpp <= _T_3307 @[CSR.scala 688:47]
      node _T_3308 = bits(_WIRE_41, 12, 11) @[CSR.scala 688:47]
      _WIRE_40.mpp <= _T_3308 @[CSR.scala 688:47]
      node _T_3309 = bits(_WIRE_41, 14, 13) @[CSR.scala 688:47]
      _WIRE_40.fs <= _T_3309 @[CSR.scala 688:47]
      node _T_3310 = bits(_WIRE_41, 16, 15) @[CSR.scala 688:47]
      _WIRE_40.xs <= _T_3310 @[CSR.scala 688:47]
      node _T_3311 = bits(_WIRE_41, 17, 17) @[CSR.scala 688:47]
      _WIRE_40.mprv <= _T_3311 @[CSR.scala 688:47]
      node _T_3312 = bits(_WIRE_41, 18, 18) @[CSR.scala 688:47]
      _WIRE_40.sum <= _T_3312 @[CSR.scala 688:47]
      node _T_3313 = bits(_WIRE_41, 19, 19) @[CSR.scala 688:47]
      _WIRE_40.mxr <= _T_3313 @[CSR.scala 688:47]
      node _T_3314 = bits(_WIRE_41, 20, 20) @[CSR.scala 688:47]
      _WIRE_40.tvm <= _T_3314 @[CSR.scala 688:47]
      node _T_3315 = bits(_WIRE_41, 21, 21) @[CSR.scala 688:47]
      _WIRE_40.tw <= _T_3315 @[CSR.scala 688:47]
      node _T_3316 = bits(_WIRE_41, 22, 22) @[CSR.scala 688:47]
      _WIRE_40.tsr <= _T_3316 @[CSR.scala 688:47]
      node _T_3317 = bits(_WIRE_41, 31, 23) @[CSR.scala 688:47]
      _WIRE_40.pad0 <= _T_3317 @[CSR.scala 688:47]
      node _T_3318 = bits(_WIRE_41, 33, 32) @[CSR.scala 688:47]
      _WIRE_40.uxl <= _T_3318 @[CSR.scala 688:47]
      node _T_3319 = bits(_WIRE_41, 35, 34) @[CSR.scala 688:47]
      _WIRE_40.sxl <= _T_3319 @[CSR.scala 688:47]
      node _T_3320 = bits(_WIRE_41, 62, 36) @[CSR.scala 688:47]
      _WIRE_40.pad1 <= _T_3320 @[CSR.scala 688:47]
      node _T_3321 = bits(_WIRE_41, 63, 63) @[CSR.scala 688:47]
      _WIRE_40.sd <= _T_3321 @[CSR.scala 688:47]
      wire _WIRE_42 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_42.ie.u <= _WIRE_40.ie.u
      _WIRE_42.ie.s <= _WIRE_40.ie.s
      _WIRE_42.ie.h <= _WIRE_40.ie.h
      _WIRE_42.ie.m <= _WIRE_40.ie.m
      _WIRE_42.pie.u <= _WIRE_40.pie.u
      _WIRE_42.pie.s <= _WIRE_40.pie.s
      _WIRE_42.pie.h <= _WIRE_40.pie.h
      _WIRE_42.pie.m <= _WIRE_40.pie.m
      _WIRE_42.spp <= _WIRE_40.spp
      _WIRE_42.hpp <= _WIRE_40.hpp
      _WIRE_42.mpp <= _WIRE_40.mpp
      _WIRE_42.fs <= _WIRE_40.fs
      _WIRE_42.xs <= _WIRE_40.xs
      _WIRE_42.mprv <= _WIRE_40.mprv
      _WIRE_42.sum <= _WIRE_40.sum
      _WIRE_42.mxr <= _WIRE_40.mxr
      _WIRE_42.tvm <= _WIRE_40.tvm
      _WIRE_42.tw <= _WIRE_40.tw
      _WIRE_42.tsr <= _WIRE_40.tsr
      _WIRE_42.pad0 <= _WIRE_40.pad0
      _WIRE_42.uxl <= _WIRE_40.uxl
      _WIRE_42.sxl <= _WIRE_40.sxl
      _WIRE_42.pad1 <= _WIRE_40.pad1
      _WIRE_42.sd <= _WIRE_40.sd
      _WIRE_42.ie.u <= _WIRE_39.pie.u @[CSR.scala 690:21]
      priviledgeMode <= UInt<1>("h0") @[CSR.scala 691:20]
      _WIRE_42.pie.u <= UInt<1>("h1") @[CSR.scala 692:22]
      node lo_lo_lo_hi_2 = cat(_WIRE_42.ie.h, _WIRE_42.ie.s) @[CSR.scala 693:27]
      node lo_lo_lo_6 = cat(lo_lo_lo_hi_2, _WIRE_42.ie.u) @[CSR.scala 693:27]
      node lo_lo_hi_hi_2 = cat(_WIRE_42.pie.s, _WIRE_42.pie.u) @[CSR.scala 693:27]
      node lo_lo_hi_15 = cat(lo_lo_hi_hi_2, _WIRE_42.ie.m) @[CSR.scala 693:27]
      node lo_lo_15 = cat(lo_lo_hi_15, lo_lo_lo_6) @[CSR.scala 693:27]
      node lo_hi_lo_hi_2 = cat(_WIRE_42.spp, _WIRE_42.pie.m) @[CSR.scala 693:27]
      node lo_hi_lo_6 = cat(lo_hi_lo_hi_2, _WIRE_42.pie.h) @[CSR.scala 693:27]
      node lo_hi_hi_hi_2 = cat(_WIRE_42.fs, _WIRE_42.mpp) @[CSR.scala 693:27]
      node lo_hi_hi_15 = cat(lo_hi_hi_hi_2, _WIRE_42.hpp) @[CSR.scala 693:27]
      node lo_hi_15 = cat(lo_hi_hi_15, lo_hi_lo_6) @[CSR.scala 693:27]
      node lo_15 = cat(lo_hi_15, lo_lo_15) @[CSR.scala 693:27]
      node hi_lo_lo_hi_2 = cat(_WIRE_42.sum, _WIRE_42.mprv) @[CSR.scala 693:27]
      node hi_lo_lo_6 = cat(hi_lo_lo_hi_2, _WIRE_42.xs) @[CSR.scala 693:27]
      node hi_lo_hi_hi_2 = cat(_WIRE_42.tw, _WIRE_42.tvm) @[CSR.scala 693:27]
      node hi_lo_hi_15 = cat(hi_lo_hi_hi_2, _WIRE_42.mxr) @[CSR.scala 693:27]
      node hi_lo_15 = cat(hi_lo_hi_15, hi_lo_lo_6) @[CSR.scala 693:27]
      node hi_hi_lo_hi_2 = cat(_WIRE_42.uxl, _WIRE_42.pad0) @[CSR.scala 693:27]
      node hi_hi_lo_6 = cat(hi_hi_lo_hi_2, _WIRE_42.tsr) @[CSR.scala 693:27]
      node hi_hi_hi_hi_2 = cat(_WIRE_42.sd, _WIRE_42.pad1) @[CSR.scala 693:27]
      node hi_hi_hi_15 = cat(hi_hi_hi_hi_2, _WIRE_42.sxl) @[CSR.scala 693:27]
      node hi_hi_15 = cat(hi_hi_hi_15, hi_hi_lo_6) @[CSR.scala 693:27]
      node hi_15 = cat(hi_hi_15, hi_lo_15) @[CSR.scala 693:27]
      node _T_3322 = cat(hi_15, lo_15) @[CSR.scala 693:27]
      mstatus <= _T_3322 @[CSR.scala 693:13]
      node _T_3323 = bits(uepc, 38, 0) @[CSR.scala 694:22]
      retTarget <= _T_3323 @[CSR.scala 694:15]
    when raiseExceptionIntr : @[CSR.scala 697:29]
      wire _WIRE_43 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 698:47]
      wire _WIRE_44 : UInt<64>
      _WIRE_44 <= mstatus
      node _T_3324 = bits(_WIRE_44, 0, 0) @[CSR.scala 698:47]
      _WIRE_43.ie.u <= _T_3324 @[CSR.scala 698:47]
      node _T_3325 = bits(_WIRE_44, 1, 1) @[CSR.scala 698:47]
      _WIRE_43.ie.s <= _T_3325 @[CSR.scala 698:47]
      node _T_3326 = bits(_WIRE_44, 2, 2) @[CSR.scala 698:47]
      _WIRE_43.ie.h <= _T_3326 @[CSR.scala 698:47]
      node _T_3327 = bits(_WIRE_44, 3, 3) @[CSR.scala 698:47]
      _WIRE_43.ie.m <= _T_3327 @[CSR.scala 698:47]
      node _T_3328 = bits(_WIRE_44, 4, 4) @[CSR.scala 698:47]
      _WIRE_43.pie.u <= _T_3328 @[CSR.scala 698:47]
      node _T_3329 = bits(_WIRE_44, 5, 5) @[CSR.scala 698:47]
      _WIRE_43.pie.s <= _T_3329 @[CSR.scala 698:47]
      node _T_3330 = bits(_WIRE_44, 6, 6) @[CSR.scala 698:47]
      _WIRE_43.pie.h <= _T_3330 @[CSR.scala 698:47]
      node _T_3331 = bits(_WIRE_44, 7, 7) @[CSR.scala 698:47]
      _WIRE_43.pie.m <= _T_3331 @[CSR.scala 698:47]
      node _T_3332 = bits(_WIRE_44, 8, 8) @[CSR.scala 698:47]
      _WIRE_43.spp <= _T_3332 @[CSR.scala 698:47]
      node _T_3333 = bits(_WIRE_44, 10, 9) @[CSR.scala 698:47]
      _WIRE_43.hpp <= _T_3333 @[CSR.scala 698:47]
      node _T_3334 = bits(_WIRE_44, 12, 11) @[CSR.scala 698:47]
      _WIRE_43.mpp <= _T_3334 @[CSR.scala 698:47]
      node _T_3335 = bits(_WIRE_44, 14, 13) @[CSR.scala 698:47]
      _WIRE_43.fs <= _T_3335 @[CSR.scala 698:47]
      node _T_3336 = bits(_WIRE_44, 16, 15) @[CSR.scala 698:47]
      _WIRE_43.xs <= _T_3336 @[CSR.scala 698:47]
      node _T_3337 = bits(_WIRE_44, 17, 17) @[CSR.scala 698:47]
      _WIRE_43.mprv <= _T_3337 @[CSR.scala 698:47]
      node _T_3338 = bits(_WIRE_44, 18, 18) @[CSR.scala 698:47]
      _WIRE_43.sum <= _T_3338 @[CSR.scala 698:47]
      node _T_3339 = bits(_WIRE_44, 19, 19) @[CSR.scala 698:47]
      _WIRE_43.mxr <= _T_3339 @[CSR.scala 698:47]
      node _T_3340 = bits(_WIRE_44, 20, 20) @[CSR.scala 698:47]
      _WIRE_43.tvm <= _T_3340 @[CSR.scala 698:47]
      node _T_3341 = bits(_WIRE_44, 21, 21) @[CSR.scala 698:47]
      _WIRE_43.tw <= _T_3341 @[CSR.scala 698:47]
      node _T_3342 = bits(_WIRE_44, 22, 22) @[CSR.scala 698:47]
      _WIRE_43.tsr <= _T_3342 @[CSR.scala 698:47]
      node _T_3343 = bits(_WIRE_44, 31, 23) @[CSR.scala 698:47]
      _WIRE_43.pad0 <= _T_3343 @[CSR.scala 698:47]
      node _T_3344 = bits(_WIRE_44, 33, 32) @[CSR.scala 698:47]
      _WIRE_43.uxl <= _T_3344 @[CSR.scala 698:47]
      node _T_3345 = bits(_WIRE_44, 35, 34) @[CSR.scala 698:47]
      _WIRE_43.sxl <= _T_3345 @[CSR.scala 698:47]
      node _T_3346 = bits(_WIRE_44, 62, 36) @[CSR.scala 698:47]
      _WIRE_43.pad1 <= _T_3346 @[CSR.scala 698:47]
      node _T_3347 = bits(_WIRE_44, 63, 63) @[CSR.scala 698:47]
      _WIRE_43.sd <= _T_3347 @[CSR.scala 698:47]
      wire _WIRE_45 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_45.ie.u <= _WIRE_43.ie.u
      _WIRE_45.ie.s <= _WIRE_43.ie.s
      _WIRE_45.ie.h <= _WIRE_43.ie.h
      _WIRE_45.ie.m <= _WIRE_43.ie.m
      _WIRE_45.pie.u <= _WIRE_43.pie.u
      _WIRE_45.pie.s <= _WIRE_43.pie.s
      _WIRE_45.pie.h <= _WIRE_43.pie.h
      _WIRE_45.pie.m <= _WIRE_43.pie.m
      _WIRE_45.spp <= _WIRE_43.spp
      _WIRE_45.hpp <= _WIRE_43.hpp
      _WIRE_45.mpp <= _WIRE_43.mpp
      _WIRE_45.fs <= _WIRE_43.fs
      _WIRE_45.xs <= _WIRE_43.xs
      _WIRE_45.mprv <= _WIRE_43.mprv
      _WIRE_45.sum <= _WIRE_43.sum
      _WIRE_45.mxr <= _WIRE_43.mxr
      _WIRE_45.tvm <= _WIRE_43.tvm
      _WIRE_45.tw <= _WIRE_43.tw
      _WIRE_45.tsr <= _WIRE_43.tsr
      _WIRE_45.pad0 <= _WIRE_43.pad0
      _WIRE_45.uxl <= _WIRE_43.uxl
      _WIRE_45.sxl <= _WIRE_43.sxl
      _WIRE_45.pad1 <= _WIRE_43.pad1
      _WIRE_45.sd <= _WIRE_43.sd
      wire _WIRE_46 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}} @[CSR.scala 699:47]
      wire _WIRE_47 : UInt<64>
      _WIRE_47 <= mstatus
      node _T_3348 = bits(_WIRE_47, 0, 0) @[CSR.scala 699:47]
      _WIRE_46.ie.u <= _T_3348 @[CSR.scala 699:47]
      node _T_3349 = bits(_WIRE_47, 1, 1) @[CSR.scala 699:47]
      _WIRE_46.ie.s <= _T_3349 @[CSR.scala 699:47]
      node _T_3350 = bits(_WIRE_47, 2, 2) @[CSR.scala 699:47]
      _WIRE_46.ie.h <= _T_3350 @[CSR.scala 699:47]
      node _T_3351 = bits(_WIRE_47, 3, 3) @[CSR.scala 699:47]
      _WIRE_46.ie.m <= _T_3351 @[CSR.scala 699:47]
      node _T_3352 = bits(_WIRE_47, 4, 4) @[CSR.scala 699:47]
      _WIRE_46.pie.u <= _T_3352 @[CSR.scala 699:47]
      node _T_3353 = bits(_WIRE_47, 5, 5) @[CSR.scala 699:47]
      _WIRE_46.pie.s <= _T_3353 @[CSR.scala 699:47]
      node _T_3354 = bits(_WIRE_47, 6, 6) @[CSR.scala 699:47]
      _WIRE_46.pie.h <= _T_3354 @[CSR.scala 699:47]
      node _T_3355 = bits(_WIRE_47, 7, 7) @[CSR.scala 699:47]
      _WIRE_46.pie.m <= _T_3355 @[CSR.scala 699:47]
      node _T_3356 = bits(_WIRE_47, 8, 8) @[CSR.scala 699:47]
      _WIRE_46.spp <= _T_3356 @[CSR.scala 699:47]
      node _T_3357 = bits(_WIRE_47, 10, 9) @[CSR.scala 699:47]
      _WIRE_46.hpp <= _T_3357 @[CSR.scala 699:47]
      node _T_3358 = bits(_WIRE_47, 12, 11) @[CSR.scala 699:47]
      _WIRE_46.mpp <= _T_3358 @[CSR.scala 699:47]
      node _T_3359 = bits(_WIRE_47, 14, 13) @[CSR.scala 699:47]
      _WIRE_46.fs <= _T_3359 @[CSR.scala 699:47]
      node _T_3360 = bits(_WIRE_47, 16, 15) @[CSR.scala 699:47]
      _WIRE_46.xs <= _T_3360 @[CSR.scala 699:47]
      node _T_3361 = bits(_WIRE_47, 17, 17) @[CSR.scala 699:47]
      _WIRE_46.mprv <= _T_3361 @[CSR.scala 699:47]
      node _T_3362 = bits(_WIRE_47, 18, 18) @[CSR.scala 699:47]
      _WIRE_46.sum <= _T_3362 @[CSR.scala 699:47]
      node _T_3363 = bits(_WIRE_47, 19, 19) @[CSR.scala 699:47]
      _WIRE_46.mxr <= _T_3363 @[CSR.scala 699:47]
      node _T_3364 = bits(_WIRE_47, 20, 20) @[CSR.scala 699:47]
      _WIRE_46.tvm <= _T_3364 @[CSR.scala 699:47]
      node _T_3365 = bits(_WIRE_47, 21, 21) @[CSR.scala 699:47]
      _WIRE_46.tw <= _T_3365 @[CSR.scala 699:47]
      node _T_3366 = bits(_WIRE_47, 22, 22) @[CSR.scala 699:47]
      _WIRE_46.tsr <= _T_3366 @[CSR.scala 699:47]
      node _T_3367 = bits(_WIRE_47, 31, 23) @[CSR.scala 699:47]
      _WIRE_46.pad0 <= _T_3367 @[CSR.scala 699:47]
      node _T_3368 = bits(_WIRE_47, 33, 32) @[CSR.scala 699:47]
      _WIRE_46.uxl <= _T_3368 @[CSR.scala 699:47]
      node _T_3369 = bits(_WIRE_47, 35, 34) @[CSR.scala 699:47]
      _WIRE_46.sxl <= _T_3369 @[CSR.scala 699:47]
      node _T_3370 = bits(_WIRE_47, 62, 36) @[CSR.scala 699:47]
      _WIRE_46.pad1 <= _T_3370 @[CSR.scala 699:47]
      node _T_3371 = bits(_WIRE_47, 63, 63) @[CSR.scala 699:47]
      _WIRE_46.sd <= _T_3371 @[CSR.scala 699:47]
      wire _WIRE_48 : { sd : UInt<1>, pad1 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, pad0 : UInt<9>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, hpp : UInt<2>, spp : UInt<1>, pie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}, ie : { m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>}}
      _WIRE_48.ie.u <= _WIRE_46.ie.u
      _WIRE_48.ie.s <= _WIRE_46.ie.s
      _WIRE_48.ie.h <= _WIRE_46.ie.h
      _WIRE_48.ie.m <= _WIRE_46.ie.m
      _WIRE_48.pie.u <= _WIRE_46.pie.u
      _WIRE_48.pie.s <= _WIRE_46.pie.s
      _WIRE_48.pie.h <= _WIRE_46.pie.h
      _WIRE_48.pie.m <= _WIRE_46.pie.m
      _WIRE_48.spp <= _WIRE_46.spp
      _WIRE_48.hpp <= _WIRE_46.hpp
      _WIRE_48.mpp <= _WIRE_46.mpp
      _WIRE_48.fs <= _WIRE_46.fs
      _WIRE_48.xs <= _WIRE_46.xs
      _WIRE_48.mprv <= _WIRE_46.mprv
      _WIRE_48.sum <= _WIRE_46.sum
      _WIRE_48.mxr <= _WIRE_46.mxr
      _WIRE_48.tvm <= _WIRE_46.tvm
      _WIRE_48.tw <= _WIRE_46.tw
      _WIRE_48.tsr <= _WIRE_46.tsr
      _WIRE_48.pad0 <= _WIRE_46.pad0
      _WIRE_48.uxl <= _WIRE_46.uxl
      _WIRE_48.sxl <= _WIRE_46.sxl
      _WIRE_48.pad1 <= _WIRE_46.pad1
      _WIRE_48.sd <= _WIRE_46.sd
      when delegS : @[CSR.scala 701:19]
        scause <= causeNO @[CSR.scala 702:14]
        node _T_3372 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
        node _T_3373 = bits(_T_3372, 0, 0) @[Bitwise.scala 72:15]
        node _T_3374 = mux(_T_3373, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
        node _T_3375 = cat(_T_3374, io.cfIn.pc) @[Cat.scala 30:58]
        sepc <= _T_3375 @[CSR.scala 703:12]
        _WIRE_48.spp <= priviledgeMode @[CSR.scala 704:22]
        _WIRE_48.pie.s <= _WIRE_45.ie.s @[CSR.scala 705:24]
        _WIRE_48.ie.s <= UInt<1>("h0") @[CSR.scala 706:23]
        priviledgeMode <= UInt<1>("h1") @[CSR.scala 707:22]
        when tvalWen : @[CSR.scala 708:20]
          stval <= UInt<1>("h0") @[CSR.scala 708:27]
      else :
        mcause <= causeNO @[CSR.scala 712:14]
        node _T_3376 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
        node _T_3377 = bits(_T_3376, 0, 0) @[Bitwise.scala 72:15]
        node _T_3378 = mux(_T_3377, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
        node _T_3379 = cat(_T_3378, io.cfIn.pc) @[Cat.scala 30:58]
        mepc <= _T_3379 @[CSR.scala 713:12]
        _WIRE_48.mpp <= priviledgeMode @[CSR.scala 714:22]
        _WIRE_48.pie.m <= _WIRE_45.ie.m @[CSR.scala 715:24]
        _WIRE_48.ie.m <= UInt<1>("h0") @[CSR.scala 716:23]
        priviledgeMode <= UInt<2>("h3") @[CSR.scala 717:22]
        when tvalWen : @[CSR.scala 718:20]
          mtval <= UInt<1>("h0") @[CSR.scala 718:27]
      node lo_lo_lo_hi_3 = cat(_WIRE_48.ie.h, _WIRE_48.ie.s) @[CSR.scala 728:27]
      node lo_lo_lo_7 = cat(lo_lo_lo_hi_3, _WIRE_48.ie.u) @[CSR.scala 728:27]
      node lo_lo_hi_hi_3 = cat(_WIRE_48.pie.s, _WIRE_48.pie.u) @[CSR.scala 728:27]
      node lo_lo_hi_16 = cat(lo_lo_hi_hi_3, _WIRE_48.ie.m) @[CSR.scala 728:27]
      node lo_lo_16 = cat(lo_lo_hi_16, lo_lo_lo_7) @[CSR.scala 728:27]
      node lo_hi_lo_hi_3 = cat(_WIRE_48.spp, _WIRE_48.pie.m) @[CSR.scala 728:27]
      node lo_hi_lo_7 = cat(lo_hi_lo_hi_3, _WIRE_48.pie.h) @[CSR.scala 728:27]
      node lo_hi_hi_hi_3 = cat(_WIRE_48.fs, _WIRE_48.mpp) @[CSR.scala 728:27]
      node lo_hi_hi_16 = cat(lo_hi_hi_hi_3, _WIRE_48.hpp) @[CSR.scala 728:27]
      node lo_hi_16 = cat(lo_hi_hi_16, lo_hi_lo_7) @[CSR.scala 728:27]
      node lo_16 = cat(lo_hi_16, lo_lo_16) @[CSR.scala 728:27]
      node hi_lo_lo_hi_3 = cat(_WIRE_48.sum, _WIRE_48.mprv) @[CSR.scala 728:27]
      node hi_lo_lo_7 = cat(hi_lo_lo_hi_3, _WIRE_48.xs) @[CSR.scala 728:27]
      node hi_lo_hi_hi_3 = cat(_WIRE_48.tw, _WIRE_48.tvm) @[CSR.scala 728:27]
      node hi_lo_hi_16 = cat(hi_lo_hi_hi_3, _WIRE_48.mxr) @[CSR.scala 728:27]
      node hi_lo_16 = cat(hi_lo_hi_16, hi_lo_lo_7) @[CSR.scala 728:27]
      node hi_hi_lo_hi_3 = cat(_WIRE_48.uxl, _WIRE_48.pad0) @[CSR.scala 728:27]
      node hi_hi_lo_7 = cat(hi_hi_lo_hi_3, _WIRE_48.tsr) @[CSR.scala 728:27]
      node hi_hi_hi_hi_3 = cat(_WIRE_48.sd, _WIRE_48.pad1) @[CSR.scala 728:27]
      node hi_hi_hi_16 = cat(hi_hi_hi_hi_3, _WIRE_48.sxl) @[CSR.scala 728:27]
      node hi_hi_16 = cat(hi_hi_hi_16, hi_hi_lo_7) @[CSR.scala 728:27]
      node hi_16 = cat(hi_hi_16, hi_lo_16) @[CSR.scala 728:27]
      node _T_3380 = cat(hi_16, lo_16) @[CSR.scala 728:27]
      mstatus <= _T_3380 @[CSR.scala 728:13]
    io.in.ready <= UInt<1>("h1") @[CSR.scala 731:15]
    io.out.valid <= io.in.valid @[CSR.scala 732:16]
    wire perfCntCond_0 : UInt<1>
    perfCntCond_0 <= UInt<1>("h0")
    wire perfCntCond_1 : UInt<1>
    perfCntCond_1 <= UInt<1>("h0")
    wire perfCntCond_2 : UInt<1>
    perfCntCond_2 <= UInt<1>("h0")
    wire perfCntCond_3 : UInt<1>
    perfCntCond_3 <= UInt<1>("h0")
    wire perfCntCond_4 : UInt<1>
    perfCntCond_4 <= UInt<1>("h0")
    wire perfCntCond_5 : UInt<1>
    perfCntCond_5 <= UInt<1>("h0")
    wire perfCntCond_6 : UInt<1>
    perfCntCond_6 <= UInt<1>("h0")
    wire perfCntCond_7 : UInt<1>
    perfCntCond_7 <= UInt<1>("h0")
    wire perfCntCond_8 : UInt<1>
    perfCntCond_8 <= UInt<1>("h0")
    wire perfCntCond_9 : UInt<1>
    perfCntCond_9 <= UInt<1>("h0")
    wire perfCntCond_10 : UInt<1>
    perfCntCond_10 <= UInt<1>("h0")
    wire perfCntCond_11 : UInt<1>
    perfCntCond_11 <= UInt<1>("h0")
    wire perfCntCond_12 : UInt<1>
    perfCntCond_12 <= UInt<1>("h0")
    wire perfCntCond_13 : UInt<1>
    perfCntCond_13 <= UInt<1>("h0")
    wire perfCntCond_14 : UInt<1>
    perfCntCond_14 <= UInt<1>("h0")
    wire perfCntCond_15 : UInt<1>
    perfCntCond_15 <= UInt<1>("h0")
    wire perfCntCond_16 : UInt<1>
    perfCntCond_16 <= UInt<1>("h0")
    wire perfCntCond_17 : UInt<1>
    perfCntCond_17 <= UInt<1>("h0")
    wire perfCntCond_18 : UInt<1>
    perfCntCond_18 <= UInt<1>("h0")
    wire perfCntCond_19 : UInt<1>
    perfCntCond_19 <= UInt<1>("h0")
    wire perfCntCond_20 : UInt<1>
    perfCntCond_20 <= UInt<1>("h0")
    wire perfCntCond_21 : UInt<1>
    perfCntCond_21 <= UInt<1>("h0")
    wire perfCntCond_22 : UInt<1>
    perfCntCond_22 <= UInt<1>("h0")
    wire perfCntCond_23 : UInt<1>
    perfCntCond_23 <= UInt<1>("h0")
    wire perfCntCond_24 : UInt<1>
    perfCntCond_24 <= UInt<1>("h0")
    wire perfCntCond_25 : UInt<1>
    perfCntCond_25 <= UInt<1>("h0")
    wire perfCntCond_26 : UInt<1>
    perfCntCond_26 <= UInt<1>("h0")
    wire perfCntCond_27 : UInt<1>
    perfCntCond_27 <= UInt<1>("h0")
    wire perfCntCond_28 : UInt<1>
    perfCntCond_28 <= UInt<1>("h0")
    wire perfCntCond_29 : UInt<1>
    perfCntCond_29 <= UInt<1>("h0")
    wire perfCntCond_30 : UInt<1>
    perfCntCond_30 <= UInt<1>("h0")
    wire perfCntCond_31 : UInt<1>
    perfCntCond_31 <= UInt<1>("h0")
    wire perfCntCond_32 : UInt<1>
    perfCntCond_32 <= UInt<1>("h0")
    wire perfCntCond_33 : UInt<1>
    perfCntCond_33 <= UInt<1>("h0")
    wire perfCntCond_34 : UInt<1>
    perfCntCond_34 <= UInt<1>("h0")
    wire perfCntCond_35 : UInt<1>
    perfCntCond_35 <= UInt<1>("h0")
    wire perfCntCond_36 : UInt<1>
    perfCntCond_36 <= UInt<1>("h0")
    wire perfCntCond_37 : UInt<1>
    perfCntCond_37 <= UInt<1>("h0")
    wire perfCntCond_38 : UInt<1>
    perfCntCond_38 <= UInt<1>("h0")
    wire perfCntCond_39 : UInt<1>
    perfCntCond_39 <= UInt<1>("h0")
    wire perfCntCond_40 : UInt<1>
    perfCntCond_40 <= UInt<1>("h0")
    wire perfCntCond_41 : UInt<1>
    perfCntCond_41 <= UInt<1>("h0")
    wire perfCntCond_42 : UInt<1>
    perfCntCond_42 <= UInt<1>("h0")
    wire perfCntCond_43 : UInt<1>
    perfCntCond_43 <= UInt<1>("h0")
    wire perfCntCond_44 : UInt<1>
    perfCntCond_44 <= UInt<1>("h0")
    wire perfCntCond_45 : UInt<1>
    perfCntCond_45 <= UInt<1>("h0")
    wire perfCntCond_46 : UInt<1>
    perfCntCond_46 <= UInt<1>("h0")
    wire perfCntCond_47 : UInt<1>
    perfCntCond_47 <= UInt<1>("h0")
    wire perfCntCond_48 : UInt<1>
    perfCntCond_48 <= UInt<1>("h0")
    wire perfCntCond_49 : UInt<1>
    perfCntCond_49 <= UInt<1>("h0")
    wire perfCntCond_50 : UInt<1>
    perfCntCond_50 <= UInt<1>("h0")
    wire perfCntCond_51 : UInt<1>
    perfCntCond_51 <= UInt<1>("h0")
    wire perfCntCond_52 : UInt<1>
    perfCntCond_52 <= UInt<1>("h0")
    wire perfCntCond_53 : UInt<1>
    perfCntCond_53 <= UInt<1>("h0")
    wire perfCntCond_54 : UInt<1>
    perfCntCond_54 <= UInt<1>("h0")
    wire perfCntCond_55 : UInt<1>
    perfCntCond_55 <= UInt<1>("h0")
    wire perfCntCond_56 : UInt<1>
    perfCntCond_56 <= UInt<1>("h0")
    wire perfCntCond_57 : UInt<1>
    perfCntCond_57 <= UInt<1>("h0")
    wire perfCntCond_58 : UInt<1>
    perfCntCond_58 <= UInt<1>("h0")
    wire perfCntCond_59 : UInt<1>
    perfCntCond_59 <= UInt<1>("h0")
    wire perfCntCond_60 : UInt<1>
    perfCntCond_60 <= UInt<1>("h0")
    wire perfCntCond_61 : UInt<1>
    perfCntCond_61 <= UInt<1>("h0")
    wire perfCntCond_62 : UInt<1>
    perfCntCond_62 <= UInt<1>("h0")
    wire perfCntCond_63 : UInt<1>
    perfCntCond_63 <= UInt<1>("h0")
    wire perfCntCond_64 : UInt<1>
    perfCntCond_64 <= UInt<1>("h0")
    wire perfCntCond_65 : UInt<1>
    perfCntCond_65 <= UInt<1>("h0")
    wire perfCntCond_66 : UInt<1>
    perfCntCond_66 <= UInt<1>("h0")
    wire perfCntCond_67 : UInt<1>
    perfCntCond_67 <= UInt<1>("h0")
    wire perfCntCond_68 : UInt<1>
    perfCntCond_68 <= UInt<1>("h0")
    wire perfCntCond_69 : UInt<1>
    perfCntCond_69 <= UInt<1>("h0")
    wire perfCntCond_70 : UInt<1>
    perfCntCond_70 <= UInt<1>("h0")
    wire perfCntCond_71 : UInt<1>
    perfCntCond_71 <= UInt<1>("h0")
    wire perfCntCond_72 : UInt<1>
    perfCntCond_72 <= UInt<1>("h0")
    wire perfCntCond_73 : UInt<1>
    perfCntCond_73 <= UInt<1>("h0")
    wire perfCntCond_74 : UInt<1>
    perfCntCond_74 <= UInt<1>("h0")
    wire perfCntCond_75 : UInt<1>
    perfCntCond_75 <= UInt<1>("h0")
    wire perfCntCond_76 : UInt<1>
    perfCntCond_76 <= UInt<1>("h0")
    wire perfCntCond_77 : UInt<1>
    perfCntCond_77 <= UInt<1>("h0")
    wire perfCntCond_78 : UInt<1>
    perfCntCond_78 <= UInt<1>("h0")
    wire perfCntCond_79 : UInt<1>
    perfCntCond_79 <= UInt<1>("h0")
    wire perfCntCond_80 : UInt<1>
    perfCntCond_80 <= UInt<1>("h0")
    wire perfCntCond_81 : UInt<1>
    perfCntCond_81 <= UInt<1>("h0")
    wire perfCntCond_82 : UInt<1>
    perfCntCond_82 <= UInt<1>("h0")
    wire perfCntCond_83 : UInt<1>
    perfCntCond_83 <= UInt<1>("h0")
    wire perfCntCond_84 : UInt<1>
    perfCntCond_84 <= UInt<1>("h0")
    wire perfCntCond_85 : UInt<1>
    perfCntCond_85 <= UInt<1>("h0")
    wire perfCntCond_86 : UInt<1>
    perfCntCond_86 <= UInt<1>("h0")
    wire perfCntCond_87 : UInt<1>
    perfCntCond_87 <= UInt<1>("h0")
    wire perfCntCond_88 : UInt<1>
    perfCntCond_88 <= UInt<1>("h0")
    wire perfCntCond_89 : UInt<1>
    perfCntCond_89 <= UInt<1>("h0")
    wire perfCntCond_90 : UInt<1>
    perfCntCond_90 <= UInt<1>("h0")
    wire perfCntCond_91 : UInt<1>
    perfCntCond_91 <= UInt<1>("h0")
    wire perfCntCond_92 : UInt<1>
    perfCntCond_92 <= UInt<1>("h0")
    wire perfCntCond_93 : UInt<1>
    perfCntCond_93 <= UInt<1>("h0")
    wire perfCntCond_94 : UInt<1>
    perfCntCond_94 <= UInt<1>("h0")
    wire perfCntCond_95 : UInt<1>
    perfCntCond_95 <= UInt<1>("h0")
    wire perfCntCond_96 : UInt<1>
    perfCntCond_96 <= UInt<1>("h0")
    wire perfCntCond_97 : UInt<1>
    perfCntCond_97 <= UInt<1>("h0")
    wire perfCntCond_98 : UInt<1>
    perfCntCond_98 <= UInt<1>("h0")
    wire perfCntCond_99 : UInt<1>
    perfCntCond_99 <= UInt<1>("h0")
    wire perfCntCond_100 : UInt<1>
    perfCntCond_100 <= UInt<1>("h0")
    wire perfCntCond_101 : UInt<1>
    perfCntCond_101 <= UInt<1>("h0")
    wire perfCntCond_102 : UInt<1>
    perfCntCond_102 <= UInt<1>("h0")
    wire perfCntCond_103 : UInt<1>
    perfCntCond_103 <= UInt<1>("h0")
    wire perfCntCond_104 : UInt<1>
    perfCntCond_104 <= UInt<1>("h0")
    wire perfCntCond_105 : UInt<1>
    perfCntCond_105 <= UInt<1>("h0")
    wire perfCntCond_106 : UInt<1>
    perfCntCond_106 <= UInt<1>("h0")
    wire perfCntCond_107 : UInt<1>
    perfCntCond_107 <= UInt<1>("h0")
    wire perfCntCond_108 : UInt<1>
    perfCntCond_108 <= UInt<1>("h0")
    wire perfCntCond_109 : UInt<1>
    perfCntCond_109 <= UInt<1>("h0")
    wire perfCntCond_110 : UInt<1>
    perfCntCond_110 <= UInt<1>("h0")
    wire perfCntCond_111 : UInt<1>
    perfCntCond_111 <= UInt<1>("h0")
    wire perfCntCond_112 : UInt<1>
    perfCntCond_112 <= UInt<1>("h0")
    wire perfCntCond_113 : UInt<1>
    perfCntCond_113 <= UInt<1>("h0")
    wire perfCntCond_114 : UInt<1>
    perfCntCond_114 <= UInt<1>("h0")
    wire perfCntCond_115 : UInt<1>
    perfCntCond_115 <= UInt<1>("h0")
    wire perfCntCond_116 : UInt<1>
    perfCntCond_116 <= UInt<1>("h0")
    wire perfCntCond_117 : UInt<1>
    perfCntCond_117 <= UInt<1>("h0")
    wire perfCntCond_118 : UInt<1>
    perfCntCond_118 <= UInt<1>("h0")
    wire perfCntCond_119 : UInt<1>
    perfCntCond_119 <= UInt<1>("h0")
    wire perfCntCond_120 : UInt<1>
    perfCntCond_120 <= UInt<1>("h0")
    wire perfCntCond_121 : UInt<1>
    perfCntCond_121 <= UInt<1>("h0")
    wire perfCntCond_122 : UInt<1>
    perfCntCond_122 <= UInt<1>("h0")
    wire perfCntCond_123 : UInt<1>
    perfCntCond_123 <= UInt<1>("h0")
    wire perfCntCond_124 : UInt<1>
    perfCntCond_124 <= UInt<1>("h0")
    wire perfCntCond_125 : UInt<1>
    perfCntCond_125 <= UInt<1>("h0")
    wire perfCntCond_126 : UInt<1>
    perfCntCond_126 <= UInt<1>("h0")
    wire perfCntCond_127 : UInt<1>
    perfCntCond_127 <= UInt<1>("h0")
    when perfCntCond_0 : @[CSR.scala 837:62]
      node _T_3381 = add(perfCnts_0, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3382 = tail(_T_3381, 1) @[CSR.scala 837:71]
      perfCnts_0 <= _T_3382 @[CSR.scala 837:66]
    when perfCntCond_1 : @[CSR.scala 837:62]
      node _T_3383 = add(perfCnts_1, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3384 = tail(_T_3383, 1) @[CSR.scala 837:71]
      perfCnts_1 <= _T_3384 @[CSR.scala 837:66]
    when perfCntCond_2 : @[CSR.scala 837:62]
      node _T_3385 = add(perfCnts_2, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3386 = tail(_T_3385, 1) @[CSR.scala 837:71]
      perfCnts_2 <= _T_3386 @[CSR.scala 837:66]
    when perfCntCond_3 : @[CSR.scala 837:62]
      node _T_3387 = add(perfCnts_3, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3388 = tail(_T_3387, 1) @[CSR.scala 837:71]
      perfCnts_3 <= _T_3388 @[CSR.scala 837:66]
    when perfCntCond_4 : @[CSR.scala 837:62]
      node _T_3389 = add(perfCnts_4, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3390 = tail(_T_3389, 1) @[CSR.scala 837:71]
      perfCnts_4 <= _T_3390 @[CSR.scala 837:66]
    when perfCntCond_5 : @[CSR.scala 837:62]
      node _T_3391 = add(perfCnts_5, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3392 = tail(_T_3391, 1) @[CSR.scala 837:71]
      perfCnts_5 <= _T_3392 @[CSR.scala 837:66]
    when perfCntCond_6 : @[CSR.scala 837:62]
      node _T_3393 = add(perfCnts_6, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3394 = tail(_T_3393, 1) @[CSR.scala 837:71]
      perfCnts_6 <= _T_3394 @[CSR.scala 837:66]
    when perfCntCond_7 : @[CSR.scala 837:62]
      node _T_3395 = add(perfCnts_7, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3396 = tail(_T_3395, 1) @[CSR.scala 837:71]
      perfCnts_7 <= _T_3396 @[CSR.scala 837:66]
    when perfCntCond_8 : @[CSR.scala 837:62]
      node _T_3397 = add(perfCnts_8, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3398 = tail(_T_3397, 1) @[CSR.scala 837:71]
      perfCnts_8 <= _T_3398 @[CSR.scala 837:66]
    when perfCntCond_9 : @[CSR.scala 837:62]
      node _T_3399 = add(perfCnts_9, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3400 = tail(_T_3399, 1) @[CSR.scala 837:71]
      perfCnts_9 <= _T_3400 @[CSR.scala 837:66]
    when perfCntCond_10 : @[CSR.scala 837:62]
      node _T_3401 = add(perfCnts_10, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3402 = tail(_T_3401, 1) @[CSR.scala 837:71]
      perfCnts_10 <= _T_3402 @[CSR.scala 837:66]
    when perfCntCond_11 : @[CSR.scala 837:62]
      node _T_3403 = add(perfCnts_11, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3404 = tail(_T_3403, 1) @[CSR.scala 837:71]
      perfCnts_11 <= _T_3404 @[CSR.scala 837:66]
    when perfCntCond_12 : @[CSR.scala 837:62]
      node _T_3405 = add(perfCnts_12, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3406 = tail(_T_3405, 1) @[CSR.scala 837:71]
      perfCnts_12 <= _T_3406 @[CSR.scala 837:66]
    when perfCntCond_13 : @[CSR.scala 837:62]
      node _T_3407 = add(perfCnts_13, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3408 = tail(_T_3407, 1) @[CSR.scala 837:71]
      perfCnts_13 <= _T_3408 @[CSR.scala 837:66]
    when perfCntCond_14 : @[CSR.scala 837:62]
      node _T_3409 = add(perfCnts_14, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3410 = tail(_T_3409, 1) @[CSR.scala 837:71]
      perfCnts_14 <= _T_3410 @[CSR.scala 837:66]
    when perfCntCond_15 : @[CSR.scala 837:62]
      node _T_3411 = add(perfCnts_15, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3412 = tail(_T_3411, 1) @[CSR.scala 837:71]
      perfCnts_15 <= _T_3412 @[CSR.scala 837:66]
    when perfCntCond_16 : @[CSR.scala 837:62]
      node _T_3413 = add(perfCnts_16, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3414 = tail(_T_3413, 1) @[CSR.scala 837:71]
      perfCnts_16 <= _T_3414 @[CSR.scala 837:66]
    when perfCntCond_17 : @[CSR.scala 837:62]
      node _T_3415 = add(perfCnts_17, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3416 = tail(_T_3415, 1) @[CSR.scala 837:71]
      perfCnts_17 <= _T_3416 @[CSR.scala 837:66]
    when perfCntCond_18 : @[CSR.scala 837:62]
      node _T_3417 = add(perfCnts_18, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3418 = tail(_T_3417, 1) @[CSR.scala 837:71]
      perfCnts_18 <= _T_3418 @[CSR.scala 837:66]
    when perfCntCond_19 : @[CSR.scala 837:62]
      node _T_3419 = add(perfCnts_19, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3420 = tail(_T_3419, 1) @[CSR.scala 837:71]
      perfCnts_19 <= _T_3420 @[CSR.scala 837:66]
    when perfCntCond_20 : @[CSR.scala 837:62]
      node _T_3421 = add(perfCnts_20, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3422 = tail(_T_3421, 1) @[CSR.scala 837:71]
      perfCnts_20 <= _T_3422 @[CSR.scala 837:66]
    when perfCntCond_21 : @[CSR.scala 837:62]
      node _T_3423 = add(perfCnts_21, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3424 = tail(_T_3423, 1) @[CSR.scala 837:71]
      perfCnts_21 <= _T_3424 @[CSR.scala 837:66]
    when perfCntCond_22 : @[CSR.scala 837:62]
      node _T_3425 = add(perfCnts_22, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3426 = tail(_T_3425, 1) @[CSR.scala 837:71]
      perfCnts_22 <= _T_3426 @[CSR.scala 837:66]
    when perfCntCond_23 : @[CSR.scala 837:62]
      node _T_3427 = add(perfCnts_23, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3428 = tail(_T_3427, 1) @[CSR.scala 837:71]
      perfCnts_23 <= _T_3428 @[CSR.scala 837:66]
    when perfCntCond_24 : @[CSR.scala 837:62]
      node _T_3429 = add(perfCnts_24, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3430 = tail(_T_3429, 1) @[CSR.scala 837:71]
      perfCnts_24 <= _T_3430 @[CSR.scala 837:66]
    when perfCntCond_25 : @[CSR.scala 837:62]
      node _T_3431 = add(perfCnts_25, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3432 = tail(_T_3431, 1) @[CSR.scala 837:71]
      perfCnts_25 <= _T_3432 @[CSR.scala 837:66]
    when perfCntCond_26 : @[CSR.scala 837:62]
      node _T_3433 = add(perfCnts_26, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3434 = tail(_T_3433, 1) @[CSR.scala 837:71]
      perfCnts_26 <= _T_3434 @[CSR.scala 837:66]
    when perfCntCond_27 : @[CSR.scala 837:62]
      node _T_3435 = add(perfCnts_27, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3436 = tail(_T_3435, 1) @[CSR.scala 837:71]
      perfCnts_27 <= _T_3436 @[CSR.scala 837:66]
    when perfCntCond_28 : @[CSR.scala 837:62]
      node _T_3437 = add(perfCnts_28, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3438 = tail(_T_3437, 1) @[CSR.scala 837:71]
      perfCnts_28 <= _T_3438 @[CSR.scala 837:66]
    when perfCntCond_29 : @[CSR.scala 837:62]
      node _T_3439 = add(perfCnts_29, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3440 = tail(_T_3439, 1) @[CSR.scala 837:71]
      perfCnts_29 <= _T_3440 @[CSR.scala 837:66]
    when perfCntCond_30 : @[CSR.scala 837:62]
      node _T_3441 = add(perfCnts_30, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3442 = tail(_T_3441, 1) @[CSR.scala 837:71]
      perfCnts_30 <= _T_3442 @[CSR.scala 837:66]
    when perfCntCond_31 : @[CSR.scala 837:62]
      node _T_3443 = add(perfCnts_31, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3444 = tail(_T_3443, 1) @[CSR.scala 837:71]
      perfCnts_31 <= _T_3444 @[CSR.scala 837:66]
    when perfCntCond_32 : @[CSR.scala 837:62]
      node _T_3445 = add(perfCnts_32, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3446 = tail(_T_3445, 1) @[CSR.scala 837:71]
      perfCnts_32 <= _T_3446 @[CSR.scala 837:66]
    when perfCntCond_33 : @[CSR.scala 837:62]
      node _T_3447 = add(perfCnts_33, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3448 = tail(_T_3447, 1) @[CSR.scala 837:71]
      perfCnts_33 <= _T_3448 @[CSR.scala 837:66]
    when perfCntCond_34 : @[CSR.scala 837:62]
      node _T_3449 = add(perfCnts_34, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3450 = tail(_T_3449, 1) @[CSR.scala 837:71]
      perfCnts_34 <= _T_3450 @[CSR.scala 837:66]
    when perfCntCond_35 : @[CSR.scala 837:62]
      node _T_3451 = add(perfCnts_35, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3452 = tail(_T_3451, 1) @[CSR.scala 837:71]
      perfCnts_35 <= _T_3452 @[CSR.scala 837:66]
    when perfCntCond_36 : @[CSR.scala 837:62]
      node _T_3453 = add(perfCnts_36, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3454 = tail(_T_3453, 1) @[CSR.scala 837:71]
      perfCnts_36 <= _T_3454 @[CSR.scala 837:66]
    when perfCntCond_37 : @[CSR.scala 837:62]
      node _T_3455 = add(perfCnts_37, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3456 = tail(_T_3455, 1) @[CSR.scala 837:71]
      perfCnts_37 <= _T_3456 @[CSR.scala 837:66]
    when perfCntCond_38 : @[CSR.scala 837:62]
      node _T_3457 = add(perfCnts_38, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3458 = tail(_T_3457, 1) @[CSR.scala 837:71]
      perfCnts_38 <= _T_3458 @[CSR.scala 837:66]
    when perfCntCond_39 : @[CSR.scala 837:62]
      node _T_3459 = add(perfCnts_39, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3460 = tail(_T_3459, 1) @[CSR.scala 837:71]
      perfCnts_39 <= _T_3460 @[CSR.scala 837:66]
    when perfCntCond_40 : @[CSR.scala 837:62]
      node _T_3461 = add(perfCnts_40, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3462 = tail(_T_3461, 1) @[CSR.scala 837:71]
      perfCnts_40 <= _T_3462 @[CSR.scala 837:66]
    when perfCntCond_41 : @[CSR.scala 837:62]
      node _T_3463 = add(perfCnts_41, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3464 = tail(_T_3463, 1) @[CSR.scala 837:71]
      perfCnts_41 <= _T_3464 @[CSR.scala 837:66]
    when perfCntCond_42 : @[CSR.scala 837:62]
      node _T_3465 = add(perfCnts_42, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3466 = tail(_T_3465, 1) @[CSR.scala 837:71]
      perfCnts_42 <= _T_3466 @[CSR.scala 837:66]
    when perfCntCond_43 : @[CSR.scala 837:62]
      node _T_3467 = add(perfCnts_43, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3468 = tail(_T_3467, 1) @[CSR.scala 837:71]
      perfCnts_43 <= _T_3468 @[CSR.scala 837:66]
    when perfCntCond_44 : @[CSR.scala 837:62]
      node _T_3469 = add(perfCnts_44, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3470 = tail(_T_3469, 1) @[CSR.scala 837:71]
      perfCnts_44 <= _T_3470 @[CSR.scala 837:66]
    when perfCntCond_45 : @[CSR.scala 837:62]
      node _T_3471 = add(perfCnts_45, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3472 = tail(_T_3471, 1) @[CSR.scala 837:71]
      perfCnts_45 <= _T_3472 @[CSR.scala 837:66]
    when perfCntCond_46 : @[CSR.scala 837:62]
      node _T_3473 = add(perfCnts_46, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3474 = tail(_T_3473, 1) @[CSR.scala 837:71]
      perfCnts_46 <= _T_3474 @[CSR.scala 837:66]
    when perfCntCond_47 : @[CSR.scala 837:62]
      node _T_3475 = add(perfCnts_47, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3476 = tail(_T_3475, 1) @[CSR.scala 837:71]
      perfCnts_47 <= _T_3476 @[CSR.scala 837:66]
    when perfCntCond_48 : @[CSR.scala 837:62]
      node _T_3477 = add(perfCnts_48, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3478 = tail(_T_3477, 1) @[CSR.scala 837:71]
      perfCnts_48 <= _T_3478 @[CSR.scala 837:66]
    when perfCntCond_49 : @[CSR.scala 837:62]
      node _T_3479 = add(perfCnts_49, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3480 = tail(_T_3479, 1) @[CSR.scala 837:71]
      perfCnts_49 <= _T_3480 @[CSR.scala 837:66]
    when perfCntCond_50 : @[CSR.scala 837:62]
      node _T_3481 = add(perfCnts_50, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3482 = tail(_T_3481, 1) @[CSR.scala 837:71]
      perfCnts_50 <= _T_3482 @[CSR.scala 837:66]
    when perfCntCond_51 : @[CSR.scala 837:62]
      node _T_3483 = add(perfCnts_51, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3484 = tail(_T_3483, 1) @[CSR.scala 837:71]
      perfCnts_51 <= _T_3484 @[CSR.scala 837:66]
    when perfCntCond_52 : @[CSR.scala 837:62]
      node _T_3485 = add(perfCnts_52, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3486 = tail(_T_3485, 1) @[CSR.scala 837:71]
      perfCnts_52 <= _T_3486 @[CSR.scala 837:66]
    when perfCntCond_53 : @[CSR.scala 837:62]
      node _T_3487 = add(perfCnts_53, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3488 = tail(_T_3487, 1) @[CSR.scala 837:71]
      perfCnts_53 <= _T_3488 @[CSR.scala 837:66]
    when perfCntCond_54 : @[CSR.scala 837:62]
      node _T_3489 = add(perfCnts_54, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3490 = tail(_T_3489, 1) @[CSR.scala 837:71]
      perfCnts_54 <= _T_3490 @[CSR.scala 837:66]
    when perfCntCond_55 : @[CSR.scala 837:62]
      node _T_3491 = add(perfCnts_55, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3492 = tail(_T_3491, 1) @[CSR.scala 837:71]
      perfCnts_55 <= _T_3492 @[CSR.scala 837:66]
    when perfCntCond_56 : @[CSR.scala 837:62]
      node _T_3493 = add(perfCnts_56, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3494 = tail(_T_3493, 1) @[CSR.scala 837:71]
      perfCnts_56 <= _T_3494 @[CSR.scala 837:66]
    when perfCntCond_57 : @[CSR.scala 837:62]
      node _T_3495 = add(perfCnts_57, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3496 = tail(_T_3495, 1) @[CSR.scala 837:71]
      perfCnts_57 <= _T_3496 @[CSR.scala 837:66]
    when perfCntCond_58 : @[CSR.scala 837:62]
      node _T_3497 = add(perfCnts_58, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3498 = tail(_T_3497, 1) @[CSR.scala 837:71]
      perfCnts_58 <= _T_3498 @[CSR.scala 837:66]
    when perfCntCond_59 : @[CSR.scala 837:62]
      node _T_3499 = add(perfCnts_59, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3500 = tail(_T_3499, 1) @[CSR.scala 837:71]
      perfCnts_59 <= _T_3500 @[CSR.scala 837:66]
    when perfCntCond_60 : @[CSR.scala 837:62]
      node _T_3501 = add(perfCnts_60, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3502 = tail(_T_3501, 1) @[CSR.scala 837:71]
      perfCnts_60 <= _T_3502 @[CSR.scala 837:66]
    when perfCntCond_61 : @[CSR.scala 837:62]
      node _T_3503 = add(perfCnts_61, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3504 = tail(_T_3503, 1) @[CSR.scala 837:71]
      perfCnts_61 <= _T_3504 @[CSR.scala 837:66]
    when perfCntCond_62 : @[CSR.scala 837:62]
      node _T_3505 = add(perfCnts_62, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3506 = tail(_T_3505, 1) @[CSR.scala 837:71]
      perfCnts_62 <= _T_3506 @[CSR.scala 837:66]
    when perfCntCond_63 : @[CSR.scala 837:62]
      node _T_3507 = add(perfCnts_63, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3508 = tail(_T_3507, 1) @[CSR.scala 837:71]
      perfCnts_63 <= _T_3508 @[CSR.scala 837:66]
    when perfCntCond_64 : @[CSR.scala 837:62]
      node _T_3509 = add(perfCnts_64, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3510 = tail(_T_3509, 1) @[CSR.scala 837:71]
      perfCnts_64 <= _T_3510 @[CSR.scala 837:66]
    when perfCntCond_65 : @[CSR.scala 837:62]
      node _T_3511 = add(perfCnts_65, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3512 = tail(_T_3511, 1) @[CSR.scala 837:71]
      perfCnts_65 <= _T_3512 @[CSR.scala 837:66]
    when perfCntCond_66 : @[CSR.scala 837:62]
      node _T_3513 = add(perfCnts_66, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3514 = tail(_T_3513, 1) @[CSR.scala 837:71]
      perfCnts_66 <= _T_3514 @[CSR.scala 837:66]
    when perfCntCond_67 : @[CSR.scala 837:62]
      node _T_3515 = add(perfCnts_67, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3516 = tail(_T_3515, 1) @[CSR.scala 837:71]
      perfCnts_67 <= _T_3516 @[CSR.scala 837:66]
    when perfCntCond_68 : @[CSR.scala 837:62]
      node _T_3517 = add(perfCnts_68, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3518 = tail(_T_3517, 1) @[CSR.scala 837:71]
      perfCnts_68 <= _T_3518 @[CSR.scala 837:66]
    when perfCntCond_69 : @[CSR.scala 837:62]
      node _T_3519 = add(perfCnts_69, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3520 = tail(_T_3519, 1) @[CSR.scala 837:71]
      perfCnts_69 <= _T_3520 @[CSR.scala 837:66]
    when perfCntCond_70 : @[CSR.scala 837:62]
      node _T_3521 = add(perfCnts_70, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3522 = tail(_T_3521, 1) @[CSR.scala 837:71]
      perfCnts_70 <= _T_3522 @[CSR.scala 837:66]
    when perfCntCond_71 : @[CSR.scala 837:62]
      node _T_3523 = add(perfCnts_71, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3524 = tail(_T_3523, 1) @[CSR.scala 837:71]
      perfCnts_71 <= _T_3524 @[CSR.scala 837:66]
    when perfCntCond_72 : @[CSR.scala 837:62]
      node _T_3525 = add(perfCnts_72, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3526 = tail(_T_3525, 1) @[CSR.scala 837:71]
      perfCnts_72 <= _T_3526 @[CSR.scala 837:66]
    when perfCntCond_73 : @[CSR.scala 837:62]
      node _T_3527 = add(perfCnts_73, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3528 = tail(_T_3527, 1) @[CSR.scala 837:71]
      perfCnts_73 <= _T_3528 @[CSR.scala 837:66]
    when perfCntCond_74 : @[CSR.scala 837:62]
      node _T_3529 = add(perfCnts_74, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3530 = tail(_T_3529, 1) @[CSR.scala 837:71]
      perfCnts_74 <= _T_3530 @[CSR.scala 837:66]
    when perfCntCond_75 : @[CSR.scala 837:62]
      node _T_3531 = add(perfCnts_75, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3532 = tail(_T_3531, 1) @[CSR.scala 837:71]
      perfCnts_75 <= _T_3532 @[CSR.scala 837:66]
    when perfCntCond_76 : @[CSR.scala 837:62]
      node _T_3533 = add(perfCnts_76, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3534 = tail(_T_3533, 1) @[CSR.scala 837:71]
      perfCnts_76 <= _T_3534 @[CSR.scala 837:66]
    when perfCntCond_77 : @[CSR.scala 837:62]
      node _T_3535 = add(perfCnts_77, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3536 = tail(_T_3535, 1) @[CSR.scala 837:71]
      perfCnts_77 <= _T_3536 @[CSR.scala 837:66]
    when perfCntCond_78 : @[CSR.scala 837:62]
      node _T_3537 = add(perfCnts_78, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3538 = tail(_T_3537, 1) @[CSR.scala 837:71]
      perfCnts_78 <= _T_3538 @[CSR.scala 837:66]
    when perfCntCond_79 : @[CSR.scala 837:62]
      node _T_3539 = add(perfCnts_79, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3540 = tail(_T_3539, 1) @[CSR.scala 837:71]
      perfCnts_79 <= _T_3540 @[CSR.scala 837:66]
    when perfCntCond_80 : @[CSR.scala 837:62]
      node _T_3541 = add(perfCnts_80, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3542 = tail(_T_3541, 1) @[CSR.scala 837:71]
      perfCnts_80 <= _T_3542 @[CSR.scala 837:66]
    when perfCntCond_81 : @[CSR.scala 837:62]
      node _T_3543 = add(perfCnts_81, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3544 = tail(_T_3543, 1) @[CSR.scala 837:71]
      perfCnts_81 <= _T_3544 @[CSR.scala 837:66]
    when perfCntCond_82 : @[CSR.scala 837:62]
      node _T_3545 = add(perfCnts_82, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3546 = tail(_T_3545, 1) @[CSR.scala 837:71]
      perfCnts_82 <= _T_3546 @[CSR.scala 837:66]
    when perfCntCond_83 : @[CSR.scala 837:62]
      node _T_3547 = add(perfCnts_83, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3548 = tail(_T_3547, 1) @[CSR.scala 837:71]
      perfCnts_83 <= _T_3548 @[CSR.scala 837:66]
    when perfCntCond_84 : @[CSR.scala 837:62]
      node _T_3549 = add(perfCnts_84, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3550 = tail(_T_3549, 1) @[CSR.scala 837:71]
      perfCnts_84 <= _T_3550 @[CSR.scala 837:66]
    when perfCntCond_85 : @[CSR.scala 837:62]
      node _T_3551 = add(perfCnts_85, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3552 = tail(_T_3551, 1) @[CSR.scala 837:71]
      perfCnts_85 <= _T_3552 @[CSR.scala 837:66]
    when perfCntCond_86 : @[CSR.scala 837:62]
      node _T_3553 = add(perfCnts_86, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3554 = tail(_T_3553, 1) @[CSR.scala 837:71]
      perfCnts_86 <= _T_3554 @[CSR.scala 837:66]
    when perfCntCond_87 : @[CSR.scala 837:62]
      node _T_3555 = add(perfCnts_87, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3556 = tail(_T_3555, 1) @[CSR.scala 837:71]
      perfCnts_87 <= _T_3556 @[CSR.scala 837:66]
    when perfCntCond_88 : @[CSR.scala 837:62]
      node _T_3557 = add(perfCnts_88, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3558 = tail(_T_3557, 1) @[CSR.scala 837:71]
      perfCnts_88 <= _T_3558 @[CSR.scala 837:66]
    when perfCntCond_89 : @[CSR.scala 837:62]
      node _T_3559 = add(perfCnts_89, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3560 = tail(_T_3559, 1) @[CSR.scala 837:71]
      perfCnts_89 <= _T_3560 @[CSR.scala 837:66]
    when perfCntCond_90 : @[CSR.scala 837:62]
      node _T_3561 = add(perfCnts_90, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3562 = tail(_T_3561, 1) @[CSR.scala 837:71]
      perfCnts_90 <= _T_3562 @[CSR.scala 837:66]
    when perfCntCond_91 : @[CSR.scala 837:62]
      node _T_3563 = add(perfCnts_91, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3564 = tail(_T_3563, 1) @[CSR.scala 837:71]
      perfCnts_91 <= _T_3564 @[CSR.scala 837:66]
    when perfCntCond_92 : @[CSR.scala 837:62]
      node _T_3565 = add(perfCnts_92, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3566 = tail(_T_3565, 1) @[CSR.scala 837:71]
      perfCnts_92 <= _T_3566 @[CSR.scala 837:66]
    when perfCntCond_93 : @[CSR.scala 837:62]
      node _T_3567 = add(perfCnts_93, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3568 = tail(_T_3567, 1) @[CSR.scala 837:71]
      perfCnts_93 <= _T_3568 @[CSR.scala 837:66]
    when perfCntCond_94 : @[CSR.scala 837:62]
      node _T_3569 = add(perfCnts_94, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3570 = tail(_T_3569, 1) @[CSR.scala 837:71]
      perfCnts_94 <= _T_3570 @[CSR.scala 837:66]
    when perfCntCond_95 : @[CSR.scala 837:62]
      node _T_3571 = add(perfCnts_95, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3572 = tail(_T_3571, 1) @[CSR.scala 837:71]
      perfCnts_95 <= _T_3572 @[CSR.scala 837:66]
    when perfCntCond_96 : @[CSR.scala 837:62]
      node _T_3573 = add(perfCnts_96, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3574 = tail(_T_3573, 1) @[CSR.scala 837:71]
      perfCnts_96 <= _T_3574 @[CSR.scala 837:66]
    when perfCntCond_97 : @[CSR.scala 837:62]
      node _T_3575 = add(perfCnts_97, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3576 = tail(_T_3575, 1) @[CSR.scala 837:71]
      perfCnts_97 <= _T_3576 @[CSR.scala 837:66]
    when perfCntCond_98 : @[CSR.scala 837:62]
      node _T_3577 = add(perfCnts_98, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3578 = tail(_T_3577, 1) @[CSR.scala 837:71]
      perfCnts_98 <= _T_3578 @[CSR.scala 837:66]
    when perfCntCond_99 : @[CSR.scala 837:62]
      node _T_3579 = add(perfCnts_99, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3580 = tail(_T_3579, 1) @[CSR.scala 837:71]
      perfCnts_99 <= _T_3580 @[CSR.scala 837:66]
    when perfCntCond_100 : @[CSR.scala 837:62]
      node _T_3581 = add(perfCnts_100, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3582 = tail(_T_3581, 1) @[CSR.scala 837:71]
      perfCnts_100 <= _T_3582 @[CSR.scala 837:66]
    when perfCntCond_101 : @[CSR.scala 837:62]
      node _T_3583 = add(perfCnts_101, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3584 = tail(_T_3583, 1) @[CSR.scala 837:71]
      perfCnts_101 <= _T_3584 @[CSR.scala 837:66]
    when perfCntCond_102 : @[CSR.scala 837:62]
      node _T_3585 = add(perfCnts_102, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3586 = tail(_T_3585, 1) @[CSR.scala 837:71]
      perfCnts_102 <= _T_3586 @[CSR.scala 837:66]
    when perfCntCond_103 : @[CSR.scala 837:62]
      node _T_3587 = add(perfCnts_103, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3588 = tail(_T_3587, 1) @[CSR.scala 837:71]
      perfCnts_103 <= _T_3588 @[CSR.scala 837:66]
    when perfCntCond_104 : @[CSR.scala 837:62]
      node _T_3589 = add(perfCnts_104, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3590 = tail(_T_3589, 1) @[CSR.scala 837:71]
      perfCnts_104 <= _T_3590 @[CSR.scala 837:66]
    when perfCntCond_105 : @[CSR.scala 837:62]
      node _T_3591 = add(perfCnts_105, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3592 = tail(_T_3591, 1) @[CSR.scala 837:71]
      perfCnts_105 <= _T_3592 @[CSR.scala 837:66]
    when perfCntCond_106 : @[CSR.scala 837:62]
      node _T_3593 = add(perfCnts_106, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3594 = tail(_T_3593, 1) @[CSR.scala 837:71]
      perfCnts_106 <= _T_3594 @[CSR.scala 837:66]
    when perfCntCond_107 : @[CSR.scala 837:62]
      node _T_3595 = add(perfCnts_107, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3596 = tail(_T_3595, 1) @[CSR.scala 837:71]
      perfCnts_107 <= _T_3596 @[CSR.scala 837:66]
    when perfCntCond_108 : @[CSR.scala 837:62]
      node _T_3597 = add(perfCnts_108, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3598 = tail(_T_3597, 1) @[CSR.scala 837:71]
      perfCnts_108 <= _T_3598 @[CSR.scala 837:66]
    when perfCntCond_109 : @[CSR.scala 837:62]
      node _T_3599 = add(perfCnts_109, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3600 = tail(_T_3599, 1) @[CSR.scala 837:71]
      perfCnts_109 <= _T_3600 @[CSR.scala 837:66]
    when perfCntCond_110 : @[CSR.scala 837:62]
      node _T_3601 = add(perfCnts_110, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3602 = tail(_T_3601, 1) @[CSR.scala 837:71]
      perfCnts_110 <= _T_3602 @[CSR.scala 837:66]
    when perfCntCond_111 : @[CSR.scala 837:62]
      node _T_3603 = add(perfCnts_111, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3604 = tail(_T_3603, 1) @[CSR.scala 837:71]
      perfCnts_111 <= _T_3604 @[CSR.scala 837:66]
    when perfCntCond_112 : @[CSR.scala 837:62]
      node _T_3605 = add(perfCnts_112, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3606 = tail(_T_3605, 1) @[CSR.scala 837:71]
      perfCnts_112 <= _T_3606 @[CSR.scala 837:66]
    when perfCntCond_113 : @[CSR.scala 837:62]
      node _T_3607 = add(perfCnts_113, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3608 = tail(_T_3607, 1) @[CSR.scala 837:71]
      perfCnts_113 <= _T_3608 @[CSR.scala 837:66]
    when perfCntCond_114 : @[CSR.scala 837:62]
      node _T_3609 = add(perfCnts_114, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3610 = tail(_T_3609, 1) @[CSR.scala 837:71]
      perfCnts_114 <= _T_3610 @[CSR.scala 837:66]
    when perfCntCond_115 : @[CSR.scala 837:62]
      node _T_3611 = add(perfCnts_115, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3612 = tail(_T_3611, 1) @[CSR.scala 837:71]
      perfCnts_115 <= _T_3612 @[CSR.scala 837:66]
    when perfCntCond_116 : @[CSR.scala 837:62]
      node _T_3613 = add(perfCnts_116, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3614 = tail(_T_3613, 1) @[CSR.scala 837:71]
      perfCnts_116 <= _T_3614 @[CSR.scala 837:66]
    when perfCntCond_117 : @[CSR.scala 837:62]
      node _T_3615 = add(perfCnts_117, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3616 = tail(_T_3615, 1) @[CSR.scala 837:71]
      perfCnts_117 <= _T_3616 @[CSR.scala 837:66]
    when perfCntCond_118 : @[CSR.scala 837:62]
      node _T_3617 = add(perfCnts_118, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3618 = tail(_T_3617, 1) @[CSR.scala 837:71]
      perfCnts_118 <= _T_3618 @[CSR.scala 837:66]
    when perfCntCond_119 : @[CSR.scala 837:62]
      node _T_3619 = add(perfCnts_119, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3620 = tail(_T_3619, 1) @[CSR.scala 837:71]
      perfCnts_119 <= _T_3620 @[CSR.scala 837:66]
    when perfCntCond_120 : @[CSR.scala 837:62]
      node _T_3621 = add(perfCnts_120, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3622 = tail(_T_3621, 1) @[CSR.scala 837:71]
      perfCnts_120 <= _T_3622 @[CSR.scala 837:66]
    when perfCntCond_121 : @[CSR.scala 837:62]
      node _T_3623 = add(perfCnts_121, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3624 = tail(_T_3623, 1) @[CSR.scala 837:71]
      perfCnts_121 <= _T_3624 @[CSR.scala 837:66]
    when perfCntCond_122 : @[CSR.scala 837:62]
      node _T_3625 = add(perfCnts_122, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3626 = tail(_T_3625, 1) @[CSR.scala 837:71]
      perfCnts_122 <= _T_3626 @[CSR.scala 837:66]
    when perfCntCond_123 : @[CSR.scala 837:62]
      node _T_3627 = add(perfCnts_123, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3628 = tail(_T_3627, 1) @[CSR.scala 837:71]
      perfCnts_123 <= _T_3628 @[CSR.scala 837:66]
    when perfCntCond_124 : @[CSR.scala 837:62]
      node _T_3629 = add(perfCnts_124, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3630 = tail(_T_3629, 1) @[CSR.scala 837:71]
      perfCnts_124 <= _T_3630 @[CSR.scala 837:66]
    when perfCntCond_125 : @[CSR.scala 837:62]
      node _T_3631 = add(perfCnts_125, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3632 = tail(_T_3631, 1) @[CSR.scala 837:71]
      perfCnts_125 <= _T_3632 @[CSR.scala 837:66]
    when perfCntCond_126 : @[CSR.scala 837:62]
      node _T_3633 = add(perfCnts_126, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3634 = tail(_T_3633, 1) @[CSR.scala 837:71]
      perfCnts_126 <= _T_3634 @[CSR.scala 837:66]
    when perfCntCond_127 : @[CSR.scala 837:62]
      node _T_3635 = add(perfCnts_127, UInt<1>("h1")) @[CSR.scala 837:71]
      node _T_3636 = tail(_T_3635, 1) @[CSR.scala 837:71]
      perfCnts_127 <= _T_3636 @[CSR.scala 837:66]
    wire pendingLS : UInt<5>
    pendingLS <= UInt<5>("h0")
    wire pendingSCmt : UInt<5>
    pendingSCmt <= UInt<5>("h0")
    wire pendingSReq : UInt<5>
    pendingSReq <= UInt<5>("h0")
    when perfCntCond_3 : @[CSR.scala 845:35]
      node _T_3637 = add(perfCnts_2, UInt<2>("h2")) @[CSR.scala 845:86]
      node _T_3638 = tail(_T_3637, 1) @[CSR.scala 845:86]
      perfCnts_2 <= _T_3638 @[CSR.scala 845:60]
    when UInt<1>("h1") : @[CSR.scala 847:18]
      node _T_3639 = add(perfCnts_99, pendingLS) @[CSR.scala 847:69]
      node _T_3640 = tail(_T_3639, 1) @[CSR.scala 847:69]
      perfCnts_99 <= _T_3640 @[CSR.scala 847:43]
    when UInt<1>("h1") : @[CSR.scala 848:18]
      node _T_3641 = add(perfCnts_100, pendingSCmt) @[CSR.scala 848:69]
      node _T_3642 = tail(_T_3641, 1) @[CSR.scala 848:69]
      perfCnts_100 <= _T_3642 @[CSR.scala 848:43]
    when UInt<1>("h1") : @[CSR.scala 849:18]
      node _T_3643 = add(perfCnts_102, pendingSReq) @[CSR.scala 849:69]
      node _T_3644 = tail(_T_3643, 1) @[CSR.scala 849:69]
      perfCnts_101 <= _T_3644 @[CSR.scala 849:43]
    wire _WIRE_49 : UInt<1>
    _WIRE_49 <= UInt<1>("h1")
    wire nutcoretrap : UInt<1>
    nutcoretrap <= UInt<1>("h0")
    when nutcoretrap : @[CSR.scala 875:26]
      node _T_3645 = asUInt(reset) @[CSR.scala 876:15]
      node _T_3646 = eq(_T_3645, UInt<1>("h0")) @[CSR.scala 876:15]
      when _T_3646 : @[CSR.scala 876:15]
        printf(clock, UInt<1>("h1"), "======== PerfCnt =========\n") : SIM_18 @[CSR.scala 876:15]
      node _T_3647 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3648 = eq(_T_3647, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3648 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Mcycle\n", perfCnts_0) : SIM_19 @[CSR.scala 878:17]
      node _T_3649 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3650 = eq(_T_3649, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3650 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Minstret\n", perfCnts_2) : SIM_20 @[CSR.scala 878:17]
      node _T_3651 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3652 = eq(_T_3651, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3652 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MultiCommit\n", perfCnts_3) : SIM_21 @[CSR.scala 878:17]
      node _T_3653 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3654 = eq(_T_3653, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3654 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MimemStall\n", perfCnts_4) : SIM_22 @[CSR.scala 878:17]
      node _T_3655 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3656 = eq(_T_3655, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3656 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MaluInstr\n", perfCnts_5) : SIM_23 @[CSR.scala 878:17]
      node _T_3657 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3658 = eq(_T_3657, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3658 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbruInstr\n", perfCnts_6) : SIM_24 @[CSR.scala 878:17]
      node _T_3659 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3660 = eq(_T_3659, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3660 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MlsuInstr\n", perfCnts_7) : SIM_25 @[CSR.scala 878:17]
      node _T_3661 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3662 = eq(_T_3661, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3662 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MmduInstr\n", perfCnts_8) : SIM_26 @[CSR.scala 878:17]
      node _T_3663 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3664 = eq(_T_3663, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3664 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- McsrInstr\n", perfCnts_9) : SIM_27 @[CSR.scala 878:17]
      node _T_3665 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3666 = eq(_T_3665, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3666 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MloadInstr\n", perfCnts_10) : SIM_28 @[CSR.scala 878:17]
      node _T_3667 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3668 = eq(_T_3667, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3668 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MmmioInstr\n", perfCnts_11) : SIM_29 @[CSR.scala 878:17]
      node _T_3669 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3670 = eq(_T_3669, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3670 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MicacheHit\n", perfCnts_12) : SIM_30 @[CSR.scala 878:17]
      node _T_3671 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3672 = eq(_T_3671, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3672 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MdcacheHit\n", perfCnts_13) : SIM_31 @[CSR.scala 878:17]
      node _T_3673 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3674 = eq(_T_3673, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3674 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MmulInstr\n", perfCnts_14) : SIM_32 @[CSR.scala 878:17]
      node _T_3675 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3676 = eq(_T_3675, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3676 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MifuFlush\n", perfCnts_15) : SIM_33 @[CSR.scala 878:17]
      node _T_3677 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3678 = eq(_T_3677, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3678 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpBRight\n", perfCnts_16) : SIM_34 @[CSR.scala 878:17]
      node _T_3679 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3680 = eq(_T_3679, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3680 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpBWrong\n", perfCnts_17) : SIM_35 @[CSR.scala 878:17]
      node _T_3681 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3682 = eq(_T_3681, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3682 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpJRight\n", perfCnts_18) : SIM_36 @[CSR.scala 878:17]
      node _T_3683 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3684 = eq(_T_3683, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3684 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpJWrong\n", perfCnts_19) : SIM_37 @[CSR.scala 878:17]
      node _T_3685 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3686 = eq(_T_3685, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3686 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpIRight\n", perfCnts_20) : SIM_38 @[CSR.scala 878:17]
      node _T_3687 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3688 = eq(_T_3687, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3688 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpIWrong\n", perfCnts_21) : SIM_39 @[CSR.scala 878:17]
      node _T_3689 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3690 = eq(_T_3689, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3690 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpRRight\n", perfCnts_22) : SIM_40 @[CSR.scala 878:17]
      node _T_3691 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3692 = eq(_T_3691, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3692 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MbpRWrong\n", perfCnts_23) : SIM_41 @[CSR.scala 878:17]
      node _T_3693 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3694 = eq(_T_3693, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3694 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Ml2cacheHit\n", perfCnts_24) : SIM_42 @[CSR.scala 878:17]
      node _T_3695 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3696 = eq(_T_3695, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3696 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom1\n", perfCnts_25) : SIM_43 @[CSR.scala 878:17]
      node _T_3697 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3698 = eq(_T_3697, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3698 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom2\n", perfCnts_26) : SIM_44 @[CSR.scala 878:17]
      node _T_3699 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3700 = eq(_T_3699, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3700 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom3\n", perfCnts_27) : SIM_45 @[CSR.scala 878:17]
      node _T_3701 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3702 = eq(_T_3701, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3702 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom4\n", perfCnts_28) : SIM_46 @[CSR.scala 878:17]
      node _T_3703 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3704 = eq(_T_3703, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3704 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom5\n", perfCnts_29) : SIM_47 @[CSR.scala 878:17]
      node _T_3705 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3706 = eq(_T_3705, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3706 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom6\n", perfCnts_30) : SIM_48 @[CSR.scala 878:17]
      node _T_3707 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3708 = eq(_T_3707, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3708 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom7\n", perfCnts_31) : SIM_49 @[CSR.scala 878:17]
      node _T_3709 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3710 = eq(_T_3709, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3710 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- Custom8\n", perfCnts_32) : SIM_50 @[CSR.scala 878:17]
      node _T_3711 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3712 = eq(_T_3711, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3712 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MrawStall\n", perfCnts_49) : SIM_51 @[CSR.scala 878:17]
      node _T_3713 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3714 = eq(_T_3713, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3714 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MexuBusy\n", perfCnts_50) : SIM_52 @[CSR.scala 878:17]
      node _T_3715 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3716 = eq(_T_3715, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3716 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MloadStall\n", perfCnts_51) : SIM_53 @[CSR.scala 878:17]
      node _T_3717 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3718 = eq(_T_3717, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3718 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- MstoreStall\n", perfCnts_52) : SIM_54 @[CSR.scala 878:17]
      node _T_3719 = asUInt(reset) @[CSR.scala 878:17]
      node _T_3720 = eq(_T_3719, UInt<1>("h0")) @[CSR.scala 878:17]
      when _T_3720 : @[CSR.scala 878:17]
        printf(clock, UInt<1>("h1"), "%d <- ISUIssue\n", perfCnts_53) : SIM_55 @[CSR.scala 878:17]
      node _T_3721 = asUInt(reset) @[CSR.scala 880:15]
      node _T_3722 = eq(_T_3721, UInt<1>("h0")) @[CSR.scala 880:15]
      when _T_3722 : @[CSR.scala 880:15]
        printf(clock, UInt<1>("h1"), "======== PerfCntCSV =========\n\n") : SIM_56 @[CSR.scala 880:15]
      node _T_3723 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3724 = eq(_T_3723, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3724 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Mcycle, ") : SIM_57 @[CSR.scala 882:17]
      node _T_3725 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3726 = eq(_T_3725, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3726 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Minstret, ") : SIM_58 @[CSR.scala 882:17]
      node _T_3727 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3728 = eq(_T_3727, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3728 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MultiCommit, ") : SIM_59 @[CSR.scala 882:17]
      node _T_3729 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3730 = eq(_T_3729, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3730 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MimemStall, ") : SIM_60 @[CSR.scala 882:17]
      node _T_3731 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3732 = eq(_T_3731, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3732 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MaluInstr, ") : SIM_61 @[CSR.scala 882:17]
      node _T_3733 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3734 = eq(_T_3733, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3734 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbruInstr, ") : SIM_62 @[CSR.scala 882:17]
      node _T_3735 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3736 = eq(_T_3735, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3736 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MlsuInstr, ") : SIM_63 @[CSR.scala 882:17]
      node _T_3737 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3738 = eq(_T_3737, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3738 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MmduInstr, ") : SIM_64 @[CSR.scala 882:17]
      node _T_3739 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3740 = eq(_T_3739, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3740 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "McsrInstr, ") : SIM_65 @[CSR.scala 882:17]
      node _T_3741 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3742 = eq(_T_3741, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3742 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MloadInstr, ") : SIM_66 @[CSR.scala 882:17]
      node _T_3743 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3744 = eq(_T_3743, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3744 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MmmioInstr, ") : SIM_67 @[CSR.scala 882:17]
      node _T_3745 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3746 = eq(_T_3745, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3746 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MicacheHit, ") : SIM_68 @[CSR.scala 882:17]
      node _T_3747 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3748 = eq(_T_3747, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3748 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MdcacheHit, ") : SIM_69 @[CSR.scala 882:17]
      node _T_3749 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3750 = eq(_T_3749, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3750 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MmulInstr, ") : SIM_70 @[CSR.scala 882:17]
      node _T_3751 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3752 = eq(_T_3751, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3752 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MifuFlush, ") : SIM_71 @[CSR.scala 882:17]
      node _T_3753 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3754 = eq(_T_3753, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3754 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpBRight, ") : SIM_72 @[CSR.scala 882:17]
      node _T_3755 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3756 = eq(_T_3755, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3756 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpBWrong, ") : SIM_73 @[CSR.scala 882:17]
      node _T_3757 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3758 = eq(_T_3757, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3758 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpJRight, ") : SIM_74 @[CSR.scala 882:17]
      node _T_3759 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3760 = eq(_T_3759, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3760 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpJWrong, ") : SIM_75 @[CSR.scala 882:17]
      node _T_3761 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3762 = eq(_T_3761, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3762 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpIRight, ") : SIM_76 @[CSR.scala 882:17]
      node _T_3763 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3764 = eq(_T_3763, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3764 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpIWrong, ") : SIM_77 @[CSR.scala 882:17]
      node _T_3765 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3766 = eq(_T_3765, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3766 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpRRight, ") : SIM_78 @[CSR.scala 882:17]
      node _T_3767 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3768 = eq(_T_3767, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3768 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MbpRWrong, ") : SIM_79 @[CSR.scala 882:17]
      node _T_3769 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3770 = eq(_T_3769, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3770 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Ml2cacheHit, ") : SIM_80 @[CSR.scala 882:17]
      node _T_3771 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3772 = eq(_T_3771, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3772 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom1, ") : SIM_81 @[CSR.scala 882:17]
      node _T_3773 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3774 = eq(_T_3773, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3774 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom2, ") : SIM_82 @[CSR.scala 882:17]
      node _T_3775 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3776 = eq(_T_3775, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3776 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom3, ") : SIM_83 @[CSR.scala 882:17]
      node _T_3777 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3778 = eq(_T_3777, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3778 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom4, ") : SIM_84 @[CSR.scala 882:17]
      node _T_3779 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3780 = eq(_T_3779, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3780 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom5, ") : SIM_85 @[CSR.scala 882:17]
      node _T_3781 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3782 = eq(_T_3781, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3782 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom6, ") : SIM_86 @[CSR.scala 882:17]
      node _T_3783 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3784 = eq(_T_3783, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3784 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom7, ") : SIM_87 @[CSR.scala 882:17]
      node _T_3785 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3786 = eq(_T_3785, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3786 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "Custom8, ") : SIM_88 @[CSR.scala 882:17]
      node _T_3787 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3788 = eq(_T_3787, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3788 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MrawStall, ") : SIM_89 @[CSR.scala 882:17]
      node _T_3789 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3790 = eq(_T_3789, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3790 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MexuBusy, ") : SIM_90 @[CSR.scala 882:17]
      node _T_3791 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3792 = eq(_T_3791, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3792 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MloadStall, ") : SIM_91 @[CSR.scala 882:17]
      node _T_3793 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3794 = eq(_T_3793, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3794 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "MstoreStall, ") : SIM_92 @[CSR.scala 882:17]
      node _T_3795 = asUInt(reset) @[CSR.scala 882:17]
      node _T_3796 = eq(_T_3795, UInt<1>("h0")) @[CSR.scala 882:17]
      when _T_3796 : @[CSR.scala 882:17]
        printf(clock, UInt<1>("h1"), "ISUIssue, ") : SIM_93 @[CSR.scala 882:17]
      node _T_3797 = asUInt(reset) @[CSR.scala 883:15]
      node _T_3798 = eq(_T_3797, UInt<1>("h0")) @[CSR.scala 883:15]
      when _T_3798 : @[CSR.scala 883:15]
        printf(clock, UInt<1>("h1"), "\n\n\n") : SIM_94 @[CSR.scala 883:15]
      node _T_3799 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3800 = eq(_T_3799, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3800 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_0) : SIM_95 @[CSR.scala 885:17]
      node _T_3801 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3802 = eq(_T_3801, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3802 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_2) : SIM_96 @[CSR.scala 885:17]
      node _T_3803 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3804 = eq(_T_3803, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3804 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_3) : SIM_97 @[CSR.scala 885:17]
      node _T_3805 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3806 = eq(_T_3805, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3806 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_4) : SIM_98 @[CSR.scala 885:17]
      node _T_3807 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3808 = eq(_T_3807, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3808 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_5) : SIM_99 @[CSR.scala 885:17]
      node _T_3809 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3810 = eq(_T_3809, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3810 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_6) : SIM_100 @[CSR.scala 885:17]
      node _T_3811 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3812 = eq(_T_3811, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3812 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_7) : SIM_101 @[CSR.scala 885:17]
      node _T_3813 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3814 = eq(_T_3813, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3814 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_8) : SIM_102 @[CSR.scala 885:17]
      node _T_3815 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3816 = eq(_T_3815, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3816 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_9) : SIM_103 @[CSR.scala 885:17]
      node _T_3817 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3818 = eq(_T_3817, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3818 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_10) : SIM_104 @[CSR.scala 885:17]
      node _T_3819 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3820 = eq(_T_3819, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3820 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_11) : SIM_105 @[CSR.scala 885:17]
      node _T_3821 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3822 = eq(_T_3821, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3822 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_12) : SIM_106 @[CSR.scala 885:17]
      node _T_3823 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3824 = eq(_T_3823, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3824 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_13) : SIM_107 @[CSR.scala 885:17]
      node _T_3825 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3826 = eq(_T_3825, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3826 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_14) : SIM_108 @[CSR.scala 885:17]
      node _T_3827 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3828 = eq(_T_3827, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3828 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_15) : SIM_109 @[CSR.scala 885:17]
      node _T_3829 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3830 = eq(_T_3829, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3830 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_16) : SIM_110 @[CSR.scala 885:17]
      node _T_3831 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3832 = eq(_T_3831, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3832 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_17) : SIM_111 @[CSR.scala 885:17]
      node _T_3833 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3834 = eq(_T_3833, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3834 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_18) : SIM_112 @[CSR.scala 885:17]
      node _T_3835 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3836 = eq(_T_3835, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3836 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_19) : SIM_113 @[CSR.scala 885:17]
      node _T_3837 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3838 = eq(_T_3837, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3838 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_20) : SIM_114 @[CSR.scala 885:17]
      node _T_3839 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3840 = eq(_T_3839, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3840 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_21) : SIM_115 @[CSR.scala 885:17]
      node _T_3841 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3842 = eq(_T_3841, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3842 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_22) : SIM_116 @[CSR.scala 885:17]
      node _T_3843 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3844 = eq(_T_3843, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3844 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_23) : SIM_117 @[CSR.scala 885:17]
      node _T_3845 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3846 = eq(_T_3845, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3846 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_24) : SIM_118 @[CSR.scala 885:17]
      node _T_3847 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3848 = eq(_T_3847, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3848 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_25) : SIM_119 @[CSR.scala 885:17]
      node _T_3849 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3850 = eq(_T_3849, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3850 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_26) : SIM_120 @[CSR.scala 885:17]
      node _T_3851 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3852 = eq(_T_3851, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3852 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_27) : SIM_121 @[CSR.scala 885:17]
      node _T_3853 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3854 = eq(_T_3853, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3854 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_28) : SIM_122 @[CSR.scala 885:17]
      node _T_3855 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3856 = eq(_T_3855, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3856 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_29) : SIM_123 @[CSR.scala 885:17]
      node _T_3857 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3858 = eq(_T_3857, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3858 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_30) : SIM_124 @[CSR.scala 885:17]
      node _T_3859 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3860 = eq(_T_3859, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3860 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_31) : SIM_125 @[CSR.scala 885:17]
      node _T_3861 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3862 = eq(_T_3861, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3862 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_32) : SIM_126 @[CSR.scala 885:17]
      node _T_3863 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3864 = eq(_T_3863, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3864 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_49) : SIM_127 @[CSR.scala 885:17]
      node _T_3865 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3866 = eq(_T_3865, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3866 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_50) : SIM_128 @[CSR.scala 885:17]
      node _T_3867 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3868 = eq(_T_3867, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3868 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_51) : SIM_129 @[CSR.scala 885:17]
      node _T_3869 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3870 = eq(_T_3869, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3870 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_52) : SIM_130 @[CSR.scala 885:17]
      node _T_3871 = asUInt(reset) @[CSR.scala 885:17]
      node _T_3872 = eq(_T_3871, UInt<1>("h0")) @[CSR.scala 885:17]
      when _T_3872 : @[CSR.scala 885:17]
        printf(clock, UInt<1>("h1"), "%d, ", perfCnts_53) : SIM_131 @[CSR.scala 885:17]
      node _T_3873 = asUInt(reset) @[CSR.scala 886:15]
      node _T_3874 = eq(_T_3873, UInt<1>("h0")) @[CSR.scala 886:15]
      when _T_3874 : @[CSR.scala 886:15]
        printf(clock, UInt<1>("h1"), "\n\n\n") : SIM_132 @[CSR.scala 886:15]
    inst DifftestCSRState of DifftestCSRState @[CSR.scala 892:26]
    DifftestCSRState.io is invalid
    DifftestCSRState.io.clock <= clock @[CSR.scala 893:23]
    DifftestCSRState.io.coreid <= UInt<1>("h0") @[CSR.scala 894:24]
    reg REG_13 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_13) @[CSR.scala 895:42]
    REG_13 <= priviledgeMode @[CSR.scala 895:42]
    DifftestCSRState.io.priviledgeMode <= REG_13 @[CSR.scala 895:32]
    reg REG_14 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_14) @[CSR.scala 896:35]
    REG_14 <= mstatus @[CSR.scala 896:35]
    DifftestCSRState.io.mstatus <= REG_14 @[CSR.scala 896:25]
    node _T_3875 = and(mstatus, sstatusRmask) @[CSR.scala 897:44]
    reg REG_15 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_15) @[CSR.scala 897:35]
    REG_15 <= _T_3875 @[CSR.scala 897:35]
    DifftestCSRState.io.sstatus <= REG_15 @[CSR.scala 897:25]
    reg REG_16 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_16) @[CSR.scala 898:32]
    REG_16 <= mepc @[CSR.scala 898:32]
    DifftestCSRState.io.mepc <= REG_16 @[CSR.scala 898:22]
    reg REG_17 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_17) @[CSR.scala 899:32]
    REG_17 <= sepc @[CSR.scala 899:32]
    DifftestCSRState.io.sepc <= REG_17 @[CSR.scala 899:22]
    reg REG_18 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_18) @[CSR.scala 900:32]
    REG_18 <= mtval @[CSR.scala 900:32]
    DifftestCSRState.io.mtval <= REG_18 @[CSR.scala 900:22]
    reg REG_19 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_19) @[CSR.scala 901:32]
    REG_19 <= stval @[CSR.scala 901:32]
    DifftestCSRState.io.stval <= REG_19 @[CSR.scala 901:22]
    reg REG_20 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_20) @[CSR.scala 902:33]
    REG_20 <= mtvec @[CSR.scala 902:33]
    DifftestCSRState.io.mtvec <= REG_20 @[CSR.scala 902:23]
    reg REG_21 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_21) @[CSR.scala 903:33]
    REG_21 <= stvec @[CSR.scala 903:33]
    DifftestCSRState.io.stvec <= REG_21 @[CSR.scala 903:23]
    reg REG_22 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_22) @[CSR.scala 904:34]
    REG_22 <= mcause @[CSR.scala 904:34]
    DifftestCSRState.io.mcause <= REG_22 @[CSR.scala 904:24]
    reg REG_23 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_23) @[CSR.scala 905:34]
    REG_23 <= scause @[CSR.scala 905:34]
    DifftestCSRState.io.scause <= REG_23 @[CSR.scala 905:24]
    reg REG_24 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_24) @[CSR.scala 906:32]
    REG_24 <= satp @[CSR.scala 906:32]
    DifftestCSRState.io.satp <= REG_24 @[CSR.scala 906:22]
    reg REG_25 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_25) @[CSR.scala 907:31]
    REG_25 <= mipReg @[CSR.scala 907:31]
    DifftestCSRState.io.mip <= REG_25 @[CSR.scala 907:21]
    reg REG_26 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_26) @[CSR.scala 908:31]
    REG_26 <= mie @[CSR.scala 908:31]
    DifftestCSRState.io.mie <= REG_26 @[CSR.scala 908:21]
    reg REG_27 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_27) @[CSR.scala 909:36]
    REG_27 <= mscratch @[CSR.scala 909:36]
    DifftestCSRState.io.mscratch <= REG_27 @[CSR.scala 909:26]
    reg REG_28 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_28) @[CSR.scala 910:36]
    REG_28 <= sscratch @[CSR.scala 910:36]
    DifftestCSRState.io.sscratch <= REG_28 @[CSR.scala 910:26]
    reg REG_29 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_29) @[CSR.scala 911:35]
    REG_29 <= mideleg @[CSR.scala 911:35]
    DifftestCSRState.io.mideleg <= REG_29 @[CSR.scala 911:25]
    reg REG_30 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_30) @[CSR.scala 912:35]
    REG_30 <= medeleg @[CSR.scala 912:35]
    DifftestCSRState.io.medeleg <= REG_30 @[CSR.scala 912:25]
    inst DifftestArchEvent of DifftestArchEvent @[CSR.scala 914:35]
    DifftestArchEvent.io is invalid
    DifftestArchEvent.io.clock <= clock @[CSR.scala 915:32]
    DifftestArchEvent.io.coreid <= UInt<1>("h0") @[CSR.scala 916:33]
    node _T_3876 = and(raiseIntr, io.instrValid) @[CSR.scala 917:58]
    node _T_3877 = and(_T_3876, io.in.valid) @[CSR.scala 917:75]
    node _T_3878 = mux(_T_3877, intrNO, UInt<1>("h0")) @[CSR.scala 917:47]
    reg REG_31 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_31) @[CSR.scala 917:43]
    REG_31 <= _T_3878 @[CSR.scala 917:43]
    DifftestArchEvent.io.intrNO <= REG_31 @[CSR.scala 917:33]
    node _T_3879 = and(raiseException, io.instrValid) @[CSR.scala 918:62]
    node _T_3880 = and(_T_3879, io.in.valid) @[CSR.scala 918:79]
    node _T_3881 = mux(_T_3880, exceptionNO, UInt<1>("h0")) @[CSR.scala 918:46]
    reg REG_32 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_32) @[CSR.scala 918:42]
    REG_32 <= _T_3881 @[CSR.scala 918:42]
    DifftestArchEvent.io.cause <= REG_32 @[CSR.scala 918:32]
    node _T_3882 = bits(io.cfIn.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_3883 = bits(_T_3882, 0, 0) @[Bitwise.scala 72:15]
    node _T_3884 = mux(_T_3883, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
    node _T_3885 = cat(_T_3884, io.cfIn.pc) @[Cat.scala 30:58]
    reg REG_33 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_33) @[CSR.scala 919:48]
    REG_33 <= _T_3885 @[CSR.scala 919:48]
    DifftestArchEvent.io.exceptionPC <= REG_33 @[CSR.scala 919:38]
    reg REG_34 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_34) @[CSR.scala 920:50]
    REG_34 <= io.cfIn.instr @[CSR.scala 920:50]
    DifftestArchEvent.io.exceptionInst <= REG_34 @[CSR.scala 920:40]

  module MOU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { src1 : UInt<64>, src2 : UInt<64>, func : UInt<7>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip cfIn : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}

    node _T = add(io.cfIn.pc, UInt<3>("h4")) @[MOU.scala 49:36]
    node _T_1 = tail(_T, 1) @[MOU.scala 49:36]
    io.redirect.target <= _T_1 @[MOU.scala 49:22]
    io.redirect.valid <= io.in.valid @[MOU.scala 50:21]
    io.redirect.rtype <= UInt<1>("h0") @[MOU.scala 51:21]
    node _T_2 = eq(io.in.bits.func, UInt<1>("h1")) @[MOU.scala 52:36]
    node flushICache = and(io.in.valid, _T_2) @[MOU.scala 52:27]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_3 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_4 = tail(_T_3, 1) @[GTimer.scala 25:12]
    REG <= _T_4 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_5 = and(flushICache, _WIRE) @[Debug.scala 55:16]
    when _T_5 : @[Debug.scala 55:31]
      node _T_6 = asUInt(reset) @[Debug.scala 56:24]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_7 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] MOU: ", REG) : SIM @[Debug.scala 56:24]
      node _T_8 = asUInt(reset) @[Debug.scala 57:13]
      node _T_9 = eq(_T_8, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_9 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "Flush I$ at %x\n", io.cfIn.pc) : SIM_1 @[Debug.scala 57:13]
    node _T_10 = eq(io.in.bits.func, UInt<2>("h2")) @[MOU.scala 56:33]
    node flushTLB = and(io.in.valid, _T_10) @[MOU.scala 56:24]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_11 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_12 = tail(_T_11, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_12 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_13 = and(flushTLB, _WIRE_1) @[Debug.scala 55:16]
    when _T_13 : @[Debug.scala 55:31]
      node _T_14 = asUInt(reset) @[Debug.scala 56:24]
      node _T_15 = eq(_T_14, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_15 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] MOU: ", REG_1) : SIM_2 @[Debug.scala 56:24]
      node _T_16 = asUInt(reset) @[Debug.scala 57:13]
      node _T_17 = eq(_T_16, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_17 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "Sfence.vma at %x\n", io.cfIn.pc) : SIM_3 @[Debug.scala 57:13]
    io.out.bits <= UInt<1>("h0") @[MOU.scala 60:15]
    io.in.ready <= UInt<1>("h1") @[MOU.scala 61:15]
    io.out.valid <= io.in.valid @[MOU.scala 62:16]

  extmodule DifftestTrapEvent :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip valid : UInt<1>, flip cycleCnt : UInt<64>, flip instrCnt : UInt<64>, flip code : UInt<3>, flip pc : UInt<64>}
    defname = DifftestTrapEvent

  module EXU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { decode : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, isMMIO : UInt<1>, intrNO : UInt<64>, commits : UInt<64>[5]}}, flip flush : UInt<1>, dmem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, forward : { valid : UInt<1>, wb : { rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, fuType : UInt<3>}, flip memMMU : { imem : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, dmem : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}}}

    node src1 = bits(io.in.bits.data.src1, 63, 0) @[EXU.scala 38:34]
    node src2 = bits(io.in.bits.data.src2, 63, 0) @[EXU.scala 39:34]
    wire fuValids : UInt<1>[5] @[EXU.scala 43:22]
    node _T = eq(io.in.bits.ctrl.fuType, UInt<1>("h0")) @[EXU.scala 44:57]
    node _T_1 = and(_T, io.in.valid) @[EXU.scala 44:66]
    node _T_2 = eq(io.flush, UInt<1>("h0")) @[EXU.scala 44:84]
    node _T_3 = and(_T_1, _T_2) @[EXU.scala 44:81]
    fuValids[0] <= _T_3 @[EXU.scala 44:46]
    node _T_4 = eq(io.in.bits.ctrl.fuType, UInt<1>("h1")) @[EXU.scala 44:57]
    node _T_5 = and(_T_4, io.in.valid) @[EXU.scala 44:66]
    node _T_6 = eq(io.flush, UInt<1>("h0")) @[EXU.scala 44:84]
    node _T_7 = and(_T_5, _T_6) @[EXU.scala 44:81]
    fuValids[1] <= _T_7 @[EXU.scala 44:46]
    node _T_8 = eq(io.in.bits.ctrl.fuType, UInt<2>("h2")) @[EXU.scala 44:57]
    node _T_9 = and(_T_8, io.in.valid) @[EXU.scala 44:66]
    node _T_10 = eq(io.flush, UInt<1>("h0")) @[EXU.scala 44:84]
    node _T_11 = and(_T_9, _T_10) @[EXU.scala 44:81]
    fuValids[2] <= _T_11 @[EXU.scala 44:46]
    node _T_12 = eq(io.in.bits.ctrl.fuType, UInt<2>("h3")) @[EXU.scala 44:57]
    node _T_13 = and(_T_12, io.in.valid) @[EXU.scala 44:66]
    node _T_14 = eq(io.flush, UInt<1>("h0")) @[EXU.scala 44:84]
    node _T_15 = and(_T_13, _T_14) @[EXU.scala 44:81]
    fuValids[3] <= _T_15 @[EXU.scala 44:46]
    node _T_16 = eq(io.in.bits.ctrl.fuType, UInt<3>("h4")) @[EXU.scala 44:57]
    node _T_17 = and(_T_16, io.in.valid) @[EXU.scala 44:66]
    node _T_18 = eq(io.flush, UInt<1>("h0")) @[EXU.scala 44:84]
    node _T_19 = and(_T_17, _T_18) @[EXU.scala 44:81]
    fuValids[4] <= _T_19 @[EXU.scala 44:46]
    inst alu of ALU @[EXU.scala 46:19]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.in.valid <= fuValids[UInt<1>("h0")] @[ALU.scala 80:16]
    alu.io.in.bits.src1 <= src1 @[ALU.scala 81:15]
    alu.io.in.bits.src2 <= src2 @[ALU.scala 82:15]
    alu.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[ALU.scala 83:15]
    alu.io.cfIn.isBranch <= io.in.bits.cf.isBranch @[EXU.scala 48:15]
    alu.io.cfIn.runahead_checkpoint_id <= io.in.bits.cf.runahead_checkpoint_id @[EXU.scala 48:15]
    alu.io.cfIn.crossPageIPFFix <= io.in.bits.cf.crossPageIPFFix @[EXU.scala 48:15]
    alu.io.cfIn.isRVC <= io.in.bits.cf.isRVC @[EXU.scala 48:15]
    alu.io.cfIn.brIdx <= io.in.bits.cf.brIdx @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[0] <= io.in.bits.cf.intrVec[0] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[1] <= io.in.bits.cf.intrVec[1] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[2] <= io.in.bits.cf.intrVec[2] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[3] <= io.in.bits.cf.intrVec[3] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[4] <= io.in.bits.cf.intrVec[4] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[5] <= io.in.bits.cf.intrVec[5] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[6] <= io.in.bits.cf.intrVec[6] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[7] <= io.in.bits.cf.intrVec[7] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[8] <= io.in.bits.cf.intrVec[8] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[9] <= io.in.bits.cf.intrVec[9] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[10] <= io.in.bits.cf.intrVec[10] @[EXU.scala 48:15]
    alu.io.cfIn.intrVec[11] <= io.in.bits.cf.intrVec[11] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[0] <= io.in.bits.cf.exceptionVec[0] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[1] <= io.in.bits.cf.exceptionVec[1] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[2] <= io.in.bits.cf.exceptionVec[2] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[3] <= io.in.bits.cf.exceptionVec[3] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[4] <= io.in.bits.cf.exceptionVec[4] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[5] <= io.in.bits.cf.exceptionVec[5] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[6] <= io.in.bits.cf.exceptionVec[6] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[7] <= io.in.bits.cf.exceptionVec[7] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[8] <= io.in.bits.cf.exceptionVec[8] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[9] <= io.in.bits.cf.exceptionVec[9] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[10] <= io.in.bits.cf.exceptionVec[10] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[11] <= io.in.bits.cf.exceptionVec[11] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[12] <= io.in.bits.cf.exceptionVec[12] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[13] <= io.in.bits.cf.exceptionVec[13] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[14] <= io.in.bits.cf.exceptionVec[14] @[EXU.scala 48:15]
    alu.io.cfIn.exceptionVec[15] <= io.in.bits.cf.exceptionVec[15] @[EXU.scala 48:15]
    alu.io.cfIn.redirect.valid <= io.in.bits.cf.redirect.valid @[EXU.scala 48:15]
    alu.io.cfIn.redirect.rtype <= io.in.bits.cf.redirect.rtype @[EXU.scala 48:15]
    alu.io.cfIn.redirect.target <= io.in.bits.cf.redirect.target @[EXU.scala 48:15]
    alu.io.cfIn.pnpc <= io.in.bits.cf.pnpc @[EXU.scala 48:15]
    alu.io.cfIn.pc <= io.in.bits.cf.pc @[EXU.scala 48:15]
    alu.io.cfIn.instr <= io.in.bits.cf.instr @[EXU.scala 48:15]
    alu.io.offset <= io.in.bits.data.imm @[EXU.scala 49:17]
    alu.io.out.ready <= UInt<1>("h1") @[EXU.scala 50:20]
    inst lsu of UnpipelinedLSU @[EXU.scala 54:19]
    lsu.clock <= clock
    lsu.reset <= reset
    wire lsuTlbPF : UInt<1>
    lsuTlbPF <= UInt<1>("h0")
    lsu.io.in.valid <= fuValids[UInt<1>("h1")] @[UnpipelinedLSU.scala 40:16]
    lsu.io.in.bits.src1 <= src1 @[UnpipelinedLSU.scala 41:15]
    lsu.io.in.bits.src2 <= io.in.bits.data.imm @[UnpipelinedLSU.scala 42:15]
    lsu.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[UnpipelinedLSU.scala 43:15]
    lsuTlbPF <= lsu.io.dtlbPF @[UnpipelinedLSU.scala 44:12]
    lsu.io.wdata <= src2 @[EXU.scala 57:16]
    lsu.io.instr <= io.in.bits.cf.instr @[EXU.scala 58:16]
    node _T_20 = xor(io.in.bits.cf.pc, UInt<30>("h30000000")) @[NutCore.scala 86:11]
    node _T_21 = bits(_T_20, 31, 28) @[NutCore.scala 86:24]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_23 = xor(io.in.bits.cf.pc, UInt<31>("h40000000")) @[NutCore.scala 86:11]
    node _T_24 = bits(_T_23, 31, 30) @[NutCore.scala 86:24]
    node _T_25 = eq(_T_24, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_26 = or(_T_22, _T_25) @[NutCore.scala 87:15]
    node _T_27 = and(_T_26, io.out.valid) @[EXU.scala 59:81]
    node _T_28 = or(lsu.io.isMMIO, _T_27) @[EXU.scala 59:39]
    io.out.bits.isMMIO <= _T_28 @[EXU.scala 59:22]
    lsu.io.dmem.resp.bits.rdata <= io.dmem.resp.bits.rdata @[EXU.scala 60:11]
    lsu.io.dmem.resp.bits.cmd <= io.dmem.resp.bits.cmd @[EXU.scala 60:11]
    lsu.io.dmem.resp.valid <= io.dmem.resp.valid @[EXU.scala 60:11]
    io.dmem.resp.ready <= lsu.io.dmem.resp.ready @[EXU.scala 60:11]
    io.dmem.req.bits.wdata <= lsu.io.dmem.req.bits.wdata @[EXU.scala 60:11]
    io.dmem.req.bits.wmask <= lsu.io.dmem.req.bits.wmask @[EXU.scala 60:11]
    io.dmem.req.bits.cmd <= lsu.io.dmem.req.bits.cmd @[EXU.scala 60:11]
    io.dmem.req.bits.size <= lsu.io.dmem.req.bits.size @[EXU.scala 60:11]
    io.dmem.req.bits.addr <= lsu.io.dmem.req.bits.addr @[EXU.scala 60:11]
    io.dmem.req.valid <= lsu.io.dmem.req.valid @[EXU.scala 60:11]
    lsu.io.dmem.req.ready <= io.dmem.req.ready @[EXU.scala 60:11]
    lsu.io.out.ready <= UInt<1>("h1") @[EXU.scala 61:20]
    inst mdu of MDU @[EXU.scala 63:19]
    mdu.clock <= clock
    mdu.reset <= reset
    mdu.io.in.valid <= fuValids[UInt<2>("h2")] @[MDU.scala 140:16]
    mdu.io.in.bits.src1 <= src1 @[MDU.scala 141:15]
    mdu.io.in.bits.src2 <= src2 @[MDU.scala 142:15]
    mdu.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[MDU.scala 143:15]
    mdu.io.out.ready <= UInt<1>("h1") @[EXU.scala 65:20]
    inst csr of CSR @[EXU.scala 68:19]
    csr.clock <= clock
    csr.reset <= reset
    csr.io.in.valid <= fuValids[UInt<2>("h3")] @[CSR.scala 197:16]
    csr.io.in.bits.src1 <= src1 @[CSR.scala 198:15]
    csr.io.in.bits.src2 <= src2 @[CSR.scala 199:15]
    csr.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[CSR.scala 200:15]
    csr.io.cfIn.isBranch <= io.in.bits.cf.isBranch @[EXU.scala 70:15]
    csr.io.cfIn.runahead_checkpoint_id <= io.in.bits.cf.runahead_checkpoint_id @[EXU.scala 70:15]
    csr.io.cfIn.crossPageIPFFix <= io.in.bits.cf.crossPageIPFFix @[EXU.scala 70:15]
    csr.io.cfIn.isRVC <= io.in.bits.cf.isRVC @[EXU.scala 70:15]
    csr.io.cfIn.brIdx <= io.in.bits.cf.brIdx @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[0] <= io.in.bits.cf.intrVec[0] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[1] <= io.in.bits.cf.intrVec[1] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[2] <= io.in.bits.cf.intrVec[2] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[3] <= io.in.bits.cf.intrVec[3] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[4] <= io.in.bits.cf.intrVec[4] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[5] <= io.in.bits.cf.intrVec[5] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[6] <= io.in.bits.cf.intrVec[6] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[7] <= io.in.bits.cf.intrVec[7] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[8] <= io.in.bits.cf.intrVec[8] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[9] <= io.in.bits.cf.intrVec[9] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[10] <= io.in.bits.cf.intrVec[10] @[EXU.scala 70:15]
    csr.io.cfIn.intrVec[11] <= io.in.bits.cf.intrVec[11] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[0] <= io.in.bits.cf.exceptionVec[0] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[1] <= io.in.bits.cf.exceptionVec[1] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[2] <= io.in.bits.cf.exceptionVec[2] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[3] <= io.in.bits.cf.exceptionVec[3] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[4] <= io.in.bits.cf.exceptionVec[4] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[5] <= io.in.bits.cf.exceptionVec[5] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[6] <= io.in.bits.cf.exceptionVec[6] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[7] <= io.in.bits.cf.exceptionVec[7] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[8] <= io.in.bits.cf.exceptionVec[8] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[9] <= io.in.bits.cf.exceptionVec[9] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[10] <= io.in.bits.cf.exceptionVec[10] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[11] <= io.in.bits.cf.exceptionVec[11] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[12] <= io.in.bits.cf.exceptionVec[12] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[13] <= io.in.bits.cf.exceptionVec[13] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[14] <= io.in.bits.cf.exceptionVec[14] @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[15] <= io.in.bits.cf.exceptionVec[15] @[EXU.scala 70:15]
    csr.io.cfIn.redirect.valid <= io.in.bits.cf.redirect.valid @[EXU.scala 70:15]
    csr.io.cfIn.redirect.rtype <= io.in.bits.cf.redirect.rtype @[EXU.scala 70:15]
    csr.io.cfIn.redirect.target <= io.in.bits.cf.redirect.target @[EXU.scala 70:15]
    csr.io.cfIn.pnpc <= io.in.bits.cf.pnpc @[EXU.scala 70:15]
    csr.io.cfIn.pc <= io.in.bits.cf.pc @[EXU.scala 70:15]
    csr.io.cfIn.instr <= io.in.bits.cf.instr @[EXU.scala 70:15]
    csr.io.cfIn.exceptionVec[4] <= lsu.io.loadAddrMisaligned @[EXU.scala 71:48]
    csr.io.cfIn.exceptionVec[6] <= lsu.io.storeAddrMisaligned @[EXU.scala 72:49]
    node _T_29 = eq(io.flush, UInt<1>("h0")) @[EXU.scala 73:39]
    node _T_30 = and(io.in.valid, _T_29) @[EXU.scala 73:36]
    csr.io.instrValid <= _T_30 @[EXU.scala 73:21]
    csr.io.isBackendException <= UInt<1>("h0") @[EXU.scala 74:29]
    io.out.bits.intrNO <= csr.io.intrNO @[EXU.scala 75:22]
    csr.io.isBackendException <= UInt<1>("h0") @[EXU.scala 76:29]
    csr.io.out.ready <= UInt<1>("h1") @[EXU.scala 77:20]
    csr.io.imemMMU.addr <= io.memMMU.imem.addr @[EXU.scala 79:18]
    csr.io.imemMMU.storePF <= io.memMMU.imem.storePF @[EXU.scala 79:18]
    csr.io.imemMMU.loadPF <= io.memMMU.imem.loadPF @[EXU.scala 79:18]
    io.memMMU.imem.status_mxr <= csr.io.imemMMU.status_mxr @[EXU.scala 79:18]
    io.memMMU.imem.status_sum <= csr.io.imemMMU.status_sum @[EXU.scala 79:18]
    io.memMMU.imem.priviledgeMode <= csr.io.imemMMU.priviledgeMode @[EXU.scala 79:18]
    csr.io.dmemMMU.addr <= io.memMMU.dmem.addr @[EXU.scala 80:18]
    csr.io.dmemMMU.storePF <= io.memMMU.dmem.storePF @[EXU.scala 80:18]
    csr.io.dmemMMU.loadPF <= io.memMMU.dmem.loadPF @[EXU.scala 80:18]
    io.memMMU.dmem.status_mxr <= csr.io.dmemMMU.status_mxr @[EXU.scala 80:18]
    io.memMMU.dmem.status_sum <= csr.io.dmemMMU.status_sum @[EXU.scala 80:18]
    io.memMMU.dmem.priviledgeMode <= csr.io.dmemMMU.priviledgeMode @[EXU.scala 80:18]
    inst mou of MOU @[EXU.scala 82:19]
    mou.clock <= clock
    mou.reset <= reset
    mou.io.in.valid <= fuValids[UInt<3>("h4")] @[MOU.scala 42:16]
    mou.io.in.bits.src1 <= src1 @[MOU.scala 43:15]
    mou.io.in.bits.src2 <= src2 @[MOU.scala 44:15]
    mou.io.in.bits.func <= io.in.bits.ctrl.fuOpType @[MOU.scala 45:15]
    mou.io.cfIn.isBranch <= io.in.bits.cf.isBranch @[EXU.scala 85:15]
    mou.io.cfIn.runahead_checkpoint_id <= io.in.bits.cf.runahead_checkpoint_id @[EXU.scala 85:15]
    mou.io.cfIn.crossPageIPFFix <= io.in.bits.cf.crossPageIPFFix @[EXU.scala 85:15]
    mou.io.cfIn.isRVC <= io.in.bits.cf.isRVC @[EXU.scala 85:15]
    mou.io.cfIn.brIdx <= io.in.bits.cf.brIdx @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[0] <= io.in.bits.cf.intrVec[0] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[1] <= io.in.bits.cf.intrVec[1] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[2] <= io.in.bits.cf.intrVec[2] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[3] <= io.in.bits.cf.intrVec[3] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[4] <= io.in.bits.cf.intrVec[4] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[5] <= io.in.bits.cf.intrVec[5] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[6] <= io.in.bits.cf.intrVec[6] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[7] <= io.in.bits.cf.intrVec[7] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[8] <= io.in.bits.cf.intrVec[8] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[9] <= io.in.bits.cf.intrVec[9] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[10] <= io.in.bits.cf.intrVec[10] @[EXU.scala 85:15]
    mou.io.cfIn.intrVec[11] <= io.in.bits.cf.intrVec[11] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[0] <= io.in.bits.cf.exceptionVec[0] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[1] <= io.in.bits.cf.exceptionVec[1] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[2] <= io.in.bits.cf.exceptionVec[2] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[3] <= io.in.bits.cf.exceptionVec[3] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[4] <= io.in.bits.cf.exceptionVec[4] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[5] <= io.in.bits.cf.exceptionVec[5] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[6] <= io.in.bits.cf.exceptionVec[6] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[7] <= io.in.bits.cf.exceptionVec[7] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[8] <= io.in.bits.cf.exceptionVec[8] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[9] <= io.in.bits.cf.exceptionVec[9] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[10] <= io.in.bits.cf.exceptionVec[10] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[11] <= io.in.bits.cf.exceptionVec[11] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[12] <= io.in.bits.cf.exceptionVec[12] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[13] <= io.in.bits.cf.exceptionVec[13] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[14] <= io.in.bits.cf.exceptionVec[14] @[EXU.scala 85:15]
    mou.io.cfIn.exceptionVec[15] <= io.in.bits.cf.exceptionVec[15] @[EXU.scala 85:15]
    mou.io.cfIn.redirect.valid <= io.in.bits.cf.redirect.valid @[EXU.scala 85:15]
    mou.io.cfIn.redirect.rtype <= io.in.bits.cf.redirect.rtype @[EXU.scala 85:15]
    mou.io.cfIn.redirect.target <= io.in.bits.cf.redirect.target @[EXU.scala 85:15]
    mou.io.cfIn.pnpc <= io.in.bits.cf.pnpc @[EXU.scala 85:15]
    mou.io.cfIn.pc <= io.in.bits.cf.pc @[EXU.scala 85:15]
    mou.io.cfIn.instr <= io.in.bits.cf.instr @[EXU.scala 85:15]
    mou.io.out.ready <= UInt<1>("h1") @[EXU.scala 86:20]
    io.out.bits.decode.data.imm is invalid @[EXU.scala 88:22]
    io.out.bits.decode.data.src2 is invalid @[EXU.scala 88:22]
    io.out.bits.decode.data.src1 is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.isBlocked is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.noSpecExec is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.isSrc2Forward is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.isSrc1Forward is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.isNutCoreTrap is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.rfDest is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.rfWen is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.rfSrc2 is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.rfSrc1 is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.fuOpType is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.fuType is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.src2Type is invalid @[EXU.scala 88:22]
    io.out.bits.decode.ctrl.src1Type is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.isBranch is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.runahead_checkpoint_id is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.crossPageIPFFix is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.isRVC is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.brIdx is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[0] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[1] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[2] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[3] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[4] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[5] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[6] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[7] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[8] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[9] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[10] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.intrVec[11] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[0] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[1] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[2] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[3] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[4] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[5] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[6] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[7] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[8] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[9] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[10] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[11] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[12] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[13] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[14] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.exceptionVec[15] is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.redirect.valid is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.redirect.rtype is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.redirect.target is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.pnpc is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.pc is invalid @[EXU.scala 88:22]
    io.out.bits.decode.cf.instr is invalid @[EXU.scala 88:22]
    node _T_31 = eq(lsuTlbPF, UInt<1>("h0")) @[EXU.scala 90:28]
    node _T_32 = eq(lsu.io.loadAddrMisaligned, UInt<1>("h0")) @[EXU.scala 90:41]
    node _T_33 = and(_T_31, _T_32) @[EXU.scala 90:38]
    node _T_34 = eq(lsu.io.storeAddrMisaligned, UInt<1>("h0")) @[EXU.scala 90:71]
    node _T_35 = and(_T_33, _T_34) @[EXU.scala 90:68]
    node _T_36 = eq(fuValids[UInt<1>("h1")], UInt<1>("h0")) @[EXU.scala 90:102]
    node _T_37 = or(_T_35, _T_36) @[EXU.scala 90:99]
    node _T_38 = and(io.in.bits.ctrl.rfWen, _T_37) @[EXU.scala 90:24]
    node _T_39 = and(csr.io.wenFix, fuValids[UInt<2>("h3")]) @[EXU.scala 90:144]
    node _T_40 = eq(_T_39, UInt<1>("h0")) @[EXU.scala 90:128]
    node _T_41 = and(_T_38, _T_40) @[EXU.scala 90:125]
    io.out.bits.decode.ctrl.rfWen <= _T_41 @[EXU.scala 90:13]
    io.out.bits.decode.ctrl.rfDest <= io.in.bits.ctrl.rfDest @[EXU.scala 91:14]
    io.out.bits.decode.ctrl.fuType <= io.in.bits.ctrl.fuType @[EXU.scala 92:14]
    io.out.bits.decode.cf.pc <= io.in.bits.cf.pc @[EXU.scala 94:28]
    io.out.bits.decode.cf.instr <= io.in.bits.cf.instr @[EXU.scala 95:31]
    io.out.bits.decode.cf.runahead_checkpoint_id <= io.in.bits.cf.runahead_checkpoint_id @[EXU.scala 96:48]
    io.out.bits.decode.cf.isBranch <= io.in.bits.cf.isBranch @[EXU.scala 97:34]
    node _T_42 = mux(csr.io.redirect.valid, csr.io.redirect, alu.io.redirect) @[EXU.scala 100:10]
    node _T_43 = mux(mou.io.redirect.valid, mou.io.redirect, _T_42) @[EXU.scala 99:8]
    io.out.bits.decode.cf.redirect.valid <= _T_43.valid @[EXU.scala 98:34]
    io.out.bits.decode.cf.redirect.rtype <= _T_43.rtype @[EXU.scala 98:34]
    io.out.bits.decode.cf.redirect.target <= _T_43.target @[EXU.scala 98:34]
    node _T_44 = or(mou.io.redirect.valid, csr.io.redirect.valid) @[EXU.scala 102:31]
    node _T_45 = or(_T_44, alu.io.redirect.valid) @[EXU.scala 102:56]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_46 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_47 = tail(_T_46, 1) @[GTimer.scala 25:12]
    REG <= _T_47 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_48 = and(_T_45, _WIRE) @[Debug.scala 55:16]
    when _T_48 : @[Debug.scala 55:31]
      node _T_49 = asUInt(reset) @[Debug.scala 56:24]
      node _T_50 = eq(_T_49, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_50 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EXU: ", REG) : SIM @[Debug.scala 56:24]
      node _T_51 = asUInt(reset) @[Debug.scala 57:13]
      node _T_52 = eq(_T_51, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_52 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[REDIRECT] mou %x csr %x alu %x \n", mou.io.redirect.valid, csr.io.redirect.valid, alu.io.redirect.valid) : SIM_1 @[Debug.scala 57:13]
    node _T_53 = or(mou.io.redirect.valid, csr.io.redirect.valid) @[EXU.scala 103:31]
    node _T_54 = or(_T_53, alu.io.redirect.valid) @[EXU.scala 103:56]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_55 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_56 = tail(_T_55, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_56 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_57 = and(_T_54, _WIRE_1) @[Debug.scala 55:16]
    when _T_57 : @[Debug.scala 55:31]
      node _T_58 = asUInt(reset) @[Debug.scala 56:24]
      node _T_59 = eq(_T_58, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_59 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EXU: ", REG_1) : SIM_2 @[Debug.scala 56:24]
      node _T_60 = asUInt(reset) @[Debug.scala 57:13]
      node _T_61 = eq(_T_60, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_61 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[REDIRECT] flush: %d mou %x csr %x alu %x\n", io.flush, mou.io.redirect.target, csr.io.redirect.target, alu.io.redirect.target) : SIM_3 @[Debug.scala 57:13]
    node _T_62 = eq(UInt<1>("h1"), io.in.bits.ctrl.fuType) @[Mux.scala 80:60]
    node _T_63 = mux(_T_62, lsu.io.out.valid, UInt<1>("h1")) @[Mux.scala 80:57]
    node _T_64 = eq(UInt<2>("h2"), io.in.bits.ctrl.fuType) @[Mux.scala 80:60]
    node _T_65 = mux(_T_64, mdu.io.out.valid, _T_63) @[Mux.scala 80:57]
    node _T_66 = and(io.in.valid, _T_65) @[EXU.scala 106:31]
    io.out.valid <= _T_66 @[EXU.scala 106:16]
    io.out.bits.commits[UInt<1>("h0")] <= alu.io.out.bits @[EXU.scala 111:35]
    io.out.bits.commits[UInt<1>("h1")] <= lsu.io.out.bits @[EXU.scala 112:35]
    io.out.bits.commits[UInt<2>("h3")] <= csr.io.out.bits @[EXU.scala 113:35]
    io.out.bits.commits[UInt<2>("h2")] <= mdu.io.out.bits @[EXU.scala 114:35]
    io.out.bits.commits[UInt<3>("h4")] <= UInt<1>("h0") @[EXU.scala 115:35]
    node _T_67 = eq(io.in.valid, UInt<1>("h0")) @[EXU.scala 117:18]
    node _T_68 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_69 = or(_T_67, _T_68) @[EXU.scala 117:31]
    io.in.ready <= _T_69 @[EXU.scala 117:15]
    io.forward.valid <= io.in.valid @[EXU.scala 119:20]
    io.forward.wb.rfWen <= io.in.bits.ctrl.rfWen @[EXU.scala 120:23]
    io.forward.wb.rfDest <= io.in.bits.ctrl.rfDest @[EXU.scala 121:24]
    node _T_70 = and(alu.io.out.ready, alu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_71 = mux(_T_70, alu.io.out.bits, lsu.io.out.bits) @[EXU.scala 122:30]
    io.forward.wb.rfData <= _T_71 @[EXU.scala 122:24]
    io.forward.fuType <= io.in.bits.ctrl.fuType @[EXU.scala 123:21]
    node isBru = bits(io.in.bits.ctrl.fuOpType, 4, 4) @[ALU.scala 62:31]
    node _T_72 = and(alu.io.out.ready, alu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_73 = eq(isBru, UInt<1>("h0")) @[EXU.scala 126:46]
    node _T_74 = and(_T_72, _T_73) @[EXU.scala 126:43]
    node _T_75 = and(alu.io.out.ready, alu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_76 = and(_T_75, isBru) @[EXU.scala 127:43]
    node _T_77 = and(lsu.io.out.ready, lsu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_78 = and(mdu.io.out.ready, mdu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_79 = and(csr.io.out.ready, csr.io.out.valid) @[Decoupled.scala 40:37]
    wire _WIRE_2 : UInt<64>
    _WIRE_2 <= UInt<64>("h0")
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= UInt<64>("h0")
    node _T_80 = and(io.in.bits.ctrl.isNutCoreTrap, io.in.valid) @[EXU.scala 135:53]
    inst DifftestTrapEvent of DifftestTrapEvent @[EXU.scala 141:26]
    DifftestTrapEvent.io is invalid
    DifftestTrapEvent.io.clock <= clock @[EXU.scala 142:26]
    DifftestTrapEvent.io.coreid <= UInt<1>("h0") @[EXU.scala 143:26]
    DifftestTrapEvent.io.valid <= _T_80 @[EXU.scala 144:26]
    DifftestTrapEvent.io.code <= io.in.bits.data.src1 @[EXU.scala 145:26]
    DifftestTrapEvent.io.pc <= io.in.bits.cf.pc @[EXU.scala 146:26]
    DifftestTrapEvent.io.cycleCnt <= _WIRE_2 @[EXU.scala 147:26]
    DifftestTrapEvent.io.instrCnt <= _WIRE_3 @[EXU.scala 148:26]

  extmodule DifftestRunaheadRedirectEvent :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip valid : UInt<1>, flip pc : UInt<64>, flip target_pc : UInt<64>, flip checkpoint_id : UInt<64>}
    defname = DifftestRunaheadRedirectEvent

  extmodule DifftestInstrCommit :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip index : UInt<8>, flip valid : UInt<1>, flip special : UInt<8>, flip skip : UInt<1>, flip isRVC : UInt<1>, flip rfwen : UInt<1>, flip fpwen : UInt<1>, flip wpdest : UInt<32>, flip wdest : UInt<8>, flip pc : UInt<64>, flip instr : UInt<32>}
    defname = DifftestInstrCommit

  extmodule DifftestIntWriteback :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip valid : UInt<1>, flip dest : UInt<32>, flip data : UInt<64>}
    defname = DifftestIntWriteback

  extmodule DifftestRunaheadCommitEvent :
    output io : { flip clock : Clock, flip coreid : UInt<8>, flip index : UInt<8>, flip valid : UInt<1>, flip pc : UInt<64>}
    defname = DifftestRunaheadCommitEvent

  module WBU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { decode : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, isMMIO : UInt<1>, intrNO : UInt<64>, commits : UInt<64>[5]}}, wb : { rfWen : UInt<1>, rfDest : UInt<5>, rfData : UInt<64>}, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}

    node _T = and(io.in.bits.decode.ctrl.rfWen, io.in.valid) @[WBU.scala 32:47]
    io.wb.rfWen <= _T @[WBU.scala 32:15]
    io.wb.rfDest <= io.in.bits.decode.ctrl.rfDest @[WBU.scala 33:16]
    io.wb.rfData <= io.in.bits.commits[io.in.bits.decode.ctrl.fuType] @[WBU.scala 34:16]
    io.in.ready <= UInt<1>("h1") @[WBU.scala 36:15]
    io.redirect.valid <= io.in.bits.decode.cf.redirect.valid @[WBU.scala 38:15]
    io.redirect.rtype <= io.in.bits.decode.cf.redirect.rtype @[WBU.scala 38:15]
    io.redirect.target <= io.in.bits.decode.cf.redirect.target @[WBU.scala 38:15]
    node _T_1 = and(io.in.bits.decode.cf.redirect.valid, io.in.valid) @[WBU.scala 39:60]
    io.redirect.valid <= _T_1 @[WBU.scala 39:21]
    inst runahead_redirect of DifftestRunaheadRedirectEvent @[WBU.scala 41:33]
    runahead_redirect.io is invalid
    runahead_redirect.io.clock <= clock @[WBU.scala 42:30]
    runahead_redirect.io.coreid <= UInt<1>("h0") @[WBU.scala 43:31]
    runahead_redirect.io.valid <= io.redirect.valid @[WBU.scala 44:30]
    runahead_redirect.io.pc <= io.in.bits.decode.cf.pc @[WBU.scala 45:27]
    runahead_redirect.io.target_pc <= io.in.bits.decode.cf.redirect.target @[WBU.scala 46:34]
    runahead_redirect.io.checkpoint_id <= io.in.bits.decode.cf.runahead_checkpoint_id @[WBU.scala 47:38]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_2 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_3 = tail(_T_2, 1) @[GTimer.scala 25:12]
    REG <= _T_3 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_4 = and(io.in.valid, _WIRE) @[Debug.scala 55:16]
    when _T_4 : @[Debug.scala 55:31]
      node _T_5 = asUInt(reset) @[Debug.scala 56:24]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_6 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] WBU: ", REG) : SIM @[Debug.scala 56:24]
      node _T_7 = asUInt(reset) @[Debug.scala 57:13]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_8 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COMMIT] pc = 0x%x inst %x wen %x wdst %x wdata %x mmio %x intrNO %x\n", io.in.bits.decode.cf.pc, io.in.bits.decode.cf.instr, io.wb.rfWen, io.wb.rfDest, io.wb.rfData, io.in.bits.isMMIO, io.in.bits.intrNO) : SIM_1 @[Debug.scala 57:13]
    wire falseWire : UInt<1>
    falseWire <= UInt<1>("h0")
    inst DifftestInstrCommit of DifftestInstrCommit @[WBU.scala 60:33]
    DifftestInstrCommit.io is invalid
    DifftestInstrCommit.io.clock <= clock @[WBU.scala 61:33]
    DifftestInstrCommit.io.coreid <= UInt<1>("h0") @[WBU.scala 62:33]
    DifftestInstrCommit.io.index <= UInt<1>("h0") @[WBU.scala 63:33]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[WBU.scala 65:43]
    REG_1 <= io.in.valid @[WBU.scala 65:43]
    DifftestInstrCommit.io.valid <= REG_1 @[WBU.scala 65:33]
    node _T_9 = bits(io.in.bits.decode.cf.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_10 = bits(_T_9, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = cat(_T_11, io.in.bits.decode.cf.pc) @[Cat.scala 30:58]
    reg REG_2 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_2) @[WBU.scala 66:43]
    REG_2 <= _T_12 @[WBU.scala 66:43]
    DifftestInstrCommit.io.pc <= REG_2 @[WBU.scala 66:33]
    reg REG_3 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_3) @[WBU.scala 67:43]
    REG_3 <= io.in.bits.decode.cf.instr @[WBU.scala 67:43]
    DifftestInstrCommit.io.instr <= REG_3 @[WBU.scala 67:33]
    reg REG_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_4) @[WBU.scala 68:43]
    REG_4 <= io.in.bits.isMMIO @[WBU.scala 68:43]
    DifftestInstrCommit.io.skip <= REG_4 @[WBU.scala 68:33]
    node _T_13 = bits(io.in.bits.decode.cf.instr, 1, 0) @[WBU.scala 69:70]
    node _T_14 = neq(_T_13, UInt<2>("h3")) @[WBU.scala 69:75]
    reg REG_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_5) @[WBU.scala 69:43]
    REG_5 <= _T_14 @[WBU.scala 69:43]
    DifftestInstrCommit.io.isRVC <= REG_5 @[WBU.scala 69:33]
    node _T_15 = neq(io.wb.rfDest, UInt<1>("h0")) @[WBU.scala 70:72]
    node _T_16 = and(io.wb.rfWen, _T_15) @[WBU.scala 70:56]
    reg REG_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_6) @[WBU.scala 70:43]
    REG_6 <= _T_16 @[WBU.scala 70:43]
    DifftestInstrCommit.io.rfwen <= REG_6 @[WBU.scala 70:33]
    DifftestInstrCommit.io.fpwen <= UInt<1>("h0") @[WBU.scala 71:33]
    reg REG_7 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_7) @[WBU.scala 73:43]
    REG_7 <= io.wb.rfDest @[WBU.scala 73:43]
    DifftestInstrCommit.io.wdest <= REG_7 @[WBU.scala 73:33]
    reg REG_8 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_8) @[WBU.scala 74:43]
    REG_8 <= io.wb.rfDest @[WBU.scala 74:43]
    DifftestInstrCommit.io.wpdest <= REG_8 @[WBU.scala 74:33]
    inst DifftestIntWriteback of DifftestIntWriteback @[WBU.scala 76:29]
    DifftestIntWriteback.io is invalid
    DifftestIntWriteback.io.clock <= clock @[WBU.scala 77:26]
    DifftestIntWriteback.io.coreid <= UInt<1>("h0") @[WBU.scala 78:27]
    node _T_17 = neq(io.wb.rfDest, UInt<1>("h0")) @[WBU.scala 79:65]
    node _T_18 = and(io.wb.rfWen, _T_17) @[WBU.scala 79:49]
    reg REG_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_9) @[WBU.scala 79:36]
    REG_9 <= _T_18 @[WBU.scala 79:36]
    DifftestIntWriteback.io.valid <= REG_9 @[WBU.scala 79:26]
    reg REG_10 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_10) @[WBU.scala 80:35]
    REG_10 <= io.wb.rfDest @[WBU.scala 80:35]
    DifftestIntWriteback.io.dest <= REG_10 @[WBU.scala 80:25]
    reg REG_11 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_11) @[WBU.scala 81:35]
    REG_11 <= io.wb.rfData @[WBU.scala 81:35]
    DifftestIntWriteback.io.data <= REG_11 @[WBU.scala 81:25]
    inst DifftestRunaheadCommitEvent of DifftestRunaheadCommitEvent @[WBU.scala 83:33]
    DifftestRunaheadCommitEvent.io is invalid
    DifftestRunaheadCommitEvent.io.clock <= clock @[WBU.scala 84:30]
    DifftestRunaheadCommitEvent.io.coreid <= UInt<1>("h0") @[WBU.scala 85:31]
    node _T_19 = and(io.in.valid, io.in.bits.decode.cf.isBranch) @[WBU.scala 86:53]
    reg REG_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_12) @[WBU.scala 86:40]
    REG_12 <= _T_19 @[WBU.scala 86:40]
    DifftestRunaheadCommitEvent.io.valid <= REG_12 @[WBU.scala 86:30]
    node _T_20 = bits(io.in.bits.decode.cf.pc, 38, 38) @[BitUtils.scala 39:20]
    node _T_21 = bits(_T_20, 0, 0) @[Bitwise.scala 72:15]
    node _T_22 = mux(_T_21, UInt<25>("h1ffffff"), UInt<25>("h0")) @[Bitwise.scala 72:12]
    node _T_23 = cat(_T_22, io.in.bits.decode.cf.pc) @[Cat.scala 30:58]
    reg REG_13 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_13) @[WBU.scala 87:40]
    REG_13 <= _T_23 @[WBU.scala 87:40]
    DifftestRunaheadCommitEvent.io.pc <= REG_13 @[WBU.scala 87:30]

  module Backend_inorder :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}}[2], flip flush : UInt<2>, dmem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip memMMU : { imem : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, dmem : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}}, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}}

    inst isu of ISU @[Backend.scala 680:20]
    isu.clock <= clock
    isu.reset <= reset
    inst exu of EXU @[Backend.scala 681:20]
    exu.clock <= clock
    exu.reset <= reset
    inst wbu of WBU @[Backend.scala 682:20]
    wbu.clock <= clock
    wbu.reset <= reset
    node _T = and(exu.io.out.ready, exu.io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = bits(io.flush, 0, 0) @[Backend.scala 684:69]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      REG <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_2 = and(isu.io.out.valid, exu.io.in.ready) @[Pipeline.scala 26:22]
    when _T_2 : @[Pipeline.scala 26:38]
      REG <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_1 : @[Pipeline.scala 27:20]
      REG <= UInt<1>("h0") @[Pipeline.scala 27:28]
    isu.io.out.ready <= exu.io.in.ready @[Pipeline.scala 29:16]
    node _T_3 = and(isu.io.out.valid, exu.io.in.ready) @[Pipeline.scala 30:51]
    reg r : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when _T_3 : @[Reg.scala 16:19]
      r.data.imm <= isu.io.out.bits.data.imm @[Reg.scala 16:23]
      r.data.src2 <= isu.io.out.bits.data.src2 @[Reg.scala 16:23]
      r.data.src1 <= isu.io.out.bits.data.src1 @[Reg.scala 16:23]
      r.ctrl.isBlocked <= isu.io.out.bits.ctrl.isBlocked @[Reg.scala 16:23]
      r.ctrl.noSpecExec <= isu.io.out.bits.ctrl.noSpecExec @[Reg.scala 16:23]
      r.ctrl.isSrc2Forward <= isu.io.out.bits.ctrl.isSrc2Forward @[Reg.scala 16:23]
      r.ctrl.isSrc1Forward <= isu.io.out.bits.ctrl.isSrc1Forward @[Reg.scala 16:23]
      r.ctrl.isNutCoreTrap <= isu.io.out.bits.ctrl.isNutCoreTrap @[Reg.scala 16:23]
      r.ctrl.rfDest <= isu.io.out.bits.ctrl.rfDest @[Reg.scala 16:23]
      r.ctrl.rfWen <= isu.io.out.bits.ctrl.rfWen @[Reg.scala 16:23]
      r.ctrl.rfSrc2 <= isu.io.out.bits.ctrl.rfSrc2 @[Reg.scala 16:23]
      r.ctrl.rfSrc1 <= isu.io.out.bits.ctrl.rfSrc1 @[Reg.scala 16:23]
      r.ctrl.fuOpType <= isu.io.out.bits.ctrl.fuOpType @[Reg.scala 16:23]
      r.ctrl.fuType <= isu.io.out.bits.ctrl.fuType @[Reg.scala 16:23]
      r.ctrl.src2Type <= isu.io.out.bits.ctrl.src2Type @[Reg.scala 16:23]
      r.ctrl.src1Type <= isu.io.out.bits.ctrl.src1Type @[Reg.scala 16:23]
      r.cf.isBranch <= isu.io.out.bits.cf.isBranch @[Reg.scala 16:23]
      r.cf.runahead_checkpoint_id <= isu.io.out.bits.cf.runahead_checkpoint_id @[Reg.scala 16:23]
      r.cf.crossPageIPFFix <= isu.io.out.bits.cf.crossPageIPFFix @[Reg.scala 16:23]
      r.cf.isRVC <= isu.io.out.bits.cf.isRVC @[Reg.scala 16:23]
      r.cf.brIdx <= isu.io.out.bits.cf.brIdx @[Reg.scala 16:23]
      r.cf.intrVec[0] <= isu.io.out.bits.cf.intrVec[0] @[Reg.scala 16:23]
      r.cf.intrVec[1] <= isu.io.out.bits.cf.intrVec[1] @[Reg.scala 16:23]
      r.cf.intrVec[2] <= isu.io.out.bits.cf.intrVec[2] @[Reg.scala 16:23]
      r.cf.intrVec[3] <= isu.io.out.bits.cf.intrVec[3] @[Reg.scala 16:23]
      r.cf.intrVec[4] <= isu.io.out.bits.cf.intrVec[4] @[Reg.scala 16:23]
      r.cf.intrVec[5] <= isu.io.out.bits.cf.intrVec[5] @[Reg.scala 16:23]
      r.cf.intrVec[6] <= isu.io.out.bits.cf.intrVec[6] @[Reg.scala 16:23]
      r.cf.intrVec[7] <= isu.io.out.bits.cf.intrVec[7] @[Reg.scala 16:23]
      r.cf.intrVec[8] <= isu.io.out.bits.cf.intrVec[8] @[Reg.scala 16:23]
      r.cf.intrVec[9] <= isu.io.out.bits.cf.intrVec[9] @[Reg.scala 16:23]
      r.cf.intrVec[10] <= isu.io.out.bits.cf.intrVec[10] @[Reg.scala 16:23]
      r.cf.intrVec[11] <= isu.io.out.bits.cf.intrVec[11] @[Reg.scala 16:23]
      r.cf.exceptionVec[0] <= isu.io.out.bits.cf.exceptionVec[0] @[Reg.scala 16:23]
      r.cf.exceptionVec[1] <= isu.io.out.bits.cf.exceptionVec[1] @[Reg.scala 16:23]
      r.cf.exceptionVec[2] <= isu.io.out.bits.cf.exceptionVec[2] @[Reg.scala 16:23]
      r.cf.exceptionVec[3] <= isu.io.out.bits.cf.exceptionVec[3] @[Reg.scala 16:23]
      r.cf.exceptionVec[4] <= isu.io.out.bits.cf.exceptionVec[4] @[Reg.scala 16:23]
      r.cf.exceptionVec[5] <= isu.io.out.bits.cf.exceptionVec[5] @[Reg.scala 16:23]
      r.cf.exceptionVec[6] <= isu.io.out.bits.cf.exceptionVec[6] @[Reg.scala 16:23]
      r.cf.exceptionVec[7] <= isu.io.out.bits.cf.exceptionVec[7] @[Reg.scala 16:23]
      r.cf.exceptionVec[8] <= isu.io.out.bits.cf.exceptionVec[8] @[Reg.scala 16:23]
      r.cf.exceptionVec[9] <= isu.io.out.bits.cf.exceptionVec[9] @[Reg.scala 16:23]
      r.cf.exceptionVec[10] <= isu.io.out.bits.cf.exceptionVec[10] @[Reg.scala 16:23]
      r.cf.exceptionVec[11] <= isu.io.out.bits.cf.exceptionVec[11] @[Reg.scala 16:23]
      r.cf.exceptionVec[12] <= isu.io.out.bits.cf.exceptionVec[12] @[Reg.scala 16:23]
      r.cf.exceptionVec[13] <= isu.io.out.bits.cf.exceptionVec[13] @[Reg.scala 16:23]
      r.cf.exceptionVec[14] <= isu.io.out.bits.cf.exceptionVec[14] @[Reg.scala 16:23]
      r.cf.exceptionVec[15] <= isu.io.out.bits.cf.exceptionVec[15] @[Reg.scala 16:23]
      r.cf.redirect.valid <= isu.io.out.bits.cf.redirect.valid @[Reg.scala 16:23]
      r.cf.redirect.rtype <= isu.io.out.bits.cf.redirect.rtype @[Reg.scala 16:23]
      r.cf.redirect.target <= isu.io.out.bits.cf.redirect.target @[Reg.scala 16:23]
      r.cf.pnpc <= isu.io.out.bits.cf.pnpc @[Reg.scala 16:23]
      r.cf.pc <= isu.io.out.bits.cf.pc @[Reg.scala 16:23]
      r.cf.instr <= isu.io.out.bits.cf.instr @[Reg.scala 16:23]
    exu.io.in.bits.data.imm <= r.data.imm @[Pipeline.scala 30:16]
    exu.io.in.bits.data.src2 <= r.data.src2 @[Pipeline.scala 30:16]
    exu.io.in.bits.data.src1 <= r.data.src1 @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isBlocked <= r.ctrl.isBlocked @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.noSpecExec <= r.ctrl.noSpecExec @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isSrc2Forward <= r.ctrl.isSrc2Forward @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isSrc1Forward <= r.ctrl.isSrc1Forward @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.isNutCoreTrap <= r.ctrl.isNutCoreTrap @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfDest <= r.ctrl.rfDest @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfWen <= r.ctrl.rfWen @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfSrc2 <= r.ctrl.rfSrc2 @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.rfSrc1 <= r.ctrl.rfSrc1 @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.fuOpType <= r.ctrl.fuOpType @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.fuType <= r.ctrl.fuType @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.src2Type <= r.ctrl.src2Type @[Pipeline.scala 30:16]
    exu.io.in.bits.ctrl.src1Type <= r.ctrl.src1Type @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.isBranch <= r.cf.isBranch @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.runahead_checkpoint_id <= r.cf.runahead_checkpoint_id @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.crossPageIPFFix <= r.cf.crossPageIPFFix @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.isRVC <= r.cf.isRVC @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.brIdx <= r.cf.brIdx @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[0] <= r.cf.intrVec[0] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[1] <= r.cf.intrVec[1] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[2] <= r.cf.intrVec[2] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[3] <= r.cf.intrVec[3] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[4] <= r.cf.intrVec[4] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[5] <= r.cf.intrVec[5] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[6] <= r.cf.intrVec[6] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[7] <= r.cf.intrVec[7] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[8] <= r.cf.intrVec[8] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[9] <= r.cf.intrVec[9] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[10] <= r.cf.intrVec[10] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.intrVec[11] <= r.cf.intrVec[11] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[0] <= r.cf.exceptionVec[0] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[1] <= r.cf.exceptionVec[1] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[2] <= r.cf.exceptionVec[2] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[3] <= r.cf.exceptionVec[3] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[4] <= r.cf.exceptionVec[4] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[5] <= r.cf.exceptionVec[5] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[6] <= r.cf.exceptionVec[6] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[7] <= r.cf.exceptionVec[7] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[8] <= r.cf.exceptionVec[8] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[9] <= r.cf.exceptionVec[9] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[10] <= r.cf.exceptionVec[10] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[11] <= r.cf.exceptionVec[11] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[12] <= r.cf.exceptionVec[12] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[13] <= r.cf.exceptionVec[13] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[14] <= r.cf.exceptionVec[14] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.exceptionVec[15] <= r.cf.exceptionVec[15] @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.redirect.valid <= r.cf.redirect.valid @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.redirect.rtype <= r.cf.redirect.rtype @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.redirect.target <= r.cf.redirect.target @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.pnpc <= r.cf.pnpc @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.pc <= r.cf.pc @[Pipeline.scala 30:16]
    exu.io.in.bits.cf.instr <= r.cf.instr @[Pipeline.scala 30:16]
    exu.io.in.valid <= REG @[Pipeline.scala 31:17]
    node _T_4 = bits(io.flush, 1, 1) @[Backend.scala 685:58]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when UInt<1>("h1") : @[Pipeline.scala 25:25]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_5 = and(exu.io.out.valid, wbu.io.in.ready) @[Pipeline.scala 26:22]
    when _T_5 : @[Pipeline.scala 26:38]
      REG_1 <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_4 : @[Pipeline.scala 27:20]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 27:28]
    exu.io.out.ready <= wbu.io.in.ready @[Pipeline.scala 29:16]
    node _T_6 = and(exu.io.out.valid, wbu.io.in.ready) @[Pipeline.scala 30:51]
    reg r_1 : { decode : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}, isMMIO : UInt<1>, intrNO : UInt<64>, commits : UInt<64>[5]}, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when _T_6 : @[Reg.scala 16:19]
      r_1.commits[0] <= exu.io.out.bits.commits[0] @[Reg.scala 16:23]
      r_1.commits[1] <= exu.io.out.bits.commits[1] @[Reg.scala 16:23]
      r_1.commits[2] <= exu.io.out.bits.commits[2] @[Reg.scala 16:23]
      r_1.commits[3] <= exu.io.out.bits.commits[3] @[Reg.scala 16:23]
      r_1.commits[4] <= exu.io.out.bits.commits[4] @[Reg.scala 16:23]
      r_1.intrNO <= exu.io.out.bits.intrNO @[Reg.scala 16:23]
      r_1.isMMIO <= exu.io.out.bits.isMMIO @[Reg.scala 16:23]
      r_1.decode.data.imm <= exu.io.out.bits.decode.data.imm @[Reg.scala 16:23]
      r_1.decode.data.src2 <= exu.io.out.bits.decode.data.src2 @[Reg.scala 16:23]
      r_1.decode.data.src1 <= exu.io.out.bits.decode.data.src1 @[Reg.scala 16:23]
      r_1.decode.ctrl.isBlocked <= exu.io.out.bits.decode.ctrl.isBlocked @[Reg.scala 16:23]
      r_1.decode.ctrl.noSpecExec <= exu.io.out.bits.decode.ctrl.noSpecExec @[Reg.scala 16:23]
      r_1.decode.ctrl.isSrc2Forward <= exu.io.out.bits.decode.ctrl.isSrc2Forward @[Reg.scala 16:23]
      r_1.decode.ctrl.isSrc1Forward <= exu.io.out.bits.decode.ctrl.isSrc1Forward @[Reg.scala 16:23]
      r_1.decode.ctrl.isNutCoreTrap <= exu.io.out.bits.decode.ctrl.isNutCoreTrap @[Reg.scala 16:23]
      r_1.decode.ctrl.rfDest <= exu.io.out.bits.decode.ctrl.rfDest @[Reg.scala 16:23]
      r_1.decode.ctrl.rfWen <= exu.io.out.bits.decode.ctrl.rfWen @[Reg.scala 16:23]
      r_1.decode.ctrl.rfSrc2 <= exu.io.out.bits.decode.ctrl.rfSrc2 @[Reg.scala 16:23]
      r_1.decode.ctrl.rfSrc1 <= exu.io.out.bits.decode.ctrl.rfSrc1 @[Reg.scala 16:23]
      r_1.decode.ctrl.fuOpType <= exu.io.out.bits.decode.ctrl.fuOpType @[Reg.scala 16:23]
      r_1.decode.ctrl.fuType <= exu.io.out.bits.decode.ctrl.fuType @[Reg.scala 16:23]
      r_1.decode.ctrl.src2Type <= exu.io.out.bits.decode.ctrl.src2Type @[Reg.scala 16:23]
      r_1.decode.ctrl.src1Type <= exu.io.out.bits.decode.ctrl.src1Type @[Reg.scala 16:23]
      r_1.decode.cf.isBranch <= exu.io.out.bits.decode.cf.isBranch @[Reg.scala 16:23]
      r_1.decode.cf.runahead_checkpoint_id <= exu.io.out.bits.decode.cf.runahead_checkpoint_id @[Reg.scala 16:23]
      r_1.decode.cf.crossPageIPFFix <= exu.io.out.bits.decode.cf.crossPageIPFFix @[Reg.scala 16:23]
      r_1.decode.cf.isRVC <= exu.io.out.bits.decode.cf.isRVC @[Reg.scala 16:23]
      r_1.decode.cf.brIdx <= exu.io.out.bits.decode.cf.brIdx @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[0] <= exu.io.out.bits.decode.cf.intrVec[0] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[1] <= exu.io.out.bits.decode.cf.intrVec[1] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[2] <= exu.io.out.bits.decode.cf.intrVec[2] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[3] <= exu.io.out.bits.decode.cf.intrVec[3] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[4] <= exu.io.out.bits.decode.cf.intrVec[4] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[5] <= exu.io.out.bits.decode.cf.intrVec[5] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[6] <= exu.io.out.bits.decode.cf.intrVec[6] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[7] <= exu.io.out.bits.decode.cf.intrVec[7] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[8] <= exu.io.out.bits.decode.cf.intrVec[8] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[9] <= exu.io.out.bits.decode.cf.intrVec[9] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[10] <= exu.io.out.bits.decode.cf.intrVec[10] @[Reg.scala 16:23]
      r_1.decode.cf.intrVec[11] <= exu.io.out.bits.decode.cf.intrVec[11] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[0] <= exu.io.out.bits.decode.cf.exceptionVec[0] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[1] <= exu.io.out.bits.decode.cf.exceptionVec[1] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[2] <= exu.io.out.bits.decode.cf.exceptionVec[2] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[3] <= exu.io.out.bits.decode.cf.exceptionVec[3] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[4] <= exu.io.out.bits.decode.cf.exceptionVec[4] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[5] <= exu.io.out.bits.decode.cf.exceptionVec[5] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[6] <= exu.io.out.bits.decode.cf.exceptionVec[6] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[7] <= exu.io.out.bits.decode.cf.exceptionVec[7] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[8] <= exu.io.out.bits.decode.cf.exceptionVec[8] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[9] <= exu.io.out.bits.decode.cf.exceptionVec[9] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[10] <= exu.io.out.bits.decode.cf.exceptionVec[10] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[11] <= exu.io.out.bits.decode.cf.exceptionVec[11] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[12] <= exu.io.out.bits.decode.cf.exceptionVec[12] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[13] <= exu.io.out.bits.decode.cf.exceptionVec[13] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[14] <= exu.io.out.bits.decode.cf.exceptionVec[14] @[Reg.scala 16:23]
      r_1.decode.cf.exceptionVec[15] <= exu.io.out.bits.decode.cf.exceptionVec[15] @[Reg.scala 16:23]
      r_1.decode.cf.redirect.valid <= exu.io.out.bits.decode.cf.redirect.valid @[Reg.scala 16:23]
      r_1.decode.cf.redirect.rtype <= exu.io.out.bits.decode.cf.redirect.rtype @[Reg.scala 16:23]
      r_1.decode.cf.redirect.target <= exu.io.out.bits.decode.cf.redirect.target @[Reg.scala 16:23]
      r_1.decode.cf.pnpc <= exu.io.out.bits.decode.cf.pnpc @[Reg.scala 16:23]
      r_1.decode.cf.pc <= exu.io.out.bits.decode.cf.pc @[Reg.scala 16:23]
      r_1.decode.cf.instr <= exu.io.out.bits.decode.cf.instr @[Reg.scala 16:23]
    wbu.io.in.bits.commits[0] <= r_1.commits[0] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[1] <= r_1.commits[1] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[2] <= r_1.commits[2] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[3] <= r_1.commits[3] @[Pipeline.scala 30:16]
    wbu.io.in.bits.commits[4] <= r_1.commits[4] @[Pipeline.scala 30:16]
    wbu.io.in.bits.intrNO <= r_1.intrNO @[Pipeline.scala 30:16]
    wbu.io.in.bits.isMMIO <= r_1.isMMIO @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.data.imm <= r_1.decode.data.imm @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.data.src2 <= r_1.decode.data.src2 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.data.src1 <= r_1.decode.data.src1 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isBlocked <= r_1.decode.ctrl.isBlocked @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.noSpecExec <= r_1.decode.ctrl.noSpecExec @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isSrc2Forward <= r_1.decode.ctrl.isSrc2Forward @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isSrc1Forward <= r_1.decode.ctrl.isSrc1Forward @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.isNutCoreTrap <= r_1.decode.ctrl.isNutCoreTrap @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfDest <= r_1.decode.ctrl.rfDest @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfWen <= r_1.decode.ctrl.rfWen @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfSrc2 <= r_1.decode.ctrl.rfSrc2 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.rfSrc1 <= r_1.decode.ctrl.rfSrc1 @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.fuOpType <= r_1.decode.ctrl.fuOpType @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.fuType <= r_1.decode.ctrl.fuType @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.src2Type <= r_1.decode.ctrl.src2Type @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.ctrl.src1Type <= r_1.decode.ctrl.src1Type @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.isBranch <= r_1.decode.cf.isBranch @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.runahead_checkpoint_id <= r_1.decode.cf.runahead_checkpoint_id @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.crossPageIPFFix <= r_1.decode.cf.crossPageIPFFix @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.isRVC <= r_1.decode.cf.isRVC @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.brIdx <= r_1.decode.cf.brIdx @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[0] <= r_1.decode.cf.intrVec[0] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[1] <= r_1.decode.cf.intrVec[1] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[2] <= r_1.decode.cf.intrVec[2] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[3] <= r_1.decode.cf.intrVec[3] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[4] <= r_1.decode.cf.intrVec[4] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[5] <= r_1.decode.cf.intrVec[5] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[6] <= r_1.decode.cf.intrVec[6] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[7] <= r_1.decode.cf.intrVec[7] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[8] <= r_1.decode.cf.intrVec[8] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[9] <= r_1.decode.cf.intrVec[9] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[10] <= r_1.decode.cf.intrVec[10] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.intrVec[11] <= r_1.decode.cf.intrVec[11] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[0] <= r_1.decode.cf.exceptionVec[0] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[1] <= r_1.decode.cf.exceptionVec[1] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[2] <= r_1.decode.cf.exceptionVec[2] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[3] <= r_1.decode.cf.exceptionVec[3] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[4] <= r_1.decode.cf.exceptionVec[4] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[5] <= r_1.decode.cf.exceptionVec[5] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[6] <= r_1.decode.cf.exceptionVec[6] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[7] <= r_1.decode.cf.exceptionVec[7] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[8] <= r_1.decode.cf.exceptionVec[8] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[9] <= r_1.decode.cf.exceptionVec[9] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[10] <= r_1.decode.cf.exceptionVec[10] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[11] <= r_1.decode.cf.exceptionVec[11] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[12] <= r_1.decode.cf.exceptionVec[12] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[13] <= r_1.decode.cf.exceptionVec[13] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[14] <= r_1.decode.cf.exceptionVec[14] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.exceptionVec[15] <= r_1.decode.cf.exceptionVec[15] @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.redirect.valid <= r_1.decode.cf.redirect.valid @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.redirect.rtype <= r_1.decode.cf.redirect.rtype @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.redirect.target <= r_1.decode.cf.redirect.target @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.pnpc <= r_1.decode.cf.pnpc @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.pc <= r_1.decode.cf.pc @[Pipeline.scala 30:16]
    wbu.io.in.bits.decode.cf.instr <= r_1.decode.cf.instr @[Pipeline.scala 30:16]
    wbu.io.in.valid <= REG_1 @[Pipeline.scala 31:17]
    isu.io.in[0].bits.data.imm <= io.in[0].bits.data.imm @[Backend.scala 687:13]
    isu.io.in[0].bits.data.src2 <= io.in[0].bits.data.src2 @[Backend.scala 687:13]
    isu.io.in[0].bits.data.src1 <= io.in[0].bits.data.src1 @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.isBlocked <= io.in[0].bits.ctrl.isBlocked @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.noSpecExec <= io.in[0].bits.ctrl.noSpecExec @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.isSrc2Forward <= io.in[0].bits.ctrl.isSrc2Forward @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.isSrc1Forward <= io.in[0].bits.ctrl.isSrc1Forward @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.isNutCoreTrap <= io.in[0].bits.ctrl.isNutCoreTrap @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.rfDest <= io.in[0].bits.ctrl.rfDest @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.rfWen <= io.in[0].bits.ctrl.rfWen @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.rfSrc2 <= io.in[0].bits.ctrl.rfSrc2 @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.rfSrc1 <= io.in[0].bits.ctrl.rfSrc1 @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.fuOpType <= io.in[0].bits.ctrl.fuOpType @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.fuType <= io.in[0].bits.ctrl.fuType @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.src2Type <= io.in[0].bits.ctrl.src2Type @[Backend.scala 687:13]
    isu.io.in[0].bits.ctrl.src1Type <= io.in[0].bits.ctrl.src1Type @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.isBranch <= io.in[0].bits.cf.isBranch @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.runahead_checkpoint_id <= io.in[0].bits.cf.runahead_checkpoint_id @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.crossPageIPFFix <= io.in[0].bits.cf.crossPageIPFFix @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.isRVC <= io.in[0].bits.cf.isRVC @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.brIdx <= io.in[0].bits.cf.brIdx @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[0] <= io.in[0].bits.cf.intrVec[0] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[1] <= io.in[0].bits.cf.intrVec[1] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[2] <= io.in[0].bits.cf.intrVec[2] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[3] <= io.in[0].bits.cf.intrVec[3] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[4] <= io.in[0].bits.cf.intrVec[4] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[5] <= io.in[0].bits.cf.intrVec[5] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[6] <= io.in[0].bits.cf.intrVec[6] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[7] <= io.in[0].bits.cf.intrVec[7] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[8] <= io.in[0].bits.cf.intrVec[8] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[9] <= io.in[0].bits.cf.intrVec[9] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[10] <= io.in[0].bits.cf.intrVec[10] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.intrVec[11] <= io.in[0].bits.cf.intrVec[11] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[0] <= io.in[0].bits.cf.exceptionVec[0] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[1] <= io.in[0].bits.cf.exceptionVec[1] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[2] <= io.in[0].bits.cf.exceptionVec[2] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[3] <= io.in[0].bits.cf.exceptionVec[3] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[4] <= io.in[0].bits.cf.exceptionVec[4] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[5] <= io.in[0].bits.cf.exceptionVec[5] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[6] <= io.in[0].bits.cf.exceptionVec[6] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[7] <= io.in[0].bits.cf.exceptionVec[7] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[8] <= io.in[0].bits.cf.exceptionVec[8] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[9] <= io.in[0].bits.cf.exceptionVec[9] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[10] <= io.in[0].bits.cf.exceptionVec[10] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[11] <= io.in[0].bits.cf.exceptionVec[11] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[12] <= io.in[0].bits.cf.exceptionVec[12] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[13] <= io.in[0].bits.cf.exceptionVec[13] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[14] <= io.in[0].bits.cf.exceptionVec[14] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.exceptionVec[15] <= io.in[0].bits.cf.exceptionVec[15] @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.redirect.valid <= io.in[0].bits.cf.redirect.valid @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.redirect.rtype <= io.in[0].bits.cf.redirect.rtype @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.redirect.target <= io.in[0].bits.cf.redirect.target @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.pnpc <= io.in[0].bits.cf.pnpc @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.pc <= io.in[0].bits.cf.pc @[Backend.scala 687:13]
    isu.io.in[0].bits.cf.instr <= io.in[0].bits.cf.instr @[Backend.scala 687:13]
    isu.io.in[0].valid <= io.in[0].valid @[Backend.scala 687:13]
    io.in[0].ready <= isu.io.in[0].ready @[Backend.scala 687:13]
    isu.io.in[1].bits.data.imm <= io.in[1].bits.data.imm @[Backend.scala 687:13]
    isu.io.in[1].bits.data.src2 <= io.in[1].bits.data.src2 @[Backend.scala 687:13]
    isu.io.in[1].bits.data.src1 <= io.in[1].bits.data.src1 @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.isBlocked <= io.in[1].bits.ctrl.isBlocked @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.noSpecExec <= io.in[1].bits.ctrl.noSpecExec @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.isSrc2Forward <= io.in[1].bits.ctrl.isSrc2Forward @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.isSrc1Forward <= io.in[1].bits.ctrl.isSrc1Forward @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.isNutCoreTrap <= io.in[1].bits.ctrl.isNutCoreTrap @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.rfDest <= io.in[1].bits.ctrl.rfDest @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.rfWen <= io.in[1].bits.ctrl.rfWen @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.rfSrc2 <= io.in[1].bits.ctrl.rfSrc2 @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.rfSrc1 <= io.in[1].bits.ctrl.rfSrc1 @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.fuOpType <= io.in[1].bits.ctrl.fuOpType @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.fuType <= io.in[1].bits.ctrl.fuType @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.src2Type <= io.in[1].bits.ctrl.src2Type @[Backend.scala 687:13]
    isu.io.in[1].bits.ctrl.src1Type <= io.in[1].bits.ctrl.src1Type @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.isBranch <= io.in[1].bits.cf.isBranch @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.runahead_checkpoint_id <= io.in[1].bits.cf.runahead_checkpoint_id @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.crossPageIPFFix <= io.in[1].bits.cf.crossPageIPFFix @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.isRVC <= io.in[1].bits.cf.isRVC @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.brIdx <= io.in[1].bits.cf.brIdx @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[0] <= io.in[1].bits.cf.intrVec[0] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[1] <= io.in[1].bits.cf.intrVec[1] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[2] <= io.in[1].bits.cf.intrVec[2] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[3] <= io.in[1].bits.cf.intrVec[3] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[4] <= io.in[1].bits.cf.intrVec[4] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[5] <= io.in[1].bits.cf.intrVec[5] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[6] <= io.in[1].bits.cf.intrVec[6] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[7] <= io.in[1].bits.cf.intrVec[7] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[8] <= io.in[1].bits.cf.intrVec[8] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[9] <= io.in[1].bits.cf.intrVec[9] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[10] <= io.in[1].bits.cf.intrVec[10] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.intrVec[11] <= io.in[1].bits.cf.intrVec[11] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[0] <= io.in[1].bits.cf.exceptionVec[0] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[1] <= io.in[1].bits.cf.exceptionVec[1] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[2] <= io.in[1].bits.cf.exceptionVec[2] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[3] <= io.in[1].bits.cf.exceptionVec[3] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[4] <= io.in[1].bits.cf.exceptionVec[4] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[5] <= io.in[1].bits.cf.exceptionVec[5] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[6] <= io.in[1].bits.cf.exceptionVec[6] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[7] <= io.in[1].bits.cf.exceptionVec[7] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[8] <= io.in[1].bits.cf.exceptionVec[8] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[9] <= io.in[1].bits.cf.exceptionVec[9] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[10] <= io.in[1].bits.cf.exceptionVec[10] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[11] <= io.in[1].bits.cf.exceptionVec[11] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[12] <= io.in[1].bits.cf.exceptionVec[12] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[13] <= io.in[1].bits.cf.exceptionVec[13] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[14] <= io.in[1].bits.cf.exceptionVec[14] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.exceptionVec[15] <= io.in[1].bits.cf.exceptionVec[15] @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.redirect.valid <= io.in[1].bits.cf.redirect.valid @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.redirect.rtype <= io.in[1].bits.cf.redirect.rtype @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.redirect.target <= io.in[1].bits.cf.redirect.target @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.pnpc <= io.in[1].bits.cf.pnpc @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.pc <= io.in[1].bits.cf.pc @[Backend.scala 687:13]
    isu.io.in[1].bits.cf.instr <= io.in[1].bits.cf.instr @[Backend.scala 687:13]
    isu.io.in[1].valid <= io.in[1].valid @[Backend.scala 687:13]
    io.in[1].ready <= isu.io.in[1].ready @[Backend.scala 687:13]
    node _T_7 = bits(io.flush, 0, 0) @[Backend.scala 689:27]
    isu.io.flush <= _T_7 @[Backend.scala 689:16]
    node _T_8 = bits(io.flush, 1, 1) @[Backend.scala 690:27]
    exu.io.flush <= _T_8 @[Backend.scala 690:16]
    isu.io.wb.rfData <= wbu.io.wb.rfData @[Backend.scala 692:13]
    isu.io.wb.rfDest <= wbu.io.wb.rfDest @[Backend.scala 692:13]
    isu.io.wb.rfWen <= wbu.io.wb.rfWen @[Backend.scala 692:13]
    io.redirect.valid <= wbu.io.redirect.valid @[Backend.scala 693:15]
    io.redirect.rtype <= wbu.io.redirect.rtype @[Backend.scala 693:15]
    io.redirect.target <= wbu.io.redirect.target @[Backend.scala 693:15]
    isu.io.forward.fuType <= exu.io.forward.fuType @[Backend.scala 695:18]
    isu.io.forward.wb.rfData <= exu.io.forward.wb.rfData @[Backend.scala 695:18]
    isu.io.forward.wb.rfDest <= exu.io.forward.wb.rfDest @[Backend.scala 695:18]
    isu.io.forward.wb.rfWen <= exu.io.forward.wb.rfWen @[Backend.scala 695:18]
    isu.io.forward.valid <= exu.io.forward.valid @[Backend.scala 695:18]
    exu.io.memMMU.imem.addr <= io.memMMU.imem.addr @[Backend.scala 697:18]
    exu.io.memMMU.imem.storePF <= io.memMMU.imem.storePF @[Backend.scala 697:18]
    exu.io.memMMU.imem.loadPF <= io.memMMU.imem.loadPF @[Backend.scala 697:18]
    io.memMMU.imem.status_mxr <= exu.io.memMMU.imem.status_mxr @[Backend.scala 697:18]
    io.memMMU.imem.status_sum <= exu.io.memMMU.imem.status_sum @[Backend.scala 697:18]
    io.memMMU.imem.priviledgeMode <= exu.io.memMMU.imem.priviledgeMode @[Backend.scala 697:18]
    exu.io.memMMU.dmem.addr <= io.memMMU.dmem.addr @[Backend.scala 698:18]
    exu.io.memMMU.dmem.storePF <= io.memMMU.dmem.storePF @[Backend.scala 698:18]
    exu.io.memMMU.dmem.loadPF <= io.memMMU.dmem.loadPF @[Backend.scala 698:18]
    io.memMMU.dmem.status_mxr <= exu.io.memMMU.dmem.status_mxr @[Backend.scala 698:18]
    io.memMMU.dmem.status_sum <= exu.io.memMMU.dmem.status_sum @[Backend.scala 698:18]
    io.memMMU.dmem.priviledgeMode <= exu.io.memMMU.dmem.priviledgeMode @[Backend.scala 698:18]
    exu.io.dmem.resp.bits.rdata <= io.dmem.resp.bits.rdata @[Backend.scala 699:11]
    exu.io.dmem.resp.bits.cmd <= io.dmem.resp.bits.cmd @[Backend.scala 699:11]
    exu.io.dmem.resp.valid <= io.dmem.resp.valid @[Backend.scala 699:11]
    io.dmem.resp.ready <= exu.io.dmem.resp.ready @[Backend.scala 699:11]
    io.dmem.req.bits.wdata <= exu.io.dmem.req.bits.wdata @[Backend.scala 699:11]
    io.dmem.req.bits.wmask <= exu.io.dmem.req.bits.wmask @[Backend.scala 699:11]
    io.dmem.req.bits.cmd <= exu.io.dmem.req.bits.cmd @[Backend.scala 699:11]
    io.dmem.req.bits.size <= exu.io.dmem.req.bits.size @[Backend.scala 699:11]
    io.dmem.req.bits.addr <= exu.io.dmem.req.bits.addr @[Backend.scala 699:11]
    io.dmem.req.valid <= exu.io.dmem.req.valid @[Backend.scala 699:11]
    exu.io.dmem.req.ready <= io.dmem.req.ready @[Backend.scala 699:11]

  module LockingArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.wdata <= io.in[io.chosen].bits.wdata @[Arbiter.scala 42:15]
    io.out.bits.wmask <= io.in[io.chosen].bits.wmask @[Arbiter.scala 42:15]
    io.out.bits.cmd <= io.in[io.chosen].bits.cmd @[Arbiter.scala 42:15]
    io.out.bits.size <= io.in[io.chosen].bits.size @[Arbiter.scala 42:15]
    io.out.bits.addr <= io.in[io.chosen].bits.addr @[Arbiter.scala 42:15]
    reg value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg lockIdx : UInt, clock with :
      reset => (UInt<1>("h0"), lockIdx) @[Arbiter.scala 46:22]
    node locked = neq(value, UInt<1>("h0")) @[Arbiter.scala 47:34]
    node _wantsLock_T = bits(io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _wantsLock_T_1 = bits(io.out.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node wantsLock = and(_wantsLock_T, _wantsLock_T_1) @[Crossbar.scala 100:62]
    node _T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(_T, wantsLock) @[Arbiter.scala 50:25]
    when _T_1 : @[Arbiter.scala 50:39]
      lockIdx <= io.chosen @[Arbiter.scala 51:15]
      node wrap = eq(value, UInt<3>("h7")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    when locked : @[Arbiter.scala 55:19]
      io.chosen <= lockIdx @[Arbiter.scala 55:31]
    node _T_2 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = eq(lockIdx, UInt<1>("h0")) @[Arbiter.scala 57:39]
    node _io_in_0_ready_T_1 = mux(locked, _io_in_0_ready_T, UInt<1>("h1")) @[Arbiter.scala 57:22]
    node _io_in_0_ready_T_2 = and(_io_in_0_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[0].ready <= _io_in_0_ready_T_2 @[Arbiter.scala 57:16]
    node _io_in_1_ready_T = eq(lockIdx, UInt<1>("h1")) @[Arbiter.scala 57:39]
    node _io_in_1_ready_T_1 = mux(locked, _io_in_1_ready_T, _T_2) @[Arbiter.scala 57:22]
    node _io_in_1_ready_T_2 = and(_io_in_1_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[1].ready <= _io_in_1_ready_T_2 @[Arbiter.scala 57:16]
    when io.in[0].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 88:36]

  module SimpleBusCrossbarNto1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}[2], out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Crossbar.scala 98:22]
    inst inputArb of LockingArbiter @[Crossbar.scala 101:24]
    inputArb.clock <= clock
    inputArb.reset <= reset
    inputArb.io.in[0].bits.wdata <= io.in[0].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.wmask <= io.in[0].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.cmd <= io.in[0].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.size <= io.in[0].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.addr <= io.in[0].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[0].valid <= io.in[0].req.valid @[Crossbar.scala 102:68]
    io.in[0].req.ready <= inputArb.io.in[0].ready @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wdata <= io.in[1].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wmask <= io.in[1].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.cmd <= io.in[1].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.size <= io.in[1].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.addr <= io.in[1].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[1].valid <= io.in[1].req.valid @[Crossbar.scala 102:68]
    io.in[1].req.ready <= inputArb.io.in[1].ready @[Crossbar.scala 102:68]
    node _T = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Crossbar.scala 104:29]
    node _T_6 = and(inputArb.io.out.valid, _T_5) @[Crossbar.scala 104:26]
    node _T_7 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[Crossbar.scala 104:55]
    node _T_9 = and(_T_6, _T_8) @[Crossbar.scala 104:52]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Crossbar.scala 104:10]
    node _T_11 = asUInt(reset) @[Crossbar.scala 104:9]
    node _T_12 = or(_T_10, _T_11) @[Crossbar.scala 104:9]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[Crossbar.scala 104:9]
    when _T_13 : @[Crossbar.scala 104:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Crossbar.scala:104 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") : SIM @[Crossbar.scala 104:9]
      stop(clock, UInt<1>("h1"), 1) @[Crossbar.scala 104:9]
    reg inflightSrc : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflightSrc) @[Crossbar.scala 105:24]
    io.out.req.bits.wdata <= inputArb.io.out.bits.wdata @[Crossbar.scala 107:19]
    io.out.req.bits.wmask <= inputArb.io.out.bits.wmask @[Crossbar.scala 107:19]
    io.out.req.bits.cmd <= inputArb.io.out.bits.cmd @[Crossbar.scala 107:19]
    io.out.req.bits.size <= inputArb.io.out.bits.size @[Crossbar.scala 107:19]
    io.out.req.bits.addr <= inputArb.io.out.bits.addr @[Crossbar.scala 107:19]
    node _T_14 = eq(state, UInt<2>("h0")) @[Crossbar.scala 109:47]
    node _T_15 = and(inputArb.io.out.valid, _T_14) @[Crossbar.scala 109:37]
    io.out.req.valid <= _T_15 @[Crossbar.scala 109:20]
    node _T_16 = eq(state, UInt<2>("h0")) @[Crossbar.scala 110:47]
    node _T_17 = and(io.out.req.ready, _T_16) @[Crossbar.scala 110:37]
    inputArb.io.out.ready <= _T_17 @[Crossbar.scala 110:17]
    io.in[0].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[0].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[1].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[1].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[0].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[1].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[inflightSrc].resp.valid <= io.out.resp.valid @[Crossbar.scala 115:13]
    io.out.resp.ready <= io.in[inflightSrc].resp.ready @[Crossbar.scala 116:13]
    node _T_18 = eq(UInt<2>("h0"), state) @[Crossbar.scala 119:18]
    when _T_18 : @[Crossbar.scala 119:18]
      node _T_19 = and(inputArb.io.out.ready, inputArb.io.out.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[Crossbar.scala 121:29]
        inflightSrc <= inputArb.io.chosen @[Crossbar.scala 122:21]
        node _T_20 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_21 = eq(_T_20, UInt<1>("h0")) @[SimpleBus.scala 73:18]
        node _T_22 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_23 = eq(_T_22, UInt<1>("h0")) @[SimpleBus.scala 73:29]
        node _T_24 = and(_T_21, _T_23) @[SimpleBus.scala 73:26]
        when _T_24 : @[Crossbar.scala 123:38]
          state <= UInt<2>("h1") @[Crossbar.scala 123:46]
        else :
          node _T_25 = eq(inputArb.io.out.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
          node _T_26 = eq(inputArb.io.out.bits.cmd, UInt<1>("h1")) @[SimpleBus.scala 77:29]
          node _T_27 = or(_T_25, _T_26) @[Crossbar.scala 124:47]
          when _T_27 : @[Crossbar.scala 124:80]
            state <= UInt<2>("h2") @[Crossbar.scala 124:88]
    else :
      node _T_28 = eq(UInt<2>("h1"), state) @[Crossbar.scala 119:18]
      when _T_28 : @[Crossbar.scala 119:18]
        node _T_29 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
        node _T_30 = eq(io.out.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
        node _T_31 = and(_T_29, _T_30) @[Crossbar.scala 127:48]
        when _T_31 : @[Crossbar.scala 127:82]
          state <= UInt<2>("h0") @[Crossbar.scala 127:90]
      else :
        node _T_32 = eq(UInt<2>("h2"), state) @[Crossbar.scala 119:18]
        when _T_32 : @[Crossbar.scala 119:18]
          node _T_33 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
          when _T_33 : @[Crossbar.scala 128:50]
            state <= UInt<2>("h0") @[Crossbar.scala 128:58]

  module LockingArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[4], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h3")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.wdata <= io.in[io.chosen].bits.wdata @[Arbiter.scala 42:15]
    io.out.bits.wmask <= io.in[io.chosen].bits.wmask @[Arbiter.scala 42:15]
    io.out.bits.cmd <= io.in[io.chosen].bits.cmd @[Arbiter.scala 42:15]
    io.out.bits.size <= io.in[io.chosen].bits.size @[Arbiter.scala 42:15]
    io.out.bits.addr <= io.in[io.chosen].bits.addr @[Arbiter.scala 42:15]
    reg value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg lockIdx : UInt, clock with :
      reset => (UInt<1>("h0"), lockIdx) @[Arbiter.scala 46:22]
    node locked = neq(value, UInt<1>("h0")) @[Arbiter.scala 47:34]
    node _wantsLock_T = bits(io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _wantsLock_T_1 = bits(io.out.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node wantsLock = and(_wantsLock_T, _wantsLock_T_1) @[Crossbar.scala 100:62]
    node _T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(_T, wantsLock) @[Arbiter.scala 50:25]
    when _T_1 : @[Arbiter.scala 50:39]
      lockIdx <= io.chosen @[Arbiter.scala 51:15]
      node wrap = eq(value, UInt<3>("h7")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    when locked : @[Arbiter.scala 55:19]
      io.chosen <= lockIdx @[Arbiter.scala 55:31]
    node _T_2 = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 31:68]
    node _T_3 = or(_T_2, io.in[2].valid) @[Arbiter.scala 31:68]
    node _T_4 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T_5 = eq(_T_2, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _T_6 = eq(_T_3, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = eq(lockIdx, UInt<1>("h0")) @[Arbiter.scala 57:39]
    node _io_in_0_ready_T_1 = mux(locked, _io_in_0_ready_T, UInt<1>("h1")) @[Arbiter.scala 57:22]
    node _io_in_0_ready_T_2 = and(_io_in_0_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[0].ready <= _io_in_0_ready_T_2 @[Arbiter.scala 57:16]
    node _io_in_1_ready_T = eq(lockIdx, UInt<1>("h1")) @[Arbiter.scala 57:39]
    node _io_in_1_ready_T_1 = mux(locked, _io_in_1_ready_T, _T_4) @[Arbiter.scala 57:22]
    node _io_in_1_ready_T_2 = and(_io_in_1_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[1].ready <= _io_in_1_ready_T_2 @[Arbiter.scala 57:16]
    node _io_in_2_ready_T = eq(lockIdx, UInt<2>("h2")) @[Arbiter.scala 57:39]
    node _io_in_2_ready_T_1 = mux(locked, _io_in_2_ready_T, _T_5) @[Arbiter.scala 57:22]
    node _io_in_2_ready_T_2 = and(_io_in_2_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[2].ready <= _io_in_2_ready_T_2 @[Arbiter.scala 57:16]
    node _io_in_3_ready_T = eq(lockIdx, UInt<2>("h3")) @[Arbiter.scala 57:39]
    node _io_in_3_ready_T_1 = mux(locked, _io_in_3_ready_T, _T_6) @[Arbiter.scala 57:22]
    node _io_in_3_ready_T_2 = and(_io_in_3_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[3].ready <= _io_in_3_ready_T_2 @[Arbiter.scala 57:16]
    when io.in[2].valid : @[Arbiter.scala 88:27]
      choice <= UInt<2>("h2") @[Arbiter.scala 88:36]
    when io.in[1].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h1") @[Arbiter.scala 88:36]
    when io.in[0].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 88:36]

  module SimpleBusCrossbarNto1_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}[4], out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Crossbar.scala 98:22]
    inst inputArb of LockingArbiter_1 @[Crossbar.scala 101:24]
    inputArb.clock <= clock
    inputArb.reset <= reset
    inputArb.io.in[0].bits.wdata <= io.in[0].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.wmask <= io.in[0].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.cmd <= io.in[0].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.size <= io.in[0].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.addr <= io.in[0].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[0].valid <= io.in[0].req.valid @[Crossbar.scala 102:68]
    io.in[0].req.ready <= inputArb.io.in[0].ready @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wdata <= io.in[1].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wmask <= io.in[1].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.cmd <= io.in[1].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.size <= io.in[1].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.addr <= io.in[1].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[1].valid <= io.in[1].req.valid @[Crossbar.scala 102:68]
    io.in[1].req.ready <= inputArb.io.in[1].ready @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.wdata <= io.in[2].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.wmask <= io.in[2].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.cmd <= io.in[2].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.size <= io.in[2].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[2].bits.addr <= io.in[2].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[2].valid <= io.in[2].req.valid @[Crossbar.scala 102:68]
    io.in[2].req.ready <= inputArb.io.in[2].ready @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.wdata <= io.in[3].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.wmask <= io.in[3].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.cmd <= io.in[3].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.size <= io.in[3].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[3].bits.addr <= io.in[3].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[3].valid <= io.in[3].req.valid @[Crossbar.scala 102:68]
    io.in[3].req.ready <= inputArb.io.in[3].ready @[Crossbar.scala 102:68]
    node _T = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Crossbar.scala 104:29]
    node _T_6 = and(inputArb.io.out.valid, _T_5) @[Crossbar.scala 104:26]
    node _T_7 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[Crossbar.scala 104:55]
    node _T_9 = and(_T_6, _T_8) @[Crossbar.scala 104:52]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Crossbar.scala 104:10]
    node _T_11 = asUInt(reset) @[Crossbar.scala 104:9]
    node _T_12 = or(_T_10, _T_11) @[Crossbar.scala 104:9]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[Crossbar.scala 104:9]
    when _T_13 : @[Crossbar.scala 104:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Crossbar.scala:104 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") : SIM @[Crossbar.scala 104:9]
      stop(clock, UInt<1>("h1"), 1) @[Crossbar.scala 104:9]
    reg inflightSrc : UInt<2>, clock with :
      reset => (UInt<1>("h0"), inflightSrc) @[Crossbar.scala 105:24]
    io.out.req.bits.wdata <= inputArb.io.out.bits.wdata @[Crossbar.scala 107:19]
    io.out.req.bits.wmask <= inputArb.io.out.bits.wmask @[Crossbar.scala 107:19]
    io.out.req.bits.cmd <= inputArb.io.out.bits.cmd @[Crossbar.scala 107:19]
    io.out.req.bits.size <= inputArb.io.out.bits.size @[Crossbar.scala 107:19]
    io.out.req.bits.addr <= inputArb.io.out.bits.addr @[Crossbar.scala 107:19]
    node _T_14 = eq(state, UInt<2>("h0")) @[Crossbar.scala 109:47]
    node _T_15 = and(inputArb.io.out.valid, _T_14) @[Crossbar.scala 109:37]
    io.out.req.valid <= _T_15 @[Crossbar.scala 109:20]
    node _T_16 = eq(state, UInt<2>("h0")) @[Crossbar.scala 110:47]
    node _T_17 = and(io.out.req.ready, _T_16) @[Crossbar.scala 110:37]
    inputArb.io.out.ready <= _T_17 @[Crossbar.scala 110:17]
    io.in[0].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[0].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[1].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[1].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[2].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[2].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[3].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[3].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[0].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[1].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[2].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[3].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[inflightSrc].resp.valid <= io.out.resp.valid @[Crossbar.scala 115:13]
    io.out.resp.ready <= io.in[inflightSrc].resp.ready @[Crossbar.scala 116:13]
    node _T_18 = eq(UInt<2>("h0"), state) @[Crossbar.scala 119:18]
    when _T_18 : @[Crossbar.scala 119:18]
      node _T_19 = and(inputArb.io.out.ready, inputArb.io.out.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[Crossbar.scala 121:29]
        inflightSrc <= inputArb.io.chosen @[Crossbar.scala 122:21]
        node _T_20 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_21 = eq(_T_20, UInt<1>("h0")) @[SimpleBus.scala 73:18]
        node _T_22 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_23 = eq(_T_22, UInt<1>("h0")) @[SimpleBus.scala 73:29]
        node _T_24 = and(_T_21, _T_23) @[SimpleBus.scala 73:26]
        when _T_24 : @[Crossbar.scala 123:38]
          state <= UInt<2>("h1") @[Crossbar.scala 123:46]
        else :
          node _T_25 = eq(inputArb.io.out.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
          node _T_26 = eq(inputArb.io.out.bits.cmd, UInt<1>("h1")) @[SimpleBus.scala 77:29]
          node _T_27 = or(_T_25, _T_26) @[Crossbar.scala 124:47]
          when _T_27 : @[Crossbar.scala 124:80]
            state <= UInt<2>("h2") @[Crossbar.scala 124:88]
    else :
      node _T_28 = eq(UInt<2>("h1"), state) @[Crossbar.scala 119:18]
      when _T_28 : @[Crossbar.scala 119:18]
        node _T_29 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
        node _T_30 = eq(io.out.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
        node _T_31 = and(_T_29, _T_30) @[Crossbar.scala 127:48]
        when _T_31 : @[Crossbar.scala 127:82]
          state <= UInt<2>("h0") @[Crossbar.scala 127:90]
      else :
        node _T_32 = eq(UInt<2>("h2"), state) @[Crossbar.scala 119:18]
        when _T_32 : @[Crossbar.scala 119:18]
          node _T_33 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
          when _T_33 : @[Crossbar.scala 128:50]
            state <= UInt<2>("h0") @[Crossbar.scala 128:58]

  module EmbeddedTLBExec :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip md : UInt<121>[4], mdWrite : { wen : UInt<1>, windex : UInt<1>, waymask : UInt<4>, wdata : UInt<121>}, flip mdReady : UInt<1>, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, flip satp : UInt<64>, pf : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, ipf : UInt<1>, isFinish : UInt<1>}

    wire _WIRE : { vpn : UInt<27>, off : UInt<12>} @[EmbeddedTLB.scala 196:30]
    wire _WIRE_1 : UInt<39>
    _WIRE_1 <= io.in.bits.addr
    node _T = bits(_WIRE_1, 11, 0) @[EmbeddedTLB.scala 196:30]
    _WIRE.off <= _T @[EmbeddedTLB.scala 196:30]
    node _T_1 = bits(_WIRE_1, 38, 12) @[EmbeddedTLB.scala 196:30]
    _WIRE.vpn <= _T_1 @[EmbeddedTLB.scala 196:30]
    wire vpn : { vpn2 : UInt<9>, vpn1 : UInt<9>, vpn0 : UInt<9>} @[EmbeddedTLB.scala 196:54]
    wire _WIRE_2 : UInt<27>
    _WIRE_2 <= _WIRE.vpn
    node _T_2 = bits(_WIRE_2, 8, 0) @[EmbeddedTLB.scala 196:54]
    vpn.vpn0 <= _T_2 @[EmbeddedTLB.scala 196:54]
    node _T_3 = bits(_WIRE_2, 17, 9) @[EmbeddedTLB.scala 196:54]
    vpn.vpn1 <= _T_3 @[EmbeddedTLB.scala 196:54]
    node _T_4 = bits(_WIRE_2, 26, 18) @[EmbeddedTLB.scala 196:54]
    vpn.vpn2 <= _T_4 @[EmbeddedTLB.scala 196:54]
    wire satp : { mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 198:30]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= io.satp
    node _T_5 = bits(_WIRE_3, 19, 0) @[EmbeddedTLB.scala 198:30]
    satp.ppn <= _T_5 @[EmbeddedTLB.scala 198:30]
    node _T_6 = bits(_WIRE_3, 43, 20) @[EmbeddedTLB.scala 198:30]
    satp.res <= _T_6 @[EmbeddedTLB.scala 198:30]
    node _T_7 = bits(_WIRE_3, 59, 44) @[EmbeddedTLB.scala 198:30]
    satp.asid <= _T_7 @[EmbeddedTLB.scala 198:30]
    node _T_8 = bits(_WIRE_3, 63, 60) @[EmbeddedTLB.scala 198:30]
    satp.mode <= _T_8 @[EmbeddedTLB.scala 198:30]
    io.pf.loadPF <= UInt<1>("h0") @[EmbeddedTLB.scala 202:13]
    io.pf.storePF <= UInt<1>("h0") @[EmbeddedTLB.scala 203:14]
    io.pf.addr <= io.in.bits.addr @[EmbeddedTLB.scala 204:11]
    wire _WIRE_4 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_5 : UInt<121>
    _WIRE_5 <= io.md[0]
    node _T_9 = bits(_WIRE_5, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.pteaddr <= _T_9 @[EmbeddedTLB.scala 207:46]
    node _T_10 = bits(_WIRE_5, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.ppn <= _T_10 @[EmbeddedTLB.scala 207:46]
    node _T_11 = bits(_WIRE_5, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.flag <= _T_11 @[EmbeddedTLB.scala 207:46]
    node _T_12 = bits(_WIRE_5, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.mask <= _T_12 @[EmbeddedTLB.scala 207:46]
    node _T_13 = bits(_WIRE_5, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.asid <= _T_13 @[EmbeddedTLB.scala 207:46]
    node _T_14 = bits(_WIRE_5, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.vpn <= _T_14 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_6 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_7 : UInt<8>
    _WIRE_7 <= _WIRE_4.flag
    node _T_15 = bits(_WIRE_7, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.v <= _T_15 @[EmbeddedTLB.scala 207:71]
    node _T_16 = bits(_WIRE_7, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.r <= _T_16 @[EmbeddedTLB.scala 207:71]
    node _T_17 = bits(_WIRE_7, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.w <= _T_17 @[EmbeddedTLB.scala 207:71]
    node _T_18 = bits(_WIRE_7, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.x <= _T_18 @[EmbeddedTLB.scala 207:71]
    node _T_19 = bits(_WIRE_7, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.u <= _T_19 @[EmbeddedTLB.scala 207:71]
    node _T_20 = bits(_WIRE_7, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.g <= _T_20 @[EmbeddedTLB.scala 207:71]
    node _T_21 = bits(_WIRE_7, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.a <= _T_21 @[EmbeddedTLB.scala 207:71]
    node _T_22 = bits(_WIRE_7, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.d <= _T_22 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_8 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_9 : UInt<121>
    _WIRE_9 <= io.md[0]
    node _T_23 = bits(_WIRE_9, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.pteaddr <= _T_23 @[EmbeddedTLB.scala 207:100]
    node _T_24 = bits(_WIRE_9, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.ppn <= _T_24 @[EmbeddedTLB.scala 207:100]
    node _T_25 = bits(_WIRE_9, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.flag <= _T_25 @[EmbeddedTLB.scala 207:100]
    node _T_26 = bits(_WIRE_9, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.mask <= _T_26 @[EmbeddedTLB.scala 207:100]
    node _T_27 = bits(_WIRE_9, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.asid <= _T_27 @[EmbeddedTLB.scala 207:100]
    node _T_28 = bits(_WIRE_9, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.vpn <= _T_28 @[EmbeddedTLB.scala 207:100]
    node _T_29 = eq(_WIRE_8.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_30 = and(_WIRE_6.v, _T_29) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_10 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_11 : UInt<121>
    _WIRE_11 <= io.md[0]
    node _T_31 = bits(_WIRE_11, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.pteaddr <= _T_31 @[EmbeddedTLB.scala 207:152]
    node _T_32 = bits(_WIRE_11, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.ppn <= _T_32 @[EmbeddedTLB.scala 207:152]
    node _T_33 = bits(_WIRE_11, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.flag <= _T_33 @[EmbeddedTLB.scala 207:152]
    node _T_34 = bits(_WIRE_11, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.mask <= _T_34 @[EmbeddedTLB.scala 207:152]
    node _T_35 = bits(_WIRE_11, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.asid <= _T_35 @[EmbeddedTLB.scala 207:152]
    node _T_36 = bits(_WIRE_11, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.vpn <= _T_36 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_12 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_13 : UInt<121>
    _WIRE_13 <= io.md[0]
    node _T_37 = bits(_WIRE_13, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.pteaddr <= _T_37 @[EmbeddedTLB.scala 207:180]
    node _T_38 = bits(_WIRE_13, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.ppn <= _T_38 @[EmbeddedTLB.scala 207:180]
    node _T_39 = bits(_WIRE_13, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.flag <= _T_39 @[EmbeddedTLB.scala 207:180]
    node _T_40 = bits(_WIRE_13, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.mask <= _T_40 @[EmbeddedTLB.scala 207:180]
    node _T_41 = bits(_WIRE_13, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.asid <= _T_41 @[EmbeddedTLB.scala 207:180]
    node _T_42 = bits(_WIRE_13, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.vpn <= _T_42 @[EmbeddedTLB.scala 207:180]
    node hi = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_43 = cat(hi, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_44 = cat(UInt<9>("h1ff"), _WIRE_10.mask) @[Cat.scala 30:58]
    node _T_45 = and(_T_44, _WIRE_12.vpn) @[TLB.scala 131:37]
    node _T_46 = cat(UInt<9>("h1ff"), _WIRE_10.mask) @[Cat.scala 30:58]
    node _T_47 = and(_T_46, _T_43) @[TLB.scala 131:84]
    node _T_48 = eq(_T_45, _T_47) @[TLB.scala 131:48]
    node _T_49 = and(_T_30, _T_48) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_14 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_15 : UInt<121>
    _WIRE_15 <= io.md[1]
    node _T_50 = bits(_WIRE_15, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.pteaddr <= _T_50 @[EmbeddedTLB.scala 207:46]
    node _T_51 = bits(_WIRE_15, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.ppn <= _T_51 @[EmbeddedTLB.scala 207:46]
    node _T_52 = bits(_WIRE_15, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.flag <= _T_52 @[EmbeddedTLB.scala 207:46]
    node _T_53 = bits(_WIRE_15, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.mask <= _T_53 @[EmbeddedTLB.scala 207:46]
    node _T_54 = bits(_WIRE_15, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.asid <= _T_54 @[EmbeddedTLB.scala 207:46]
    node _T_55 = bits(_WIRE_15, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.vpn <= _T_55 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_16 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_17 : UInt<8>
    _WIRE_17 <= _WIRE_14.flag
    node _T_56 = bits(_WIRE_17, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.v <= _T_56 @[EmbeddedTLB.scala 207:71]
    node _T_57 = bits(_WIRE_17, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.r <= _T_57 @[EmbeddedTLB.scala 207:71]
    node _T_58 = bits(_WIRE_17, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.w <= _T_58 @[EmbeddedTLB.scala 207:71]
    node _T_59 = bits(_WIRE_17, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.x <= _T_59 @[EmbeddedTLB.scala 207:71]
    node _T_60 = bits(_WIRE_17, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.u <= _T_60 @[EmbeddedTLB.scala 207:71]
    node _T_61 = bits(_WIRE_17, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.g <= _T_61 @[EmbeddedTLB.scala 207:71]
    node _T_62 = bits(_WIRE_17, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.a <= _T_62 @[EmbeddedTLB.scala 207:71]
    node _T_63 = bits(_WIRE_17, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.d <= _T_63 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_18 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_19 : UInt<121>
    _WIRE_19 <= io.md[1]
    node _T_64 = bits(_WIRE_19, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.pteaddr <= _T_64 @[EmbeddedTLB.scala 207:100]
    node _T_65 = bits(_WIRE_19, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.ppn <= _T_65 @[EmbeddedTLB.scala 207:100]
    node _T_66 = bits(_WIRE_19, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.flag <= _T_66 @[EmbeddedTLB.scala 207:100]
    node _T_67 = bits(_WIRE_19, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.mask <= _T_67 @[EmbeddedTLB.scala 207:100]
    node _T_68 = bits(_WIRE_19, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.asid <= _T_68 @[EmbeddedTLB.scala 207:100]
    node _T_69 = bits(_WIRE_19, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.vpn <= _T_69 @[EmbeddedTLB.scala 207:100]
    node _T_70 = eq(_WIRE_18.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_71 = and(_WIRE_16.v, _T_70) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_20 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_21 : UInt<121>
    _WIRE_21 <= io.md[1]
    node _T_72 = bits(_WIRE_21, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.pteaddr <= _T_72 @[EmbeddedTLB.scala 207:152]
    node _T_73 = bits(_WIRE_21, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.ppn <= _T_73 @[EmbeddedTLB.scala 207:152]
    node _T_74 = bits(_WIRE_21, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.flag <= _T_74 @[EmbeddedTLB.scala 207:152]
    node _T_75 = bits(_WIRE_21, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.mask <= _T_75 @[EmbeddedTLB.scala 207:152]
    node _T_76 = bits(_WIRE_21, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.asid <= _T_76 @[EmbeddedTLB.scala 207:152]
    node _T_77 = bits(_WIRE_21, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.vpn <= _T_77 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_22 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_23 : UInt<121>
    _WIRE_23 <= io.md[1]
    node _T_78 = bits(_WIRE_23, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.pteaddr <= _T_78 @[EmbeddedTLB.scala 207:180]
    node _T_79 = bits(_WIRE_23, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.ppn <= _T_79 @[EmbeddedTLB.scala 207:180]
    node _T_80 = bits(_WIRE_23, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.flag <= _T_80 @[EmbeddedTLB.scala 207:180]
    node _T_81 = bits(_WIRE_23, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.mask <= _T_81 @[EmbeddedTLB.scala 207:180]
    node _T_82 = bits(_WIRE_23, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.asid <= _T_82 @[EmbeddedTLB.scala 207:180]
    node _T_83 = bits(_WIRE_23, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.vpn <= _T_83 @[EmbeddedTLB.scala 207:180]
    node hi_1 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_84 = cat(hi_1, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_85 = cat(UInt<9>("h1ff"), _WIRE_20.mask) @[Cat.scala 30:58]
    node _T_86 = and(_T_85, _WIRE_22.vpn) @[TLB.scala 131:37]
    node _T_87 = cat(UInt<9>("h1ff"), _WIRE_20.mask) @[Cat.scala 30:58]
    node _T_88 = and(_T_87, _T_84) @[TLB.scala 131:84]
    node _T_89 = eq(_T_86, _T_88) @[TLB.scala 131:48]
    node _T_90 = and(_T_71, _T_89) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_24 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_25 : UInt<121>
    _WIRE_25 <= io.md[2]
    node _T_91 = bits(_WIRE_25, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.pteaddr <= _T_91 @[EmbeddedTLB.scala 207:46]
    node _T_92 = bits(_WIRE_25, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.ppn <= _T_92 @[EmbeddedTLB.scala 207:46]
    node _T_93 = bits(_WIRE_25, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.flag <= _T_93 @[EmbeddedTLB.scala 207:46]
    node _T_94 = bits(_WIRE_25, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.mask <= _T_94 @[EmbeddedTLB.scala 207:46]
    node _T_95 = bits(_WIRE_25, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.asid <= _T_95 @[EmbeddedTLB.scala 207:46]
    node _T_96 = bits(_WIRE_25, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.vpn <= _T_96 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_26 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_27 : UInt<8>
    _WIRE_27 <= _WIRE_24.flag
    node _T_97 = bits(_WIRE_27, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.v <= _T_97 @[EmbeddedTLB.scala 207:71]
    node _T_98 = bits(_WIRE_27, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.r <= _T_98 @[EmbeddedTLB.scala 207:71]
    node _T_99 = bits(_WIRE_27, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.w <= _T_99 @[EmbeddedTLB.scala 207:71]
    node _T_100 = bits(_WIRE_27, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.x <= _T_100 @[EmbeddedTLB.scala 207:71]
    node _T_101 = bits(_WIRE_27, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.u <= _T_101 @[EmbeddedTLB.scala 207:71]
    node _T_102 = bits(_WIRE_27, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.g <= _T_102 @[EmbeddedTLB.scala 207:71]
    node _T_103 = bits(_WIRE_27, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.a <= _T_103 @[EmbeddedTLB.scala 207:71]
    node _T_104 = bits(_WIRE_27, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.d <= _T_104 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_28 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_29 : UInt<121>
    _WIRE_29 <= io.md[2]
    node _T_105 = bits(_WIRE_29, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.pteaddr <= _T_105 @[EmbeddedTLB.scala 207:100]
    node _T_106 = bits(_WIRE_29, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.ppn <= _T_106 @[EmbeddedTLB.scala 207:100]
    node _T_107 = bits(_WIRE_29, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.flag <= _T_107 @[EmbeddedTLB.scala 207:100]
    node _T_108 = bits(_WIRE_29, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.mask <= _T_108 @[EmbeddedTLB.scala 207:100]
    node _T_109 = bits(_WIRE_29, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.asid <= _T_109 @[EmbeddedTLB.scala 207:100]
    node _T_110 = bits(_WIRE_29, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.vpn <= _T_110 @[EmbeddedTLB.scala 207:100]
    node _T_111 = eq(_WIRE_28.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_112 = and(_WIRE_26.v, _T_111) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_30 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_31 : UInt<121>
    _WIRE_31 <= io.md[2]
    node _T_113 = bits(_WIRE_31, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.pteaddr <= _T_113 @[EmbeddedTLB.scala 207:152]
    node _T_114 = bits(_WIRE_31, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.ppn <= _T_114 @[EmbeddedTLB.scala 207:152]
    node _T_115 = bits(_WIRE_31, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.flag <= _T_115 @[EmbeddedTLB.scala 207:152]
    node _T_116 = bits(_WIRE_31, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.mask <= _T_116 @[EmbeddedTLB.scala 207:152]
    node _T_117 = bits(_WIRE_31, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.asid <= _T_117 @[EmbeddedTLB.scala 207:152]
    node _T_118 = bits(_WIRE_31, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.vpn <= _T_118 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_32 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_33 : UInt<121>
    _WIRE_33 <= io.md[2]
    node _T_119 = bits(_WIRE_33, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.pteaddr <= _T_119 @[EmbeddedTLB.scala 207:180]
    node _T_120 = bits(_WIRE_33, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.ppn <= _T_120 @[EmbeddedTLB.scala 207:180]
    node _T_121 = bits(_WIRE_33, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.flag <= _T_121 @[EmbeddedTLB.scala 207:180]
    node _T_122 = bits(_WIRE_33, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.mask <= _T_122 @[EmbeddedTLB.scala 207:180]
    node _T_123 = bits(_WIRE_33, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.asid <= _T_123 @[EmbeddedTLB.scala 207:180]
    node _T_124 = bits(_WIRE_33, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.vpn <= _T_124 @[EmbeddedTLB.scala 207:180]
    node hi_2 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_125 = cat(hi_2, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_126 = cat(UInt<9>("h1ff"), _WIRE_30.mask) @[Cat.scala 30:58]
    node _T_127 = and(_T_126, _WIRE_32.vpn) @[TLB.scala 131:37]
    node _T_128 = cat(UInt<9>("h1ff"), _WIRE_30.mask) @[Cat.scala 30:58]
    node _T_129 = and(_T_128, _T_125) @[TLB.scala 131:84]
    node _T_130 = eq(_T_127, _T_129) @[TLB.scala 131:48]
    node _T_131 = and(_T_112, _T_130) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_34 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_35 : UInt<121>
    _WIRE_35 <= io.md[3]
    node _T_132 = bits(_WIRE_35, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.pteaddr <= _T_132 @[EmbeddedTLB.scala 207:46]
    node _T_133 = bits(_WIRE_35, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.ppn <= _T_133 @[EmbeddedTLB.scala 207:46]
    node _T_134 = bits(_WIRE_35, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.flag <= _T_134 @[EmbeddedTLB.scala 207:46]
    node _T_135 = bits(_WIRE_35, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.mask <= _T_135 @[EmbeddedTLB.scala 207:46]
    node _T_136 = bits(_WIRE_35, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.asid <= _T_136 @[EmbeddedTLB.scala 207:46]
    node _T_137 = bits(_WIRE_35, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.vpn <= _T_137 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_36 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_37 : UInt<8>
    _WIRE_37 <= _WIRE_34.flag
    node _T_138 = bits(_WIRE_37, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.v <= _T_138 @[EmbeddedTLB.scala 207:71]
    node _T_139 = bits(_WIRE_37, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.r <= _T_139 @[EmbeddedTLB.scala 207:71]
    node _T_140 = bits(_WIRE_37, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.w <= _T_140 @[EmbeddedTLB.scala 207:71]
    node _T_141 = bits(_WIRE_37, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.x <= _T_141 @[EmbeddedTLB.scala 207:71]
    node _T_142 = bits(_WIRE_37, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.u <= _T_142 @[EmbeddedTLB.scala 207:71]
    node _T_143 = bits(_WIRE_37, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.g <= _T_143 @[EmbeddedTLB.scala 207:71]
    node _T_144 = bits(_WIRE_37, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.a <= _T_144 @[EmbeddedTLB.scala 207:71]
    node _T_145 = bits(_WIRE_37, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.d <= _T_145 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_38 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_39 : UInt<121>
    _WIRE_39 <= io.md[3]
    node _T_146 = bits(_WIRE_39, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.pteaddr <= _T_146 @[EmbeddedTLB.scala 207:100]
    node _T_147 = bits(_WIRE_39, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.ppn <= _T_147 @[EmbeddedTLB.scala 207:100]
    node _T_148 = bits(_WIRE_39, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.flag <= _T_148 @[EmbeddedTLB.scala 207:100]
    node _T_149 = bits(_WIRE_39, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.mask <= _T_149 @[EmbeddedTLB.scala 207:100]
    node _T_150 = bits(_WIRE_39, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.asid <= _T_150 @[EmbeddedTLB.scala 207:100]
    node _T_151 = bits(_WIRE_39, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.vpn <= _T_151 @[EmbeddedTLB.scala 207:100]
    node _T_152 = eq(_WIRE_38.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_153 = and(_WIRE_36.v, _T_152) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_40 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_41 : UInt<121>
    _WIRE_41 <= io.md[3]
    node _T_154 = bits(_WIRE_41, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.pteaddr <= _T_154 @[EmbeddedTLB.scala 207:152]
    node _T_155 = bits(_WIRE_41, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.ppn <= _T_155 @[EmbeddedTLB.scala 207:152]
    node _T_156 = bits(_WIRE_41, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.flag <= _T_156 @[EmbeddedTLB.scala 207:152]
    node _T_157 = bits(_WIRE_41, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.mask <= _T_157 @[EmbeddedTLB.scala 207:152]
    node _T_158 = bits(_WIRE_41, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.asid <= _T_158 @[EmbeddedTLB.scala 207:152]
    node _T_159 = bits(_WIRE_41, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.vpn <= _T_159 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_42 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_43 : UInt<121>
    _WIRE_43 <= io.md[3]
    node _T_160 = bits(_WIRE_43, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.pteaddr <= _T_160 @[EmbeddedTLB.scala 207:180]
    node _T_161 = bits(_WIRE_43, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.ppn <= _T_161 @[EmbeddedTLB.scala 207:180]
    node _T_162 = bits(_WIRE_43, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.flag <= _T_162 @[EmbeddedTLB.scala 207:180]
    node _T_163 = bits(_WIRE_43, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.mask <= _T_163 @[EmbeddedTLB.scala 207:180]
    node _T_164 = bits(_WIRE_43, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.asid <= _T_164 @[EmbeddedTLB.scala 207:180]
    node _T_165 = bits(_WIRE_43, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.vpn <= _T_165 @[EmbeddedTLB.scala 207:180]
    node hi_3 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_166 = cat(hi_3, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_167 = cat(UInt<9>("h1ff"), _WIRE_40.mask) @[Cat.scala 30:58]
    node _T_168 = and(_T_167, _WIRE_42.vpn) @[TLB.scala 131:37]
    node _T_169 = cat(UInt<9>("h1ff"), _WIRE_40.mask) @[Cat.scala 30:58]
    node _T_170 = and(_T_169, _T_166) @[TLB.scala 131:84]
    node _T_171 = eq(_T_168, _T_170) @[TLB.scala 131:48]
    node _T_172 = and(_T_153, _T_171) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_44 : UInt<1>[4] @[EmbeddedTLB.scala 207:23]
    _WIRE_44[0] <= _T_49 @[EmbeddedTLB.scala 207:23]
    _WIRE_44[1] <= _T_90 @[EmbeddedTLB.scala 207:23]
    _WIRE_44[2] <= _T_131 @[EmbeddedTLB.scala 207:23]
    _WIRE_44[3] <= _T_172 @[EmbeddedTLB.scala 207:23]
    node lo = cat(_WIRE_44[1], _WIRE_44[0]) @[EmbeddedTLB.scala 207:211]
    node hi_4 = cat(_WIRE_44[3], _WIRE_44[2]) @[EmbeddedTLB.scala 207:211]
    node hitVec = cat(hi_4, lo) @[EmbeddedTLB.scala 207:211]
    node _T_173 = orr(hitVec) @[EmbeddedTLB.scala 208:35]
    node hit = and(io.in.valid, _T_173) @[EmbeddedTLB.scala 208:25]
    node _T_174 = orr(hitVec) @[EmbeddedTLB.scala 209:37]
    node _T_175 = eq(_T_174, UInt<1>("h0")) @[EmbeddedTLB.scala 209:29]
    node miss = and(io.in.valid, _T_175) @[EmbeddedTLB.scala 209:26]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1234567887654321")) @[LFSR64.scala 25:23]
    node _T_176 = bits(REG, 0, 0) @[LFSR64.scala 26:19]
    node _T_177 = bits(REG, 1, 1) @[LFSR64.scala 26:29]
    node _T_178 = xor(_T_176, _T_177) @[LFSR64.scala 26:23]
    node _T_179 = bits(REG, 3, 3) @[LFSR64.scala 26:39]
    node _T_180 = xor(_T_178, _T_179) @[LFSR64.scala 26:33]
    node _T_181 = bits(REG, 4, 4) @[LFSR64.scala 26:49]
    node _T_182 = xor(_T_180, _T_181) @[LFSR64.scala 26:43]
    when UInt<1>("h1") : @[LFSR64.scala 27:22]
      node _T_183 = eq(REG, UInt<1>("h0")) @[LFSR64.scala 28:24]
      node _T_184 = bits(REG, 63, 1) @[LFSR64.scala 28:51]
      node _T_185 = cat(_T_182, _T_184) @[Cat.scala 30:58]
      node _T_186 = mux(_T_183, UInt<1>("h1"), _T_185) @[LFSR64.scala 28:18]
      REG <= _T_186 @[LFSR64.scala 28:12]
    node _T_187 = bits(REG, 1, 0) @[EmbeddedTLB.scala 211:53]
    node victimWaymask = dshl(UInt<1>("h1"), _T_187) @[EmbeddedTLB.scala 211:42]
    node waymask = mux(hit, hitVec, victimWaymask) @[EmbeddedTLB.scala 212:20]
    wire loadPF : UInt<1>
    loadPF <= UInt<1>("h0")
    wire storePF : UInt<1>
    storePF <= UInt<1>("h0")
    node _T_188 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_189 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_190 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_191 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_192 = mux(_T_188, io.md[0], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_193 = mux(_T_189, io.md[1], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_194 = mux(_T_190, io.md[2], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_195 = mux(_T_191, io.md[3], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_196 = or(_T_192, _T_193) @[Mux.scala 27:72]
    node _T_197 = or(_T_196, _T_194) @[Mux.scala 27:72]
    node _T_198 = or(_T_197, _T_195) @[Mux.scala 27:72]
    wire _WIRE_45 : UInt<121> @[Mux.scala 27:72]
    _WIRE_45 <= _T_198 @[Mux.scala 27:72]
    wire _WIRE_46 : { meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 218:44]
    wire _WIRE_47 : UInt<121>
    _WIRE_47 <= _WIRE_45
    node _T_199 = bits(_WIRE_47, 51, 0) @[EmbeddedTLB.scala 218:44]
    _WIRE_46.data <= _T_199 @[EmbeddedTLB.scala 218:44]
    node _T_200 = bits(_WIRE_47, 120, 52) @[EmbeddedTLB.scala 218:44]
    _WIRE_46.meta <= _T_200 @[EmbeddedTLB.scala 218:44]
    wire hitMeta : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>} @[EmbeddedTLB.scala 218:70]
    wire _WIRE_48 : UInt<69>
    _WIRE_48 <= _WIRE_46.meta
    node _T_201 = bits(_WIRE_48, 7, 0) @[EmbeddedTLB.scala 218:70]
    hitMeta.flag <= _T_201 @[EmbeddedTLB.scala 218:70]
    node _T_202 = bits(_WIRE_48, 25, 8) @[EmbeddedTLB.scala 218:70]
    hitMeta.mask <= _T_202 @[EmbeddedTLB.scala 218:70]
    node _T_203 = bits(_WIRE_48, 41, 26) @[EmbeddedTLB.scala 218:70]
    hitMeta.asid <= _T_203 @[EmbeddedTLB.scala 218:70]
    node _T_204 = bits(_WIRE_48, 68, 42) @[EmbeddedTLB.scala 218:70]
    hitMeta.vpn <= _T_204 @[EmbeddedTLB.scala 218:70]
    node _T_205 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_206 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_207 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_208 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_209 = mux(_T_205, io.md[0], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_210 = mux(_T_206, io.md[1], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_211 = mux(_T_207, io.md[2], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_212 = mux(_T_208, io.md[3], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_213 = or(_T_209, _T_210) @[Mux.scala 27:72]
    node _T_214 = or(_T_213, _T_211) @[Mux.scala 27:72]
    node _T_215 = or(_T_214, _T_212) @[Mux.scala 27:72]
    wire _WIRE_49 : UInt<121> @[Mux.scala 27:72]
    _WIRE_49 <= _T_215 @[Mux.scala 27:72]
    wire _WIRE_50 : { meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 219:44]
    wire _WIRE_51 : UInt<121>
    _WIRE_51 <= _WIRE_49
    node _T_216 = bits(_WIRE_51, 51, 0) @[EmbeddedTLB.scala 219:44]
    _WIRE_50.data <= _T_216 @[EmbeddedTLB.scala 219:44]
    node _T_217 = bits(_WIRE_51, 120, 52) @[EmbeddedTLB.scala 219:44]
    _WIRE_50.meta <= _T_217 @[EmbeddedTLB.scala 219:44]
    wire hitData : { ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 219:70]
    wire _WIRE_52 : UInt<52>
    _WIRE_52 <= _WIRE_50.data
    node _T_218 = bits(_WIRE_52, 31, 0) @[EmbeddedTLB.scala 219:70]
    hitData.pteaddr <= _T_218 @[EmbeddedTLB.scala 219:70]
    node _T_219 = bits(_WIRE_52, 51, 32) @[EmbeddedTLB.scala 219:70]
    hitData.ppn <= _T_219 @[EmbeddedTLB.scala 219:70]
    wire hitFlag : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 220:38]
    wire _WIRE_53 : UInt<8>
    _WIRE_53 <= hitMeta.flag
    node _T_220 = bits(_WIRE_53, 0, 0) @[EmbeddedTLB.scala 220:38]
    hitFlag.v <= _T_220 @[EmbeddedTLB.scala 220:38]
    node _T_221 = bits(_WIRE_53, 1, 1) @[EmbeddedTLB.scala 220:38]
    hitFlag.r <= _T_221 @[EmbeddedTLB.scala 220:38]
    node _T_222 = bits(_WIRE_53, 2, 2) @[EmbeddedTLB.scala 220:38]
    hitFlag.w <= _T_222 @[EmbeddedTLB.scala 220:38]
    node _T_223 = bits(_WIRE_53, 3, 3) @[EmbeddedTLB.scala 220:38]
    hitFlag.x <= _T_223 @[EmbeddedTLB.scala 220:38]
    node _T_224 = bits(_WIRE_53, 4, 4) @[EmbeddedTLB.scala 220:38]
    hitFlag.u <= _T_224 @[EmbeddedTLB.scala 220:38]
    node _T_225 = bits(_WIRE_53, 5, 5) @[EmbeddedTLB.scala 220:38]
    hitFlag.g <= _T_225 @[EmbeddedTLB.scala 220:38]
    node _T_226 = bits(_WIRE_53, 6, 6) @[EmbeddedTLB.scala 220:38]
    hitFlag.a <= _T_226 @[EmbeddedTLB.scala 220:38]
    node _T_227 = bits(_WIRE_53, 7, 7) @[EmbeddedTLB.scala 220:38]
    hitFlag.d <= _T_227 @[EmbeddedTLB.scala 220:38]
    wire hitinstrPF : UInt<1>
    hitinstrPF <= UInt<1>("h0")
    node _T_228 = eq(hitFlag.a, UInt<1>("h0")) @[EmbeddedTLB.scala 224:23]
    node _T_229 = eq(hitFlag.d, UInt<1>("h0")) @[EmbeddedTLB.scala 224:37]
    node _T_230 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_231 = and(_T_229, _T_230) @[EmbeddedTLB.scala 224:48]
    node _T_232 = or(_T_228, _T_231) @[EmbeddedTLB.scala 224:34]
    node _T_233 = and(hit, _T_232) @[EmbeddedTLB.scala 224:19]
    node _T_234 = eq(hitinstrPF, UInt<1>("h0")) @[EmbeddedTLB.scala 224:69]
    node _T_235 = and(_T_233, _T_234) @[EmbeddedTLB.scala 224:66]
    node _T_236 = or(loadPF, storePF) @[EmbeddedTLB.scala 224:93]
    node _T_237 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_238 = or(_T_236, _T_237) @[EmbeddedTLB.scala 224:104]
    node _T_239 = eq(_T_238, UInt<1>("h0")) @[EmbeddedTLB.scala 224:84]
    node hitWB = and(_T_235, _T_239) @[EmbeddedTLB.scala 224:81]
    node _T_240 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hi_5 = cat(_T_240, UInt<1>("h1")) @[Cat.scala 30:58]
    node _T_241 = cat(hi_5, UInt<6>("h0")) @[Cat.scala 30:58]
    node lo_lo = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 225:79]
    node lo_hi = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 225:79]
    node lo_1 = cat(lo_hi, lo_lo) @[EmbeddedTLB.scala 225:79]
    node hi_lo = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 225:79]
    node hi_hi = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 225:79]
    node hi_6 = cat(hi_hi, hi_lo) @[EmbeddedTLB.scala 225:79]
    node _T_242 = cat(hi_6, lo_1) @[EmbeddedTLB.scala 225:79]
    node hitRefillFlag = or(_T_241, _T_242) @[EmbeddedTLB.scala 225:69]
    node lo_2 = cat(UInt<2>("h0"), hitRefillFlag) @[Cat.scala 30:58]
    node hi_7 = cat(UInt<10>("h0"), hitData.ppn) @[Cat.scala 30:58]
    node _T_243 = cat(hi_7, lo_2) @[Cat.scala 30:58]
    reg hitWBStore : UInt<40>, clock with :
      reset => (UInt<1>("h0"), hitWBStore) @[Reg.scala 15:16]
    when hitWB : @[Reg.scala 16:19]
      hitWBStore <= _T_243 @[Reg.scala 16:23]
    node _T_244 = eq(io.pf.priviledgeMode, UInt<1>("h0")) @[EmbeddedTLB.scala 229:62]
    node _T_245 = eq(hitFlag.u, UInt<1>("h0")) @[EmbeddedTLB.scala 229:75]
    node _T_246 = and(_T_244, _T_245) @[EmbeddedTLB.scala 229:72]
    node _T_247 = eq(_T_246, UInt<1>("h0")) @[EmbeddedTLB.scala 229:42]
    node _T_248 = and(hit, _T_247) @[EmbeddedTLB.scala 229:39]
    node _T_249 = eq(io.pf.priviledgeMode, UInt<1>("h1")) @[EmbeddedTLB.scala 229:110]
    node _T_250 = and(_T_249, hitFlag.u) @[EmbeddedTLB.scala 229:120]
    node _T_251 = eq(io.pf.status_sum, UInt<1>("h0")) @[EmbeddedTLB.scala 229:137]
    node _T_252 = or(_T_251, UInt<1>("h1")) @[EmbeddedTLB.scala 229:152]
    node _T_253 = and(_T_250, _T_252) @[EmbeddedTLB.scala 229:133]
    node _T_254 = eq(_T_253, UInt<1>("h0")) @[EmbeddedTLB.scala 229:90]
    node hitCheck = and(_T_248, _T_254) @[EmbeddedTLB.scala 229:87]
    node hitExec = and(hitCheck, hitFlag.x) @[EmbeddedTLB.scala 230:26]
    node _T_255 = and(io.pf.status_mxr, hitFlag.x) @[EmbeddedTLB.scala 231:57]
    node _T_256 = or(hitFlag.r, _T_255) @[EmbeddedTLB.scala 231:40]
    node hitLoad = and(hitCheck, _T_256) @[EmbeddedTLB.scala 231:26]
    node hitStore = and(hitCheck, hitFlag.w) @[EmbeddedTLB.scala 232:27]
    wire isAMO : UInt<1>
    isAMO <= UInt<1>("h0")
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 239:26]
    REG_1 <= loadPF @[EmbeddedTLB.scala 239:26]
    io.pf.loadPF <= REG_1 @[EmbeddedTLB.scala 239:16]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 240:27]
    REG_2 <= storePF @[EmbeddedTLB.scala 240:27]
    io.pf.storePF <= REG_2 @[EmbeddedTLB.scala 240:17]
    node _T_257 = eq(hitExec, UInt<1>("h0")) @[EmbeddedTLB.scala 242:42]
    node _T_258 = and(_T_257, hit) @[EmbeddedTLB.scala 242:52]
    hitinstrPF <= _T_258 @[EmbeddedTLB.scala 242:39]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[EmbeddedTLB.scala 250:22]
    reg level : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[EmbeddedTLB.scala 251:22]
    reg memRespStore : UInt<64>, clock with :
      reset => (UInt<1>("h0"), memRespStore) @[EmbeddedTLB.scala 253:25]
    wire missMask : UInt<18>
    missMask <= UInt<18>("h3ffff")
    reg missMaskStore : UInt<18>, clock with :
      reset => (UInt<1>("h0"), missMaskStore) @[EmbeddedTLB.scala 255:26]
    wire missMetaRefill : UInt<1>
    missMetaRefill <= UInt<1>("h0")
    wire missRefillFlag : UInt<8>
    missRefillFlag <= UInt<8>("h0")
    wire memRdata : { reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 258:49]
    wire _WIRE_54 : UInt<64>
    _WIRE_54 <= io.mem.resp.bits.rdata
    node _T_259 = bits(_WIRE_54, 0, 0) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.v <= _T_259 @[EmbeddedTLB.scala 258:49]
    node _T_260 = bits(_WIRE_54, 1, 1) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.r <= _T_260 @[EmbeddedTLB.scala 258:49]
    node _T_261 = bits(_WIRE_54, 2, 2) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.w <= _T_261 @[EmbeddedTLB.scala 258:49]
    node _T_262 = bits(_WIRE_54, 3, 3) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.x <= _T_262 @[EmbeddedTLB.scala 258:49]
    node _T_263 = bits(_WIRE_54, 4, 4) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.u <= _T_263 @[EmbeddedTLB.scala 258:49]
    node _T_264 = bits(_WIRE_54, 5, 5) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.g <= _T_264 @[EmbeddedTLB.scala 258:49]
    node _T_265 = bits(_WIRE_54, 6, 6) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.a <= _T_265 @[EmbeddedTLB.scala 258:49]
    node _T_266 = bits(_WIRE_54, 7, 7) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.d <= _T_266 @[EmbeddedTLB.scala 258:49]
    node _T_267 = bits(_WIRE_54, 9, 8) @[EmbeddedTLB.scala 258:49]
    memRdata.rsw <= _T_267 @[EmbeddedTLB.scala 258:49]
    node _T_268 = bits(_WIRE_54, 29, 10) @[EmbeddedTLB.scala 258:49]
    memRdata.ppn <= _T_268 @[EmbeddedTLB.scala 258:49]
    node _T_269 = bits(_WIRE_54, 63, 30) @[EmbeddedTLB.scala 258:49]
    memRdata.reserved <= _T_269 @[EmbeddedTLB.scala 258:49]
    reg raddr : UInt<32>, clock with :
      reset => (UInt<1>("h0"), raddr) @[EmbeddedTLB.scala 259:18]
    node _T_270 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 27:20]
    when _T_270 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h1") @[Reg.scala 28:23]
    reg needFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 263:26]
    node isFlush = or(needFlush, io.flush) @[EmbeddedTLB.scala 265:27]
    node _T_271 = neq(state, UInt<3>("h0")) @[EmbeddedTLB.scala 266:27]
    node _T_272 = and(io.flush, _T_271) @[EmbeddedTLB.scala 266:17]
    when _T_272 : @[EmbeddedTLB.scala 266:40]
      needFlush <= UInt<1>("h1") @[EmbeddedTLB.scala 266:52]
    node _T_273 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_274 = and(_T_273, needFlush) @[EmbeddedTLB.scala 267:23]
    when _T_274 : @[EmbeddedTLB.scala 267:37]
      needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 267:49]
    reg missIPF : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 269:24]
    node _T_275 = eq(UInt<3>("h0"), state) @[EmbeddedTLB.scala 272:18]
    when _T_275 : @[EmbeddedTLB.scala 272:18]
      node _T_276 = eq(io.flush, UInt<1>("h0")) @[EmbeddedTLB.scala 274:13]
      node _T_277 = and(_T_276, hitWB) @[EmbeddedTLB.scala 274:22]
      when _T_277 : @[EmbeddedTLB.scala 274:32]
        state <= UInt<3>("h3") @[EmbeddedTLB.scala 275:15]
        needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 276:19]
        alreadyOutFire <= UInt<1>("h0") @[EmbeddedTLB.scala 277:24]
      else :
        node _T_278 = eq(io.flush, UInt<1>("h0")) @[EmbeddedTLB.scala 278:27]
        node _T_279 = and(miss, _T_278) @[EmbeddedTLB.scala 278:24]
        when _T_279 : @[EmbeddedTLB.scala 278:37]
          state <= UInt<3>("h1") @[EmbeddedTLB.scala 279:15]
          node _T_280 = cat(satp.ppn, vpn.vpn2) @[Cat.scala 30:58]
          node _T_281 = cat(_T_280, UInt<3>("h0")) @[Cat.scala 30:58]
          raddr <= _T_281 @[EmbeddedTLB.scala 280:15]
          level <= UInt<2>("h3") @[EmbeddedTLB.scala 281:15]
          needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 282:19]
          alreadyOutFire <= UInt<1>("h0") @[EmbeddedTLB.scala 283:24]
    else :
      node _T_282 = eq(UInt<3>("h1"), state) @[EmbeddedTLB.scala 272:18]
      when _T_282 : @[EmbeddedTLB.scala 272:18]
        when isFlush : @[EmbeddedTLB.scala 288:22]
          state <= UInt<3>("h0") @[EmbeddedTLB.scala 289:15]
          needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 290:19]
        else :
          node _T_283 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          when _T_283 : @[EmbeddedTLB.scala 291:38]
            state <= UInt<3>("h2") @[EmbeddedTLB.scala 291:46]
      else :
        node _T_284 = eq(UInt<3>("h2"), state) @[EmbeddedTLB.scala 272:18]
        when _T_284 : @[EmbeddedTLB.scala 272:18]
          wire _WIRE_55 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 295:44]
          node lo_lo_1 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 295:44]
          node lo_hi_1 = cat(memRdata.flag.x, memRdata.flag.w) @[EmbeddedTLB.scala 295:44]
          node lo_3 = cat(lo_hi_1, lo_lo_1) @[EmbeddedTLB.scala 295:44]
          node hi_lo_1 = cat(memRdata.flag.g, memRdata.flag.u) @[EmbeddedTLB.scala 295:44]
          node hi_hi_1 = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 295:44]
          node hi_8 = cat(hi_hi_1, hi_lo_1) @[EmbeddedTLB.scala 295:44]
          node _T_285 = cat(hi_8, lo_3) @[EmbeddedTLB.scala 295:44]
          wire _WIRE_56 : UInt<8>
          _WIRE_56 <= _T_285
          node _T_286 = bits(_WIRE_56, 0, 0) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.v <= _T_286 @[EmbeddedTLB.scala 295:44]
          node _T_287 = bits(_WIRE_56, 1, 1) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.r <= _T_287 @[EmbeddedTLB.scala 295:44]
          node _T_288 = bits(_WIRE_56, 2, 2) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.w <= _T_288 @[EmbeddedTLB.scala 295:44]
          node _T_289 = bits(_WIRE_56, 3, 3) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.x <= _T_289 @[EmbeddedTLB.scala 295:44]
          node _T_290 = bits(_WIRE_56, 4, 4) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.u <= _T_290 @[EmbeddedTLB.scala 295:44]
          node _T_291 = bits(_WIRE_56, 5, 5) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.g <= _T_291 @[EmbeddedTLB.scala 295:44]
          node _T_292 = bits(_WIRE_56, 6, 6) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.a <= _T_292 @[EmbeddedTLB.scala 295:44]
          node _T_293 = bits(_WIRE_56, 7, 7) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.d <= _T_293 @[EmbeddedTLB.scala 295:44]
          node _T_294 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
          when _T_294 : @[EmbeddedTLB.scala 296:33]
            when isFlush : @[EmbeddedTLB.scala 297:24]
              state <= UInt<3>("h0") @[EmbeddedTLB.scala 298:17]
              needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 299:21]
            else :
              node _T_295 = or(_WIRE_55.r, _WIRE_55.x) @[EmbeddedTLB.scala 300:34]
              node _T_296 = eq(_T_295, UInt<1>("h0")) @[EmbeddedTLB.scala 300:21]
              node _T_297 = eq(level, UInt<2>("h3")) @[EmbeddedTLB.scala 300:58]
              node _T_298 = eq(level, UInt<2>("h2")) @[EmbeddedTLB.scala 300:73]
              node _T_299 = or(_T_297, _T_298) @[EmbeddedTLB.scala 300:65]
              node _T_300 = and(_T_296, _T_299) @[EmbeddedTLB.scala 300:49]
              when _T_300 : @[EmbeddedTLB.scala 300:82]
                node _T_301 = eq(_WIRE_55.v, UInt<1>("h0")) @[EmbeddedTLB.scala 301:16]
                node _T_302 = eq(_WIRE_55.r, UInt<1>("h0")) @[EmbeddedTLB.scala 301:32]
                node _T_303 = and(_T_302, _WIRE_55.w) @[EmbeddedTLB.scala 301:44]
                node _T_304 = or(_T_301, _T_303) @[EmbeddedTLB.scala 301:28]
                when _T_304 : @[EmbeddedTLB.scala 301:60]
                  state <= UInt<3>("h4") @[EmbeddedTLB.scala 302:43]
                  missIPF <= UInt<1>("h1") @[EmbeddedTLB.scala 303:45]
                  reg REG_3 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_305 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_306 = tail(_T_305, 1) @[GTimer.scala 25:12]
                  REG_3 <= _T_306 @[GTimer.scala 25:7]
                  wire _WIRE_57 : UInt<1>
                  _WIRE_57 <= UInt<1>("h0")
                  node _T_307 = and(UInt<1>("h1"), _WIRE_57) @[Debug.scala 55:16]
                  when _T_307 : @[Debug.scala 55:31]
                    node _T_308 = asUInt(reset) @[Debug.scala 56:24]
                    node _T_309 = eq(_T_308, UInt<1>("h0")) @[Debug.scala 56:24]
                    when _T_309 : @[Debug.scala 56:24]
                      printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_3) : SIM @[Debug.scala 56:24]
                    node _T_310 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_311 = eq(_T_310, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_311 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), "tlbException!!! ") : SIM_1 @[Debug.scala 57:13]
                  reg REG_4 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_312 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_313 = tail(_T_312, 1) @[GTimer.scala 25:12]
                  REG_4 <= _T_313 @[GTimer.scala 25:7]
                  wire _WIRE_58 : UInt<1>
                  _WIRE_58 <= UInt<1>("h0")
                  node _T_314 = and(UInt<1>("h1"), _WIRE_58) @[Debug.scala 55:16]
                  when _T_314 : @[Debug.scala 55:31]
                    node _T_315 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_316 = eq(_T_315, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_316 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), " req:addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x  Memreq:DecoupledIO(ready -> %d, valid -> %d, bits -> addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x)  MemResp:DecoupledIO(ready -> %d, valid -> %d, bits -> rdata = %x, cmd = %d)", io.in.bits.addr, io.in.bits.cmd, io.in.bits.size, io.in.bits.wmask, io.in.bits.wdata, io.mem.req.ready, io.mem.req.valid, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, io.mem.req.bits.wdata, io.mem.resp.ready, io.mem.resp.valid, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) : SIM_2 @[Debug.scala 57:13]
                  reg REG_5 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_317 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_318 = tail(_T_317, 1) @[GTimer.scala 25:12]
                  REG_5 <= _T_318 @[GTimer.scala 25:7]
                  wire _WIRE_59 : UInt<1>
                  _WIRE_59 <= UInt<1>("h0")
                  node _T_319 = and(UInt<1>("h1"), _WIRE_59) @[Debug.scala 55:16]
                  when _T_319 : @[Debug.scala 55:31]
                    node _T_320 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_321 = eq(_T_320, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_321 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), " level:%d", level) : SIM_3 @[Debug.scala 57:13]
                  reg REG_6 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_322 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_323 = tail(_T_322, 1) @[GTimer.scala 25:12]
                  REG_6 <= _T_323 @[GTimer.scala 25:7]
                  wire _WIRE_60 : UInt<1>
                  _WIRE_60 <= UInt<1>("h0")
                  node _T_324 = and(UInt<1>("h1"), _WIRE_60) @[Debug.scala 55:16]
                  when _T_324 : @[Debug.scala 55:31]
                    node _T_325 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_326 = eq(_T_325, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_326 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), "\n") : SIM_4 @[Debug.scala 57:13]
                else :
                  state <= UInt<3>("h1") @[EmbeddedTLB.scala 313:19]
                  node _T_327 = eq(level, UInt<2>("h3")) @[EmbeddedTLB.scala 314:57]
                  node _T_328 = mux(_T_327, vpn.vpn1, vpn.vpn0) @[EmbeddedTLB.scala 314:50]
                  node _T_329 = cat(memRdata.ppn, _T_328) @[Cat.scala 30:58]
                  node _T_330 = cat(_T_329, UInt<3>("h0")) @[Cat.scala 30:58]
                  raddr <= _T_330 @[EmbeddedTLB.scala 314:19]
              else :
                node _T_331 = neq(level, UInt<1>("h0")) @[EmbeddedTLB.scala 316:27]
                when _T_331 : @[EmbeddedTLB.scala 316:36]
                  node _T_332 = eq(io.pf.priviledgeMode, UInt<1>("h0")) @[EmbeddedTLB.scala 317:61]
                  node _T_333 = eq(_WIRE_55.u, UInt<1>("h0")) @[EmbeddedTLB.scala 317:74]
                  node _T_334 = and(_T_332, _T_333) @[EmbeddedTLB.scala 317:71]
                  node _T_335 = eq(_T_334, UInt<1>("h0")) @[EmbeddedTLB.scala 317:41]
                  node _T_336 = and(_WIRE_55.v, _T_335) @[EmbeddedTLB.scala 317:38]
                  node _T_337 = eq(io.pf.priviledgeMode, UInt<1>("h1")) @[EmbeddedTLB.scala 317:110]
                  node _T_338 = and(_T_337, _WIRE_55.u) @[EmbeddedTLB.scala 317:120]
                  node _T_339 = eq(io.pf.status_sum, UInt<1>("h0")) @[EmbeddedTLB.scala 317:138]
                  node _T_340 = or(_T_339, UInt<1>("h1")) @[EmbeddedTLB.scala 317:153]
                  node _T_341 = and(_T_338, _T_340) @[EmbeddedTLB.scala 317:134]
                  node _T_342 = eq(_T_341, UInt<1>("h0")) @[EmbeddedTLB.scala 317:90]
                  node _T_343 = and(_T_336, _T_342) @[EmbeddedTLB.scala 317:87]
                  node _T_344 = and(_T_343, _WIRE_55.x) @[EmbeddedTLB.scala 318:36]
                  node _T_345 = and(io.pf.status_mxr, _WIRE_55.x) @[EmbeddedTLB.scala 319:68]
                  node _T_346 = or(_WIRE_55.r, _T_345) @[EmbeddedTLB.scala 319:51]
                  node _T_347 = and(_T_343, _T_346) @[EmbeddedTLB.scala 319:36]
                  node _T_348 = and(_T_343, _WIRE_55.w) @[EmbeddedTLB.scala 320:37]
                  node _T_349 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node lo_4 = cat(UInt<1>("h1"), UInt<6>("h0")) @[Cat.scala 30:58]
                  node hi_9 = cat(UInt<56>("h0"), _T_349) @[Cat.scala 30:58]
                  node _T_350 = cat(hi_9, lo_4) @[Cat.scala 30:58]
                  node _T_351 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node hi_10 = cat(_T_351, UInt<1>("h1")) @[Cat.scala 30:58]
                  node _T_352 = cat(hi_10, UInt<6>("h0")) @[Cat.scala 30:58]
                  node lo_lo_2 = cat(_WIRE_55.r, _WIRE_55.v) @[EmbeddedTLB.scala 323:79]
                  node lo_hi_2 = cat(_WIRE_55.x, _WIRE_55.w) @[EmbeddedTLB.scala 323:79]
                  node lo_5 = cat(lo_hi_2, lo_lo_2) @[EmbeddedTLB.scala 323:79]
                  node hi_lo_2 = cat(_WIRE_55.g, _WIRE_55.u) @[EmbeddedTLB.scala 323:79]
                  node hi_hi_2 = cat(_WIRE_55.d, _WIRE_55.a) @[EmbeddedTLB.scala 323:79]
                  node hi_11 = cat(hi_hi_2, hi_lo_2) @[EmbeddedTLB.scala 323:79]
                  node _T_353 = cat(hi_11, lo_5) @[EmbeddedTLB.scala 323:79]
                  node _T_354 = or(_T_352, _T_353) @[EmbeddedTLB.scala 323:68]
                  missRefillFlag <= _T_354 @[EmbeddedTLB.scala 323:26]
                  node _T_355 = or(io.mem.resp.bits.rdata, _T_350) @[EmbeddedTLB.scala 324:50]
                  memRespStore <= _T_355 @[EmbeddedTLB.scala 324:24]
                  node _T_356 = eq(_T_344, UInt<1>("h0")) @[EmbeddedTLB.scala 326:19]
                  when _T_356 : @[EmbeddedTLB.scala 326:30]
                    missIPF <= UInt<1>("h1") @[EmbeddedTLB.scala 326:40]
                    state <= UInt<3>("h4") @[EmbeddedTLB.scala 326:58]
                  else :
                    node _T_357 = mux(UInt<1>("h0"), UInt<3>("h3"), UInt<3>("h4")) @[EmbeddedTLB.scala 328:27]
                    state <= _T_357 @[EmbeddedTLB.scala 328:21]
                    missMetaRefill <= UInt<1>("h1") @[EmbeddedTLB.scala 329:30]
                  node _T_358 = eq(level, UInt<2>("h3")) @[EmbeddedTLB.scala 342:32]
                  node _T_359 = eq(level, UInt<2>("h2")) @[EmbeddedTLB.scala 342:65]
                  node _T_360 = mux(_T_359, UInt<18>("h3fe00"), UInt<18>("h3ffff")) @[EmbeddedTLB.scala 342:59]
                  node _T_361 = mux(_T_358, UInt<18>("h0"), _T_360) @[EmbeddedTLB.scala 342:26]
                  missMask <= _T_361 @[EmbeddedTLB.scala 342:20]
                  missMaskStore <= missMask @[EmbeddedTLB.scala 343:25]
            node _T_362 = sub(level, UInt<1>("h1")) @[EmbeddedTLB.scala 345:24]
            node _T_363 = tail(_T_362, 1) @[EmbeddedTLB.scala 345:24]
            level <= _T_363 @[EmbeddedTLB.scala 345:15]
        else :
          node _T_364 = eq(UInt<3>("h3"), state) @[EmbeddedTLB.scala 272:18]
          when _T_364 : @[EmbeddedTLB.scala 272:18]
            when isFlush : @[EmbeddedTLB.scala 350:22]
              state <= UInt<3>("h0") @[EmbeddedTLB.scala 351:15]
              needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 352:19]
            else :
              node _T_365 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_365 : @[EmbeddedTLB.scala 353:38]
                state <= UInt<3>("h4") @[EmbeddedTLB.scala 353:46]
          else :
            node _T_366 = eq(UInt<3>("h4"), state) @[EmbeddedTLB.scala 272:18]
            when _T_366 : @[EmbeddedTLB.scala 272:18]
              node _T_367 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
              node _T_368 = or(_T_367, io.flush) @[EmbeddedTLB.scala 356:44]
              node _T_369 = or(_T_368, alreadyOutFire) @[EmbeddedTLB.scala 356:55]
              when _T_369 : @[EmbeddedTLB.scala 356:73]
                state <= UInt<3>("h0") @[EmbeddedTLB.scala 357:13]
                missIPF <= UInt<1>("h0") @[EmbeddedTLB.scala 358:15]
                alreadyOutFire <= UInt<1>("h0") @[EmbeddedTLB.scala 359:22]
            else :
              node _T_370 = eq(UInt<3>("h5"), state) @[EmbeddedTLB.scala 272:18]
              when _T_370 : @[EmbeddedTLB.scala 272:18]
                state <= UInt<3>("h0") @[EmbeddedTLB.scala 363:13]
    node _T_371 = eq(state, UInt<3>("h3")) @[EmbeddedTLB.scala 368:23]
    node cmd = mux(_T_371, UInt<1>("h1"), UInt<1>("h0")) @[EmbeddedTLB.scala 368:16]
    node _T_372 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 369:35]
    node _T_373 = mux(hitWB, hitWBStore, memRespStore) @[EmbeddedTLB.scala 369:138]
    io.mem.req.bits.addr <= _T_372 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_373 @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= UInt<8>("hff") @[SimpleBus.scala 68:16]
    node _T_374 = eq(state, UInt<3>("h1")) @[EmbeddedTLB.scala 370:31]
    node _T_375 = eq(state, UInt<3>("h3")) @[EmbeddedTLB.scala 370:57]
    node _T_376 = or(_T_374, _T_375) @[EmbeddedTLB.scala 370:48]
    node _T_377 = eq(isFlush, UInt<1>("h0")) @[EmbeddedTLB.scala 370:77]
    node _T_378 = and(_T_376, _T_377) @[EmbeddedTLB.scala 370:74]
    io.mem.req.valid <= _T_378 @[EmbeddedTLB.scala 370:20]
    io.mem.resp.ready <= UInt<1>("h1") @[EmbeddedTLB.scala 371:21]
    node _T_379 = eq(isFlush, UInt<1>("h0")) @[EmbeddedTLB.scala 374:53]
    node _T_380 = and(missMetaRefill, _T_379) @[EmbeddedTLB.scala 374:50]
    node _T_381 = eq(state, UInt<3>("h0")) @[EmbeddedTLB.scala 374:82]
    node _T_382 = and(hitWB, _T_381) @[EmbeddedTLB.scala 374:73]
    node _T_383 = eq(isFlush, UInt<1>("h0")) @[EmbeddedTLB.scala 374:96]
    node _T_384 = and(_T_382, _T_383) @[EmbeddedTLB.scala 374:93]
    node _T_385 = or(_T_380, _T_384) @[EmbeddedTLB.scala 374:63]
    reg REG_7 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 374:33]
    REG_7 <= _T_385 @[EmbeddedTLB.scala 374:33]
    wire _WIRE_61 : { tag : UInt<26>, index : UInt<1>, off : UInt<12>} @[TLB.scala 200:19]
    wire _WIRE_62 : UInt<39>
    _WIRE_62 <= io.in.bits.addr
    node _T_386 = bits(_WIRE_62, 11, 0) @[TLB.scala 200:19]
    _WIRE_61.off <= _T_386 @[TLB.scala 200:19]
    node _T_387 = bits(_WIRE_62, 12, 12) @[TLB.scala 200:19]
    _WIRE_61.index <= _T_387 @[TLB.scala 200:19]
    node _T_388 = bits(_WIRE_62, 38, 13) @[TLB.scala 200:19]
    _WIRE_61.tag <= _T_388 @[TLB.scala 200:19]
    reg REG_8 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_8) @[EmbeddedTLB.scala 375:21]
    REG_8 <= _WIRE_61.index @[EmbeddedTLB.scala 375:21]
    reg REG_9 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_9) @[EmbeddedTLB.scala 375:60]
    REG_9 <= waymask @[EmbeddedTLB.scala 375:60]
    node hi_12 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 375:89]
    node _T_389 = cat(hi_12, vpn.vpn0) @[EmbeddedTLB.scala 375:89]
    reg REG_10 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_10) @[EmbeddedTLB.scala 375:84]
    REG_10 <= _T_389 @[EmbeddedTLB.scala 375:84]
    node _T_390 = mux(hitWB, hitMeta.asid, satp.asid) @[EmbeddedTLB.scala 376:23]
    reg REG_11 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_11) @[EmbeddedTLB.scala 376:19]
    REG_11 <= _T_390 @[EmbeddedTLB.scala 376:19]
    node _T_391 = mux(hitWB, hitMeta.mask, missMask) @[EmbeddedTLB.scala 376:76]
    reg REG_12 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_12) @[EmbeddedTLB.scala 376:72]
    REG_12 <= _T_391 @[EmbeddedTLB.scala 376:72]
    node _T_392 = mux(hitWB, hitRefillFlag, missRefillFlag) @[EmbeddedTLB.scala 377:23]
    reg REG_13 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_13) @[EmbeddedTLB.scala 377:19]
    REG_13 <= _T_392 @[EmbeddedTLB.scala 377:19]
    node _T_393 = mux(hitWB, hitData.ppn, memRdata.ppn) @[EmbeddedTLB.scala 377:81]
    reg REG_14 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_14) @[EmbeddedTLB.scala 377:77]
    REG_14 <= _T_393 @[EmbeddedTLB.scala 377:77]
    node _T_394 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 378:27]
    reg REG_15 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_15) @[EmbeddedTLB.scala 378:22]
    REG_15 <= _T_394 @[EmbeddedTLB.scala 378:22]
    io.mdWrite.wen <= REG_7 @[TLB.scala 214:14]
    io.mdWrite.windex <= REG_8 @[TLB.scala 215:17]
    io.mdWrite.waymask <= REG_9 @[TLB.scala 216:18]
    node lo_hi_3 = cat(REG_13, REG_14) @[Cat.scala 30:58]
    node lo_6 = cat(lo_hi_3, REG_15) @[Cat.scala 30:58]
    node hi_hi_3 = cat(REG_10, REG_11) @[Cat.scala 30:58]
    node hi_13 = cat(hi_hi_3, REG_12) @[Cat.scala 30:58]
    node _T_395 = cat(hi_13, lo_6) @[Cat.scala 30:58]
    io.mdWrite.wdata <= _T_395 @[TLB.scala 217:16]
    io.out.bits.user <= io.in.bits.user @[EmbeddedTLB.scala 381:15]
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 381:15]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 381:15]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 381:15]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 381:15]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 381:15]
    node _T_396 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 382:63]
    node _T_397 = cat(hitData.ppn, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_398 = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    node hi_14 = cat(_T_398, hitMeta.mask) @[Cat.scala 30:58]
    node _T_399 = cat(hi_14, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_400 = and(_T_397, _T_399) @[BitUtils.scala 32:13]
    node _T_401 = not(_T_399) @[BitUtils.scala 32:38]
    node _T_402 = and(_T_396, _T_401) @[BitUtils.scala 32:36]
    node _T_403 = or(_T_400, _T_402) @[BitUtils.scala 32:25]
    wire _WIRE_63 : { reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 382:122]
    wire _WIRE_64 : UInt<64>
    _WIRE_64 <= memRespStore
    node _T_404 = bits(_WIRE_64, 0, 0) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.v <= _T_404 @[EmbeddedTLB.scala 382:122]
    node _T_405 = bits(_WIRE_64, 1, 1) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.r <= _T_405 @[EmbeddedTLB.scala 382:122]
    node _T_406 = bits(_WIRE_64, 2, 2) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.w <= _T_406 @[EmbeddedTLB.scala 382:122]
    node _T_407 = bits(_WIRE_64, 3, 3) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.x <= _T_407 @[EmbeddedTLB.scala 382:122]
    node _T_408 = bits(_WIRE_64, 4, 4) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.u <= _T_408 @[EmbeddedTLB.scala 382:122]
    node _T_409 = bits(_WIRE_64, 5, 5) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.g <= _T_409 @[EmbeddedTLB.scala 382:122]
    node _T_410 = bits(_WIRE_64, 6, 6) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.a <= _T_410 @[EmbeddedTLB.scala 382:122]
    node _T_411 = bits(_WIRE_64, 7, 7) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.d <= _T_411 @[EmbeddedTLB.scala 382:122]
    node _T_412 = bits(_WIRE_64, 9, 8) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.rsw <= _T_412 @[EmbeddedTLB.scala 382:122]
    node _T_413 = bits(_WIRE_64, 29, 10) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.ppn <= _T_413 @[EmbeddedTLB.scala 382:122]
    node _T_414 = bits(_WIRE_64, 63, 30) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.reserved <= _T_414 @[EmbeddedTLB.scala 382:122]
    node _T_415 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 382:147]
    node _T_416 = cat(_WIRE_63.ppn, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_417 = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    node hi_15 = cat(_T_417, missMaskStore) @[Cat.scala 30:58]
    node _T_418 = cat(hi_15, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_419 = and(_T_416, _T_418) @[BitUtils.scala 32:13]
    node _T_420 = not(_T_418) @[BitUtils.scala 32:38]
    node _T_421 = and(_T_415, _T_420) @[BitUtils.scala 32:36]
    node _T_422 = or(_T_419, _T_421) @[BitUtils.scala 32:25]
    node _T_423 = mux(hit, _T_403, _T_422) @[EmbeddedTLB.scala 382:26]
    io.out.bits.addr <= _T_423 @[EmbeddedTLB.scala 382:20]
    node _T_424 = eq(hitWB, UInt<1>("h0")) @[EmbeddedTLB.scala 383:45]
    node _T_425 = and(hit, _T_424) @[EmbeddedTLB.scala 383:42]
    node _T_426 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_427 = or(_T_426, loadPF) @[EmbeddedTLB.scala 383:68]
    node _T_428 = or(_T_427, storePF) @[EmbeddedTLB.scala 383:78]
    node _T_429 = eq(_T_428, UInt<1>("h0")) @[EmbeddedTLB.scala 383:53]
    node _T_430 = eq(state, UInt<3>("h4")) @[EmbeddedTLB.scala 383:97]
    node _T_431 = mux(_T_425, _T_429, _T_430) @[EmbeddedTLB.scala 383:37]
    node _T_432 = and(io.in.valid, _T_431) @[EmbeddedTLB.scala 383:31]
    io.out.valid <= _T_432 @[EmbeddedTLB.scala 383:16]
    node _T_433 = eq(state, UInt<3>("h0")) @[EmbeddedTLB.scala 385:41]
    node _T_434 = and(io.out.ready, _T_433) @[EmbeddedTLB.scala 385:31]
    node _T_435 = eq(miss, UInt<1>("h0")) @[EmbeddedTLB.scala 385:56]
    node _T_436 = and(_T_434, _T_435) @[EmbeddedTLB.scala 385:53]
    node _T_437 = eq(hitWB, UInt<1>("h0")) @[EmbeddedTLB.scala 385:65]
    node _T_438 = and(_T_436, _T_437) @[EmbeddedTLB.scala 385:62]
    node _T_439 = and(_T_438, io.mdReady) @[EmbeddedTLB.scala 385:72]
    node _T_440 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_441 = eq(_T_440, UInt<1>("h0")) @[EmbeddedTLB.scala 385:90]
    node _T_442 = eq(loadPF, UInt<1>("h0")) @[EmbeddedTLB.scala 385:107]
    node _T_443 = and(_T_441, _T_442) @[EmbeddedTLB.scala 385:104]
    node _T_444 = eq(storePF, UInt<1>("h0")) @[EmbeddedTLB.scala 385:118]
    node _T_445 = and(_T_443, _T_444) @[EmbeddedTLB.scala 385:115]
    node _T_446 = and(_T_439, _T_445) @[EmbeddedTLB.scala 385:86]
    io.in.ready <= _T_446 @[EmbeddedTLB.scala 385:15]
    node _T_447 = mux(hit, hitinstrPF, missIPF) @[EmbeddedTLB.scala 387:16]
    io.ipf <= _T_447 @[EmbeddedTLB.scala 387:10]
    node _T_448 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_449 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_450 = or(_T_448, _T_449) @[EmbeddedTLB.scala 388:32]
    io.isFinish <= _T_450 @[EmbeddedTLB.scala 388:15]
    reg REG_16 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_451 = add(REG_16, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_452 = tail(_T_451, 1) @[GTimer.scala 25:12]
    REG_16 <= _T_452 @[GTimer.scala 25:7]
    wire _WIRE_65 : UInt<1>
    _WIRE_65 <= UInt<1>("h0")
    node _T_453 = and(UInt<1>("h1"), _WIRE_65) @[Debug.scala 55:16]
    when _T_453 : @[Debug.scala 55:31]
      node _T_454 = asUInt(reset) @[Debug.scala 56:24]
      node _T_455 = eq(_T_454, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_455 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_16) : SIM_5 @[Debug.scala 56:24]
      node _T_456 = asUInt(reset) @[Debug.scala 57:13]
      node _T_457 = eq(_T_456, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_457 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "In(%d, %d) Out(%d, %d) InAddr:%x OutAddr:%x cmd:%d \n", io.in.valid, io.in.ready, io.out.valid, io.out.ready, io.in.bits.addr, io.out.bits.addr, io.in.bits.cmd) : SIM_6 @[Debug.scala 57:13]
    reg REG_17 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_458 = add(REG_17, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_459 = tail(_T_458, 1) @[GTimer.scala 25:12]
    REG_17 <= _T_459 @[GTimer.scala 25:7]
    wire _WIRE_66 : UInt<1>
    _WIRE_66 <= UInt<1>("h0")
    node _T_460 = and(UInt<1>("h1"), _WIRE_66) @[Debug.scala 55:16]
    when _T_460 : @[Debug.scala 55:31]
      node _T_461 = asUInt(reset) @[Debug.scala 56:24]
      node _T_462 = eq(_T_461, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_462 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_17) : SIM_7 @[Debug.scala 56:24]
      node _T_463 = asUInt(reset) @[Debug.scala 57:13]
      node _T_464 = eq(_T_463, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_464 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "isAMO:%d io.Flush:%d needFlush:%d alreadyOutFire:%d isFinish:%d\n", isAMO, io.flush, needFlush, alreadyOutFire, io.isFinish) : SIM_8 @[Debug.scala 57:13]
    node lo_lo_3 = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 392:171]
    node lo_hi_4 = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 392:171]
    node lo_7 = cat(lo_hi_4, lo_lo_3) @[EmbeddedTLB.scala 392:171]
    node hi_lo_3 = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 392:171]
    node hi_hi_4 = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 392:171]
    node hi_16 = cat(hi_hi_4, hi_lo_3) @[EmbeddedTLB.scala 392:171]
    node _T_465 = cat(hi_16, lo_7) @[EmbeddedTLB.scala 392:171]
    reg REG_18 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_466 = add(REG_18, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_467 = tail(_T_466, 1) @[GTimer.scala 25:12]
    REG_18 <= _T_467 @[GTimer.scala 25:7]
    wire _WIRE_67 : UInt<1>
    _WIRE_67 <= UInt<1>("h0")
    node _T_468 = and(UInt<1>("h1"), _WIRE_67) @[Debug.scala 55:16]
    when _T_468 : @[Debug.scala 55:31]
      node _T_469 = asUInt(reset) @[Debug.scala 56:24]
      node _T_470 = eq(_T_469, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_470 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_18) : SIM_9 @[Debug.scala 56:24]
      node _T_471 = asUInt(reset) @[Debug.scala 57:13]
      node _T_472 = eq(_T_471, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_472 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "hit:%d hitWB:%d hitVPN:%x hitFlag:%x hitPPN:%x hitRefillFlag:%x hitWBStore:%x hitCheck:%d hitExec:%d hitLoad:%d hitStore:%d\n", hit, hitWB, hitMeta.vpn, _T_465, hitData.ppn, hitRefillFlag, hitWBStore, hitCheck, hitExec, hitLoad, hitStore) : SIM_10 @[Debug.scala 57:13]
    node lo_lo_4 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 393:145]
    node lo_hi_hi = cat(memRdata.flag.u, memRdata.flag.x) @[EmbeddedTLB.scala 393:145]
    node lo_hi_5 = cat(lo_hi_hi, memRdata.flag.w) @[EmbeddedTLB.scala 393:145]
    node lo_8 = cat(lo_hi_5, lo_lo_4) @[EmbeddedTLB.scala 393:145]
    node hi_lo_hi = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 393:145]
    node hi_lo_4 = cat(hi_lo_hi, memRdata.flag.g) @[EmbeddedTLB.scala 393:145]
    node hi_hi_hi = cat(memRdata.reserved, memRdata.ppn) @[EmbeddedTLB.scala 393:145]
    node hi_hi_5 = cat(hi_hi_hi, memRdata.rsw) @[EmbeddedTLB.scala 393:145]
    node hi_17 = cat(hi_hi_5, hi_lo_4) @[EmbeddedTLB.scala 393:145]
    node _T_473 = cat(hi_17, lo_8) @[EmbeddedTLB.scala 393:145]
    reg REG_19 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_474 = add(REG_19, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_475 = tail(_T_474, 1) @[GTimer.scala 25:12]
    REG_19 <= _T_475 @[GTimer.scala 25:7]
    wire _WIRE_68 : UInt<1>
    _WIRE_68 <= UInt<1>("h0")
    node _T_476 = and(UInt<1>("h1"), _WIRE_68) @[Debug.scala 55:16]
    when _T_476 : @[Debug.scala 55:31]
      node _T_477 = asUInt(reset) @[Debug.scala 56:24]
      node _T_478 = eq(_T_477, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_478 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_19) : SIM_11 @[Debug.scala 56:24]
      node _T_479 = asUInt(reset) @[Debug.scala 57:13]
      node _T_480 = eq(_T_479, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_480 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "miss:%d state:%d level:%d raddr:%x memRdata:%x missMask:%x missRefillFlag:%x missMetaRefill:%d\n", miss, state, level, raddr, _T_473, missMask, missRefillFlag, missMetaRefill) : SIM_12 @[Debug.scala 57:13]
    wire _WIRE_69 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:96]
    wire _WIRE_70 : UInt<121>
    _WIRE_70 <= io.md[0]
    node _T_481 = bits(_WIRE_70, 31, 0) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.pteaddr <= _T_481 @[EmbeddedTLB.scala 394:96]
    node _T_482 = bits(_WIRE_70, 51, 32) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.ppn <= _T_482 @[EmbeddedTLB.scala 394:96]
    node _T_483 = bits(_WIRE_70, 59, 52) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.flag <= _T_483 @[EmbeddedTLB.scala 394:96]
    node _T_484 = bits(_WIRE_70, 77, 60) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.mask <= _T_484 @[EmbeddedTLB.scala 394:96]
    node _T_485 = bits(_WIRE_70, 93, 78) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.asid <= _T_485 @[EmbeddedTLB.scala 394:96]
    node _T_486 = bits(_WIRE_70, 120, 94) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.vpn <= _T_486 @[EmbeddedTLB.scala 394:96]
    wire _WIRE_71 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:127]
    wire _WIRE_72 : UInt<121>
    _WIRE_72 <= io.md[0]
    node _T_487 = bits(_WIRE_72, 31, 0) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.pteaddr <= _T_487 @[EmbeddedTLB.scala 394:127]
    node _T_488 = bits(_WIRE_72, 51, 32) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.ppn <= _T_488 @[EmbeddedTLB.scala 394:127]
    node _T_489 = bits(_WIRE_72, 59, 52) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.flag <= _T_489 @[EmbeddedTLB.scala 394:127]
    node _T_490 = bits(_WIRE_72, 77, 60) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.mask <= _T_490 @[EmbeddedTLB.scala 394:127]
    node _T_491 = bits(_WIRE_72, 93, 78) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.asid <= _T_491 @[EmbeddedTLB.scala 394:127]
    node _T_492 = bits(_WIRE_72, 120, 94) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.vpn <= _T_492 @[EmbeddedTLB.scala 394:127]
    wire _WIRE_73 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:159]
    wire _WIRE_74 : UInt<121>
    _WIRE_74 <= io.md[0]
    node _T_493 = bits(_WIRE_74, 31, 0) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.pteaddr <= _T_493 @[EmbeddedTLB.scala 394:159]
    node _T_494 = bits(_WIRE_74, 51, 32) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.ppn <= _T_494 @[EmbeddedTLB.scala 394:159]
    node _T_495 = bits(_WIRE_74, 59, 52) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.flag <= _T_495 @[EmbeddedTLB.scala 394:159]
    node _T_496 = bits(_WIRE_74, 77, 60) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.mask <= _T_496 @[EmbeddedTLB.scala 394:159]
    node _T_497 = bits(_WIRE_74, 93, 78) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.asid <= _T_497 @[EmbeddedTLB.scala 394:159]
    node _T_498 = bits(_WIRE_74, 120, 94) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.vpn <= _T_498 @[EmbeddedTLB.scala 394:159]
    wire _WIRE_75 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:190]
    wire _WIRE_76 : UInt<121>
    _WIRE_76 <= io.md[1]
    node _T_499 = bits(_WIRE_76, 31, 0) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.pteaddr <= _T_499 @[EmbeddedTLB.scala 394:190]
    node _T_500 = bits(_WIRE_76, 51, 32) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.ppn <= _T_500 @[EmbeddedTLB.scala 394:190]
    node _T_501 = bits(_WIRE_76, 59, 52) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.flag <= _T_501 @[EmbeddedTLB.scala 394:190]
    node _T_502 = bits(_WIRE_76, 77, 60) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.mask <= _T_502 @[EmbeddedTLB.scala 394:190]
    node _T_503 = bits(_WIRE_76, 93, 78) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.asid <= _T_503 @[EmbeddedTLB.scala 394:190]
    node _T_504 = bits(_WIRE_76, 120, 94) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.vpn <= _T_504 @[EmbeddedTLB.scala 394:190]
    wire _WIRE_77 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:221]
    wire _WIRE_78 : UInt<121>
    _WIRE_78 <= io.md[1]
    node _T_505 = bits(_WIRE_78, 31, 0) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.pteaddr <= _T_505 @[EmbeddedTLB.scala 394:221]
    node _T_506 = bits(_WIRE_78, 51, 32) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.ppn <= _T_506 @[EmbeddedTLB.scala 394:221]
    node _T_507 = bits(_WIRE_78, 59, 52) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.flag <= _T_507 @[EmbeddedTLB.scala 394:221]
    node _T_508 = bits(_WIRE_78, 77, 60) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.mask <= _T_508 @[EmbeddedTLB.scala 394:221]
    node _T_509 = bits(_WIRE_78, 93, 78) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.asid <= _T_509 @[EmbeddedTLB.scala 394:221]
    node _T_510 = bits(_WIRE_78, 120, 94) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.vpn <= _T_510 @[EmbeddedTLB.scala 394:221]
    wire _WIRE_79 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:253]
    wire _WIRE_80 : UInt<121>
    _WIRE_80 <= io.md[1]
    node _T_511 = bits(_WIRE_80, 31, 0) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.pteaddr <= _T_511 @[EmbeddedTLB.scala 394:253]
    node _T_512 = bits(_WIRE_80, 51, 32) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.ppn <= _T_512 @[EmbeddedTLB.scala 394:253]
    node _T_513 = bits(_WIRE_80, 59, 52) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.flag <= _T_513 @[EmbeddedTLB.scala 394:253]
    node _T_514 = bits(_WIRE_80, 77, 60) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.mask <= _T_514 @[EmbeddedTLB.scala 394:253]
    node _T_515 = bits(_WIRE_80, 93, 78) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.asid <= _T_515 @[EmbeddedTLB.scala 394:253]
    node _T_516 = bits(_WIRE_80, 120, 94) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.vpn <= _T_516 @[EmbeddedTLB.scala 394:253]
    wire _WIRE_81 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:284]
    wire _WIRE_82 : UInt<121>
    _WIRE_82 <= io.md[2]
    node _T_517 = bits(_WIRE_82, 31, 0) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.pteaddr <= _T_517 @[EmbeddedTLB.scala 394:284]
    node _T_518 = bits(_WIRE_82, 51, 32) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.ppn <= _T_518 @[EmbeddedTLB.scala 394:284]
    node _T_519 = bits(_WIRE_82, 59, 52) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.flag <= _T_519 @[EmbeddedTLB.scala 394:284]
    node _T_520 = bits(_WIRE_82, 77, 60) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.mask <= _T_520 @[EmbeddedTLB.scala 394:284]
    node _T_521 = bits(_WIRE_82, 93, 78) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.asid <= _T_521 @[EmbeddedTLB.scala 394:284]
    node _T_522 = bits(_WIRE_82, 120, 94) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.vpn <= _T_522 @[EmbeddedTLB.scala 394:284]
    wire _WIRE_83 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:315]
    wire _WIRE_84 : UInt<121>
    _WIRE_84 <= io.md[2]
    node _T_523 = bits(_WIRE_84, 31, 0) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.pteaddr <= _T_523 @[EmbeddedTLB.scala 394:315]
    node _T_524 = bits(_WIRE_84, 51, 32) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.ppn <= _T_524 @[EmbeddedTLB.scala 394:315]
    node _T_525 = bits(_WIRE_84, 59, 52) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.flag <= _T_525 @[EmbeddedTLB.scala 394:315]
    node _T_526 = bits(_WIRE_84, 77, 60) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.mask <= _T_526 @[EmbeddedTLB.scala 394:315]
    node _T_527 = bits(_WIRE_84, 93, 78) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.asid <= _T_527 @[EmbeddedTLB.scala 394:315]
    node _T_528 = bits(_WIRE_84, 120, 94) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.vpn <= _T_528 @[EmbeddedTLB.scala 394:315]
    wire _WIRE_85 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:347]
    wire _WIRE_86 : UInt<121>
    _WIRE_86 <= io.md[2]
    node _T_529 = bits(_WIRE_86, 31, 0) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.pteaddr <= _T_529 @[EmbeddedTLB.scala 394:347]
    node _T_530 = bits(_WIRE_86, 51, 32) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.ppn <= _T_530 @[EmbeddedTLB.scala 394:347]
    node _T_531 = bits(_WIRE_86, 59, 52) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.flag <= _T_531 @[EmbeddedTLB.scala 394:347]
    node _T_532 = bits(_WIRE_86, 77, 60) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.mask <= _T_532 @[EmbeddedTLB.scala 394:347]
    node _T_533 = bits(_WIRE_86, 93, 78) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.asid <= _T_533 @[EmbeddedTLB.scala 394:347]
    node _T_534 = bits(_WIRE_86, 120, 94) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.vpn <= _T_534 @[EmbeddedTLB.scala 394:347]
    wire _WIRE_87 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:378]
    wire _WIRE_88 : UInt<121>
    _WIRE_88 <= io.md[3]
    node _T_535 = bits(_WIRE_88, 31, 0) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.pteaddr <= _T_535 @[EmbeddedTLB.scala 394:378]
    node _T_536 = bits(_WIRE_88, 51, 32) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.ppn <= _T_536 @[EmbeddedTLB.scala 394:378]
    node _T_537 = bits(_WIRE_88, 59, 52) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.flag <= _T_537 @[EmbeddedTLB.scala 394:378]
    node _T_538 = bits(_WIRE_88, 77, 60) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.mask <= _T_538 @[EmbeddedTLB.scala 394:378]
    node _T_539 = bits(_WIRE_88, 93, 78) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.asid <= _T_539 @[EmbeddedTLB.scala 394:378]
    node _T_540 = bits(_WIRE_88, 120, 94) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.vpn <= _T_540 @[EmbeddedTLB.scala 394:378]
    wire _WIRE_89 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:409]
    wire _WIRE_90 : UInt<121>
    _WIRE_90 <= io.md[3]
    node _T_541 = bits(_WIRE_90, 31, 0) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.pteaddr <= _T_541 @[EmbeddedTLB.scala 394:409]
    node _T_542 = bits(_WIRE_90, 51, 32) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.ppn <= _T_542 @[EmbeddedTLB.scala 394:409]
    node _T_543 = bits(_WIRE_90, 59, 52) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.flag <= _T_543 @[EmbeddedTLB.scala 394:409]
    node _T_544 = bits(_WIRE_90, 77, 60) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.mask <= _T_544 @[EmbeddedTLB.scala 394:409]
    node _T_545 = bits(_WIRE_90, 93, 78) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.asid <= _T_545 @[EmbeddedTLB.scala 394:409]
    node _T_546 = bits(_WIRE_90, 120, 94) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.vpn <= _T_546 @[EmbeddedTLB.scala 394:409]
    wire _WIRE_91 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:441]
    wire _WIRE_92 : UInt<121>
    _WIRE_92 <= io.md[3]
    node _T_547 = bits(_WIRE_92, 31, 0) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.pteaddr <= _T_547 @[EmbeddedTLB.scala 394:441]
    node _T_548 = bits(_WIRE_92, 51, 32) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.ppn <= _T_548 @[EmbeddedTLB.scala 394:441]
    node _T_549 = bits(_WIRE_92, 59, 52) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.flag <= _T_549 @[EmbeddedTLB.scala 394:441]
    node _T_550 = bits(_WIRE_92, 77, 60) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.mask <= _T_550 @[EmbeddedTLB.scala 394:441]
    node _T_551 = bits(_WIRE_92, 93, 78) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.asid <= _T_551 @[EmbeddedTLB.scala 394:441]
    node _T_552 = bits(_WIRE_92, 120, 94) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.vpn <= _T_552 @[EmbeddedTLB.scala 394:441]
    reg REG_20 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_553 = add(REG_20, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_554 = tail(_T_553, 1) @[GTimer.scala 25:12]
    REG_20 <= _T_554 @[GTimer.scala 25:7]
    wire _WIRE_93 : UInt<1>
    _WIRE_93 <= UInt<1>("h0")
    node _T_555 = and(UInt<1>("h1"), _WIRE_93) @[Debug.scala 55:16]
    when _T_555 : @[Debug.scala 55:31]
      node _T_556 = asUInt(reset) @[Debug.scala 56:24]
      node _T_557 = eq(_T_556, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_557 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_20) : SIM_13 @[Debug.scala 56:24]
      node _T_558 = asUInt(reset) @[Debug.scala 57:13]
      node _T_559 = eq(_T_558, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_559 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "meta/data: (0)%x|%b|%x (1)%x|%b|%x (2)%x|%b|%x (3)%x|%b|%x rread:%d\n", _WIRE_69.vpn, _WIRE_71.flag, _WIRE_73.ppn, _WIRE_75.vpn, _WIRE_77.flag, _WIRE_79.ppn, _WIRE_81.vpn, _WIRE_83.flag, _WIRE_85.ppn, _WIRE_87.vpn, _WIRE_89.flag, _WIRE_91.ppn, io.mdReady) : SIM_14 @[Debug.scala 57:13]
    wire _WIRE_94 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:183]
    wire _WIRE_95 : UInt<121>
    _WIRE_95 <= io.mdWrite.wdata
    node _T_560 = bits(_WIRE_95, 31, 0) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.pteaddr <= _T_560 @[EmbeddedTLB.scala 395:183]
    node _T_561 = bits(_WIRE_95, 51, 32) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.ppn <= _T_561 @[EmbeddedTLB.scala 395:183]
    node _T_562 = bits(_WIRE_95, 59, 52) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.flag <= _T_562 @[EmbeddedTLB.scala 395:183]
    node _T_563 = bits(_WIRE_95, 77, 60) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.mask <= _T_563 @[EmbeddedTLB.scala 395:183]
    node _T_564 = bits(_WIRE_95, 93, 78) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.asid <= _T_564 @[EmbeddedTLB.scala 395:183]
    node _T_565 = bits(_WIRE_95, 120, 94) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.vpn <= _T_565 @[EmbeddedTLB.scala 395:183]
    wire _WIRE_96 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:225]
    wire _WIRE_97 : UInt<121>
    _WIRE_97 <= io.mdWrite.wdata
    node _T_566 = bits(_WIRE_97, 31, 0) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.pteaddr <= _T_566 @[EmbeddedTLB.scala 395:225]
    node _T_567 = bits(_WIRE_97, 51, 32) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.ppn <= _T_567 @[EmbeddedTLB.scala 395:225]
    node _T_568 = bits(_WIRE_97, 59, 52) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.flag <= _T_568 @[EmbeddedTLB.scala 395:225]
    node _T_569 = bits(_WIRE_97, 77, 60) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.mask <= _T_569 @[EmbeddedTLB.scala 395:225]
    node _T_570 = bits(_WIRE_97, 93, 78) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.asid <= _T_570 @[EmbeddedTLB.scala 395:225]
    node _T_571 = bits(_WIRE_97, 120, 94) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.vpn <= _T_571 @[EmbeddedTLB.scala 395:225]
    wire _WIRE_98 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:268]
    wire _WIRE_99 : UInt<121>
    _WIRE_99 <= io.mdWrite.wdata
    node _T_572 = bits(_WIRE_99, 31, 0) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.pteaddr <= _T_572 @[EmbeddedTLB.scala 395:268]
    node _T_573 = bits(_WIRE_99, 51, 32) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.ppn <= _T_573 @[EmbeddedTLB.scala 395:268]
    node _T_574 = bits(_WIRE_99, 59, 52) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.flag <= _T_574 @[EmbeddedTLB.scala 395:268]
    node _T_575 = bits(_WIRE_99, 77, 60) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.mask <= _T_575 @[EmbeddedTLB.scala 395:268]
    node _T_576 = bits(_WIRE_99, 93, 78) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.asid <= _T_576 @[EmbeddedTLB.scala 395:268]
    node _T_577 = bits(_WIRE_99, 120, 94) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.vpn <= _T_577 @[EmbeddedTLB.scala 395:268]
    wire _WIRE_100 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:311]
    wire _WIRE_101 : UInt<121>
    _WIRE_101 <= io.mdWrite.wdata
    node _T_578 = bits(_WIRE_101, 31, 0) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.pteaddr <= _T_578 @[EmbeddedTLB.scala 395:311]
    node _T_579 = bits(_WIRE_101, 51, 32) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.ppn <= _T_579 @[EmbeddedTLB.scala 395:311]
    node _T_580 = bits(_WIRE_101, 59, 52) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.flag <= _T_580 @[EmbeddedTLB.scala 395:311]
    node _T_581 = bits(_WIRE_101, 77, 60) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.mask <= _T_581 @[EmbeddedTLB.scala 395:311]
    node _T_582 = bits(_WIRE_101, 93, 78) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.asid <= _T_582 @[EmbeddedTLB.scala 395:311]
    node _T_583 = bits(_WIRE_101, 120, 94) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.vpn <= _T_583 @[EmbeddedTLB.scala 395:311]
    wire _WIRE_102 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:354]
    wire _WIRE_103 : UInt<121>
    _WIRE_103 <= io.mdWrite.wdata
    node _T_584 = bits(_WIRE_103, 31, 0) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.pteaddr <= _T_584 @[EmbeddedTLB.scala 395:354]
    node _T_585 = bits(_WIRE_103, 51, 32) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.ppn <= _T_585 @[EmbeddedTLB.scala 395:354]
    node _T_586 = bits(_WIRE_103, 59, 52) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.flag <= _T_586 @[EmbeddedTLB.scala 395:354]
    node _T_587 = bits(_WIRE_103, 77, 60) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.mask <= _T_587 @[EmbeddedTLB.scala 395:354]
    node _T_588 = bits(_WIRE_103, 93, 78) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.asid <= _T_588 @[EmbeddedTLB.scala 395:354]
    node _T_589 = bits(_WIRE_103, 120, 94) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.vpn <= _T_589 @[EmbeddedTLB.scala 395:354]
    wire _WIRE_104 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:397]
    wire _WIRE_105 : UInt<121>
    _WIRE_105 <= io.mdWrite.wdata
    node _T_590 = bits(_WIRE_105, 31, 0) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.pteaddr <= _T_590 @[EmbeddedTLB.scala 395:397]
    node _T_591 = bits(_WIRE_105, 51, 32) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.ppn <= _T_591 @[EmbeddedTLB.scala 395:397]
    node _T_592 = bits(_WIRE_105, 59, 52) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.flag <= _T_592 @[EmbeddedTLB.scala 395:397]
    node _T_593 = bits(_WIRE_105, 77, 60) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.mask <= _T_593 @[EmbeddedTLB.scala 395:397]
    node _T_594 = bits(_WIRE_105, 93, 78) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.asid <= _T_594 @[EmbeddedTLB.scala 395:397]
    node _T_595 = bits(_WIRE_105, 120, 94) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.vpn <= _T_595 @[EmbeddedTLB.scala 395:397]
    wire _WIRE_106 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:439]
    wire _WIRE_107 : UInt<121>
    _WIRE_107 <= io.mdWrite.wdata
    node _T_596 = bits(_WIRE_107, 31, 0) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.pteaddr <= _T_596 @[EmbeddedTLB.scala 395:439]
    node _T_597 = bits(_WIRE_107, 51, 32) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.ppn <= _T_597 @[EmbeddedTLB.scala 395:439]
    node _T_598 = bits(_WIRE_107, 59, 52) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.flag <= _T_598 @[EmbeddedTLB.scala 395:439]
    node _T_599 = bits(_WIRE_107, 77, 60) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.mask <= _T_599 @[EmbeddedTLB.scala 395:439]
    node _T_600 = bits(_WIRE_107, 93, 78) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.asid <= _T_600 @[EmbeddedTLB.scala 395:439]
    node _T_601 = bits(_WIRE_107, 120, 94) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.vpn <= _T_601 @[EmbeddedTLB.scala 395:439]
    reg REG_21 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_602 = add(REG_21, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_603 = tail(_T_602, 1) @[GTimer.scala 25:12]
    REG_21 <= _T_603 @[GTimer.scala 25:7]
    wire _WIRE_108 : UInt<1>
    _WIRE_108 <= UInt<1>("h0")
    node _T_604 = and(UInt<1>("h1"), _WIRE_108) @[Debug.scala 55:16]
    when _T_604 : @[Debug.scala 55:31]
      node _T_605 = asUInt(reset) @[Debug.scala 56:24]
      node _T_606 = eq(_T_605, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_606 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_21) : SIM_15 @[Debug.scala 56:24]
      node _T_607 = asUInt(reset) @[Debug.scala 57:13]
      node _T_608 = eq(_T_607, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_608 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "md: wen:%d windex:%x waymask:%x vpn:%x asid:%x mask:%x flag:%x asid:%x ppn:%x pteaddr:%x\n", io.mdWrite.wen, io.mdWrite.windex, io.mdWrite.waymask, _WIRE_94.vpn, _WIRE_96.asid, _WIRE_98.mask, _WIRE_100.flag, _WIRE_102.asid, _WIRE_104.ppn, _WIRE_106.pteaddr) : SIM_16 @[Debug.scala 57:13]
    reg REG_22 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_609 = add(REG_22, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_610 = tail(_T_609, 1) @[GTimer.scala 25:12]
    REG_22 <= _T_610 @[GTimer.scala 25:7]
    wire _WIRE_109 : UInt<1>
    _WIRE_109 <= UInt<1>("h0")
    node _T_611 = and(UInt<1>("h1"), _WIRE_109) @[Debug.scala 55:16]
    when _T_611 : @[Debug.scala 55:31]
      node _T_612 = asUInt(reset) @[Debug.scala 56:24]
      node _T_613 = eq(_T_612, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_613 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_22) : SIM_17 @[Debug.scala 56:24]
      node _T_614 = asUInt(reset) @[Debug.scala 57:13]
      node _T_615 = eq(_T_614, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_615 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "MemReq(%d, %d) MemResp(%d, %d) addr:%x cmd:%d rdata:%x cmd:%d\n", io.mem.req.valid, io.mem.req.ready, io.mem.resp.valid, io.mem.resp.ready, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) : SIM_18 @[Debug.scala 57:13]
    reg REG_23 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_616 = add(REG_23, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_617 = tail(_T_616, 1) @[GTimer.scala 25:12]
    REG_23 <= _T_617 @[GTimer.scala 25:7]
    wire _WIRE_110 : UInt<1>
    _WIRE_110 <= UInt<1>("h0")
    node _T_618 = and(UInt<1>("h1"), _WIRE_110) @[Debug.scala 55:16]
    when _T_618 : @[Debug.scala 55:31]
      node _T_619 = asUInt(reset) @[Debug.scala 56:24]
      node _T_620 = eq(_T_619, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_620 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec: ", REG_23) : SIM_19 @[Debug.scala 56:24]
      node _T_621 = asUInt(reset) @[Debug.scala 57:13]
      node _T_622 = eq(_T_621, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_622 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "io.ipf:%d hitinstrPF:%d missIPF:%d pf.loadPF:%d pf.storePF:%d loadPF:%d storePF:%d\n", io.ipf, hitinstrPF, missIPF, io.pf.loadPF, io.pf.storePF, loadPF, storePF) : SIM_20 @[Debug.scala 57:13]

  module EmbeddedTLBEmpty :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}}

    io.out.bits.user <= io.in.bits.user @[EmbeddedTLB.scala 406:10]
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 406:10]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 406:10]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 406:10]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 406:10]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 406:10]
    io.out.valid <= io.in.valid @[EmbeddedTLB.scala 406:10]
    io.in.ready <= io.out.ready @[EmbeddedTLB.scala 406:10]

  module EmbeddedTLBMD :
    input clock : Clock
    input reset : Reset
    output io : { tlbmd : UInt<121>[4], flip write : { wen : UInt<1>, windex : UInt<1>, waymask : UInt<4>, wdata : UInt<121>}, flip rindex : UInt<1>, ready : UInt<1>}

    cmem tlbmd : UInt<121>[4] [1] @[EmbeddedTLB.scala 51:18]
    infer mport MPORT = tlbmd[UInt<1>("h0")], clock @[EmbeddedTLB.scala 52:20]
    io.tlbmd[0] <= MPORT[0] @[EmbeddedTLB.scala 52:12]
    io.tlbmd[1] <= MPORT[1] @[EmbeddedTLB.scala 52:12]
    io.tlbmd[2] <= MPORT[2] @[EmbeddedTLB.scala 52:12]
    io.tlbmd[3] <= MPORT[3] @[EmbeddedTLB.scala 52:12]
    reg resetState : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[EmbeddedTLB.scala 55:27]
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    wire resetFinish : UInt<1>
    resetFinish <= UInt<1>("h0")
    when resetState : @[Counter.scala 118:17]
      resetFinish <= UInt<1>("h1") @[Counter.scala 118:24]
    when resetFinish : @[EmbeddedTLB.scala 57:22]
      resetState <= UInt<1>("h0") @[EmbeddedTLB.scala 57:35]
    node wen = mux(resetState, UInt<1>("h1"), io.write.wen) @[EmbeddedTLB.scala 64:16]
    node setIdx = mux(resetState, resetSet, io.write.windex) @[EmbeddedTLB.scala 65:19]
    node _T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T, io.write.waymask) @[EmbeddedTLB.scala 66:20]
    node dataword = mux(resetState, UInt<1>("h0"), io.write.wdata) @[EmbeddedTLB.scala 67:21]
    wire wdata : UInt<121>[4] @[EmbeddedTLB.scala 68:22]
    wdata[0] <= dataword @[EmbeddedTLB.scala 68:22]
    wdata[1] <= dataword @[EmbeddedTLB.scala 68:22]
    wdata[2] <= dataword @[EmbeddedTLB.scala 68:22]
    wdata[3] <= dataword @[EmbeddedTLB.scala 68:22]
    when wen : @[EmbeddedTLB.scala 70:14]
      node _T_1 = bits(waymask, 0, 0) @[EmbeddedTLB.scala 70:51]
      node _T_2 = bits(waymask, 1, 1) @[EmbeddedTLB.scala 70:51]
      node _T_3 = bits(waymask, 2, 2) @[EmbeddedTLB.scala 70:51]
      node _T_4 = bits(waymask, 3, 3) @[EmbeddedTLB.scala 70:51]
      write mport MPORT_1 = tlbmd[UInt<1>("h0")], clock
      when _T_1 :
        MPORT_1[0] <= wdata[0]
      when _T_2 :
        MPORT_1[1] <= wdata[1]
      when _T_3 :
        MPORT_1[2] <= wdata[2]
      when _T_4 :
        MPORT_1[3] <= wdata[3]
    node _T_5 = eq(resetState, UInt<1>("h0")) @[EmbeddedTLB.scala 72:15]
    io.ready <= _T_5 @[EmbeddedTLB.scala 72:12]

  module EmbeddedTLB :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, csrMMU : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, flip cacheEmpty : UInt<1>, ipf : UInt<1>}

    wire satp : UInt<64>
    satp <= UInt<64>("h0")
    inst tlbExec of EmbeddedTLBExec @[EmbeddedTLB.scala 83:23]
    tlbExec.clock <= clock
    tlbExec.reset <= reset
    inst tlbEmpty of EmbeddedTLBEmpty @[EmbeddedTLB.scala 84:24]
    tlbEmpty.clock <= clock
    tlbEmpty.reset <= reset
    inst mdTLB of EmbeddedTLBMD @[EmbeddedTLB.scala 85:21]
    mdTLB.clock <= clock
    mdTLB.reset <= reset
    wire mdUpdate : UInt<1> @[EmbeddedTLB.scala 86:22]
    tlbExec.io.flush <= io.flush @[EmbeddedTLB.scala 88:20]
    tlbExec.io.satp <= satp @[EmbeddedTLB.scala 89:19]
    tlbExec.io.mem.resp.bits.rdata <= io.mem.resp.bits.rdata @[EmbeddedTLB.scala 90:18]
    tlbExec.io.mem.resp.bits.cmd <= io.mem.resp.bits.cmd @[EmbeddedTLB.scala 90:18]
    tlbExec.io.mem.resp.valid <= io.mem.resp.valid @[EmbeddedTLB.scala 90:18]
    io.mem.resp.ready <= tlbExec.io.mem.resp.ready @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.wdata <= tlbExec.io.mem.req.bits.wdata @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.wmask <= tlbExec.io.mem.req.bits.wmask @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.cmd <= tlbExec.io.mem.req.bits.cmd @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.size <= tlbExec.io.mem.req.bits.size @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.addr <= tlbExec.io.mem.req.bits.addr @[EmbeddedTLB.scala 90:18]
    io.mem.req.valid <= tlbExec.io.mem.req.valid @[EmbeddedTLB.scala 90:18]
    tlbExec.io.mem.req.ready <= io.mem.req.ready @[EmbeddedTLB.scala 90:18]
    io.csrMMU.addr <= tlbExec.io.pf.addr @[EmbeddedTLB.scala 91:17]
    io.csrMMU.storePF <= tlbExec.io.pf.storePF @[EmbeddedTLB.scala 91:17]
    io.csrMMU.loadPF <= tlbExec.io.pf.loadPF @[EmbeddedTLB.scala 91:17]
    tlbExec.io.pf.status_mxr <= io.csrMMU.status_mxr @[EmbeddedTLB.scala 91:17]
    tlbExec.io.pf.status_sum <= io.csrMMU.status_sum @[EmbeddedTLB.scala 91:17]
    tlbExec.io.pf.priviledgeMode <= io.csrMMU.priviledgeMode @[EmbeddedTLB.scala 91:17]
    reg r : UInt<121>[4], clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when mdUpdate : @[Reg.scala 16:19]
      r[0] <= mdTLB.io.tlbmd[0] @[Reg.scala 16:23]
      r[1] <= mdTLB.io.tlbmd[1] @[Reg.scala 16:23]
      r[2] <= mdTLB.io.tlbmd[2] @[Reg.scala 16:23]
      r[3] <= mdTLB.io.tlbmd[3] @[Reg.scala 16:23]
    tlbExec.io.md[0] <= r[0] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.md[1] <= r[1] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.md[2] <= r[2] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.md[3] <= r[3] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.mdReady <= mdTLB.io.ready @[EmbeddedTLB.scala 93:22]
    wire _WIRE : { tag : UInt<26>, index : UInt<1>, off : UInt<12>} @[TLB.scala 200:19]
    wire _WIRE_1 : UInt<39>
    _WIRE_1 <= io.in.req.bits.addr
    node _T = bits(_WIRE_1, 11, 0) @[TLB.scala 200:19]
    _WIRE.off <= _T @[TLB.scala 200:19]
    node _T_1 = bits(_WIRE_1, 12, 12) @[TLB.scala 200:19]
    _WIRE.index <= _T_1 @[TLB.scala 200:19]
    node _T_2 = bits(_WIRE_1, 38, 13) @[TLB.scala 200:19]
    _WIRE.tag <= _T_2 @[TLB.scala 200:19]
    mdTLB.io.rindex <= _WIRE.index @[EmbeddedTLB.scala 94:19]
    mdTLB.io.write.wdata <= tlbExec.io.mdWrite.wdata @[EmbeddedTLB.scala 95:18]
    mdTLB.io.write.waymask <= tlbExec.io.mdWrite.waymask @[EmbeddedTLB.scala 95:18]
    mdTLB.io.write.windex <= tlbExec.io.mdWrite.windex @[EmbeddedTLB.scala 95:18]
    mdTLB.io.write.wen <= tlbExec.io.mdWrite.wen @[EmbeddedTLB.scala 95:18]
    io.ipf <= UInt<1>("h0") @[EmbeddedTLB.scala 97:10]
    wire flushTLB : UInt<1>
    flushTLB <= UInt<1>("h0")
    node _T_3 = asUInt(reset) @[EmbeddedTLB.scala 102:24]
    node _T_4 = or(_T_3, flushTLB) @[EmbeddedTLB.scala 102:31]
    mdTLB.reset <= _T_4 @[EmbeddedTLB.scala 102:15]
    wire _WIRE_2 : { mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 105:31]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= satp
    node _T_5 = bits(_WIRE_3, 19, 0) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.ppn <= _T_5 @[EmbeddedTLB.scala 105:31]
    node _T_6 = bits(_WIRE_3, 43, 20) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.res <= _T_6 @[EmbeddedTLB.scala 105:31]
    node _T_7 = bits(_WIRE_3, 59, 44) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.asid <= _T_7 @[EmbeddedTLB.scala 105:31]
    node _T_8 = bits(_WIRE_3, 63, 60) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.mode <= _T_8 @[EmbeddedTLB.scala 105:31]
    node _T_9 = eq(_WIRE_2.mode, UInt<4>("h8")) @[EmbeddedTLB.scala 105:49]
    node _T_10 = lt(io.csrMMU.priviledgeMode, UInt<2>("h3")) @[EmbeddedTLB.scala 105:86]
    node vmEnable = and(_T_9, _T_10) @[EmbeddedTLB.scala 105:57]
    tlbEmpty.io.in.bits.user is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.wdata is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.wmask is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.cmd is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.size is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.addr is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.valid is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.ready is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.out.ready is invalid @[EmbeddedTLB.scala 121:25]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 108:24]
    when tlbExec.io.isFinish : @[EmbeddedTLB.scala 109:25]
      REG <= UInt<1>("h0") @[EmbeddedTLB.scala 109:33]
    node _T_11 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 110:22]
    node _T_12 = and(_T_11, vmEnable) @[EmbeddedTLB.scala 110:37]
    when _T_12 : @[EmbeddedTLB.scala 110:50]
      REG <= UInt<1>("h1") @[EmbeddedTLB.scala 110:58]
    when io.flush : @[EmbeddedTLB.scala 111:20]
      REG <= UInt<1>("h0") @[EmbeddedTLB.scala 111:28]
    io.in.req.ready <= tlbExec.io.in.ready @[EmbeddedTLB.scala 113:16]
    node _T_13 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 114:51]
    reg r_1 : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when _T_13 : @[Reg.scala 16:19]
      r_1.user <= io.in.req.bits.user @[Reg.scala 16:23]
      r_1.wdata <= io.in.req.bits.wdata @[Reg.scala 16:23]
      r_1.wmask <= io.in.req.bits.wmask @[Reg.scala 16:23]
      r_1.cmd <= io.in.req.bits.cmd @[Reg.scala 16:23]
      r_1.size <= io.in.req.bits.size @[Reg.scala 16:23]
      r_1.addr <= io.in.req.bits.addr @[Reg.scala 16:23]
    tlbExec.io.in.bits.user <= r_1.user @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.wdata <= r_1.wdata @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.wmask <= r_1.wmask @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.cmd <= r_1.cmd @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.size <= r_1.size @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.addr <= r_1.addr @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.valid <= REG @[EmbeddedTLB.scala 115:17]
    node _T_14 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 117:26]
    mdUpdate <= _T_14 @[EmbeddedTLB.scala 117:12]
    node _T_15 = eq(vmEnable, UInt<1>("h0")) @[EmbeddedTLB.scala 126:8]
    when _T_15 : @[EmbeddedTLB.scala 126:19]
      tlbExec.io.out.ready <= UInt<1>("h1") @[EmbeddedTLB.scala 127:26]
      io.out.req.valid <= io.in.req.valid @[EmbeddedTLB.scala 129:22]
      io.in.req.ready <= io.out.req.ready @[EmbeddedTLB.scala 130:21]
      node _T_16 = bits(io.in.req.bits.addr, 31, 0) @[EmbeddedTLB.scala 131:48]
      io.out.req.bits.addr <= _T_16 @[EmbeddedTLB.scala 131:26]
      io.out.req.bits.size <= io.in.req.bits.size @[EmbeddedTLB.scala 132:26]
      io.out.req.bits.cmd <= io.in.req.bits.cmd @[EmbeddedTLB.scala 133:25]
      io.out.req.bits.wmask <= io.in.req.bits.wmask @[EmbeddedTLB.scala 134:27]
      io.out.req.bits.wdata <= io.in.req.bits.wdata @[EmbeddedTLB.scala 135:27]
      io.out.req.bits.user <= io.in.req.bits.user @[EmbeddedTLB.scala 136:32]
    else :
      io.out.req.bits.user <= tlbExec.io.out.bits.user @[EmbeddedTLB.scala 139:23]
      io.out.req.bits.wdata <= tlbExec.io.out.bits.wdata @[EmbeddedTLB.scala 139:23]
      io.out.req.bits.wmask <= tlbExec.io.out.bits.wmask @[EmbeddedTLB.scala 139:23]
      io.out.req.bits.cmd <= tlbExec.io.out.bits.cmd @[EmbeddedTLB.scala 139:23]
      io.out.req.bits.size <= tlbExec.io.out.bits.size @[EmbeddedTLB.scala 139:23]
      io.out.req.bits.addr <= tlbExec.io.out.bits.addr @[EmbeddedTLB.scala 139:23]
      io.out.req.valid <= tlbExec.io.out.valid @[EmbeddedTLB.scala 139:23]
      tlbExec.io.out.ready <= io.out.req.ready @[EmbeddedTLB.scala 139:23]
    io.in.resp.bits.user <= io.out.resp.bits.user @[EmbeddedTLB.scala 141:15]
    io.in.resp.bits.rdata <= io.out.resp.bits.rdata @[EmbeddedTLB.scala 141:15]
    io.in.resp.bits.cmd <= io.out.resp.bits.cmd @[EmbeddedTLB.scala 141:15]
    io.in.resp.valid <= io.out.resp.valid @[EmbeddedTLB.scala 141:15]
    io.out.resp.ready <= io.in.resp.ready @[EmbeddedTLB.scala 141:15]
    node _T_17 = and(tlbExec.io.ipf, vmEnable) @[EmbeddedTLB.scala 155:26]
    when _T_17 : @[EmbeddedTLB.scala 155:39]
      node _T_18 = and(io.cacheEmpty, io.in.resp.ready) @[EmbeddedTLB.scala 156:45]
      tlbExec.io.out.ready <= _T_18 @[EmbeddedTLB.scala 156:28]
      io.out.req.valid <= UInt<1>("h0") @[EmbeddedTLB.scala 157:24]
    node _T_19 = and(tlbExec.io.ipf, vmEnable) @[EmbeddedTLB.scala 160:26]
    node _T_20 = and(_T_19, io.cacheEmpty) @[EmbeddedTLB.scala 160:38]
    when _T_20 : @[EmbeddedTLB.scala 160:56]
      io.in.resp.valid <= UInt<1>("h1") @[EmbeddedTLB.scala 161:24]
      io.in.resp.bits.rdata <= UInt<1>("h0") @[EmbeddedTLB.scala 162:29]
      io.in.resp.bits.cmd <= UInt<3>("h6") @[EmbeddedTLB.scala 163:27]
      io.in.resp.bits.user <= tlbExec.io.in.bits.user @[EmbeddedTLB.scala 164:34]
      io.ipf <= tlbExec.io.ipf @[EmbeddedTLB.scala 165:14]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_21 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_22 = tail(_T_21, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_22 @[GTimer.scala 25:7]
    wire _WIRE_4 : UInt<1>
    _WIRE_4 <= UInt<1>("h0")
    node _T_23 = and(UInt<1>("h1"), _WIRE_4) @[Debug.scala 55:16]
    when _T_23 : @[Debug.scala 55:31]
      node _T_24 = asUInt(reset) @[Debug.scala 56:24]
      node _T_25 = eq(_T_24, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_25 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB: ", REG_1) : SIM @[Debug.scala 56:24]
      node _T_26 = asUInt(reset) @[Debug.scala 57:13]
      node _T_27 = eq(_T_26, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_27 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq(%d, %d) InResp(%d, %d) OutReq(%d, %d) OutResp(%d, %d) vmEnable:%d mode:%d\n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready, io.out.req.valid, io.out.req.ready, io.out.resp.valid, io.out.resp.ready, vmEnable, io.csrMMU.priviledgeMode) : SIM_1 @[Debug.scala 57:13]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_28 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_29 = tail(_T_28, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_29 @[GTimer.scala 25:7]
    wire _WIRE_5 : UInt<1>
    _WIRE_5 <= UInt<1>("h0")
    node _T_30 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
    when _T_30 : @[Debug.scala 55:31]
      node _T_31 = asUInt(reset) @[Debug.scala 56:24]
      node _T_32 = eq(_T_31, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_32 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB: ", REG_2) : SIM_2 @[Debug.scala 56:24]
      node _T_33 = asUInt(reset) @[Debug.scala 57:13]
      node _T_34 = eq(_T_33, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_34 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq: addr:%x cmd:%d wdata:%x OutReq: addr:%x cmd:%x wdata:%x\n", io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.wdata, io.out.req.bits.addr, io.out.req.bits.cmd, io.out.req.bits.wdata) : SIM_3 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_35 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_36 = tail(_T_35, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_36 @[GTimer.scala 25:7]
    wire _WIRE_6 : UInt<1>
    _WIRE_6 <= UInt<1>("h0")
    node _T_37 = and(UInt<1>("h1"), _WIRE_6) @[Debug.scala 55:16]
    when _T_37 : @[Debug.scala 55:31]
      node _T_38 = asUInt(reset) @[Debug.scala 56:24]
      node _T_39 = eq(_T_38, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_39 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB: ", REG_3) : SIM_4 @[Debug.scala 56:24]
      node _T_40 = asUInt(reset) @[Debug.scala 57:13]
      node _T_41 = eq(_T_40, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_41 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "OutResp: rdata:%x cmd:%x Inresp: rdata:%x cmd:%x\n", io.out.resp.bits.rdata, io.out.resp.bits.cmd, io.in.resp.bits.rdata, io.in.resp.bits.cmd) : SIM_5 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_42 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_43 = tail(_T_42, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_43 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_44 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
    when _T_44 : @[Debug.scala 55:31]
      node _T_45 = asUInt(reset) @[Debug.scala 56:24]
      node _T_46 = eq(_T_45, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_46 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB: ", REG_4) : SIM_6 @[Debug.scala 56:24]
      node _T_47 = asUInt(reset) @[Debug.scala 57:13]
      node _T_48 = eq(_T_47, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_48 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "satp:%x flush:%d cacheEmpty:%d instrPF:%d loadPF:%d storePF:%d \n", satp, io.flush, io.cacheEmpty, io.ipf, io.csrMMU.loadPF, io.csrMMU.storePF) : SIM_7 @[Debug.scala 57:13]

  module CacheStage1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}}, metaReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}}

    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    when _T : @[Cache.scala 137:31]
      node _T_1 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
      node _T_2 = eq(_T_1, UInt<1>("h0")) @[Cache.scala 137:40]
      node _T_3 = asUInt(reset) @[Cache.scala 137:39]
      node _T_4 = or(_T_2, _T_3) @[Cache.scala 137:39]
      node _T_5 = eq(_T_4, UInt<1>("h0")) @[Cache.scala 137:39]
      when _T_5 : @[Cache.scala 137:39]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:137 if (ro) when (io.in.fire()) { assert(!io.in.bits.isWrite()) }\n") : SIM @[Cache.scala 137:39]
        stop(clock, UInt<1>("h1"), 1) @[Cache.scala 137:39]
    node _T_6 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_7 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_8 = tail(_T_7, 1) @[GTimer.scala 25:12]
    REG <= _T_8 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_9 = and(_T_6, _WIRE) @[Debug.scala 55:16]
    when _T_9 : @[Debug.scala 55:31]
      node _T_10 = asUInt(reset) @[Debug.scala 56:24]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_11 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1: ", REG) : SIM_1 @[Debug.scala 56:24]
      node _T_12 = asUInt(reset) @[Debug.scala 57:13]
      node _T_13 = eq(_T_12, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_13 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, io.in.bits.user, UInt<1>("h0")) : SIM_2 @[Debug.scala 57:13]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 141:34]
    wire _WIRE_1 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_2 : UInt<32>
    _WIRE_2 <= io.in.bits.addr
    node _T_14 = bits(_WIRE_2, 2, 0) @[Cache.scala 79:45]
    _WIRE_1.byteOffset <= _T_14 @[Cache.scala 79:45]
    node _T_15 = bits(_WIRE_2, 5, 3) @[Cache.scala 79:45]
    _WIRE_1.wordIndex <= _T_15 @[Cache.scala 79:45]
    node _T_16 = bits(_WIRE_2, 12, 6) @[Cache.scala 79:45]
    _WIRE_1.index <= _T_16 @[Cache.scala 79:45]
    node _T_17 = bits(_WIRE_2, 31, 13) @[Cache.scala 79:45]
    _WIRE_1.tag <= _T_17 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _WIRE_1.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _WIRE_3 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _WIRE_4 : UInt<32>
    _WIRE_4 <= io.in.bits.addr
    node _T_18 = bits(_WIRE_4, 2, 0) @[Cache.scala 80:49]
    _WIRE_3.byteOffset <= _T_18 @[Cache.scala 80:49]
    node _T_19 = bits(_WIRE_4, 5, 3) @[Cache.scala 80:49]
    _WIRE_3.wordIndex <= _T_19 @[Cache.scala 80:49]
    node _T_20 = bits(_WIRE_4, 12, 6) @[Cache.scala 80:49]
    _WIRE_3.index <= _T_20 @[Cache.scala 80:49]
    node _T_21 = bits(_WIRE_4, 31, 13) @[Cache.scala 80:49]
    _WIRE_3.tag <= _T_21 @[Cache.scala 80:49]
    wire _WIRE_5 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _WIRE_6 : UInt<32>
    _WIRE_6 <= io.in.bits.addr
    node _T_22 = bits(_WIRE_6, 2, 0) @[Cache.scala 80:82]
    _WIRE_5.byteOffset <= _T_22 @[Cache.scala 80:82]
    node _T_23 = bits(_WIRE_6, 5, 3) @[Cache.scala 80:82]
    _WIRE_5.wordIndex <= _T_23 @[Cache.scala 80:82]
    node _T_24 = bits(_WIRE_6, 12, 6) @[Cache.scala 80:82]
    _WIRE_5.index <= _T_24 @[Cache.scala 80:82]
    node _T_25 = bits(_WIRE_6, 31, 13) @[Cache.scala 80:82]
    _WIRE_5.tag <= _T_25 @[Cache.scala 80:82]
    node _T_26 = cat(_WIRE_3.index, _WIRE_5.wordIndex) @[Cat.scala 30:58]
    io.dataReadBus.req.bits.setIdx <= _T_26 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req.user <= io.in.bits.user @[Cache.scala 145:19]
    io.out.bits.req.wdata <= io.in.bits.wdata @[Cache.scala 145:19]
    io.out.bits.req.wmask <= io.in.bits.wmask @[Cache.scala 145:19]
    io.out.bits.req.cmd <= io.in.bits.cmd @[Cache.scala 145:19]
    io.out.bits.req.size <= io.in.bits.size @[Cache.scala 145:19]
    io.out.bits.req.addr <= io.in.bits.addr @[Cache.scala 145:19]
    node _T_27 = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 146:31]
    node _T_28 = and(_T_27, io.dataReadBus.req.ready) @[Cache.scala 146:59]
    io.out.valid <= _T_28 @[Cache.scala 146:16]
    node _T_29 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 147:19]
    node _T_30 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_31 = or(_T_29, _T_30) @[Cache.scala 147:32]
    node _T_32 = and(_T_31, io.metaReadBus.req.ready) @[Cache.scala 147:50]
    node _T_33 = and(_T_32, io.dataReadBus.req.ready) @[Cache.scala 147:78]
    io.in.ready <= _T_33 @[Cache.scala 147:15]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_34 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_35 = tail(_T_34, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_35 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_36 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
    when _T_36 : @[Debug.scala 55:31]
      node _T_37 = asUInt(reset) @[Debug.scala 56:24]
      node _T_38 = eq(_T_37, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_38 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1: ", REG_1) : SIM_3 @[Debug.scala 56:24]
      node _T_39 = asUInt(reset) @[Debug.scala 57:13]
      node _T_40 = eq(_T_39, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_40 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) : SIM_4 @[Debug.scala 57:13]

  module CacheStage2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : { data : UInt<64>}[4], flip metaWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    wire addr : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 176:31]
    wire _WIRE : UInt<32>
    _WIRE <= io.in.bits.req.addr
    node _T = bits(_WIRE, 2, 0) @[Cache.scala 176:31]
    addr.byteOffset <= _T @[Cache.scala 176:31]
    node _T_1 = bits(_WIRE, 5, 3) @[Cache.scala 176:31]
    addr.wordIndex <= _T_1 @[Cache.scala 176:31]
    node _T_2 = bits(_WIRE, 12, 6) @[Cache.scala 176:31]
    addr.index <= _T_2 @[Cache.scala 176:31]
    node _T_3 = bits(_WIRE, 31, 13) @[Cache.scala 176:31]
    addr.tag <= _T_3 @[Cache.scala 176:31]
    node _T_4 = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 178:35]
    wire _WIRE_1 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_2 : UInt<32>
    _WIRE_2 <= io.in.bits.req.addr
    node _T_5 = bits(_WIRE_2, 2, 0) @[Cache.scala 79:45]
    _WIRE_1.byteOffset <= _T_5 @[Cache.scala 79:45]
    node _T_6 = bits(_WIRE_2, 5, 3) @[Cache.scala 79:45]
    _WIRE_1.wordIndex <= _T_6 @[Cache.scala 79:45]
    node _T_7 = bits(_WIRE_2, 12, 6) @[Cache.scala 79:45]
    _WIRE_1.index <= _T_7 @[Cache.scala 79:45]
    node _T_8 = bits(_WIRE_2, 31, 13) @[Cache.scala 79:45]
    _WIRE_1.tag <= _T_8 @[Cache.scala 79:45]
    node _T_9 = eq(io.metaWriteBus.req.bits.setIdx, _WIRE_1.index) @[Cache.scala 178:99]
    node isForwardMeta = and(_T_4, _T_9) @[Cache.scala 178:64]
    reg isForwardMetaReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 179:33]
    when isForwardMeta : @[Cache.scala 180:24]
      isForwardMetaReg <= UInt<1>("h1") @[Cache.scala 180:43]
    node _T_10 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_11 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 181:25]
    node _T_12 = or(_T_10, _T_11) @[Cache.scala 181:22]
    when _T_12 : @[Cache.scala 181:39]
      isForwardMetaReg <= UInt<1>("h0") @[Cache.scala 181:58]
    reg forwardMetaReg : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardMetaReg) @[Reg.scala 15:16]
    when isForwardMeta : @[Reg.scala 16:19]
      forwardMetaReg.waymask <= io.metaWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardMetaReg.data.dirty <= io.metaWriteBus.req.bits.data.dirty @[Reg.scala 16:23]
      forwardMetaReg.data.valid <= io.metaWriteBus.req.bits.data.valid @[Reg.scala 16:23]
      forwardMetaReg.data.tag <= io.metaWriteBus.req.bits.data.tag @[Reg.scala 16:23]
      forwardMetaReg.setIdx <= io.metaWriteBus.req.bits.setIdx @[Reg.scala 16:23]
    wire metaWay : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 184:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 185:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 186:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 187:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 187:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 187:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 187:61]
    node _T_13 = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 189:39]
    node _T_14 = mux(_T_13, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 189:22]
    metaWay[0].dirty <= _T_14.dirty @[Cache.scala 189:16]
    metaWay[0].valid <= _T_14.valid @[Cache.scala 189:16]
    metaWay[0].tag <= _T_14.tag @[Cache.scala 189:16]
    node _T_15 = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 189:39]
    node _T_16 = mux(_T_15, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 189:22]
    metaWay[1].dirty <= _T_16.dirty @[Cache.scala 189:16]
    metaWay[1].valid <= _T_16.valid @[Cache.scala 189:16]
    metaWay[1].tag <= _T_16.tag @[Cache.scala 189:16]
    node _T_17 = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 189:39]
    node _T_18 = mux(_T_17, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 189:22]
    metaWay[2].dirty <= _T_18.dirty @[Cache.scala 189:16]
    metaWay[2].valid <= _T_18.valid @[Cache.scala 189:16]
    metaWay[2].tag <= _T_18.tag @[Cache.scala 189:16]
    node _T_19 = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 189:39]
    node _T_20 = mux(_T_19, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 189:22]
    metaWay[3].dirty <= _T_20.dirty @[Cache.scala 189:16]
    metaWay[3].valid <= _T_20.valid @[Cache.scala 189:16]
    metaWay[3].tag <= _T_20.tag @[Cache.scala 189:16]
    node _T_21 = eq(metaWay[0].tag, addr.tag) @[Cache.scala 192:59]
    node _T_22 = and(metaWay[0].valid, _T_21) @[Cache.scala 192:49]
    node _T_23 = and(_T_22, io.in.valid) @[Cache.scala 192:73]
    node _T_24 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 192:59]
    node _T_25 = and(metaWay[1].valid, _T_24) @[Cache.scala 192:49]
    node _T_26 = and(_T_25, io.in.valid) @[Cache.scala 192:73]
    node _T_27 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 192:59]
    node _T_28 = and(metaWay[2].valid, _T_27) @[Cache.scala 192:49]
    node _T_29 = and(_T_28, io.in.valid) @[Cache.scala 192:73]
    node _T_30 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 192:59]
    node _T_31 = and(metaWay[3].valid, _T_30) @[Cache.scala 192:49]
    node _T_32 = and(_T_31, io.in.valid) @[Cache.scala 192:73]
    wire _WIRE_3 : UInt<1>[4] @[Cache.scala 192:23]
    _WIRE_3[0] <= _T_23 @[Cache.scala 192:23]
    _WIRE_3[1] <= _T_26 @[Cache.scala 192:23]
    _WIRE_3[2] <= _T_29 @[Cache.scala 192:23]
    _WIRE_3[3] <= _T_32 @[Cache.scala 192:23]
    node lo = cat(_WIRE_3[1], _WIRE_3[0]) @[Cache.scala 192:90]
    node hi = cat(_WIRE_3[3], _WIRE_3[2]) @[Cache.scala 192:90]
    node hitVec = cat(hi, lo) @[Cache.scala 192:90]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1234567887654321")) @[LFSR64.scala 25:23]
    node _T_33 = bits(REG, 0, 0) @[LFSR64.scala 26:19]
    node _T_34 = bits(REG, 1, 1) @[LFSR64.scala 26:29]
    node _T_35 = xor(_T_33, _T_34) @[LFSR64.scala 26:23]
    node _T_36 = bits(REG, 3, 3) @[LFSR64.scala 26:39]
    node _T_37 = xor(_T_35, _T_36) @[LFSR64.scala 26:33]
    node _T_38 = bits(REG, 4, 4) @[LFSR64.scala 26:49]
    node _T_39 = xor(_T_37, _T_38) @[LFSR64.scala 26:43]
    when UInt<1>("h1") : @[LFSR64.scala 27:22]
      node _T_40 = eq(REG, UInt<1>("h0")) @[LFSR64.scala 28:24]
      node _T_41 = bits(REG, 63, 1) @[LFSR64.scala 28:51]
      node _T_42 = cat(_T_39, _T_41) @[Cat.scala 30:58]
      node _T_43 = mux(_T_40, UInt<1>("h1"), _T_42) @[LFSR64.scala 28:18]
      REG <= _T_43 @[LFSR64.scala 28:12]
    node _T_44 = bits(REG, 1, 0) @[Cache.scala 193:53]
    node victimWaymask = dshl(UInt<1>("h1"), _T_44) @[Cache.scala 193:42]
    node _T_45 = eq(metaWay[0].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_46 = eq(metaWay[1].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_47 = eq(metaWay[2].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_48 = eq(metaWay[3].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    wire _WIRE_4 : UInt<1>[4] @[Cache.scala 195:27]
    _WIRE_4[0] <= _T_45 @[Cache.scala 195:27]
    _WIRE_4[1] <= _T_46 @[Cache.scala 195:27]
    _WIRE_4[2] <= _T_47 @[Cache.scala 195:27]
    _WIRE_4[3] <= _T_48 @[Cache.scala 195:27]
    node lo_1 = cat(_WIRE_4[1], _WIRE_4[0]) @[Cache.scala 195:56]
    node hi_1 = cat(_WIRE_4[3], _WIRE_4[2]) @[Cache.scala 195:56]
    node invalidVec = cat(hi_1, lo_1) @[Cache.scala 195:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 196:34]
    node _T_49 = geq(invalidVec, UInt<4>("h8")) @[Cache.scala 197:45]
    node _T_50 = geq(invalidVec, UInt<3>("h4")) @[Cache.scala 198:20]
    node _T_51 = geq(invalidVec, UInt<2>("h2")) @[Cache.scala 199:20]
    node _T_52 = mux(_T_51, UInt<2>("h2"), UInt<1>("h1")) @[Cache.scala 199:8]
    node _T_53 = mux(_T_50, UInt<3>("h4"), _T_52) @[Cache.scala 198:8]
    node refillInvalidWaymask = mux(_T_49, UInt<4>("h8"), _T_53) @[Cache.scala 197:33]
    node _T_54 = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 202:49]
    node waymask = mux(io.out.bits.hit, hitVec, _T_54) @[Cache.scala 202:20]
    node _T_55 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_56 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_57 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_58 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_59 = add(_T_55, _T_56) @[Bitwise.scala 47:55]
    node _T_60 = bits(_T_59, 1, 0) @[Bitwise.scala 47:55]
    node _T_61 = add(_T_57, _T_58) @[Bitwise.scala 47:55]
    node _T_62 = bits(_T_61, 1, 0) @[Bitwise.scala 47:55]
    node _T_63 = add(_T_60, _T_62) @[Bitwise.scala 47:55]
    node _T_64 = bits(_T_63, 2, 0) @[Bitwise.scala 47:55]
    node _T_65 = gt(_T_64, UInt<1>("h1")) @[Cache.scala 203:26]
    when _T_65 : @[Cache.scala 203:32]
      reg REG_1 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_66 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_67 = tail(_T_66, 1) @[GTimer.scala 25:12]
      REG_1 <= _T_67 @[GTimer.scala 25:7]
      wire _WIRE_5 : UInt<1>
      _WIRE_5 <= UInt<1>("h0")
      node _T_68 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
      when _T_68 : @[Debug.scala 55:31]
        node _T_69 = asUInt(reset) @[Debug.scala 56:24]
        node _T_70 = eq(_T_69, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_70 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_1) : SIM @[Debug.scala 56:24]
        node _T_71 = asUInt(reset) @[Debug.scala 57:13]
        node _T_72 = eq(_T_71, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_72 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) : SIM_1 @[Debug.scala 57:13]
      reg REG_2 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_73 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_74 = tail(_T_73, 1) @[GTimer.scala 25:12]
      REG_2 <= _T_74 @[GTimer.scala 25:7]
      wire _WIRE_6 : UInt<1>
      _WIRE_6 <= UInt<1>("h0")
      node _T_75 = and(UInt<1>("h1"), _WIRE_6) @[Debug.scala 55:16]
      when _T_75 : @[Debug.scala 55:31]
        node _T_76 = asUInt(reset) @[Debug.scala 56:24]
        node _T_77 = eq(_T_76, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_77 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_2) : SIM_2 @[Debug.scala 56:24]
        node _T_78 = asUInt(reset) @[Debug.scala 57:13]
        node _T_79 = eq(_T_78, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_79 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) : SIM_3 @[Debug.scala 57:13]
      reg REG_3 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_80 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_81 = tail(_T_80, 1) @[GTimer.scala 25:12]
      REG_3 <= _T_81 @[GTimer.scala 25:7]
      wire _WIRE_7 : UInt<1>
      _WIRE_7 <= UInt<1>("h0")
      node _T_82 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
      when _T_82 : @[Debug.scala 55:31]
        node _T_83 = asUInt(reset) @[Debug.scala 56:24]
        node _T_84 = eq(_T_83, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_84 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_3) : SIM_4 @[Debug.scala 56:24]
        node _T_85 = asUInt(reset) @[Debug.scala 57:13]
        node _T_86 = eq(_T_85, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_86 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) : SIM_5 @[Debug.scala 57:13]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_87 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_88 = tail(_T_87, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_88 @[GTimer.scala 25:7]
      wire _WIRE_8 : UInt<1>
      _WIRE_8 <= UInt<1>("h0")
      node _T_89 = and(UInt<1>("h1"), _WIRE_8) @[Debug.scala 55:16]
      when _T_89 : @[Debug.scala 55:31]
        node _T_90 = asUInt(reset) @[Debug.scala 56:24]
        node _T_91 = eq(_T_90, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_91 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_4) : SIM_6 @[Debug.scala 56:24]
        node _T_92 = asUInt(reset) @[Debug.scala 57:13]
        node _T_93 = eq(_T_92, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_93 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) : SIM_7 @[Debug.scala 57:13]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_94 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_95 = tail(_T_94, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_95 @[GTimer.scala 25:7]
      wire _WIRE_9 : UInt<1>
      _WIRE_9 <= UInt<1>("h0")
      node _T_96 = and(UInt<1>("h1"), _WIRE_9) @[Debug.scala 55:16]
      when _T_96 : @[Debug.scala 55:31]
        node _T_97 = asUInt(reset) @[Debug.scala 56:24]
        node _T_98 = eq(_T_97, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_98 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_5) : SIM_8 @[Debug.scala 56:24]
        node _T_99 = asUInt(reset) @[Debug.scala 57:13]
        node _T_100 = eq(_T_99, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_100 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) : SIM_9 @[Debug.scala 57:13]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_101 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_102 = tail(_T_101, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_102 @[GTimer.scala 25:7]
      wire _WIRE_10 : UInt<1>
      _WIRE_10 <= UInt<1>("h0")
      node _T_103 = and(UInt<1>("h1"), _WIRE_10) @[Debug.scala 55:16]
      when _T_103 : @[Debug.scala 55:31]
        node _T_104 = asUInt(reset) @[Debug.scala 56:24]
        node _T_105 = eq(_T_104, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_105 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_6) : SIM_10 @[Debug.scala 56:24]
        node _T_106 = asUInt(reset) @[Debug.scala 57:13]
        node _T_107 = eq(_T_106, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_107 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) : SIM_11 @[Debug.scala 57:13]
      reg REG_7 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_108 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_109 = tail(_T_108, 1) @[GTimer.scala 25:12]
      REG_7 <= _T_109 @[GTimer.scala 25:7]
      wire _WIRE_11 : UInt<1>
      _WIRE_11 <= UInt<1>("h0")
      node _T_110 = and(UInt<1>("h1"), _WIRE_11) @[Debug.scala 55:16]
      when _T_110 : @[Debug.scala 55:31]
        node _T_111 = asUInt(reset) @[Debug.scala 56:24]
        node _T_112 = eq(_T_111, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_112 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_7) : SIM_12 @[Debug.scala 56:24]
        node _T_113 = asUInt(reset) @[Debug.scala 57:13]
        node _T_114 = eq(_T_113, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_114 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) : SIM_13 @[Debug.scala 57:13]
      reg REG_8 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_115 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_116 = tail(_T_115, 1) @[GTimer.scala 25:12]
      REG_8 <= _T_116 @[GTimer.scala 25:7]
      wire _WIRE_12 : UInt<1>
      _WIRE_12 <= UInt<1>("h0")
      node _T_117 = and(UInt<1>("h1"), _WIRE_12) @[Debug.scala 55:16]
      when _T_117 : @[Debug.scala 55:31]
        node _T_118 = asUInt(reset) @[Debug.scala 56:24]
        node _T_119 = eq(_T_118, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_119 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_8) : SIM_14 @[Debug.scala 56:24]
        node _T_120 = asUInt(reset) @[Debug.scala 57:13]
        node _T_121 = eq(_T_120, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_121 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) : SIM_15 @[Debug.scala 57:13]
      reg REG_9 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_122 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_123 = tail(_T_122, 1) @[GTimer.scala 25:12]
      REG_9 <= _T_123 @[GTimer.scala 25:7]
      wire _WIRE_13 : UInt<1>
      _WIRE_13 <= UInt<1>("h0")
      node _T_124 = and(UInt<1>("h1"), _WIRE_13) @[Debug.scala 55:16]
      when _T_124 : @[Debug.scala 55:31]
        node _T_125 = asUInt(reset) @[Debug.scala 56:24]
        node _T_126 = eq(_T_125, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_126 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_9) : SIM_16 @[Debug.scala 56:24]
        node _T_127 = asUInt(reset) @[Debug.scala 57:13]
        node _T_128 = eq(_T_127, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_128 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) : SIM_17 @[Debug.scala 57:13]
      reg REG_10 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_129 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_130 = tail(_T_129, 1) @[GTimer.scala 25:12]
      REG_10 <= _T_130 @[GTimer.scala 25:7]
      wire _WIRE_14 : UInt<1>
      _WIRE_14 <= UInt<1>("h0")
      node _T_131 = and(UInt<1>("h1"), _WIRE_14) @[Debug.scala 55:16]
      when _T_131 : @[Debug.scala 55:31]
        node _T_132 = asUInt(reset) @[Debug.scala 56:24]
        node _T_133 = eq(_T_132, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_133 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_10) : SIM_18 @[Debug.scala 56:24]
        node _T_134 = asUInt(reset) @[Debug.scala 57:13]
        node _T_135 = eq(_T_134, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_135 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) : SIM_19 @[Debug.scala 57:13]
    node _T_136 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_137 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_138 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_139 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_140 = add(_T_136, _T_137) @[Bitwise.scala 47:55]
    node _T_141 = bits(_T_140, 1, 0) @[Bitwise.scala 47:55]
    node _T_142 = add(_T_138, _T_139) @[Bitwise.scala 47:55]
    node _T_143 = bits(_T_142, 1, 0) @[Bitwise.scala 47:55]
    node _T_144 = add(_T_141, _T_143) @[Bitwise.scala 47:55]
    node _T_145 = bits(_T_144, 2, 0) @[Bitwise.scala 47:55]
    node _T_146 = gt(_T_145, UInt<1>("h1")) @[Cache.scala 209:26]
    when _T_146 : @[Cache.scala 209:32]
      reg REG_11 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_147 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_148 = tail(_T_147, 1) @[GTimer.scala 25:12]
      REG_11 <= _T_148 @[GTimer.scala 25:7]
      wire _WIRE_15 : UInt<1>
      _WIRE_15 <= UInt<1>("h0")
      node _T_149 = and(UInt<1>("h1"), _WIRE_15) @[Debug.scala 55:16]
      when _T_149 : @[Debug.scala 55:31]
        node _T_150 = asUInt(reset) @[Debug.scala 56:24]
        node _T_151 = eq(_T_150, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_151 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_11) : SIM_20 @[Debug.scala 56:24]
        node _T_152 = asUInt(reset) @[Debug.scala 57:13]
        node _T_153 = eq(_T_152, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_153 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) : SIM_21 @[Debug.scala 57:13]
    node _T_154 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_155 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_156 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_157 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_158 = add(_T_154, _T_155) @[Bitwise.scala 47:55]
    node _T_159 = bits(_T_158, 1, 0) @[Bitwise.scala 47:55]
    node _T_160 = add(_T_156, _T_157) @[Bitwise.scala 47:55]
    node _T_161 = bits(_T_160, 1, 0) @[Bitwise.scala 47:55]
    node _T_162 = add(_T_159, _T_161) @[Bitwise.scala 47:55]
    node _T_163 = bits(_T_162, 2, 0) @[Bitwise.scala 47:55]
    node _T_164 = gt(_T_163, UInt<1>("h1")) @[Cache.scala 210:45]
    node _T_165 = and(io.in.valid, _T_164) @[Cache.scala 210:24]
    node _T_166 = eq(_T_165, UInt<1>("h0")) @[Cache.scala 210:10]
    node _T_167 = asUInt(reset) @[Cache.scala 210:9]
    node _T_168 = or(_T_166, _T_167) @[Cache.scala 210:9]
    node _T_169 = eq(_T_168, UInt<1>("h0")) @[Cache.scala 210:9]
    when _T_169 : @[Cache.scala 210:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:210 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") : SIM_22 @[Cache.scala 210:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 210:9]
    io.out.bits.metas[0].dirty <= metaWay[0].dirty @[Cache.scala 212:21]
    io.out.bits.metas[0].valid <= metaWay[0].valid @[Cache.scala 212:21]
    io.out.bits.metas[0].tag <= metaWay[0].tag @[Cache.scala 212:21]
    io.out.bits.metas[1].dirty <= metaWay[1].dirty @[Cache.scala 212:21]
    io.out.bits.metas[1].valid <= metaWay[1].valid @[Cache.scala 212:21]
    io.out.bits.metas[1].tag <= metaWay[1].tag @[Cache.scala 212:21]
    io.out.bits.metas[2].dirty <= metaWay[2].dirty @[Cache.scala 212:21]
    io.out.bits.metas[2].valid <= metaWay[2].valid @[Cache.scala 212:21]
    io.out.bits.metas[2].tag <= metaWay[2].tag @[Cache.scala 212:21]
    io.out.bits.metas[3].dirty <= metaWay[3].dirty @[Cache.scala 212:21]
    io.out.bits.metas[3].valid <= metaWay[3].valid @[Cache.scala 212:21]
    io.out.bits.metas[3].tag <= metaWay[3].tag @[Cache.scala 212:21]
    node _T_170 = orr(hitVec) @[Cache.scala 213:44]
    node _T_171 = and(io.in.valid, _T_170) @[Cache.scala 213:34]
    io.out.bits.hit <= _T_171 @[Cache.scala 213:19]
    io.out.bits.waymask <= waymask @[Cache.scala 214:23]
    io.out.bits.datas[0].data <= io.dataReadResp[0].data @[Cache.scala 215:21]
    io.out.bits.datas[1].data <= io.dataReadResp[1].data @[Cache.scala 215:21]
    io.out.bits.datas[2].data <= io.dataReadResp[2].data @[Cache.scala 215:21]
    io.out.bits.datas[3].data <= io.dataReadResp[3].data @[Cache.scala 215:21]
    node _T_172 = xor(io.in.bits.req.addr, UInt<30>("h30000000")) @[NutCore.scala 86:11]
    node _T_173 = bits(_T_172, 31, 28) @[NutCore.scala 86:24]
    node _T_174 = eq(_T_173, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_175 = xor(io.in.bits.req.addr, UInt<31>("h40000000")) @[NutCore.scala 86:11]
    node _T_176 = bits(_T_175, 31, 30) @[NutCore.scala 86:24]
    node _T_177 = eq(_T_176, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_178 = or(_T_174, _T_177) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _T_178 @[Cache.scala 216:20]
    wire _WIRE_16 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _WIRE_17 : UInt<32>
    _WIRE_17 <= io.in.bits.req.addr
    node _T_179 = bits(_WIRE_17, 2, 0) @[Cache.scala 80:49]
    _WIRE_16.byteOffset <= _T_179 @[Cache.scala 80:49]
    node _T_180 = bits(_WIRE_17, 5, 3) @[Cache.scala 80:49]
    _WIRE_16.wordIndex <= _T_180 @[Cache.scala 80:49]
    node _T_181 = bits(_WIRE_17, 12, 6) @[Cache.scala 80:49]
    _WIRE_16.index <= _T_181 @[Cache.scala 80:49]
    node _T_182 = bits(_WIRE_17, 31, 13) @[Cache.scala 80:49]
    _WIRE_16.tag <= _T_182 @[Cache.scala 80:49]
    wire _WIRE_18 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _WIRE_19 : UInt<32>
    _WIRE_19 <= io.in.bits.req.addr
    node _T_183 = bits(_WIRE_19, 2, 0) @[Cache.scala 80:82]
    _WIRE_18.byteOffset <= _T_183 @[Cache.scala 80:82]
    node _T_184 = bits(_WIRE_19, 5, 3) @[Cache.scala 80:82]
    _WIRE_18.wordIndex <= _T_184 @[Cache.scala 80:82]
    node _T_185 = bits(_WIRE_19, 12, 6) @[Cache.scala 80:82]
    _WIRE_18.index <= _T_185 @[Cache.scala 80:82]
    node _T_186 = bits(_WIRE_19, 31, 13) @[Cache.scala 80:82]
    _WIRE_18.tag <= _T_186 @[Cache.scala 80:82]
    node _T_187 = cat(_WIRE_16.index, _WIRE_18.wordIndex) @[Cat.scala 30:58]
    node _T_188 = eq(io.dataWriteBus.req.bits.setIdx, _T_187) @[Cache.scala 219:30]
    node _T_189 = and(io.dataWriteBus.req.valid, _T_188) @[Cache.scala 219:13]
    node isForwardData = and(io.in.valid, _T_189) @[Cache.scala 218:35]
    reg isForwardDataReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 221:33]
    when isForwardData : @[Cache.scala 222:24]
      isForwardDataReg <= UInt<1>("h1") @[Cache.scala 222:43]
    node _T_190 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_191 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 223:25]
    node _T_192 = or(_T_190, _T_191) @[Cache.scala 223:22]
    when _T_192 : @[Cache.scala 223:39]
      isForwardDataReg <= UInt<1>("h0") @[Cache.scala 223:58]
    reg forwardDataReg : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardDataReg) @[Reg.scala 15:16]
    when isForwardData : @[Reg.scala 16:19]
      forwardDataReg.waymask <= io.dataWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardDataReg.data.data <= io.dataWriteBus.req.bits.data.data @[Reg.scala 16:23]
      forwardDataReg.setIdx <= io.dataWriteBus.req.bits.setIdx @[Reg.scala 16:23]
    node _T_193 = or(isForwardDataReg, isForwardData) @[Cache.scala 225:49]
    io.out.bits.isForwardData <= _T_193 @[Cache.scala 225:29]
    node _T_194 = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 226:33]
    io.out.bits.forwardData.waymask <= _T_194.waymask @[Cache.scala 226:27]
    io.out.bits.forwardData.data.data <= _T_194.data.data @[Cache.scala 226:27]
    io.out.bits.forwardData.setIdx <= _T_194.setIdx @[Cache.scala 226:27]
    io.out.bits.req.user <= io.in.bits.req.user @[Cache.scala 228:19]
    io.out.bits.req.wdata <= io.in.bits.req.wdata @[Cache.scala 228:19]
    io.out.bits.req.wmask <= io.in.bits.req.wmask @[Cache.scala 228:19]
    io.out.bits.req.cmd <= io.in.bits.req.cmd @[Cache.scala 228:19]
    io.out.bits.req.size <= io.in.bits.req.size @[Cache.scala 228:19]
    io.out.bits.req.addr <= io.in.bits.req.addr @[Cache.scala 228:19]
    io.out.valid <= io.in.valid @[Cache.scala 229:16]
    node _T_195 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 230:18]
    node _T_196 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_197 = or(_T_195, _T_196) @[Cache.scala 230:31]
    io.in.ready <= _T_197 @[Cache.scala 230:15]
    node _T_198 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG_12 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_199 = add(REG_12, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_200 = tail(_T_199, 1) @[GTimer.scala 25:12]
    REG_12 <= _T_200 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_201 = and(UInt<1>("h1"), _WIRE_20) @[Debug.scala 55:16]
    when _T_201 : @[Debug.scala 55:31]
      node _T_202 = asUInt(reset) @[Debug.scala 56:24]
      node _T_203 = eq(_T_202, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_203 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_12) : SIM_23 @[Debug.scala 56:24]
      node _T_204 = asUInt(reset) @[Debug.scala 57:13]
      node _T_205 = eq(_T_204, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_205 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_198, io.in.valid) : SIM_24 @[Debug.scala 57:13]
    wire _WIRE_21 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_22 : UInt<32>
    _WIRE_22 <= io.in.bits.req.addr
    node _T_206 = bits(_WIRE_22, 2, 0) @[Cache.scala 79:45]
    _WIRE_21.byteOffset <= _T_206 @[Cache.scala 79:45]
    node _T_207 = bits(_WIRE_22, 5, 3) @[Cache.scala 79:45]
    _WIRE_21.wordIndex <= _T_207 @[Cache.scala 79:45]
    node _T_208 = bits(_WIRE_22, 12, 6) @[Cache.scala 79:45]
    _WIRE_21.index <= _T_208 @[Cache.scala 79:45]
    node _T_209 = bits(_WIRE_22, 31, 13) @[Cache.scala 79:45]
    _WIRE_21.tag <= _T_209 @[Cache.scala 79:45]
    reg REG_13 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_210 = add(REG_13, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_211 = tail(_T_210, 1) @[GTimer.scala 25:12]
    REG_13 <= _T_211 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_212 = and(UInt<1>("h1"), _WIRE_23) @[Debug.scala 55:16]
    when _T_212 : @[Debug.scala 55:31]
      node _T_213 = asUInt(reset) @[Debug.scala 56:24]
      node _T_214 = eq(_T_213, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_214 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", REG_13) : SIM_25 @[Debug.scala 56:24]
      node _T_215 = asUInt(reset) @[Debug.scala 57:13]
      node _T_216 = eq(_T_215, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_216 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _WIRE_21.index) : SIM_26 @[Debug.scala 57:13]

  module Arbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.dirty <= io.in[1].bits.data.dirty @[Arbiter.scala 124:15]
    io.out.bits.data.valid <= io.in[1].bits.data.valid @[Arbiter.scala 124:15]
    io.out.bits.data.tag <= io.in[1].bits.data.tag @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.dirty <= io.in[0].bits.data.dirty @[Arbiter.scala 128:19]
      io.out.bits.data.valid <= io.in[0].bits.data.valid @[Arbiter.scala 128:19]
      io.out.bits.data.tag <= io.in[0].bits.data.tag @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module Arbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.data <= io.in[1].bits.data.data @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.data <= io.in[0].bits.data.data @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module CacheStage3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}, dataWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}

    inst metaWriteArb of Arbiter @[Cache.scala 256:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_1 @[Cache.scala 257:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 260:31]
    wire _WIRE : UInt<32>
    _WIRE <= io.in.bits.req.addr
    node _T = bits(_WIRE, 2, 0) @[Cache.scala 260:31]
    addr.byteOffset <= _T @[Cache.scala 260:31]
    node _T_1 = bits(_WIRE, 5, 3) @[Cache.scala 260:31]
    addr.wordIndex <= _T_1 @[Cache.scala 260:31]
    node _T_2 = bits(_WIRE, 12, 6) @[Cache.scala 260:31]
    addr.index <= _T_2 @[Cache.scala 260:31]
    node _T_3 = bits(_WIRE, 31, 13) @[Cache.scala 260:31]
    addr.tag <= _T_3 @[Cache.scala 260:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 261:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 262:25]
    node _T_4 = eq(io.in.bits.hit, UInt<1>("h0")) @[Cache.scala 263:29]
    node miss = and(io.in.valid, _T_4) @[Cache.scala 263:26]
    node _T_5 = and(io.in.valid, UInt<1>("h0")) @[Cache.scala 264:27]
    node _T_6 = eq(io.in.bits.req.cmd, UInt<4>("h8")) @[SimpleBus.scala 79:23]
    node probe = and(_T_5, _T_6) @[Cache.scala 264:39]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _T_7) @[Cache.scala 265:26]
    node _T_8 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_9 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_10 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_11 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire meta : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:72]
    node _T_12 = mux(_T_8, io.in.bits.metas[0].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_13 = mux(_T_9, io.in.bits.metas[1].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_14 = mux(_T_10, io.in.bits.metas[2].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_15 = mux(_T_11, io.in.bits.metas[3].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_16 = or(_T_12, _T_13) @[Mux.scala 27:72]
    node _T_17 = or(_T_16, _T_14) @[Mux.scala 27:72]
    node _T_18 = or(_T_17, _T_15) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<1> @[Mux.scala 27:72]
    _WIRE_1 <= _T_18 @[Mux.scala 27:72]
    meta.dirty <= _WIRE_1 @[Mux.scala 27:72]
    node _T_19 = mux(_T_8, io.in.bits.metas[0].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_20 = mux(_T_9, io.in.bits.metas[1].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_21 = mux(_T_10, io.in.bits.metas[2].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_22 = mux(_T_11, io.in.bits.metas[3].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_23 = or(_T_19, _T_20) @[Mux.scala 27:72]
    node _T_24 = or(_T_23, _T_21) @[Mux.scala 27:72]
    node _T_25 = or(_T_24, _T_22) @[Mux.scala 27:72]
    wire _WIRE_2 : UInt<1> @[Mux.scala 27:72]
    _WIRE_2 <= _T_25 @[Mux.scala 27:72]
    meta.valid <= _WIRE_2 @[Mux.scala 27:72]
    node _T_26 = mux(_T_8, io.in.bits.metas[0].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_27 = mux(_T_9, io.in.bits.metas[1].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_28 = mux(_T_10, io.in.bits.metas[2].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_29 = mux(_T_11, io.in.bits.metas[3].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_30 = or(_T_26, _T_27) @[Mux.scala 27:72]
    node _T_31 = or(_T_30, _T_28) @[Mux.scala 27:72]
    node _T_32 = or(_T_31, _T_29) @[Mux.scala 27:72]
    wire _WIRE_3 : UInt<19> @[Mux.scala 27:72]
    _WIRE_3 <= _T_32 @[Mux.scala 27:72]
    meta.tag <= _WIRE_3 @[Mux.scala 27:72]
    node _T_33 = and(mmio, hit) @[Cache.scala 267:17]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Cache.scala 267:10]
    node _T_35 = asUInt(reset) @[Cache.scala 267:9]
    node _T_36 = or(_T_34, _T_35) @[Cache.scala 267:9]
    node _T_37 = eq(_T_36, UInt<1>("h0")) @[Cache.scala 267:9]
    when _T_37 : @[Cache.scala 267:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:267 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") : SIM @[Cache.scala 267:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 267:9]
    node _T_38 = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 275:71]
    node useForwardData = and(io.in.bits.isForwardData, _T_38) @[Cache.scala 275:49]
    node _T_39 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_40 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_41 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_42 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _WIRE_4 : { data : UInt<64>} @[Mux.scala 27:72]
    node _T_43 = mux(_T_39, io.in.bits.datas[0].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_44 = mux(_T_40, io.in.bits.datas[1].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_45 = mux(_T_41, io.in.bits.datas[2].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_46 = mux(_T_42, io.in.bits.datas[3].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_47 = or(_T_43, _T_44) @[Mux.scala 27:72]
    node _T_48 = or(_T_47, _T_45) @[Mux.scala 27:72]
    node _T_49 = or(_T_48, _T_46) @[Mux.scala 27:72]
    wire _WIRE_5 : UInt<64> @[Mux.scala 27:72]
    _WIRE_5 <= _T_49 @[Mux.scala 27:72]
    _WIRE_4.data <= _WIRE_5 @[Mux.scala 27:72]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _WIRE_4.data) @[Cache.scala 277:21]
    node _T_50 = eq(UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 278:22]
    node _T_51 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_52 = and(_T_50, _T_51) @[Cache.scala 278:28]
    node _T_53 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _T_54 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _T_55 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _T_61 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_62 = mux(_T_61, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_63 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_64, _T_62) @[Cat.scala 30:58]
    node lo_hi = cat(_T_68, _T_66) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_72, _T_70) @[Cat.scala 30:58]
    node hi_hi = cat(_T_76, _T_74) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node _T_77 = cat(hi, lo) @[Cat.scala 30:58]
    node wordMask = mux(_T_52, _T_77, UInt<64>("h0")) @[Cache.scala 278:21]
    reg value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    node _T_78 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_79 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 281:34]
    node _T_80 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_81 = or(_T_79, _T_80) @[Cache.scala 281:62]
    node _T_82 = and(_T_78, _T_81) @[Cache.scala 281:22]
    when _T_82 : @[Cache.scala 281:85]
      node wrap = eq(value, UInt<3>("h7")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    node _T_83 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _T_83) @[Cache.scala 285:22]
    wire dataHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 286:29]
    wire _WIRE_6 : { data : UInt<64>} @[Cache.scala 287:16]
    node _T_84 = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 32:13]
    node _T_85 = not(wordMask) @[BitUtils.scala 32:38]
    node _T_86 = and(dataRead, _T_85) @[BitUtils.scala 32:36]
    node _T_87 = or(_T_84, _T_86) @[BitUtils.scala 32:25]
    _WIRE_6.data <= _T_87 @[Cache.scala 106:15]
    node _T_88 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 288:60]
    node _T_89 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_90 = or(_T_88, _T_89) @[Cache.scala 288:88]
    node _T_91 = mux(_T_90, value, addr.wordIndex) @[Cache.scala 288:51]
    node _T_92 = cat(addr.index, _T_91) @[Cat.scala 30:58]
    dataHitWriteBus.req.bits.setIdx <= _T_92 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data.data <= _WIRE_6.data @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 290:29]
    node _T_93 = eq(meta.dirty, UInt<1>("h0")) @[Cache.scala 291:25]
    node _T_94 = and(hitWrite, _T_93) @[Cache.scala 291:22]
    wire _WIRE_7 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_8 : UInt<32>
    _WIRE_8 <= io.in.bits.req.addr
    node _T_95 = bits(_WIRE_8, 2, 0) @[Cache.scala 79:45]
    _WIRE_7.byteOffset <= _T_95 @[Cache.scala 79:45]
    node _T_96 = bits(_WIRE_8, 5, 3) @[Cache.scala 79:45]
    _WIRE_7.wordIndex <= _T_96 @[Cache.scala 79:45]
    node _T_97 = bits(_WIRE_8, 12, 6) @[Cache.scala 79:45]
    _WIRE_7.index <= _T_97 @[Cache.scala 79:45]
    node _T_98 = bits(_WIRE_8, 31, 13) @[Cache.scala 79:45]
    _WIRE_7.tag <= _T_98 @[Cache.scala 79:45]
    wire _WIRE_9 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 292:16]
    _WIRE_9.tag <= meta.tag @[Cache.scala 95:14]
    _WIRE_9.valid <= UInt<1>("h1") @[Cache.scala 96:16]
    _WIRE_9.dirty <= UInt<1>("h0") @[Cache.scala 97:16]
    metaHitWriteBus.req.bits.setIdx <= _WIRE_7.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data.dirty <= _WIRE_9.dirty @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.valid <= _WIRE_9.valid @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.tag <= _WIRE_9.tag @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= _T_94 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Cache.scala 296:22]
    reg needFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 297:26]
    node _T_99 = neq(state, UInt<4>("h0")) @[Cache.scala 299:28]
    node _T_100 = and(io.flush, _T_99) @[Cache.scala 299:18]
    when _T_100 : @[Cache.scala 299:41]
      needFlush <= UInt<1>("h1") @[Cache.scala 299:53]
    node _T_101 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_102 = and(_T_101, needFlush) @[Cache.scala 300:23]
    when _T_102 : @[Cache.scala 300:37]
      needFlush <= UInt<1>("h0") @[Cache.scala 300:49]
    reg value_1 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg value_2 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg state2 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Cache.scala 306:23]
    node _T_103 = eq(state, UInt<4>("h3")) @[Cache.scala 308:39]
    node _T_104 = eq(state, UInt<4>("h8")) @[Cache.scala 308:66]
    node _T_105 = or(_T_103, _T_104) @[Cache.scala 308:57]
    node _T_106 = eq(state2, UInt<2>("h0")) @[Cache.scala 308:92]
    node _T_107 = and(_T_105, _T_106) @[Cache.scala 308:81]
    node _T_108 = eq(state, UInt<4>("h8")) @[Cache.scala 309:40]
    node _T_109 = mux(_T_108, value_1, value_2) @[Cache.scala 309:33]
    node _T_110 = cat(addr.index, _T_109) @[Cat.scala 30:58]
    io.dataReadBus.req.bits.setIdx <= _T_110 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_107 @[SRAMTemplate.scala 53:20]
    node _T_111 = eq(state2, UInt<2>("h1")) @[Cache.scala 310:60]
    reg dataWay : { data : UInt<64>}[4], clock with :
      reset => (UInt<1>("h0"), dataWay) @[Reg.scala 15:16]
    when _T_111 : @[Reg.scala 16:19]
      dataWay[0].data <= io.dataReadBus.resp.data[0].data @[Reg.scala 16:23]
      dataWay[1].data <= io.dataReadBus.resp.data[1].data @[Reg.scala 16:23]
      dataWay[2].data <= io.dataReadBus.resp.data[2].data @[Reg.scala 16:23]
      dataWay[3].data <= io.dataReadBus.resp.data[3].data @[Reg.scala 16:23]
    node _T_112 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_113 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_114 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_115 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _WIRE_10 : { data : UInt<64>} @[Mux.scala 27:72]
    node _T_116 = mux(_T_112, dataWay[0].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_117 = mux(_T_113, dataWay[1].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_118 = mux(_T_114, dataWay[2].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_119 = mux(_T_115, dataWay[3].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_120 = or(_T_116, _T_117) @[Mux.scala 27:72]
    node _T_121 = or(_T_120, _T_118) @[Mux.scala 27:72]
    node _T_122 = or(_T_121, _T_119) @[Mux.scala 27:72]
    wire _WIRE_11 : UInt<64> @[Mux.scala 27:72]
    _WIRE_11 <= _T_122 @[Mux.scala 27:72]
    _WIRE_10.data <= _WIRE_11 @[Mux.scala 27:72]
    node _T_123 = eq(UInt<2>("h0"), state2) @[Cache.scala 313:19]
    when _T_123 : @[Cache.scala 313:19]
      node _T_124 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 40:37]
      when _T_124 : @[Cache.scala 314:53]
        state2 <= UInt<2>("h1") @[Cache.scala 314:62]
    else :
      node _T_125 = eq(UInt<2>("h1"), state2) @[Cache.scala 313:19]
      when _T_125 : @[Cache.scala 313:19]
        state2 <= UInt<2>("h2") @[Cache.scala 315:35]
      else :
        node _T_126 = eq(UInt<2>("h2"), state2) @[Cache.scala 313:19]
        when _T_126 : @[Cache.scala 313:19]
          node _T_127 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          node _T_128 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
          node _T_129 = or(_T_127, _T_128) @[Cache.scala 316:46]
          node _T_130 = and(hitReadBurst, io.out.ready) @[Cache.scala 316:83]
          node _T_131 = or(_T_129, _T_130) @[Cache.scala 316:67]
          when _T_131 : @[Cache.scala 316:100]
            state2 <= UInt<2>("h0") @[Cache.scala 316:109]
    node _T_132 = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 320:44]
    node raddr = cat(_T_132, UInt<3>("h0")) @[Cat.scala 30:58]
    node hi_1 = cat(meta.tag, addr.index) @[Cat.scala 30:58]
    node waddr = cat(hi_1, UInt<6>("h0")) @[Cat.scala 30:58]
    node _T_133 = eq(state, UInt<4>("h1")) @[Cache.scala 324:23]
    node _T_134 = eq(value_2, UInt<3>("h7")) @[Cache.scala 325:29]
    node _T_135 = mux(_T_134, UInt<3>("h7"), UInt<2>("h3")) @[Cache.scala 325:8]
    node cmd = mux(_T_133, UInt<2>("h2"), _T_135) @[Cache.scala 324:16]
    node _T_136 = eq(state, UInt<4>("h1")) @[Cache.scala 326:42]
    node _T_137 = mux(_T_136, raddr, waddr) @[Cache.scala 326:35]
    node _T_138 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    io.mem.req.bits.addr <= _T_137 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _WIRE_10.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_138 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h1") @[Cache.scala 330:21]
    node _T_139 = eq(state, UInt<4>("h1")) @[Cache.scala 331:30]
    node _T_140 = eq(state, UInt<4>("h3")) @[Cache.scala 331:59]
    node _T_141 = eq(state2, UInt<2>("h2")) @[Cache.scala 331:89]
    node _T_142 = and(_T_140, _T_141) @[Cache.scala 331:78]
    node _T_143 = or(_T_139, _T_142) @[Cache.scala 331:48]
    io.mem.req.valid <= _T_143 @[Cache.scala 331:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 334:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 334:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 334:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 334:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 334:20]
    io.mmio.resp.ready <= UInt<1>("h1") @[Cache.scala 335:22]
    node _T_144 = eq(state, UInt<4>("h5")) @[Cache.scala 336:31]
    io.mmio.req.valid <= _T_144 @[Cache.scala 336:21]
    reg afterFirstRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 338:31]
    node _T_145 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 27:20]
    when _T_145 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h1") @[Reg.scala 28:23]
    node _T_146 = eq(afterFirstRead, UInt<1>("h0")) @[Cache.scala 340:22]
    node _T_147 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_148 = and(_T_146, _T_147) @[Cache.scala 340:38]
    node _T_149 = eq(state, UInt<4>("h2")) @[Cache.scala 340:70]
    node readingFirst = and(_T_148, _T_149) @[Cache.scala 340:60]
    node _T_150 = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 341:39]
    node _T_151 = eq(state, UInt<4>("h6")) @[Cache.scala 342:52]
    node _T_152 = mux(mmio, _T_151, readingFirst) @[Cache.scala 342:39]
    reg inRdataRegDemand : UInt<64>, clock with :
      reset => (UInt<1>("h0"), inRdataRegDemand) @[Reg.scala 15:16]
    when _T_152 : @[Reg.scala 16:19]
      inRdataRegDemand <= _T_150 @[Reg.scala 16:23]
    node _T_153 = eq(state, UInt<4>("h0")) @[Cache.scala 345:31]
    node _T_154 = and(_T_153, probe) @[Cache.scala 345:43]
    node _T_155 = eq(state, UInt<4>("h8")) @[Cache.scala 346:31]
    node _T_156 = eq(state2, UInt<2>("h2")) @[Cache.scala 346:57]
    node _T_157 = and(_T_155, _T_156) @[Cache.scala 346:46]
    node _T_158 = or(_T_154, _T_157) @[Cache.scala 345:53]
    io.cohResp.valid <= _T_158 @[Cache.scala 345:20]
    io.cohResp.bits.rdata <= _WIRE_10.data @[Cache.scala 347:25]
    node _T_159 = eq(state, UInt<4>("h8")) @[Cache.scala 348:35]
    node _T_160 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_161 = and(_T_159, _T_160) @[Cache.scala 348:49]
    reg value_3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    wire releaseLast : UInt<1>
    releaseLast <= UInt<1>("h0")
    when _T_161 : @[Counter.scala 118:17]
      node wrap_wrap = eq(value_3, UInt<3>("h7")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value_3, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value_3 <= _wrap_value_T_1 @[Counter.scala 76:15]
      releaseLast <= wrap_wrap @[Counter.scala 118:24]
    node _T_162 = eq(state, UInt<4>("h8")) @[Cache.scala 349:36]
    node _T_163 = mux(releaseLast, UInt<3>("h6"), UInt<1>("h0")) @[Cache.scala 349:54]
    node _T_164 = mux(hit, UInt<4>("hc"), UInt<4>("h8")) @[Cache.scala 350:8]
    node _T_165 = mux(_T_162, _T_163, _T_164) @[Cache.scala 349:29]
    io.cohResp.bits.cmd <= _T_165 @[Cache.scala 349:23]
    node _T_166 = and(hitReadBurst, io.out.ready) @[Cache.scala 352:35]
    node _T_167 = eq(state2, UInt<2>("h2")) @[Cache.scala 352:61]
    node respToL1Fire = and(_T_166, _T_167) @[Cache.scala 352:51]
    node _T_168 = eq(state, UInt<4>("h0")) @[Cache.scala 353:37]
    node _T_169 = eq(state, UInt<4>("h8")) @[Cache.scala 353:57]
    node _T_170 = eq(state2, UInt<2>("h2")) @[Cache.scala 353:81]
    node _T_171 = and(_T_169, _T_170) @[Cache.scala 353:71]
    node _T_172 = or(_T_168, _T_171) @[Cache.scala 353:48]
    node _T_173 = and(_T_172, hitReadBurst) @[Cache.scala 353:96]
    node _T_174 = and(_T_173, io.out.ready) @[Cache.scala 353:112]
    reg value_4 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    wire respToL1Last : UInt<1>
    respToL1Last <= UInt<1>("h0")
    when _T_174 : @[Counter.scala 118:17]
      node wrap_wrap_1 = eq(value_4, UInt<3>("h7")) @[Counter.scala 72:24]
      node _wrap_value_T_2 = add(value_4, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24]
      value_4 <= _wrap_value_T_3 @[Counter.scala 76:15]
      respToL1Last <= wrap_wrap_1 @[Counter.scala 118:24]
    node _T_175 = eq(UInt<4>("h0"), state) @[Cache.scala 355:18]
    when _T_175 : @[Cache.scala 355:18]
      afterFirstRead <= UInt<1>("h0") @[Cache.scala 357:22]
      alreadyOutFire <= UInt<1>("h0") @[Cache.scala 358:22]
      when probe : @[Cache.scala 360:20]
        node _T_176 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
        when _T_176 : @[Cache.scala 361:34]
          node _T_177 = mux(hit, UInt<4>("h8"), UInt<4>("h0")) @[Cache.scala 362:23]
          state <= _T_177 @[Cache.scala 362:17]
          value_1 <= addr.wordIndex @[Cache.scala 363:29]
      else :
        node _T_178 = and(hitReadBurst, io.out.ready) @[Cache.scala 365:33]
        when _T_178 : @[Cache.scala 365:50]
          state <= UInt<4>("h8") @[Cache.scala 366:15]
          node _value_T_2 = eq(addr.wordIndex, UInt<3>("h7")) @[Cache.scala 367:49]
          node _value_T_3 = add(addr.wordIndex, UInt<1>("h1")) @[Cache.scala 367:93]
          node _value_T_4 = tail(_value_T_3, 1) @[Cache.scala 367:93]
          node _value_T_5 = mux(_value_T_2, UInt<1>("h0"), _value_T_4) @[Cache.scala 367:33]
          value_1 <= _value_T_5 @[Cache.scala 367:27]
        else :
          node _T_179 = or(miss, mmio) @[Cache.scala 368:26]
          node _T_180 = eq(io.flush, UInt<1>("h0")) @[Cache.scala 368:38]
          node _T_181 = and(_T_179, _T_180) @[Cache.scala 368:35]
          when _T_181 : @[Cache.scala 368:49]
            node _T_182 = eq(UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 369:43]
            node _T_183 = and(_T_182, meta.dirty) @[Cache.scala 369:49]
            node _T_184 = mux(_T_183, UInt<4>("h3"), UInt<4>("h1")) @[Cache.scala 369:42]
            node _T_185 = mux(mmio, UInt<4>("h5"), _T_184) @[Cache.scala 369:21]
            state <= _T_185 @[Cache.scala 369:15]
    else :
      node _T_186 = eq(UInt<4>("h5"), state) @[Cache.scala 355:18]
      when _T_186 : @[Cache.scala 355:18]
        node _T_187 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 40:37]
        when _T_187 : @[Cache.scala 373:48]
          state <= UInt<4>("h6") @[Cache.scala 373:56]
      else :
        node _T_188 = eq(UInt<4>("h6"), state) @[Cache.scala 355:18]
        when _T_188 : @[Cache.scala 355:18]
          node _T_189 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 40:37]
          when _T_189 : @[Cache.scala 374:50]
            state <= UInt<4>("h7") @[Cache.scala 374:58]
        else :
          node _T_190 = eq(UInt<4>("h8"), state) @[Cache.scala 355:18]
          when _T_190 : @[Cache.scala 355:18]
            node _T_191 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_192 = or(_T_191, respToL1Fire) @[Cache.scala 377:31]
            when _T_192 : @[Cache.scala 377:48]
              node wrap_1 = eq(value_1, UInt<3>("h7")) @[Counter.scala 72:24]
              node _value_T_6 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
              node _value_T_7 = tail(_value_T_6, 1) @[Counter.scala 76:24]
              value_1 <= _value_T_7 @[Counter.scala 76:15]
            node _T_193 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_194 = and(probe, _T_193) @[Cache.scala 378:19]
            node _T_195 = and(_T_194, releaseLast) @[Cache.scala 378:40]
            node _T_196 = and(respToL1Fire, respToL1Last) @[Cache.scala 378:71]
            node _T_197 = or(_T_195, _T_196) @[Cache.scala 378:55]
            when _T_197 : @[Cache.scala 378:88]
              state <= UInt<4>("h0") @[Cache.scala 378:96]
          else :
            node _T_198 = eq(UInt<4>("h1"), state) @[Cache.scala 355:18]
            when _T_198 : @[Cache.scala 355:18]
              node _T_199 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_199 : @[Cache.scala 381:50]
                state <= UInt<4>("h2") @[Cache.scala 382:13]
                value_1 <= addr.wordIndex @[Cache.scala 383:25]
            else :
              node _T_200 = eq(UInt<4>("h2"), state) @[Cache.scala 355:18]
              when _T_200 : @[Cache.scala 355:18]
                node _T_201 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_201 : @[Cache.scala 387:33]
                  afterFirstRead <= UInt<1>("h1") @[Cache.scala 388:24]
                  node wrap_2 = eq(value_1, UInt<3>("h7")) @[Counter.scala 72:24]
                  node _value_T_8 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
                  node _value_T_9 = tail(_value_T_8, 1) @[Counter.scala 76:24]
                  value_1 <= _value_T_9 @[Counter.scala 76:15]
                  node _T_202 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 390:23]
                  when _T_202 : @[Cache.scala 390:52]
                    value <= UInt<1>("h0") @[Cache.scala 390:75]
                  node _T_203 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
                  when _T_203 : @[Cache.scala 391:46]
                    state <= UInt<4>("h7") @[Cache.scala 391:54]
              else :
                node _T_204 = eq(UInt<4>("h3"), state) @[Cache.scala 355:18]
                when _T_204 : @[Cache.scala 355:18]
                  node _T_205 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  when _T_205 : @[Cache.scala 396:32]
                    node wrap_3 = eq(value_2, UInt<3>("h7")) @[Counter.scala 72:24]
                    node _value_T_10 = add(value_2, UInt<1>("h1")) @[Counter.scala 76:24]
                    node _value_T_11 = tail(_value_T_10, 1) @[Counter.scala 76:24]
                    value_2 <= _value_T_11 @[Counter.scala 76:15]
                  node _T_206 = eq(io.mem.req.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
                  node _T_207 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  node _T_208 = and(_T_206, _T_207) @[Cache.scala 397:43]
                  when _T_208 : @[Cache.scala 397:65]
                    state <= UInt<4>("h4") @[Cache.scala 397:73]
                else :
                  node _T_209 = eq(UInt<4>("h4"), state) @[Cache.scala 355:18]
                  when _T_209 : @[Cache.scala 355:18]
                    node _T_210 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                    when _T_210 : @[Cache.scala 400:53]
                      state <= UInt<4>("h1") @[Cache.scala 400:61]
                  else :
                    node _T_211 = eq(UInt<4>("h7"), state) @[Cache.scala 355:18]
                    when _T_211 : @[Cache.scala 355:18]
                      node _T_212 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
                      node _T_213 = or(_T_212, needFlush) @[Cache.scala 401:44]
                      node _T_214 = or(_T_213, alreadyOutFire) @[Cache.scala 401:57]
                      when _T_214 : @[Cache.scala 401:76]
                        state <= UInt<4>("h0") @[Cache.scala 401:84]
    node _T_215 = mux(readingFirst, wordMask, UInt<64>("h0")) @[Cache.scala 404:67]
    node _T_216 = and(io.in.bits.req.wdata, _T_215) @[BitUtils.scala 32:13]
    node _T_217 = not(_T_215) @[BitUtils.scala 32:38]
    node _T_218 = and(io.mem.resp.bits.rdata, _T_217) @[BitUtils.scala 32:36]
    node dataRefill = or(_T_216, _T_218) @[BitUtils.scala 32:25]
    wire dataRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 405:32]
    node _T_219 = eq(state, UInt<4>("h2")) @[Cache.scala 406:20]
    node _T_220 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_221 = and(_T_219, _T_220) @[Cache.scala 406:39]
    node _T_222 = cat(addr.index, value_1) @[Cat.scala 30:58]
    wire _WIRE_12 : { data : UInt<64>} @[Cache.scala 407:16]
    _WIRE_12.data <= dataRefill @[Cache.scala 106:15]
    dataRefillWriteBus.req.bits.setIdx <= _T_222 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data.data <= _WIRE_12.data @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= _T_221 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0].bits.waymask <= dataHitWriteBus.req.bits.waymask @[Cache.scala 409:25]
    dataWriteArb.io.in[0].bits.data.data <= dataHitWriteBus.req.bits.data.data @[Cache.scala 409:25]
    dataWriteArb.io.in[0].bits.setIdx <= dataHitWriteBus.req.bits.setIdx @[Cache.scala 409:25]
    dataWriteArb.io.in[0].valid <= dataHitWriteBus.req.valid @[Cache.scala 409:25]
    dataHitWriteBus.req.ready <= dataWriteArb.io.in[0].ready @[Cache.scala 409:25]
    dataWriteArb.io.in[1].bits.waymask <= dataRefillWriteBus.req.bits.waymask @[Cache.scala 410:25]
    dataWriteArb.io.in[1].bits.data.data <= dataRefillWriteBus.req.bits.data.data @[Cache.scala 410:25]
    dataWriteArb.io.in[1].bits.setIdx <= dataRefillWriteBus.req.bits.setIdx @[Cache.scala 410:25]
    dataWriteArb.io.in[1].valid <= dataRefillWriteBus.req.valid @[Cache.scala 410:25]
    dataRefillWriteBus.req.ready <= dataWriteArb.io.in[1].ready @[Cache.scala 410:25]
    io.dataWriteBus.req.bits.waymask <= dataWriteArb.io.out.bits.waymask @[Cache.scala 411:23]
    io.dataWriteBus.req.bits.data.data <= dataWriteArb.io.out.bits.data.data @[Cache.scala 411:23]
    io.dataWriteBus.req.bits.setIdx <= dataWriteArb.io.out.bits.setIdx @[Cache.scala 411:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 411:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 411:23]
    wire metaRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 413:32]
    node _T_223 = eq(state, UInt<4>("h2")) @[Cache.scala 414:20]
    node _T_224 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_225 = and(_T_223, _T_224) @[Cache.scala 414:39]
    node _T_226 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
    node _T_227 = and(_T_225, _T_226) @[Cache.scala 414:61]
    wire _WIRE_13 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 415:16]
    node _T_228 = eq(UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 415:79]
    node _T_229 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_230 = and(_T_228, _T_229) @[Cache.scala 415:85]
    _WIRE_13.tag <= addr.tag @[Cache.scala 95:14]
    _WIRE_13.valid <= UInt<1>("h1") @[Cache.scala 96:16]
    _WIRE_13.dirty <= _T_230 @[Cache.scala 97:16]
    wire _WIRE_14 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_15 : UInt<32>
    _WIRE_15 <= io.in.bits.req.addr
    node _T_231 = bits(_WIRE_15, 2, 0) @[Cache.scala 79:45]
    _WIRE_14.byteOffset <= _T_231 @[Cache.scala 79:45]
    node _T_232 = bits(_WIRE_15, 5, 3) @[Cache.scala 79:45]
    _WIRE_14.wordIndex <= _T_232 @[Cache.scala 79:45]
    node _T_233 = bits(_WIRE_15, 12, 6) @[Cache.scala 79:45]
    _WIRE_14.index <= _T_233 @[Cache.scala 79:45]
    node _T_234 = bits(_WIRE_15, 31, 13) @[Cache.scala 79:45]
    _WIRE_14.tag <= _T_234 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _WIRE_14.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data.dirty <= _WIRE_13.dirty @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.valid <= _WIRE_13.valid @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.tag <= _WIRE_13.tag @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _T_227 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0].bits.waymask <= metaHitWriteBus.req.bits.waymask @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.dirty <= metaHitWriteBus.req.bits.data.dirty @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.valid <= metaHitWriteBus.req.bits.data.valid @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.tag <= metaHitWriteBus.req.bits.data.tag @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.setIdx <= metaHitWriteBus.req.bits.setIdx @[Cache.scala 419:25]
    metaWriteArb.io.in[0].valid <= metaHitWriteBus.req.valid @[Cache.scala 419:25]
    metaHitWriteBus.req.ready <= metaWriteArb.io.in[0].ready @[Cache.scala 419:25]
    metaWriteArb.io.in[1].bits.waymask <= metaRefillWriteBus.req.bits.waymask @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.dirty <= metaRefillWriteBus.req.bits.data.dirty @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.valid <= metaRefillWriteBus.req.bits.data.valid @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.tag <= metaRefillWriteBus.req.bits.data.tag @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.setIdx <= metaRefillWriteBus.req.bits.setIdx @[Cache.scala 420:25]
    metaWriteArb.io.in[1].valid <= metaRefillWriteBus.req.valid @[Cache.scala 420:25]
    metaRefillWriteBus.req.ready <= metaWriteArb.io.in[1].ready @[Cache.scala 420:25]
    io.metaWriteBus.req.bits.waymask <= metaWriteArb.io.out.bits.waymask @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.dirty <= metaWriteArb.io.out.bits.data.dirty @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.valid <= metaWriteArb.io.out.bits.data.valid @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.tag <= metaWriteArb.io.out.bits.data.tag @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.setIdx <= metaWriteArb.io.out.bits.setIdx @[Cache.scala 421:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 421:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 421:23]
    node _T_235 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 441:29]
    io.out.bits.rdata <= _T_235 @[Cache.scala 441:23]
    node _T_236 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_237 = eq(_T_236, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_238 = bits(io.in.bits.req.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_239 = eq(_T_238, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_240 = and(_T_237, _T_239) @[SimpleBus.scala 73:26]
    node _T_241 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    wire _WIRE_16 : UInt<3> @[Cache.scala 442:79]
    _WIRE_16 is invalid @[Cache.scala 442:79]
    node _T_242 = mux(_T_241, UInt<3>("h5"), _WIRE_16) @[Cache.scala 442:79]
    node _T_243 = mux(_T_240, UInt<3>("h6"), _T_242) @[Cache.scala 442:27]
    io.out.bits.cmd <= _T_243 @[Cache.scala 442:21]
    io.out.bits.user <= io.in.bits.req.user @[Cache.scala 444:56]
    node _T_244 = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_245 = and(_T_244, UInt<1>("h0")) @[Cache.scala 447:52]
    node _T_246 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_247 = eq(hit, UInt<1>("h0")) @[Cache.scala 448:34]
    node _T_248 = eq(state, UInt<4>("h7")) @[Cache.scala 448:48]
    node _T_249 = and(_T_247, _T_248) @[Cache.scala 448:39]
    node _T_250 = or(hit, _T_249) @[Cache.scala 448:31]
    node _T_251 = and(_T_246, _T_250) @[Cache.scala 448:23]
    node _T_252 = eq(state, UInt<4>("h2")) @[Cache.scala 448:81]
    node _T_253 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_254 = and(_T_252, _T_253) @[Cache.scala 448:99]
    node _T_255 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[Cache.scala 448:132]
    node _T_256 = and(_T_254, _T_255) @[Cache.scala 448:121]
    node _T_257 = mux(_T_251, UInt<1>("h1"), _T_256) @[Cache.scala 448:8]
    node _T_258 = and(respToL1Fire, respToL1Last) @[Cache.scala 448:178]
    node _T_259 = eq(state, UInt<4>("h8")) @[Cache.scala 448:203]
    node _T_260 = and(_T_258, _T_259) @[Cache.scala 448:194]
    node _T_261 = or(_T_257, _T_260) @[Cache.scala 448:161]
    node _T_262 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_263 = or(_T_262, mmio) @[Cache.scala 449:60]
    node _T_264 = eq(state, UInt<4>("h7")) @[Cache.scala 449:75]
    node _T_265 = eq(alreadyOutFire, UInt<1>("h0")) @[Cache.scala 449:110]
    node _T_266 = and(afterFirstRead, _T_265) @[Cache.scala 449:107]
    node _T_267 = mux(_T_263, _T_264, _T_266) @[Cache.scala 449:45]
    node _T_268 = mux(hit, UInt<1>("h1"), _T_267) @[Cache.scala 449:28]
    node _T_269 = mux(probe, UInt<1>("h0"), _T_268) @[Cache.scala 449:8]
    node _T_270 = mux(_T_245, _T_261, _T_269) @[Cache.scala 447:37]
    node _T_271 = and(io.in.valid, _T_270) @[Cache.scala 447:31]
    io.out.valid <= _T_271 @[Cache.scala 447:16]
    node _T_272 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_273 = eq(state, UInt<4>("h0")) @[Cache.scala 456:66]
    node _T_274 = eq(state, UInt<4>("h8")) @[Cache.scala 456:85]
    node _T_275 = and(_T_274, releaseLast) @[Cache.scala 456:100]
    node _T_276 = mux(miss, _T_273, _T_275) @[Cache.scala 456:53]
    node _T_277 = and(_T_272, _T_276) @[Cache.scala 456:47]
    node _T_278 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_279 = or(hit, _T_278) @[Cache.scala 457:13]
    node _T_280 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_281 = eq(state, UInt<4>("h7")) @[Cache.scala 457:53]
    node _T_282 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_283 = or(_T_282, alreadyOutFire) @[Cache.scala 457:88]
    node _T_284 = and(_T_281, _T_283) @[Cache.scala 457:70]
    node _T_285 = mux(_T_279, _T_280, _T_284) @[Cache.scala 457:8]
    node _T_286 = mux(probe, _T_277, _T_285) @[Cache.scala 456:21]
    io.isFinish <= _T_286 @[Cache.scala 456:15]
    node _T_287 = eq(state, UInt<4>("h0")) @[Cache.scala 460:41]
    node _T_288 = eq(hitReadBurst, UInt<1>("h0")) @[Cache.scala 460:55]
    node _T_289 = and(_T_287, _T_288) @[Cache.scala 460:52]
    node _T_290 = and(io.out.ready, _T_289) @[Cache.scala 460:31]
    node _T_291 = eq(miss, UInt<1>("h0")) @[Cache.scala 460:73]
    node _T_292 = and(_T_290, _T_291) @[Cache.scala 460:70]
    node _T_293 = eq(probe, UInt<1>("h0")) @[Cache.scala 460:82]
    node _T_294 = and(_T_292, _T_293) @[Cache.scala 460:79]
    io.in.ready <= _T_294 @[Cache.scala 460:15]
    node _T_295 = eq(state, UInt<4>("h0")) @[Cache.scala 461:49]
    node _T_296 = and(_T_295, io.out.ready) @[Cache.scala 461:60]
    node _T_297 = eq(state, UInt<4>("h8")) @[Cache.scala 461:85]
    node _T_298 = eq(state2, UInt<2>("h2")) @[Cache.scala 461:109]
    node _T_299 = and(_T_297, _T_298) @[Cache.scala 461:99]
    node _T_300 = or(_T_296, _T_299) @[Cache.scala 461:76]
    node _T_301 = and(hitReadBurst, _T_300) @[Cache.scala 461:39]
    io.dataReadRespToL1 <= _T_301 @[Cache.scala 461:23]
    node _T_302 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 463:38]
    node _T_303 = eq(_T_302, UInt<1>("h0")) @[Cache.scala 463:10]
    node _T_304 = asUInt(reset) @[Cache.scala 463:9]
    node _T_305 = or(_T_303, _T_304) @[Cache.scala 463:9]
    node _T_306 = eq(_T_305, UInt<1>("h0")) @[Cache.scala 463:9]
    when _T_306 : @[Cache.scala 463:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:463 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") : SIM_1 @[Cache.scala 463:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 463:9]
    node _T_307 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 464:38]
    node _T_308 = eq(_T_307, UInt<1>("h0")) @[Cache.scala 464:10]
    node _T_309 = asUInt(reset) @[Cache.scala 464:9]
    node _T_310 = or(_T_308, _T_309) @[Cache.scala 464:9]
    node _T_311 = eq(_T_310, UInt<1>("h0")) @[Cache.scala 464:9]
    when _T_311 : @[Cache.scala 464:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:464 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") : SIM_2 @[Cache.scala 464:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 464:9]
    node _T_312 = eq(UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 465:12]
    node _T_313 = and(_T_312, io.flush) @[Cache.scala 465:18]
    node _T_314 = eq(_T_313, UInt<1>("h0")) @[Cache.scala 465:10]
    node _T_315 = asUInt(reset) @[Cache.scala 465:9]
    node _T_316 = or(_T_314, _T_315) @[Cache.scala 465:9]
    node _T_317 = eq(_T_316, UInt<1>("h0")) @[Cache.scala 465:9]
    when _T_317 : @[Cache.scala 465:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: only allow to flush icache\n    at Cache.scala:465 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") : SIM_3 @[Cache.scala 465:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 465:9]
    wire _WIRE_17 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_18 : UInt<32>
    _WIRE_18 <= io.in.bits.req.addr
    node _T_318 = bits(_WIRE_18, 2, 0) @[Cache.scala 79:45]
    _WIRE_17.byteOffset <= _T_318 @[Cache.scala 79:45]
    node _T_319 = bits(_WIRE_18, 5, 3) @[Cache.scala 79:45]
    _WIRE_17.wordIndex <= _T_319 @[Cache.scala 79:45]
    node _T_320 = bits(_WIRE_18, 12, 6) @[Cache.scala 79:45]
    _WIRE_17.index <= _T_320 @[Cache.scala 79:45]
    node _T_321 = bits(_WIRE_18, 31, 13) @[Cache.scala 79:45]
    _WIRE_17.tag <= _T_321 @[Cache.scala 79:45]
    node lo_1 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 466:465]
    node hi_2 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 466:465]
    node _T_322 = cat(hi_2, lo_1) @[Cache.scala 466:465]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_323 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_324 = tail(_T_323, 1) @[GTimer.scala 25:12]
    REG <= _T_324 @[GTimer.scala 25:7]
    wire _WIRE_19 : UInt<1>
    _WIRE_19 <= UInt<1>("h0")
    node _T_325 = and(UInt<1>("h1"), _WIRE_19) @[Debug.scala 55:16]
    when _T_325 : @[Debug.scala 55:31]
      node _T_326 = asUInt(reset) @[Debug.scala 56:24]
      node _T_327 = eq(_T_326, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_327 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG) : SIM_4 @[Debug.scala 56:24]
      node _T_328 = asUInt(reset) @[Debug.scala 57:13]
      node _T_329 = eq(_T_328, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_329 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _WIRE_17.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_322) : SIM_5 @[Debug.scala 57:13]
    node _T_330 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_331 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_332 = tail(_T_331, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_332 @[GTimer.scala 25:7]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_333 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_334 = tail(_T_333, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_334 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_335 = and(_T_330, _WIRE_20) @[Debug.scala 55:16]
    when _T_335 : @[Debug.scala 55:31]
      node _T_336 = asUInt(reset) @[Debug.scala 56:24]
      node _T_337 = eq(_T_336, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_337 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_2) : SIM_6 @[Debug.scala 56:24]
      node _T_338 = asUInt(reset) @[Debug.scala 57:13]
      node _T_339 = eq(_T_338, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_339 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "%d: [icache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", REG_1, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) : SIM_7 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_340 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_341 = tail(_T_340, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_341 @[GTimer.scala 25:7]
    wire _WIRE_21 : UInt<1>
    _WIRE_21 <= UInt<1>("h0")
    node _T_342 = and(UInt<1>("h1"), _WIRE_21) @[Debug.scala 55:16]
    when _T_342 : @[Debug.scala 55:31]
      node _T_343 = asUInt(reset) @[Debug.scala 56:24]
      node _T_344 = eq(_T_343, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_344 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_3) : SIM_8 @[Debug.scala 56:24]
      node _T_345 = asUInt(reset) @[Debug.scala 57:13]
      node _T_346 = eq(_T_345, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_346 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) : SIM_9 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_347 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_348 = tail(_T_347, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_348 @[GTimer.scala 25:7]
    wire _WIRE_22 : UInt<1>
    _WIRE_22 <= UInt<1>("h0")
    node _T_349 = and(UInt<1>("h1"), _WIRE_22) @[Debug.scala 55:16]
    when _T_349 : @[Debug.scala 55:31]
      node _T_350 = asUInt(reset) @[Debug.scala 56:24]
      node _T_351 = eq(_T_350, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_351 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_4) : SIM_10 @[Debug.scala 56:24]
      node _T_352 = asUInt(reset) @[Debug.scala 57:13]
      node _T_353 = eq(_T_352, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_353 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, io.out.bits.user, UInt<1>("h0")) : SIM_11 @[Debug.scala 57:13]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_354 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_355 = tail(_T_354, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_355 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_356 = and(UInt<1>("h1"), _WIRE_23) @[Debug.scala 55:16]
    when _T_356 : @[Debug.scala 55:31]
      node _T_357 = asUInt(reset) @[Debug.scala 56:24]
      node _T_358 = eq(_T_357, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_358 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_5) : SIM_12 @[Debug.scala 56:24]
      node _T_359 = asUInt(reset) @[Debug.scala 57:13]
      node _T_360 = eq(_T_359, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_360 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) : SIM_13 @[Debug.scala 57:13]
    node lo_2 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 471:48]
    node hi_3 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 471:48]
    node _T_361 = cat(hi_3, lo_2) @[Cache.scala 471:48]
    reg REG_6 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_362 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_363 = tail(_T_362, 1) @[GTimer.scala 25:12]
    REG_6 <= _T_363 @[GTimer.scala 25:7]
    wire _WIRE_24 : UInt<1>
    _WIRE_24 <= UInt<1>("h0")
    node _T_364 = and(UInt<1>("h1"), _WIRE_24) @[Debug.scala 55:16]
    when _T_364 : @[Debug.scala 55:31]
      node _T_365 = asUInt(reset) @[Debug.scala 56:24]
      node _T_366 = eq(_T_365, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_366 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_6) : SIM_14 @[Debug.scala 56:24]
      node _T_367 = asUInt(reset) @[Debug.scala 57:13]
      node _T_368 = eq(_T_367, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_368 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DreadCache: %x \n", _T_361) : SIM_15 @[Debug.scala 57:13]
    reg REG_7 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_369 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_370 = tail(_T_369, 1) @[GTimer.scala 25:12]
    REG_7 <= _T_370 @[GTimer.scala 25:7]
    wire _WIRE_25 : UInt<1>
    _WIRE_25 <= UInt<1>("h0")
    node _T_371 = and(UInt<1>("h1"), _WIRE_25) @[Debug.scala 55:16]
    when _T_371 : @[Debug.scala 55:31]
      node _T_372 = asUInt(reset) @[Debug.scala 56:24]
      node _T_373 = eq(_T_372, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_373 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_7) : SIM_16 @[Debug.scala 56:24]
      node _T_374 = asUInt(reset) @[Debug.scala 57:13]
      node _T_375 = eq(_T_374, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_375 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _WIRE_4.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) : SIM_17 @[Debug.scala 57:13]
    node _T_376 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg REG_8 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_377 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_378 = tail(_T_377, 1) @[GTimer.scala 25:12]
    REG_8 <= _T_378 @[GTimer.scala 25:7]
    wire _WIRE_26 : UInt<1>
    _WIRE_26 <= UInt<1>("h0")
    node _T_379 = and(_T_376, _WIRE_26) @[Debug.scala 55:16]
    when _T_379 : @[Debug.scala 55:31]
      node _T_380 = asUInt(reset) @[Debug.scala 56:24]
      node _T_381 = eq(_T_380, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_381 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_8) : SIM_18 @[Debug.scala 56:24]
      node _T_382 = asUInt(reset) @[Debug.scala 57:13]
      node _T_383 = eq(_T_382, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_383 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) : SIM_19 @[Debug.scala 57:13]
    node _T_384 = eq(state, UInt<4>("h3")) @[Cache.scala 475:16]
    node _T_385 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_386 = and(_T_384, _T_385) @[Cache.scala 475:35]
    wire _WIRE_27 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_28 : UInt<32>
    _WIRE_28 <= io.in.bits.req.addr
    node _T_387 = bits(_WIRE_28, 2, 0) @[Cache.scala 79:45]
    _WIRE_27.byteOffset <= _T_387 @[Cache.scala 79:45]
    node _T_388 = bits(_WIRE_28, 5, 3) @[Cache.scala 79:45]
    _WIRE_27.wordIndex <= _T_388 @[Cache.scala 79:45]
    node _T_389 = bits(_WIRE_28, 12, 6) @[Cache.scala 79:45]
    _WIRE_27.index <= _T_389 @[Cache.scala 79:45]
    node _T_390 = bits(_WIRE_28, 31, 13) @[Cache.scala 79:45]
    _WIRE_27.tag <= _T_390 @[Cache.scala 79:45]
    reg REG_9 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_391 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_392 = tail(_T_391, 1) @[GTimer.scala 25:12]
    REG_9 <= _T_392 @[GTimer.scala 25:7]
    wire _WIRE_29 : UInt<1>
    _WIRE_29 <= UInt<1>("h0")
    node _T_393 = and(_T_386, _WIRE_29) @[Debug.scala 55:16]
    when _T_393 : @[Debug.scala 55:31]
      node _T_394 = asUInt(reset) @[Debug.scala 56:24]
      node _T_395 = eq(_T_394, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_395 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_9) : SIM_20 @[Debug.scala 56:24]
      node _T_396 = asUInt(reset) @[Debug.scala 57:13]
      node _T_397 = eq(_T_396, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_397 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", value_2, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _WIRE_27.index, io.in.bits.waymask) : SIM_21 @[Debug.scala 57:13]
    node _T_398 = eq(state, UInt<4>("h1")) @[Cache.scala 476:16]
    node _T_399 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_400 = and(_T_398, _T_399) @[Cache.scala 476:34]
    wire _WIRE_30 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_31 : UInt<32>
    _WIRE_31 <= io.in.bits.req.addr
    node _T_401 = bits(_WIRE_31, 2, 0) @[Cache.scala 79:45]
    _WIRE_30.byteOffset <= _T_401 @[Cache.scala 79:45]
    node _T_402 = bits(_WIRE_31, 5, 3) @[Cache.scala 79:45]
    _WIRE_30.wordIndex <= _T_402 @[Cache.scala 79:45]
    node _T_403 = bits(_WIRE_31, 12, 6) @[Cache.scala 79:45]
    _WIRE_30.index <= _T_403 @[Cache.scala 79:45]
    node _T_404 = bits(_WIRE_31, 31, 13) @[Cache.scala 79:45]
    _WIRE_30.tag <= _T_404 @[Cache.scala 79:45]
    reg REG_10 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_405 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_406 = tail(_T_405, 1) @[GTimer.scala 25:12]
    REG_10 <= _T_406 @[GTimer.scala 25:7]
    wire _WIRE_32 : UInt<1>
    _WIRE_32 <= UInt<1>("h0")
    node _T_407 = and(_T_400, _WIRE_32) @[Debug.scala 55:16]
    when _T_407 : @[Debug.scala 55:31]
      node _T_408 = asUInt(reset) @[Debug.scala 56:24]
      node _T_409 = eq(_T_408, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_409 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_10) : SIM_22 @[Debug.scala 56:24]
      node _T_410 = asUInt(reset) @[Debug.scala 57:13]
      node _T_411 = eq(_T_410, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_411 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _WIRE_30.index, io.in.bits.waymask) : SIM_23 @[Debug.scala 57:13]
    node _T_412 = eq(state, UInt<4>("h2")) @[Cache.scala 477:16]
    node _T_413 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_414 = and(_T_412, _T_413) @[Cache.scala 477:35]
    wire _WIRE_33 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_34 : UInt<32>
    _WIRE_34 <= io.in.bits.req.addr
    node _T_415 = bits(_WIRE_34, 2, 0) @[Cache.scala 79:45]
    _WIRE_33.byteOffset <= _T_415 @[Cache.scala 79:45]
    node _T_416 = bits(_WIRE_34, 5, 3) @[Cache.scala 79:45]
    _WIRE_33.wordIndex <= _T_416 @[Cache.scala 79:45]
    node _T_417 = bits(_WIRE_34, 12, 6) @[Cache.scala 79:45]
    _WIRE_33.index <= _T_417 @[Cache.scala 79:45]
    node _T_418 = bits(_WIRE_34, 31, 13) @[Cache.scala 79:45]
    _WIRE_33.tag <= _T_418 @[Cache.scala 79:45]
    reg REG_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_419 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_420 = tail(_T_419, 1) @[GTimer.scala 25:12]
    REG_11 <= _T_420 @[GTimer.scala 25:7]
    wire _WIRE_35 : UInt<1>
    _WIRE_35 <= UInt<1>("h0")
    node _T_421 = and(_T_414, _WIRE_35) @[Debug.scala 55:16]
    when _T_421 : @[Debug.scala 55:31]
      node _T_422 = asUInt(reset) @[Debug.scala 56:24]
      node _T_423 = eq(_T_422, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_423 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", REG_11) : SIM_24 @[Debug.scala 56:24]
      node _T_424 = asUInt(reset) @[Debug.scala 57:13]
      node _T_425 = eq(_T_424, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_425 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", value_1, io.mem.resp.bits.rdata, addr.tag, _WIRE_33.index, io.in.bits.waymask) : SIM_25 @[Debug.scala 57:13]

  module SRAMTemplate_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    smem array : UInt<21>[4] [128] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SRAMTemplate.scala 80:30]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    wire wrap : UInt<1>
    wrap <= UInt<1>("h0")
    when REG : @[Counter.scala 118:17]
      node wrap_wrap = eq(value, UInt<7>("h7f")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value <= _wrap_value_T_1 @[Counter.scala 76:15]
      wrap <= wrap_wrap @[Counter.scala 118:24]
    when wrap : @[SRAMTemplate.scala 82:24]
      REG <= UInt<1>("h0") @[SRAMTemplate.scala 82:38]
    resetState <= REG @[SRAMTemplate.scala 84:16]
    resetSet <= value @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<21> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_1 = cat(hi, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _WIRE, _T_1) @[SRAMTemplate.scala 92:22]
    node _T_2 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_2, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<21>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_3 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_6 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_7 = or(setIdx, UInt<7>("h0"))
      node _T_8 = bits(_T_7, 6, 0)
      write mport MPORT = array[_T_8], clock
      when _T_3 :
        MPORT[0] <= wdata[0]
      when _T_4 :
        MPORT[1] <= wdata[1]
      when _T_5 :
        MPORT[2] <= wdata[2]
      when _T_6 :
        MPORT[3] <= wdata[3]
    wire _WIRE_1 : UInt @[SRAMTemplate.scala 98:31]
    _WIRE_1 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _WIRE_1 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_9 = or(_WIRE_1, UInt<7>("h0")) @[SRAMTemplate.scala 98:31]
      node _T_10 = bits(_T_9, 6, 0) @[SRAMTemplate.scala 98:31]
      read mport MPORT_1 = array[_T_10], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_2 : UInt<21>
    _WIRE_2 <= MPORT_1[0]
    node _T_11 = bits(_WIRE_2, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _T_11 @[SRAMTemplate.scala 98:78]
    node _T_12 = bits(_WIRE_2, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_12 @[SRAMTemplate.scala 98:78]
    node _T_13 = bits(_WIRE_2, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_13 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<21>
    _WIRE_3 <= MPORT_1[1]
    node _T_14 = bits(_WIRE_3, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _T_14 @[SRAMTemplate.scala 98:78]
    node _T_15 = bits(_WIRE_3, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _T_15 @[SRAMTemplate.scala 98:78]
    node _T_16 = bits(_WIRE_3, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _T_16 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : UInt<21>
    _WIRE_4 <= MPORT_1[2]
    node _T_17 = bits(_WIRE_4, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _T_17 @[SRAMTemplate.scala 98:78]
    node _T_18 = bits(_WIRE_4, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _T_18 @[SRAMTemplate.scala 98:78]
    node _T_19 = bits(_WIRE_4, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _T_19 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_5 : UInt<21>
    _WIRE_5 <= MPORT_1[3]
    node _T_20 = bits(_WIRE_5, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _T_20 @[SRAMTemplate.scala 98:78]
    node _T_21 = bits(_WIRE_5, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _T_21 @[SRAMTemplate.scala 98:78]
    node _T_22 = bits(_WIRE_5, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _T_22 @[SRAMTemplate.scala 98:78]
    wire _WIRE_6 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].dirty <= rdata_0.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].dirty <= rdata_1.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].valid <= rdata_1.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].tag <= rdata_1.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].dirty <= rdata_2.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].valid <= rdata_2.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].tag <= rdata_2.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].dirty <= rdata_3.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].valid <= rdata_3.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].tag <= rdata_3.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].dirty <= _WIRE_6[0].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].valid <= _WIRE_6[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _WIRE_6[0].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].dirty <= _WIRE_6[1].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].valid <= _WIRE_6[1].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].tag <= _WIRE_6[1].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].dirty <= _WIRE_6[2].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].valid <= _WIRE_6[2].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].tag <= _WIRE_6[2].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].dirty <= _WIRE_6[3].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].valid <= _WIRE_6[3].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].tag <= _WIRE_6[3].tag @[SRAMTemplate.scala 99:18]
    node _T_23 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_24 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_25 = and(_T_23, _T_24) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_25 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, chosen : UInt<0>}

    io.chosen <= UInt<1>("h0") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 124:15]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(UInt<1>("h1"), UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module SRAMTemplateWithArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_1 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.dirty <= io.w.req.bits.data.dirty @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.valid <= io.w.req.bits.data.valid @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.tag <= io.w.req.bits.data.tag @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_2 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _WIRE[0].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[1].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[2].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[3].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    reg r : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when REG : @[Reg.scala 28:19]
      r[0].dirty <= ram.io.r.resp.data[0].dirty @[Reg.scala 28:23]
      r[0].valid <= ram.io.r.resp.data[0].valid @[Reg.scala 28:23]
      r[0].tag <= ram.io.r.resp.data[0].tag @[Reg.scala 28:23]
      r[1].dirty <= ram.io.r.resp.data[1].dirty @[Reg.scala 28:23]
      r[1].valid <= ram.io.r.resp.data[1].valid @[Reg.scala 28:23]
      r[1].tag <= ram.io.r.resp.data[1].tag @[Reg.scala 28:23]
      r[2].dirty <= ram.io.r.resp.data[2].dirty @[Reg.scala 28:23]
      r[2].valid <= ram.io.r.resp.data[2].valid @[Reg.scala 28:23]
      r[2].tag <= ram.io.r.resp.data[2].tag @[Reg.scala 28:23]
      r[3].dirty <= ram.io.r.resp.data[3].dirty @[Reg.scala 28:23]
      r[3].valid <= ram.io.r.resp.data[3].valid @[Reg.scala 28:23]
      r[3].tag <= ram.io.r.resp.data[3].tag @[Reg.scala 28:23]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data[0].dirty <= _T_1[0].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].valid <= _T_1[0].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].tag <= _T_1[0].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].dirty <= _T_1[1].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].valid <= _T_1[1].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].tag <= _T_1[1].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].dirty <= _T_1[2].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].valid <= _T_1[2].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].tag <= _T_1[2].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].dirty <= _T_1[3].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].valid <= _T_1[3].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].tag <= _T_1[3].tag @[SRAMTemplate.scala 130:17]

  module SRAMTemplate_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    smem array : UInt<64>[4] [1024] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<64> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _WIRE, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _T_1 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_1, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_2 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_3 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_6 = or(setIdx, UInt<10>("h0"))
      node _T_7 = bits(_T_6, 9, 0)
      write mport MPORT = array[_T_7], clock
      when _T_2 :
        MPORT[0] <= wdata[0]
      when _T_3 :
        MPORT[1] <= wdata[1]
      when _T_4 :
        MPORT[2] <= wdata[2]
      when _T_5 :
        MPORT[3] <= wdata[3]
    wire _WIRE_1 : UInt @[SRAMTemplate.scala 98:31]
    _WIRE_1 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _WIRE_1 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_8 = or(_WIRE_1, UInt<10>("h0")) @[SRAMTemplate.scala 98:31]
      node _T_9 = bits(_T_8, 9, 0) @[SRAMTemplate.scala 98:31]
      read mport MPORT_1 = array[_T_9], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_2 : UInt<64>
    _WIRE_2 <= MPORT_1[0]
    node _T_10 = bits(_WIRE_2, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _T_10 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= MPORT_1[1]
    node _T_11 = bits(_WIRE_3, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _T_11 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : UInt<64>
    _WIRE_4 <= MPORT_1[2]
    node _T_12 = bits(_WIRE_4, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _T_12 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_5 : UInt<64>
    _WIRE_5 <= MPORT_1[3]
    node _T_13 = bits(_WIRE_5, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _T_13 @[SRAMTemplate.scala 98:78]
    wire _WIRE_6 : { data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].data <= rdata_0.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].data <= rdata_1.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].data <= rdata_2.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].data <= rdata_3.data @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].data <= _WIRE_6[0].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].data <= _WIRE_6[1].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].data <= _WIRE_6[2].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].data <= _WIRE_6[3].data @[SRAMTemplate.scala 99:18]
    node _T_14 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_15 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_16 = and(_T_14, _T_15) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_16 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module SRAMTemplateWithArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}[2], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_2 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.data <= io.w.req.bits.data.data @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_3 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].bits.setIdx <= io.r[1].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].valid <= io.r[1].req.valid @[SRAMTemplate.scala 125:17]
    io.r[1].req.ready <= readArb.io.in[1].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when REG : @[Reg.scala 28:19]
      r[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      r[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      r[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      r[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data[0].data <= _T_1[0].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].data <= _T_1[1].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].data <= _T_1[2].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].data <= _T_1[3].data @[SRAMTemplate.scala 130:17]
    node _T_2 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[SRAMTemplate.scala 130:58]
    REG_1 <= _T_2 @[SRAMTemplate.scala 130:58]
    wire _WIRE_1 : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE_1[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r_1 : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE_1) @[Reg.scala 27:20]
    when REG_1 : @[Reg.scala 28:19]
      r_1[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      r_1[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      r_1[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      r_1[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
    node _T_3 = mux(REG_1, ram.io.r.resp.data, r_1) @[Hold.scala 23:48]
    io.r[1].resp.data[0].data <= _T_3[0].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[1].data <= _T_3[1].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[2].data <= _T_3[2].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[3].data <= _T_3[3].data @[SRAMTemplate.scala 130:17]

  module Arbiter_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, chosen : UInt<0>}

    io.chosen <= UInt<1>("h0") @[Arbiter.scala 123:13]
    io.out.bits.user <= io.in[0].bits.user @[Arbiter.scala 124:15]
    io.out.bits.wdata <= io.in[0].bits.wdata @[Arbiter.scala 124:15]
    io.out.bits.wmask <= io.in[0].bits.wmask @[Arbiter.scala 124:15]
    io.out.bits.cmd <= io.in[0].bits.cmd @[Arbiter.scala 124:15]
    io.out.bits.size <= io.in[0].bits.size @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 124:15]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(UInt<1>("h1"), UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module Cache :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<87>}}}, flip flush : UInt<2>, out : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}

    inst s1 of CacheStage1 @[Cache.scala 482:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2 @[Cache.scala 483:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3 @[Cache.scala 484:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter @[Cache.scala 485:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_1 @[Cache.scala 486:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T = asUInt(reset) @[Cache.scala 492:30]
    node _T_1 = or(_T, _WIRE) @[Cache.scala 492:37]
    metaArray.reset <= _T_1 @[Cache.scala 492:21]
    inst arb of Arbiter_4 @[Cache.scala 495:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[0].bits.user <= io.in.req.bits.user @[Cache.scala 496:28]
    arb.io.in[0].bits.wdata <= io.in.req.bits.wdata @[Cache.scala 496:28]
    arb.io.in[0].bits.wmask <= io.in.req.bits.wmask @[Cache.scala 496:28]
    arb.io.in[0].bits.cmd <= io.in.req.bits.cmd @[Cache.scala 496:28]
    arb.io.in[0].bits.size <= io.in.req.bits.size @[Cache.scala 496:28]
    arb.io.in[0].bits.addr <= io.in.req.bits.addr @[Cache.scala 496:28]
    arb.io.in[0].valid <= io.in.req.valid @[Cache.scala 496:28]
    io.in.req.ready <= arb.io.in[0].ready @[Cache.scala 496:28]
    s1.io.in.bits.user <= arb.io.out.bits.user @[Cache.scala 498:12]
    s1.io.in.bits.wdata <= arb.io.out.bits.wdata @[Cache.scala 498:12]
    s1.io.in.bits.wmask <= arb.io.out.bits.wmask @[Cache.scala 498:12]
    s1.io.in.bits.cmd <= arb.io.out.bits.cmd @[Cache.scala 498:12]
    s1.io.in.bits.size <= arb.io.out.bits.size @[Cache.scala 498:12]
    s1.io.in.bits.addr <= arb.io.out.bits.addr @[Cache.scala 498:12]
    s1.io.in.valid <= arb.io.out.valid @[Cache.scala 498:12]
    arb.io.out.ready <= s1.io.in.ready @[Cache.scala 498:12]
    node _T_2 = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 40:37]
    node _T_3 = bits(io.flush, 0, 0) @[Cache.scala 504:66]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T_2 : @[Pipeline.scala 25:25]
      REG <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_4 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_4 : @[Pipeline.scala 26:38]
      REG <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_3 : @[Pipeline.scala 27:20]
      REG <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _T_5 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg r : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}}, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when _T_5 : @[Reg.scala 16:19]
      r.req.user <= s1.io.out.bits.req.user @[Reg.scala 16:23]
      r.req.wdata <= s1.io.out.bits.req.wdata @[Reg.scala 16:23]
      r.req.wmask <= s1.io.out.bits.req.wmask @[Reg.scala 16:23]
      r.req.cmd <= s1.io.out.bits.req.cmd @[Reg.scala 16:23]
      r.req.size <= s1.io.out.bits.req.size @[Reg.scala 16:23]
      r.req.addr <= s1.io.out.bits.req.addr @[Reg.scala 16:23]
    s2.io.in.bits.req.user <= r.req.user @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wdata <= r.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= r.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= r.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= r.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= r.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= REG @[Pipeline.scala 31:17]
    node _T_6 = bits(io.flush, 1, 1) @[Cache.scala 505:64]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_7 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_7 : @[Pipeline.scala 26:38]
      REG_1 <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_6 : @[Pipeline.scala 27:20]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _T_8 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg r_1 : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<87>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when _T_8 : @[Reg.scala 16:19]
      r_1.forwardData.waymask <= s2.io.out.bits.forwardData.waymask @[Reg.scala 16:23]
      r_1.forwardData.data.data <= s2.io.out.bits.forwardData.data.data @[Reg.scala 16:23]
      r_1.forwardData.setIdx <= s2.io.out.bits.forwardData.setIdx @[Reg.scala 16:23]
      r_1.isForwardData <= s2.io.out.bits.isForwardData @[Reg.scala 16:23]
      r_1.mmio <= s2.io.out.bits.mmio @[Reg.scala 16:23]
      r_1.waymask <= s2.io.out.bits.waymask @[Reg.scala 16:23]
      r_1.hit <= s2.io.out.bits.hit @[Reg.scala 16:23]
      r_1.datas[0].data <= s2.io.out.bits.datas[0].data @[Reg.scala 16:23]
      r_1.datas[1].data <= s2.io.out.bits.datas[1].data @[Reg.scala 16:23]
      r_1.datas[2].data <= s2.io.out.bits.datas[2].data @[Reg.scala 16:23]
      r_1.datas[3].data <= s2.io.out.bits.datas[3].data @[Reg.scala 16:23]
      r_1.metas[0].dirty <= s2.io.out.bits.metas[0].dirty @[Reg.scala 16:23]
      r_1.metas[0].valid <= s2.io.out.bits.metas[0].valid @[Reg.scala 16:23]
      r_1.metas[0].tag <= s2.io.out.bits.metas[0].tag @[Reg.scala 16:23]
      r_1.metas[1].dirty <= s2.io.out.bits.metas[1].dirty @[Reg.scala 16:23]
      r_1.metas[1].valid <= s2.io.out.bits.metas[1].valid @[Reg.scala 16:23]
      r_1.metas[1].tag <= s2.io.out.bits.metas[1].tag @[Reg.scala 16:23]
      r_1.metas[2].dirty <= s2.io.out.bits.metas[2].dirty @[Reg.scala 16:23]
      r_1.metas[2].valid <= s2.io.out.bits.metas[2].valid @[Reg.scala 16:23]
      r_1.metas[2].tag <= s2.io.out.bits.metas[2].tag @[Reg.scala 16:23]
      r_1.metas[3].dirty <= s2.io.out.bits.metas[3].dirty @[Reg.scala 16:23]
      r_1.metas[3].valid <= s2.io.out.bits.metas[3].valid @[Reg.scala 16:23]
      r_1.metas[3].tag <= s2.io.out.bits.metas[3].tag @[Reg.scala 16:23]
      r_1.req.user <= s2.io.out.bits.req.user @[Reg.scala 16:23]
      r_1.req.wdata <= s2.io.out.bits.req.wdata @[Reg.scala 16:23]
      r_1.req.wmask <= s2.io.out.bits.req.wmask @[Reg.scala 16:23]
      r_1.req.cmd <= s2.io.out.bits.req.cmd @[Reg.scala 16:23]
      r_1.req.size <= s2.io.out.bits.req.size @[Reg.scala 16:23]
      r_1.req.addr <= s2.io.out.bits.req.addr @[Reg.scala 16:23]
    s3.io.in.bits.forwardData.waymask <= r_1.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= r_1.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= r_1.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= r_1.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= r_1.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= r_1.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= r_1.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= r_1.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= r_1.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= r_1.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= r_1.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= r_1.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= r_1.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= r_1.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= r_1.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= r_1.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= r_1.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= r_1.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= r_1.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= r_1.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= r_1.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= r_1.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= r_1.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.user <= r_1.req.user @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= r_1.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= r_1.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= r_1.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= r_1.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= r_1.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= REG_1 @[Pipeline.scala 31:17]
    io.in.resp.bits.user <= s3.io.out.bits.user @[Cache.scala 506:14]
    io.in.resp.bits.rdata <= s3.io.out.bits.rdata @[Cache.scala 506:14]
    io.in.resp.bits.cmd <= s3.io.out.bits.cmd @[Cache.scala 506:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 506:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 506:14]
    node _T_9 = bits(io.flush, 1, 1) @[Cache.scala 507:26]
    s3.io.flush <= _T_9 @[Cache.scala 507:15]
    s3.io.mem.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Cache.scala 508:14]
    s3.io.mem.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Cache.scala 508:14]
    s3.io.mem.resp.valid <= io.out.mem.resp.valid @[Cache.scala 508:14]
    io.out.mem.resp.ready <= s3.io.mem.resp.ready @[Cache.scala 508:14]
    io.out.mem.req.bits.wdata <= s3.io.mem.req.bits.wdata @[Cache.scala 508:14]
    io.out.mem.req.bits.wmask <= s3.io.mem.req.bits.wmask @[Cache.scala 508:14]
    io.out.mem.req.bits.cmd <= s3.io.mem.req.bits.cmd @[Cache.scala 508:14]
    io.out.mem.req.bits.size <= s3.io.mem.req.bits.size @[Cache.scala 508:14]
    io.out.mem.req.bits.addr <= s3.io.mem.req.bits.addr @[Cache.scala 508:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 508:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 508:14]
    s3.io.mmio.resp.bits.rdata <= io.mmio.resp.bits.rdata @[Cache.scala 509:11]
    s3.io.mmio.resp.bits.cmd <= io.mmio.resp.bits.cmd @[Cache.scala 509:11]
    s3.io.mmio.resp.valid <= io.mmio.resp.valid @[Cache.scala 509:11]
    io.mmio.resp.ready <= s3.io.mmio.resp.ready @[Cache.scala 509:11]
    io.mmio.req.bits.wdata <= s3.io.mmio.req.bits.wdata @[Cache.scala 509:11]
    io.mmio.req.bits.wmask <= s3.io.mmio.req.bits.wmask @[Cache.scala 509:11]
    io.mmio.req.bits.cmd <= s3.io.mmio.req.bits.cmd @[Cache.scala 509:11]
    io.mmio.req.bits.size <= s3.io.mmio.req.bits.size @[Cache.scala 509:11]
    io.mmio.req.bits.addr <= s3.io.mmio.req.bits.addr @[Cache.scala 509:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 509:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 509:11]
    node _T_10 = eq(s2.io.in.valid, UInt<1>("h0")) @[Cache.scala 510:15]
    node _T_11 = eq(s3.io.in.valid, UInt<1>("h0")) @[Cache.scala 510:34]
    node _T_12 = and(_T_10, _T_11) @[Cache.scala 510:31]
    io.empty <= _T_12 @[Cache.scala 510:12]
    node _T_13 = eq(s3.io.out.bits.cmd, UInt<3>("h4")) @[SimpleBus.scala 95:26]
    node _T_14 = and(s3.io.out.valid, _T_13) @[Cache.scala 512:43]
    node _T_15 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 512:100]
    node _T_16 = mux(_T_14, UInt<1>("h0"), _T_15) @[Cache.scala 512:26]
    io.in.resp.valid <= _T_16 @[Cache.scala 512:20]
    io.out.coh.req.ready <= UInt<1>("h1") @[Cache.scala 524:26]
    io.out.coh.resp.bits.rdata is invalid @[Cache.scala 525:21]
    io.out.coh.resp.bits.cmd is invalid @[Cache.scala 525:21]
    io.out.coh.resp.valid is invalid @[Cache.scala 525:21]
    io.out.coh.resp.ready is invalid @[Cache.scala 525:21]
    io.out.coh.resp.valid <= UInt<1>("h0") @[Cache.scala 526:27]
    s3.io.cohResp.ready <= UInt<1>("h1") @[Cache.scala 527:25]
    s1.io.metaReadBus.resp.data[0].dirty <= metaArray.io.r[0].resp.data[0].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[0].valid <= metaArray.io.r[0].resp.data[0].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[0].tag <= metaArray.io.r[0].resp.data[0].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].dirty <= metaArray.io.r[0].resp.data[1].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].valid <= metaArray.io.r[0].resp.data[1].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].tag <= metaArray.io.r[0].resp.data[1].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].dirty <= metaArray.io.r[0].resp.data[2].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].valid <= metaArray.io.r[0].resp.data[2].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].tag <= metaArray.io.r[0].resp.data[2].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].dirty <= metaArray.io.r[0].resp.data[3].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].valid <= metaArray.io.r[0].resp.data[3].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].tag <= metaArray.io.r[0].resp.data[3].tag @[Cache.scala 530:21]
    metaArray.io.r[0].req.bits.setIdx <= s1.io.metaReadBus.req.bits.setIdx @[Cache.scala 530:21]
    metaArray.io.r[0].req.valid <= s1.io.metaReadBus.req.valid @[Cache.scala 530:21]
    s1.io.metaReadBus.req.ready <= metaArray.io.r[0].req.ready @[Cache.scala 530:21]
    s1.io.dataReadBus.resp.data[0].data <= dataArray.io.r[0].resp.data[0].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[1].data <= dataArray.io.r[0].resp.data[1].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[2].data <= dataArray.io.r[0].resp.data[2].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[3].data <= dataArray.io.r[0].resp.data[3].data @[Cache.scala 531:21]
    dataArray.io.r[0].req.bits.setIdx <= s1.io.dataReadBus.req.bits.setIdx @[Cache.scala 531:21]
    dataArray.io.r[0].req.valid <= s1.io.dataReadBus.req.valid @[Cache.scala 531:21]
    s1.io.dataReadBus.req.ready <= dataArray.io.r[0].req.ready @[Cache.scala 531:21]
    s3.io.dataReadBus.resp.data[0].data <= dataArray.io.r[1].resp.data[0].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[1].data <= dataArray.io.r[1].resp.data[1].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[2].data <= dataArray.io.r[1].resp.data[2].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[3].data <= dataArray.io.r[1].resp.data[3].data @[Cache.scala 532:21]
    dataArray.io.r[1].req.bits.setIdx <= s3.io.dataReadBus.req.bits.setIdx @[Cache.scala 532:21]
    dataArray.io.r[1].req.valid <= s3.io.dataReadBus.req.valid @[Cache.scala 532:21]
    s3.io.dataReadBus.req.ready <= dataArray.io.r[1].req.ready @[Cache.scala 532:21]
    metaArray.io.w.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 534:18]
    metaArray.io.w.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 534:18]
    metaArray.io.w.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 534:18]
    s3.io.metaWriteBus.req.ready <= metaArray.io.w.req.ready @[Cache.scala 534:18]
    dataArray.io.w.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 535:18]
    dataArray.io.w.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 535:18]
    dataArray.io.w.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 535:18]
    dataArray.io.w.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 535:18]
    s3.io.dataWriteBus.req.ready <= dataArray.io.w.req.ready @[Cache.scala 535:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 537:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 538:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 538:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 538:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 538:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 539:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 540:22]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_17 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_18 = tail(_T_17, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_18 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_19 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 55:16]
    when _T_19 : @[Debug.scala 55:31]
      node _T_20 = asUInt(reset) @[Debug.scala 56:24]
      node _T_21 = eq(_T_20, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_21 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache: ", REG_2) : SIM @[Debug.scala 56:24]
      node _T_22 = asUInt(reset) @[Debug.scala 57:13]
      node _T_23 = eq(_T_22, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_23 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) : SIM_1 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_24 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_25 = tail(_T_24, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_25 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_26 = and(UInt<1>("h1"), _WIRE_2) @[Debug.scala 55:16]
    when _T_26 : @[Debug.scala 55:31]
      node _T_27 = asUInt(reset) @[Debug.scala 56:24]
      node _T_28 = eq(_T_27, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_28 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache: ", REG_3) : SIM_2 @[Debug.scala 56:24]
      node _T_29 = asUInt(reset) @[Debug.scala 57:13]
      node _T_30 = eq(_T_29, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_30 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) : SIM_3 @[Debug.scala 57:13]
    when s1.io.in.valid : @[Cache.scala 550:25]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_31 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_32 = tail(_T_31, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_32 @[GTimer.scala 25:7]
      wire _WIRE_3 : UInt<1>
      _WIRE_3 <= UInt<1>("h0")
      node _T_33 = and(UInt<1>("h1"), _WIRE_3) @[Debug.scala 55:16]
      when _T_33 : @[Debug.scala 55:31]
        node _T_34 = asUInt(reset) @[Debug.scala 56:24]
        node _T_35 = eq(_T_34, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_35 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache: ", REG_4) : SIM_4 @[Debug.scala 56:24]
        node _T_36 = asUInt(reset) @[Debug.scala 57:13]
        node _T_37 = eq(_T_36, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_37 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[icache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) : SIM_5 @[Debug.scala 57:13]
    when s2.io.in.valid : @[Cache.scala 551:25]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_38 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_39 = tail(_T_38, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_39 @[GTimer.scala 25:7]
      wire _WIRE_4 : UInt<1>
      _WIRE_4 <= UInt<1>("h0")
      node _T_40 = and(UInt<1>("h1"), _WIRE_4) @[Debug.scala 55:16]
      when _T_40 : @[Debug.scala 55:31]
        node _T_41 = asUInt(reset) @[Debug.scala 56:24]
        node _T_42 = eq(_T_41, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_42 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache: ", REG_5) : SIM_6 @[Debug.scala 56:24]
        node _T_43 = asUInt(reset) @[Debug.scala 57:13]
        node _T_44 = eq(_T_43, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_44 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[icache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) : SIM_7 @[Debug.scala 57:13]
    when s3.io.in.valid : @[Cache.scala 552:25]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_45 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_46 = tail(_T_45, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_46 @[GTimer.scala 25:7]
      wire _WIRE_5 : UInt<1>
      _WIRE_5 <= UInt<1>("h0")
      node _T_47 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
      when _T_47 : @[Debug.scala 55:31]
        node _T_48 = asUInt(reset) @[Debug.scala 56:24]
        node _T_49 = eq(_T_48, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_49 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache: ", REG_6) : SIM_8 @[Debug.scala 56:24]
        node _T_50 = asUInt(reset) @[Debug.scala 57:13]
        node _T_51 = eq(_T_50, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_51 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[icache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) : SIM_9 @[Debug.scala 57:13]

  module EmbeddedTLBExec_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip md : UInt<121>[4], mdWrite : { wen : UInt<1>, windex : UInt<4>, waymask : UInt<4>, wdata : UInt<121>}, flip mdReady : UInt<1>, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, flip satp : UInt<64>, pf : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, ipf : UInt<1>, isFinish : UInt<1>}

    wire _WIRE : { vpn : UInt<27>, off : UInt<12>} @[EmbeddedTLB.scala 196:30]
    wire _WIRE_1 : UInt<39>
    _WIRE_1 <= io.in.bits.addr
    node _T = bits(_WIRE_1, 11, 0) @[EmbeddedTLB.scala 196:30]
    _WIRE.off <= _T @[EmbeddedTLB.scala 196:30]
    node _T_1 = bits(_WIRE_1, 38, 12) @[EmbeddedTLB.scala 196:30]
    _WIRE.vpn <= _T_1 @[EmbeddedTLB.scala 196:30]
    wire vpn : { vpn2 : UInt<9>, vpn1 : UInt<9>, vpn0 : UInt<9>} @[EmbeddedTLB.scala 196:54]
    wire _WIRE_2 : UInt<27>
    _WIRE_2 <= _WIRE.vpn
    node _T_2 = bits(_WIRE_2, 8, 0) @[EmbeddedTLB.scala 196:54]
    vpn.vpn0 <= _T_2 @[EmbeddedTLB.scala 196:54]
    node _T_3 = bits(_WIRE_2, 17, 9) @[EmbeddedTLB.scala 196:54]
    vpn.vpn1 <= _T_3 @[EmbeddedTLB.scala 196:54]
    node _T_4 = bits(_WIRE_2, 26, 18) @[EmbeddedTLB.scala 196:54]
    vpn.vpn2 <= _T_4 @[EmbeddedTLB.scala 196:54]
    wire satp : { mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 198:30]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= io.satp
    node _T_5 = bits(_WIRE_3, 19, 0) @[EmbeddedTLB.scala 198:30]
    satp.ppn <= _T_5 @[EmbeddedTLB.scala 198:30]
    node _T_6 = bits(_WIRE_3, 43, 20) @[EmbeddedTLB.scala 198:30]
    satp.res <= _T_6 @[EmbeddedTLB.scala 198:30]
    node _T_7 = bits(_WIRE_3, 59, 44) @[EmbeddedTLB.scala 198:30]
    satp.asid <= _T_7 @[EmbeddedTLB.scala 198:30]
    node _T_8 = bits(_WIRE_3, 63, 60) @[EmbeddedTLB.scala 198:30]
    satp.mode <= _T_8 @[EmbeddedTLB.scala 198:30]
    io.pf.loadPF <= UInt<1>("h0") @[EmbeddedTLB.scala 202:13]
    io.pf.storePF <= UInt<1>("h0") @[EmbeddedTLB.scala 203:14]
    io.pf.addr <= io.in.bits.addr @[EmbeddedTLB.scala 204:11]
    wire _WIRE_4 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_5 : UInt<121>
    _WIRE_5 <= io.md[0]
    node _T_9 = bits(_WIRE_5, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.pteaddr <= _T_9 @[EmbeddedTLB.scala 207:46]
    node _T_10 = bits(_WIRE_5, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.ppn <= _T_10 @[EmbeddedTLB.scala 207:46]
    node _T_11 = bits(_WIRE_5, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.flag <= _T_11 @[EmbeddedTLB.scala 207:46]
    node _T_12 = bits(_WIRE_5, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.mask <= _T_12 @[EmbeddedTLB.scala 207:46]
    node _T_13 = bits(_WIRE_5, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.asid <= _T_13 @[EmbeddedTLB.scala 207:46]
    node _T_14 = bits(_WIRE_5, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_4.vpn <= _T_14 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_6 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_7 : UInt<8>
    _WIRE_7 <= _WIRE_4.flag
    node _T_15 = bits(_WIRE_7, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.v <= _T_15 @[EmbeddedTLB.scala 207:71]
    node _T_16 = bits(_WIRE_7, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.r <= _T_16 @[EmbeddedTLB.scala 207:71]
    node _T_17 = bits(_WIRE_7, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.w <= _T_17 @[EmbeddedTLB.scala 207:71]
    node _T_18 = bits(_WIRE_7, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.x <= _T_18 @[EmbeddedTLB.scala 207:71]
    node _T_19 = bits(_WIRE_7, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.u <= _T_19 @[EmbeddedTLB.scala 207:71]
    node _T_20 = bits(_WIRE_7, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.g <= _T_20 @[EmbeddedTLB.scala 207:71]
    node _T_21 = bits(_WIRE_7, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.a <= _T_21 @[EmbeddedTLB.scala 207:71]
    node _T_22 = bits(_WIRE_7, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_6.d <= _T_22 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_8 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_9 : UInt<121>
    _WIRE_9 <= io.md[0]
    node _T_23 = bits(_WIRE_9, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.pteaddr <= _T_23 @[EmbeddedTLB.scala 207:100]
    node _T_24 = bits(_WIRE_9, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.ppn <= _T_24 @[EmbeddedTLB.scala 207:100]
    node _T_25 = bits(_WIRE_9, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.flag <= _T_25 @[EmbeddedTLB.scala 207:100]
    node _T_26 = bits(_WIRE_9, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.mask <= _T_26 @[EmbeddedTLB.scala 207:100]
    node _T_27 = bits(_WIRE_9, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.asid <= _T_27 @[EmbeddedTLB.scala 207:100]
    node _T_28 = bits(_WIRE_9, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_8.vpn <= _T_28 @[EmbeddedTLB.scala 207:100]
    node _T_29 = eq(_WIRE_8.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_30 = and(_WIRE_6.v, _T_29) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_10 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_11 : UInt<121>
    _WIRE_11 <= io.md[0]
    node _T_31 = bits(_WIRE_11, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.pteaddr <= _T_31 @[EmbeddedTLB.scala 207:152]
    node _T_32 = bits(_WIRE_11, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.ppn <= _T_32 @[EmbeddedTLB.scala 207:152]
    node _T_33 = bits(_WIRE_11, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.flag <= _T_33 @[EmbeddedTLB.scala 207:152]
    node _T_34 = bits(_WIRE_11, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.mask <= _T_34 @[EmbeddedTLB.scala 207:152]
    node _T_35 = bits(_WIRE_11, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.asid <= _T_35 @[EmbeddedTLB.scala 207:152]
    node _T_36 = bits(_WIRE_11, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_10.vpn <= _T_36 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_12 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_13 : UInt<121>
    _WIRE_13 <= io.md[0]
    node _T_37 = bits(_WIRE_13, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.pteaddr <= _T_37 @[EmbeddedTLB.scala 207:180]
    node _T_38 = bits(_WIRE_13, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.ppn <= _T_38 @[EmbeddedTLB.scala 207:180]
    node _T_39 = bits(_WIRE_13, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.flag <= _T_39 @[EmbeddedTLB.scala 207:180]
    node _T_40 = bits(_WIRE_13, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.mask <= _T_40 @[EmbeddedTLB.scala 207:180]
    node _T_41 = bits(_WIRE_13, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.asid <= _T_41 @[EmbeddedTLB.scala 207:180]
    node _T_42 = bits(_WIRE_13, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_12.vpn <= _T_42 @[EmbeddedTLB.scala 207:180]
    node hi = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_43 = cat(hi, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_44 = cat(UInt<9>("h1ff"), _WIRE_10.mask) @[Cat.scala 30:58]
    node _T_45 = and(_T_44, _WIRE_12.vpn) @[TLB.scala 131:37]
    node _T_46 = cat(UInt<9>("h1ff"), _WIRE_10.mask) @[Cat.scala 30:58]
    node _T_47 = and(_T_46, _T_43) @[TLB.scala 131:84]
    node _T_48 = eq(_T_45, _T_47) @[TLB.scala 131:48]
    node _T_49 = and(_T_30, _T_48) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_14 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_15 : UInt<121>
    _WIRE_15 <= io.md[1]
    node _T_50 = bits(_WIRE_15, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.pteaddr <= _T_50 @[EmbeddedTLB.scala 207:46]
    node _T_51 = bits(_WIRE_15, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.ppn <= _T_51 @[EmbeddedTLB.scala 207:46]
    node _T_52 = bits(_WIRE_15, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.flag <= _T_52 @[EmbeddedTLB.scala 207:46]
    node _T_53 = bits(_WIRE_15, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.mask <= _T_53 @[EmbeddedTLB.scala 207:46]
    node _T_54 = bits(_WIRE_15, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.asid <= _T_54 @[EmbeddedTLB.scala 207:46]
    node _T_55 = bits(_WIRE_15, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_14.vpn <= _T_55 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_16 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_17 : UInt<8>
    _WIRE_17 <= _WIRE_14.flag
    node _T_56 = bits(_WIRE_17, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.v <= _T_56 @[EmbeddedTLB.scala 207:71]
    node _T_57 = bits(_WIRE_17, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.r <= _T_57 @[EmbeddedTLB.scala 207:71]
    node _T_58 = bits(_WIRE_17, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.w <= _T_58 @[EmbeddedTLB.scala 207:71]
    node _T_59 = bits(_WIRE_17, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.x <= _T_59 @[EmbeddedTLB.scala 207:71]
    node _T_60 = bits(_WIRE_17, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.u <= _T_60 @[EmbeddedTLB.scala 207:71]
    node _T_61 = bits(_WIRE_17, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.g <= _T_61 @[EmbeddedTLB.scala 207:71]
    node _T_62 = bits(_WIRE_17, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.a <= _T_62 @[EmbeddedTLB.scala 207:71]
    node _T_63 = bits(_WIRE_17, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_16.d <= _T_63 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_18 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_19 : UInt<121>
    _WIRE_19 <= io.md[1]
    node _T_64 = bits(_WIRE_19, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.pteaddr <= _T_64 @[EmbeddedTLB.scala 207:100]
    node _T_65 = bits(_WIRE_19, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.ppn <= _T_65 @[EmbeddedTLB.scala 207:100]
    node _T_66 = bits(_WIRE_19, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.flag <= _T_66 @[EmbeddedTLB.scala 207:100]
    node _T_67 = bits(_WIRE_19, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.mask <= _T_67 @[EmbeddedTLB.scala 207:100]
    node _T_68 = bits(_WIRE_19, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.asid <= _T_68 @[EmbeddedTLB.scala 207:100]
    node _T_69 = bits(_WIRE_19, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_18.vpn <= _T_69 @[EmbeddedTLB.scala 207:100]
    node _T_70 = eq(_WIRE_18.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_71 = and(_WIRE_16.v, _T_70) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_20 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_21 : UInt<121>
    _WIRE_21 <= io.md[1]
    node _T_72 = bits(_WIRE_21, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.pteaddr <= _T_72 @[EmbeddedTLB.scala 207:152]
    node _T_73 = bits(_WIRE_21, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.ppn <= _T_73 @[EmbeddedTLB.scala 207:152]
    node _T_74 = bits(_WIRE_21, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.flag <= _T_74 @[EmbeddedTLB.scala 207:152]
    node _T_75 = bits(_WIRE_21, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.mask <= _T_75 @[EmbeddedTLB.scala 207:152]
    node _T_76 = bits(_WIRE_21, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.asid <= _T_76 @[EmbeddedTLB.scala 207:152]
    node _T_77 = bits(_WIRE_21, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_20.vpn <= _T_77 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_22 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_23 : UInt<121>
    _WIRE_23 <= io.md[1]
    node _T_78 = bits(_WIRE_23, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.pteaddr <= _T_78 @[EmbeddedTLB.scala 207:180]
    node _T_79 = bits(_WIRE_23, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.ppn <= _T_79 @[EmbeddedTLB.scala 207:180]
    node _T_80 = bits(_WIRE_23, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.flag <= _T_80 @[EmbeddedTLB.scala 207:180]
    node _T_81 = bits(_WIRE_23, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.mask <= _T_81 @[EmbeddedTLB.scala 207:180]
    node _T_82 = bits(_WIRE_23, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.asid <= _T_82 @[EmbeddedTLB.scala 207:180]
    node _T_83 = bits(_WIRE_23, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_22.vpn <= _T_83 @[EmbeddedTLB.scala 207:180]
    node hi_1 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_84 = cat(hi_1, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_85 = cat(UInt<9>("h1ff"), _WIRE_20.mask) @[Cat.scala 30:58]
    node _T_86 = and(_T_85, _WIRE_22.vpn) @[TLB.scala 131:37]
    node _T_87 = cat(UInt<9>("h1ff"), _WIRE_20.mask) @[Cat.scala 30:58]
    node _T_88 = and(_T_87, _T_84) @[TLB.scala 131:84]
    node _T_89 = eq(_T_86, _T_88) @[TLB.scala 131:48]
    node _T_90 = and(_T_71, _T_89) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_24 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_25 : UInt<121>
    _WIRE_25 <= io.md[2]
    node _T_91 = bits(_WIRE_25, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.pteaddr <= _T_91 @[EmbeddedTLB.scala 207:46]
    node _T_92 = bits(_WIRE_25, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.ppn <= _T_92 @[EmbeddedTLB.scala 207:46]
    node _T_93 = bits(_WIRE_25, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.flag <= _T_93 @[EmbeddedTLB.scala 207:46]
    node _T_94 = bits(_WIRE_25, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.mask <= _T_94 @[EmbeddedTLB.scala 207:46]
    node _T_95 = bits(_WIRE_25, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.asid <= _T_95 @[EmbeddedTLB.scala 207:46]
    node _T_96 = bits(_WIRE_25, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_24.vpn <= _T_96 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_26 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_27 : UInt<8>
    _WIRE_27 <= _WIRE_24.flag
    node _T_97 = bits(_WIRE_27, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.v <= _T_97 @[EmbeddedTLB.scala 207:71]
    node _T_98 = bits(_WIRE_27, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.r <= _T_98 @[EmbeddedTLB.scala 207:71]
    node _T_99 = bits(_WIRE_27, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.w <= _T_99 @[EmbeddedTLB.scala 207:71]
    node _T_100 = bits(_WIRE_27, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.x <= _T_100 @[EmbeddedTLB.scala 207:71]
    node _T_101 = bits(_WIRE_27, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.u <= _T_101 @[EmbeddedTLB.scala 207:71]
    node _T_102 = bits(_WIRE_27, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.g <= _T_102 @[EmbeddedTLB.scala 207:71]
    node _T_103 = bits(_WIRE_27, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.a <= _T_103 @[EmbeddedTLB.scala 207:71]
    node _T_104 = bits(_WIRE_27, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_26.d <= _T_104 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_28 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_29 : UInt<121>
    _WIRE_29 <= io.md[2]
    node _T_105 = bits(_WIRE_29, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.pteaddr <= _T_105 @[EmbeddedTLB.scala 207:100]
    node _T_106 = bits(_WIRE_29, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.ppn <= _T_106 @[EmbeddedTLB.scala 207:100]
    node _T_107 = bits(_WIRE_29, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.flag <= _T_107 @[EmbeddedTLB.scala 207:100]
    node _T_108 = bits(_WIRE_29, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.mask <= _T_108 @[EmbeddedTLB.scala 207:100]
    node _T_109 = bits(_WIRE_29, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.asid <= _T_109 @[EmbeddedTLB.scala 207:100]
    node _T_110 = bits(_WIRE_29, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_28.vpn <= _T_110 @[EmbeddedTLB.scala 207:100]
    node _T_111 = eq(_WIRE_28.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_112 = and(_WIRE_26.v, _T_111) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_30 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_31 : UInt<121>
    _WIRE_31 <= io.md[2]
    node _T_113 = bits(_WIRE_31, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.pteaddr <= _T_113 @[EmbeddedTLB.scala 207:152]
    node _T_114 = bits(_WIRE_31, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.ppn <= _T_114 @[EmbeddedTLB.scala 207:152]
    node _T_115 = bits(_WIRE_31, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.flag <= _T_115 @[EmbeddedTLB.scala 207:152]
    node _T_116 = bits(_WIRE_31, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.mask <= _T_116 @[EmbeddedTLB.scala 207:152]
    node _T_117 = bits(_WIRE_31, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.asid <= _T_117 @[EmbeddedTLB.scala 207:152]
    node _T_118 = bits(_WIRE_31, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_30.vpn <= _T_118 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_32 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_33 : UInt<121>
    _WIRE_33 <= io.md[2]
    node _T_119 = bits(_WIRE_33, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.pteaddr <= _T_119 @[EmbeddedTLB.scala 207:180]
    node _T_120 = bits(_WIRE_33, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.ppn <= _T_120 @[EmbeddedTLB.scala 207:180]
    node _T_121 = bits(_WIRE_33, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.flag <= _T_121 @[EmbeddedTLB.scala 207:180]
    node _T_122 = bits(_WIRE_33, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.mask <= _T_122 @[EmbeddedTLB.scala 207:180]
    node _T_123 = bits(_WIRE_33, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.asid <= _T_123 @[EmbeddedTLB.scala 207:180]
    node _T_124 = bits(_WIRE_33, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_32.vpn <= _T_124 @[EmbeddedTLB.scala 207:180]
    node hi_2 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_125 = cat(hi_2, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_126 = cat(UInt<9>("h1ff"), _WIRE_30.mask) @[Cat.scala 30:58]
    node _T_127 = and(_T_126, _WIRE_32.vpn) @[TLB.scala 131:37]
    node _T_128 = cat(UInt<9>("h1ff"), _WIRE_30.mask) @[Cat.scala 30:58]
    node _T_129 = and(_T_128, _T_125) @[TLB.scala 131:84]
    node _T_130 = eq(_T_127, _T_129) @[TLB.scala 131:48]
    node _T_131 = and(_T_112, _T_130) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_34 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:46]
    wire _WIRE_35 : UInt<121>
    _WIRE_35 <= io.md[3]
    node _T_132 = bits(_WIRE_35, 31, 0) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.pteaddr <= _T_132 @[EmbeddedTLB.scala 207:46]
    node _T_133 = bits(_WIRE_35, 51, 32) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.ppn <= _T_133 @[EmbeddedTLB.scala 207:46]
    node _T_134 = bits(_WIRE_35, 59, 52) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.flag <= _T_134 @[EmbeddedTLB.scala 207:46]
    node _T_135 = bits(_WIRE_35, 77, 60) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.mask <= _T_135 @[EmbeddedTLB.scala 207:46]
    node _T_136 = bits(_WIRE_35, 93, 78) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.asid <= _T_136 @[EmbeddedTLB.scala 207:46]
    node _T_137 = bits(_WIRE_35, 120, 94) @[EmbeddedTLB.scala 207:46]
    _WIRE_34.vpn <= _T_137 @[EmbeddedTLB.scala 207:46]
    wire _WIRE_36 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 207:71]
    wire _WIRE_37 : UInt<8>
    _WIRE_37 <= _WIRE_34.flag
    node _T_138 = bits(_WIRE_37, 0, 0) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.v <= _T_138 @[EmbeddedTLB.scala 207:71]
    node _T_139 = bits(_WIRE_37, 1, 1) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.r <= _T_139 @[EmbeddedTLB.scala 207:71]
    node _T_140 = bits(_WIRE_37, 2, 2) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.w <= _T_140 @[EmbeddedTLB.scala 207:71]
    node _T_141 = bits(_WIRE_37, 3, 3) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.x <= _T_141 @[EmbeddedTLB.scala 207:71]
    node _T_142 = bits(_WIRE_37, 4, 4) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.u <= _T_142 @[EmbeddedTLB.scala 207:71]
    node _T_143 = bits(_WIRE_37, 5, 5) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.g <= _T_143 @[EmbeddedTLB.scala 207:71]
    node _T_144 = bits(_WIRE_37, 6, 6) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.a <= _T_144 @[EmbeddedTLB.scala 207:71]
    node _T_145 = bits(_WIRE_37, 7, 7) @[EmbeddedTLB.scala 207:71]
    _WIRE_36.d <= _T_145 @[EmbeddedTLB.scala 207:71]
    wire _WIRE_38 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:100]
    wire _WIRE_39 : UInt<121>
    _WIRE_39 <= io.md[3]
    node _T_146 = bits(_WIRE_39, 31, 0) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.pteaddr <= _T_146 @[EmbeddedTLB.scala 207:100]
    node _T_147 = bits(_WIRE_39, 51, 32) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.ppn <= _T_147 @[EmbeddedTLB.scala 207:100]
    node _T_148 = bits(_WIRE_39, 59, 52) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.flag <= _T_148 @[EmbeddedTLB.scala 207:100]
    node _T_149 = bits(_WIRE_39, 77, 60) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.mask <= _T_149 @[EmbeddedTLB.scala 207:100]
    node _T_150 = bits(_WIRE_39, 93, 78) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.asid <= _T_150 @[EmbeddedTLB.scala 207:100]
    node _T_151 = bits(_WIRE_39, 120, 94) @[EmbeddedTLB.scala 207:100]
    _WIRE_38.vpn <= _T_151 @[EmbeddedTLB.scala 207:100]
    node _T_152 = eq(_WIRE_38.asid, satp.asid) @[EmbeddedTLB.scala 207:117]
    node _T_153 = and(_WIRE_36.v, _T_152) @[EmbeddedTLB.scala 207:86]
    wire _WIRE_40 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:152]
    wire _WIRE_41 : UInt<121>
    _WIRE_41 <= io.md[3]
    node _T_154 = bits(_WIRE_41, 31, 0) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.pteaddr <= _T_154 @[EmbeddedTLB.scala 207:152]
    node _T_155 = bits(_WIRE_41, 51, 32) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.ppn <= _T_155 @[EmbeddedTLB.scala 207:152]
    node _T_156 = bits(_WIRE_41, 59, 52) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.flag <= _T_156 @[EmbeddedTLB.scala 207:152]
    node _T_157 = bits(_WIRE_41, 77, 60) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.mask <= _T_157 @[EmbeddedTLB.scala 207:152]
    node _T_158 = bits(_WIRE_41, 93, 78) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.asid <= _T_158 @[EmbeddedTLB.scala 207:152]
    node _T_159 = bits(_WIRE_41, 120, 94) @[EmbeddedTLB.scala 207:152]
    _WIRE_40.vpn <= _T_159 @[EmbeddedTLB.scala 207:152]
    wire _WIRE_42 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 207:180]
    wire _WIRE_43 : UInt<121>
    _WIRE_43 <= io.md[3]
    node _T_160 = bits(_WIRE_43, 31, 0) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.pteaddr <= _T_160 @[EmbeddedTLB.scala 207:180]
    node _T_161 = bits(_WIRE_43, 51, 32) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.ppn <= _T_161 @[EmbeddedTLB.scala 207:180]
    node _T_162 = bits(_WIRE_43, 59, 52) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.flag <= _T_162 @[EmbeddedTLB.scala 207:180]
    node _T_163 = bits(_WIRE_43, 77, 60) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.mask <= _T_163 @[EmbeddedTLB.scala 207:180]
    node _T_164 = bits(_WIRE_43, 93, 78) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.asid <= _T_164 @[EmbeddedTLB.scala 207:180]
    node _T_165 = bits(_WIRE_43, 120, 94) @[EmbeddedTLB.scala 207:180]
    _WIRE_42.vpn <= _T_165 @[EmbeddedTLB.scala 207:180]
    node hi_3 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 207:201]
    node _T_166 = cat(hi_3, vpn.vpn0) @[EmbeddedTLB.scala 207:201]
    node _T_167 = cat(UInt<9>("h1ff"), _WIRE_40.mask) @[Cat.scala 30:58]
    node _T_168 = and(_T_167, _WIRE_42.vpn) @[TLB.scala 131:37]
    node _T_169 = cat(UInt<9>("h1ff"), _WIRE_40.mask) @[Cat.scala 30:58]
    node _T_170 = and(_T_169, _T_166) @[TLB.scala 131:84]
    node _T_171 = eq(_T_168, _T_170) @[TLB.scala 131:48]
    node _T_172 = and(_T_153, _T_171) @[EmbeddedTLB.scala 207:132]
    wire _WIRE_44 : UInt<1>[4] @[EmbeddedTLB.scala 207:23]
    _WIRE_44[0] <= _T_49 @[EmbeddedTLB.scala 207:23]
    _WIRE_44[1] <= _T_90 @[EmbeddedTLB.scala 207:23]
    _WIRE_44[2] <= _T_131 @[EmbeddedTLB.scala 207:23]
    _WIRE_44[3] <= _T_172 @[EmbeddedTLB.scala 207:23]
    node lo = cat(_WIRE_44[1], _WIRE_44[0]) @[EmbeddedTLB.scala 207:211]
    node hi_4 = cat(_WIRE_44[3], _WIRE_44[2]) @[EmbeddedTLB.scala 207:211]
    node hitVec = cat(hi_4, lo) @[EmbeddedTLB.scala 207:211]
    node _T_173 = orr(hitVec) @[EmbeddedTLB.scala 208:35]
    node hit = and(io.in.valid, _T_173) @[EmbeddedTLB.scala 208:25]
    node _T_174 = orr(hitVec) @[EmbeddedTLB.scala 209:37]
    node _T_175 = eq(_T_174, UInt<1>("h0")) @[EmbeddedTLB.scala 209:29]
    node miss = and(io.in.valid, _T_175) @[EmbeddedTLB.scala 209:26]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1234567887654321")) @[LFSR64.scala 25:23]
    node _T_176 = bits(REG, 0, 0) @[LFSR64.scala 26:19]
    node _T_177 = bits(REG, 1, 1) @[LFSR64.scala 26:29]
    node _T_178 = xor(_T_176, _T_177) @[LFSR64.scala 26:23]
    node _T_179 = bits(REG, 3, 3) @[LFSR64.scala 26:39]
    node _T_180 = xor(_T_178, _T_179) @[LFSR64.scala 26:33]
    node _T_181 = bits(REG, 4, 4) @[LFSR64.scala 26:49]
    node _T_182 = xor(_T_180, _T_181) @[LFSR64.scala 26:43]
    when UInt<1>("h1") : @[LFSR64.scala 27:22]
      node _T_183 = eq(REG, UInt<1>("h0")) @[LFSR64.scala 28:24]
      node _T_184 = bits(REG, 63, 1) @[LFSR64.scala 28:51]
      node _T_185 = cat(_T_182, _T_184) @[Cat.scala 30:58]
      node _T_186 = mux(_T_183, UInt<1>("h1"), _T_185) @[LFSR64.scala 28:18]
      REG <= _T_186 @[LFSR64.scala 28:12]
    node _T_187 = bits(REG, 1, 0) @[EmbeddedTLB.scala 211:53]
    node victimWaymask = dshl(UInt<1>("h1"), _T_187) @[EmbeddedTLB.scala 211:42]
    node waymask = mux(hit, hitVec, victimWaymask) @[EmbeddedTLB.scala 212:20]
    wire loadPF : UInt<1>
    loadPF <= UInt<1>("h0")
    wire storePF : UInt<1>
    storePF <= UInt<1>("h0")
    node _T_188 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_189 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_190 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_191 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_192 = mux(_T_188, io.md[0], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_193 = mux(_T_189, io.md[1], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_194 = mux(_T_190, io.md[2], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_195 = mux(_T_191, io.md[3], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_196 = or(_T_192, _T_193) @[Mux.scala 27:72]
    node _T_197 = or(_T_196, _T_194) @[Mux.scala 27:72]
    node _T_198 = or(_T_197, _T_195) @[Mux.scala 27:72]
    wire _WIRE_45 : UInt<121> @[Mux.scala 27:72]
    _WIRE_45 <= _T_198 @[Mux.scala 27:72]
    wire _WIRE_46 : { meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 218:44]
    wire _WIRE_47 : UInt<121>
    _WIRE_47 <= _WIRE_45
    node _T_199 = bits(_WIRE_47, 51, 0) @[EmbeddedTLB.scala 218:44]
    _WIRE_46.data <= _T_199 @[EmbeddedTLB.scala 218:44]
    node _T_200 = bits(_WIRE_47, 120, 52) @[EmbeddedTLB.scala 218:44]
    _WIRE_46.meta <= _T_200 @[EmbeddedTLB.scala 218:44]
    wire hitMeta : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>} @[EmbeddedTLB.scala 218:70]
    wire _WIRE_48 : UInt<69>
    _WIRE_48 <= _WIRE_46.meta
    node _T_201 = bits(_WIRE_48, 7, 0) @[EmbeddedTLB.scala 218:70]
    hitMeta.flag <= _T_201 @[EmbeddedTLB.scala 218:70]
    node _T_202 = bits(_WIRE_48, 25, 8) @[EmbeddedTLB.scala 218:70]
    hitMeta.mask <= _T_202 @[EmbeddedTLB.scala 218:70]
    node _T_203 = bits(_WIRE_48, 41, 26) @[EmbeddedTLB.scala 218:70]
    hitMeta.asid <= _T_203 @[EmbeddedTLB.scala 218:70]
    node _T_204 = bits(_WIRE_48, 68, 42) @[EmbeddedTLB.scala 218:70]
    hitMeta.vpn <= _T_204 @[EmbeddedTLB.scala 218:70]
    node _T_205 = bits(waymask, 0, 0) @[Mux.scala 29:36]
    node _T_206 = bits(waymask, 1, 1) @[Mux.scala 29:36]
    node _T_207 = bits(waymask, 2, 2) @[Mux.scala 29:36]
    node _T_208 = bits(waymask, 3, 3) @[Mux.scala 29:36]
    node _T_209 = mux(_T_205, io.md[0], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_210 = mux(_T_206, io.md[1], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_211 = mux(_T_207, io.md[2], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_212 = mux(_T_208, io.md[3], UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_213 = or(_T_209, _T_210) @[Mux.scala 27:72]
    node _T_214 = or(_T_213, _T_211) @[Mux.scala 27:72]
    node _T_215 = or(_T_214, _T_212) @[Mux.scala 27:72]
    wire _WIRE_49 : UInt<121> @[Mux.scala 27:72]
    _WIRE_49 <= _T_215 @[Mux.scala 27:72]
    wire _WIRE_50 : { meta : UInt<69>, data : UInt<52>} @[EmbeddedTLB.scala 219:44]
    wire _WIRE_51 : UInt<121>
    _WIRE_51 <= _WIRE_49
    node _T_216 = bits(_WIRE_51, 51, 0) @[EmbeddedTLB.scala 219:44]
    _WIRE_50.data <= _T_216 @[EmbeddedTLB.scala 219:44]
    node _T_217 = bits(_WIRE_51, 120, 52) @[EmbeddedTLB.scala 219:44]
    _WIRE_50.meta <= _T_217 @[EmbeddedTLB.scala 219:44]
    wire hitData : { ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 219:70]
    wire _WIRE_52 : UInt<52>
    _WIRE_52 <= _WIRE_50.data
    node _T_218 = bits(_WIRE_52, 31, 0) @[EmbeddedTLB.scala 219:70]
    hitData.pteaddr <= _T_218 @[EmbeddedTLB.scala 219:70]
    node _T_219 = bits(_WIRE_52, 51, 32) @[EmbeddedTLB.scala 219:70]
    hitData.ppn <= _T_219 @[EmbeddedTLB.scala 219:70]
    wire hitFlag : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 220:38]
    wire _WIRE_53 : UInt<8>
    _WIRE_53 <= hitMeta.flag
    node _T_220 = bits(_WIRE_53, 0, 0) @[EmbeddedTLB.scala 220:38]
    hitFlag.v <= _T_220 @[EmbeddedTLB.scala 220:38]
    node _T_221 = bits(_WIRE_53, 1, 1) @[EmbeddedTLB.scala 220:38]
    hitFlag.r <= _T_221 @[EmbeddedTLB.scala 220:38]
    node _T_222 = bits(_WIRE_53, 2, 2) @[EmbeddedTLB.scala 220:38]
    hitFlag.w <= _T_222 @[EmbeddedTLB.scala 220:38]
    node _T_223 = bits(_WIRE_53, 3, 3) @[EmbeddedTLB.scala 220:38]
    hitFlag.x <= _T_223 @[EmbeddedTLB.scala 220:38]
    node _T_224 = bits(_WIRE_53, 4, 4) @[EmbeddedTLB.scala 220:38]
    hitFlag.u <= _T_224 @[EmbeddedTLB.scala 220:38]
    node _T_225 = bits(_WIRE_53, 5, 5) @[EmbeddedTLB.scala 220:38]
    hitFlag.g <= _T_225 @[EmbeddedTLB.scala 220:38]
    node _T_226 = bits(_WIRE_53, 6, 6) @[EmbeddedTLB.scala 220:38]
    hitFlag.a <= _T_226 @[EmbeddedTLB.scala 220:38]
    node _T_227 = bits(_WIRE_53, 7, 7) @[EmbeddedTLB.scala 220:38]
    hitFlag.d <= _T_227 @[EmbeddedTLB.scala 220:38]
    wire hitinstrPF : UInt<1>
    hitinstrPF <= UInt<1>("h0")
    node _T_228 = eq(hitFlag.a, UInt<1>("h0")) @[EmbeddedTLB.scala 224:23]
    node _T_229 = eq(hitFlag.d, UInt<1>("h0")) @[EmbeddedTLB.scala 224:37]
    node _T_230 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_231 = and(_T_229, _T_230) @[EmbeddedTLB.scala 224:48]
    node _T_232 = or(_T_228, _T_231) @[EmbeddedTLB.scala 224:34]
    node _T_233 = and(hit, _T_232) @[EmbeddedTLB.scala 224:19]
    node _T_234 = eq(hitinstrPF, UInt<1>("h0")) @[EmbeddedTLB.scala 224:69]
    node _T_235 = and(_T_233, _T_234) @[EmbeddedTLB.scala 224:66]
    node _T_236 = or(loadPF, storePF) @[EmbeddedTLB.scala 224:93]
    node _T_237 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_238 = or(_T_236, _T_237) @[EmbeddedTLB.scala 224:104]
    node _T_239 = eq(_T_238, UInt<1>("h0")) @[EmbeddedTLB.scala 224:84]
    node hitWB = and(_T_235, _T_239) @[EmbeddedTLB.scala 224:81]
    node _T_240 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hi_5 = cat(_T_240, UInt<1>("h1")) @[Cat.scala 30:58]
    node _T_241 = cat(hi_5, UInt<6>("h0")) @[Cat.scala 30:58]
    node lo_lo = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 225:79]
    node lo_hi = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 225:79]
    node lo_1 = cat(lo_hi, lo_lo) @[EmbeddedTLB.scala 225:79]
    node hi_lo = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 225:79]
    node hi_hi = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 225:79]
    node hi_6 = cat(hi_hi, hi_lo) @[EmbeddedTLB.scala 225:79]
    node _T_242 = cat(hi_6, lo_1) @[EmbeddedTLB.scala 225:79]
    node hitRefillFlag = or(_T_241, _T_242) @[EmbeddedTLB.scala 225:69]
    node lo_2 = cat(UInt<2>("h0"), hitRefillFlag) @[Cat.scala 30:58]
    node hi_7 = cat(UInt<10>("h0"), hitData.ppn) @[Cat.scala 30:58]
    node _T_243 = cat(hi_7, lo_2) @[Cat.scala 30:58]
    reg hitWBStore : UInt<40>, clock with :
      reset => (UInt<1>("h0"), hitWBStore) @[Reg.scala 15:16]
    when hitWB : @[Reg.scala 16:19]
      hitWBStore <= _T_243 @[Reg.scala 16:23]
    node _T_244 = eq(io.pf.priviledgeMode, UInt<1>("h0")) @[EmbeddedTLB.scala 229:62]
    node _T_245 = eq(hitFlag.u, UInt<1>("h0")) @[EmbeddedTLB.scala 229:75]
    node _T_246 = and(_T_244, _T_245) @[EmbeddedTLB.scala 229:72]
    node _T_247 = eq(_T_246, UInt<1>("h0")) @[EmbeddedTLB.scala 229:42]
    node _T_248 = and(hit, _T_247) @[EmbeddedTLB.scala 229:39]
    node _T_249 = eq(io.pf.priviledgeMode, UInt<1>("h1")) @[EmbeddedTLB.scala 229:110]
    node _T_250 = and(_T_249, hitFlag.u) @[EmbeddedTLB.scala 229:120]
    node _T_251 = eq(io.pf.status_sum, UInt<1>("h0")) @[EmbeddedTLB.scala 229:137]
    node _T_252 = or(_T_251, UInt<1>("h0")) @[EmbeddedTLB.scala 229:152]
    node _T_253 = and(_T_250, _T_252) @[EmbeddedTLB.scala 229:133]
    node _T_254 = eq(_T_253, UInt<1>("h0")) @[EmbeddedTLB.scala 229:90]
    node hitCheck = and(_T_248, _T_254) @[EmbeddedTLB.scala 229:87]
    node hitExec = and(hitCheck, hitFlag.x) @[EmbeddedTLB.scala 230:26]
    node _T_255 = and(io.pf.status_mxr, hitFlag.x) @[EmbeddedTLB.scala 231:57]
    node _T_256 = or(hitFlag.r, _T_255) @[EmbeddedTLB.scala 231:40]
    node hitLoad = and(hitCheck, _T_256) @[EmbeddedTLB.scala 231:26]
    node hitStore = and(hitCheck, hitFlag.w) @[EmbeddedTLB.scala 232:27]
    wire isAMO : UInt<1>
    isAMO <= UInt<1>("h0")
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 239:26]
    REG_1 <= loadPF @[EmbeddedTLB.scala 239:26]
    io.pf.loadPF <= REG_1 @[EmbeddedTLB.scala 239:16]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 240:27]
    REG_2 <= storePF @[EmbeddedTLB.scala 240:27]
    io.pf.storePF <= REG_2 @[EmbeddedTLB.scala 240:17]
    node _T_257 = eq(hitLoad, UInt<1>("h0")) @[EmbeddedTLB.scala 244:15]
    node _T_258 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_259 = eq(_T_258, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_260 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_261 = eq(_T_260, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_262 = and(_T_259, _T_261) @[SimpleBus.scala 73:26]
    node _T_263 = and(_T_257, _T_262) @[EmbeddedTLB.scala 244:24]
    node _T_264 = and(_T_263, hit) @[EmbeddedTLB.scala 244:40]
    node _T_265 = eq(isAMO, UInt<1>("h0")) @[EmbeddedTLB.scala 244:50]
    node _T_266 = and(_T_264, _T_265) @[EmbeddedTLB.scala 244:47]
    loadPF <= _T_266 @[EmbeddedTLB.scala 244:12]
    node _T_267 = eq(hitStore, UInt<1>("h0")) @[EmbeddedTLB.scala 245:17]
    node _T_268 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_269 = and(_T_267, _T_268) @[EmbeddedTLB.scala 245:27]
    node _T_270 = and(_T_269, hit) @[EmbeddedTLB.scala 245:44]
    node _T_271 = eq(hitLoad, UInt<1>("h0")) @[EmbeddedTLB.scala 245:56]
    node _T_272 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_273 = eq(_T_272, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_274 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_275 = eq(_T_274, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_276 = and(_T_273, _T_275) @[SimpleBus.scala 73:26]
    node _T_277 = and(_T_271, _T_276) @[EmbeddedTLB.scala 245:65]
    node _T_278 = and(_T_277, hit) @[EmbeddedTLB.scala 245:81]
    node _T_279 = and(_T_278, isAMO) @[EmbeddedTLB.scala 245:88]
    node _T_280 = or(_T_270, _T_279) @[EmbeddedTLB.scala 245:52]
    storePF <= _T_280 @[EmbeddedTLB.scala 245:13]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[EmbeddedTLB.scala 250:22]
    reg level : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[EmbeddedTLB.scala 251:22]
    reg memRespStore : UInt<64>, clock with :
      reset => (UInt<1>("h0"), memRespStore) @[EmbeddedTLB.scala 253:25]
    wire missMask : UInt<18>
    missMask <= UInt<18>("h3ffff")
    reg missMaskStore : UInt<18>, clock with :
      reset => (UInt<1>("h0"), missMaskStore) @[EmbeddedTLB.scala 255:26]
    wire missMetaRefill : UInt<1>
    missMetaRefill <= UInt<1>("h0")
    wire missRefillFlag : UInt<8>
    missRefillFlag <= UInt<8>("h0")
    wire memRdata : { reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 258:49]
    wire _WIRE_54 : UInt<64>
    _WIRE_54 <= io.mem.resp.bits.rdata
    node _T_281 = bits(_WIRE_54, 0, 0) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.v <= _T_281 @[EmbeddedTLB.scala 258:49]
    node _T_282 = bits(_WIRE_54, 1, 1) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.r <= _T_282 @[EmbeddedTLB.scala 258:49]
    node _T_283 = bits(_WIRE_54, 2, 2) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.w <= _T_283 @[EmbeddedTLB.scala 258:49]
    node _T_284 = bits(_WIRE_54, 3, 3) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.x <= _T_284 @[EmbeddedTLB.scala 258:49]
    node _T_285 = bits(_WIRE_54, 4, 4) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.u <= _T_285 @[EmbeddedTLB.scala 258:49]
    node _T_286 = bits(_WIRE_54, 5, 5) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.g <= _T_286 @[EmbeddedTLB.scala 258:49]
    node _T_287 = bits(_WIRE_54, 6, 6) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.a <= _T_287 @[EmbeddedTLB.scala 258:49]
    node _T_288 = bits(_WIRE_54, 7, 7) @[EmbeddedTLB.scala 258:49]
    memRdata.flag.d <= _T_288 @[EmbeddedTLB.scala 258:49]
    node _T_289 = bits(_WIRE_54, 9, 8) @[EmbeddedTLB.scala 258:49]
    memRdata.rsw <= _T_289 @[EmbeddedTLB.scala 258:49]
    node _T_290 = bits(_WIRE_54, 29, 10) @[EmbeddedTLB.scala 258:49]
    memRdata.ppn <= _T_290 @[EmbeddedTLB.scala 258:49]
    node _T_291 = bits(_WIRE_54, 63, 30) @[EmbeddedTLB.scala 258:49]
    memRdata.reserved <= _T_291 @[EmbeddedTLB.scala 258:49]
    reg raddr : UInt<32>, clock with :
      reset => (UInt<1>("h0"), raddr) @[EmbeddedTLB.scala 259:18]
    node _T_292 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 27:20]
    when _T_292 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h1") @[Reg.scala 28:23]
    reg needFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 263:26]
    node isFlush = or(needFlush, io.flush) @[EmbeddedTLB.scala 265:27]
    node _T_293 = neq(state, UInt<3>("h0")) @[EmbeddedTLB.scala 266:27]
    node _T_294 = and(io.flush, _T_293) @[EmbeddedTLB.scala 266:17]
    when _T_294 : @[EmbeddedTLB.scala 266:40]
      needFlush <= UInt<1>("h1") @[EmbeddedTLB.scala 266:52]
    node _T_295 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_296 = and(_T_295, needFlush) @[EmbeddedTLB.scala 267:23]
    when _T_296 : @[EmbeddedTLB.scala 267:37]
      needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 267:49]
    reg missIPF : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 269:24]
    node _T_297 = eq(UInt<3>("h0"), state) @[EmbeddedTLB.scala 272:18]
    when _T_297 : @[EmbeddedTLB.scala 272:18]
      node _T_298 = eq(io.flush, UInt<1>("h0")) @[EmbeddedTLB.scala 274:13]
      node _T_299 = and(_T_298, hitWB) @[EmbeddedTLB.scala 274:22]
      when _T_299 : @[EmbeddedTLB.scala 274:32]
        state <= UInt<3>("h3") @[EmbeddedTLB.scala 275:15]
        needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 276:19]
        alreadyOutFire <= UInt<1>("h0") @[EmbeddedTLB.scala 277:24]
      else :
        node _T_300 = eq(io.flush, UInt<1>("h0")) @[EmbeddedTLB.scala 278:27]
        node _T_301 = and(miss, _T_300) @[EmbeddedTLB.scala 278:24]
        when _T_301 : @[EmbeddedTLB.scala 278:37]
          state <= UInt<3>("h1") @[EmbeddedTLB.scala 279:15]
          node _T_302 = cat(satp.ppn, vpn.vpn2) @[Cat.scala 30:58]
          node _T_303 = cat(_T_302, UInt<3>("h0")) @[Cat.scala 30:58]
          raddr <= _T_303 @[EmbeddedTLB.scala 280:15]
          level <= UInt<2>("h3") @[EmbeddedTLB.scala 281:15]
          needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 282:19]
          alreadyOutFire <= UInt<1>("h0") @[EmbeddedTLB.scala 283:24]
    else :
      node _T_304 = eq(UInt<3>("h1"), state) @[EmbeddedTLB.scala 272:18]
      when _T_304 : @[EmbeddedTLB.scala 272:18]
        when isFlush : @[EmbeddedTLB.scala 288:22]
          state <= UInt<3>("h0") @[EmbeddedTLB.scala 289:15]
          needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 290:19]
        else :
          node _T_305 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          when _T_305 : @[EmbeddedTLB.scala 291:38]
            state <= UInt<3>("h2") @[EmbeddedTLB.scala 291:46]
      else :
        node _T_306 = eq(UInt<3>("h2"), state) @[EmbeddedTLB.scala 272:18]
        when _T_306 : @[EmbeddedTLB.scala 272:18]
          wire _WIRE_55 : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>} @[EmbeddedTLB.scala 295:44]
          node lo_lo_1 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 295:44]
          node lo_hi_1 = cat(memRdata.flag.x, memRdata.flag.w) @[EmbeddedTLB.scala 295:44]
          node lo_3 = cat(lo_hi_1, lo_lo_1) @[EmbeddedTLB.scala 295:44]
          node hi_lo_1 = cat(memRdata.flag.g, memRdata.flag.u) @[EmbeddedTLB.scala 295:44]
          node hi_hi_1 = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 295:44]
          node hi_8 = cat(hi_hi_1, hi_lo_1) @[EmbeddedTLB.scala 295:44]
          node _T_307 = cat(hi_8, lo_3) @[EmbeddedTLB.scala 295:44]
          wire _WIRE_56 : UInt<8>
          _WIRE_56 <= _T_307
          node _T_308 = bits(_WIRE_56, 0, 0) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.v <= _T_308 @[EmbeddedTLB.scala 295:44]
          node _T_309 = bits(_WIRE_56, 1, 1) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.r <= _T_309 @[EmbeddedTLB.scala 295:44]
          node _T_310 = bits(_WIRE_56, 2, 2) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.w <= _T_310 @[EmbeddedTLB.scala 295:44]
          node _T_311 = bits(_WIRE_56, 3, 3) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.x <= _T_311 @[EmbeddedTLB.scala 295:44]
          node _T_312 = bits(_WIRE_56, 4, 4) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.u <= _T_312 @[EmbeddedTLB.scala 295:44]
          node _T_313 = bits(_WIRE_56, 5, 5) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.g <= _T_313 @[EmbeddedTLB.scala 295:44]
          node _T_314 = bits(_WIRE_56, 6, 6) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.a <= _T_314 @[EmbeddedTLB.scala 295:44]
          node _T_315 = bits(_WIRE_56, 7, 7) @[EmbeddedTLB.scala 295:44]
          _WIRE_55.d <= _T_315 @[EmbeddedTLB.scala 295:44]
          node _T_316 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
          when _T_316 : @[EmbeddedTLB.scala 296:33]
            when isFlush : @[EmbeddedTLB.scala 297:24]
              state <= UInt<3>("h0") @[EmbeddedTLB.scala 298:17]
              needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 299:21]
            else :
              node _T_317 = or(_WIRE_55.r, _WIRE_55.x) @[EmbeddedTLB.scala 300:34]
              node _T_318 = eq(_T_317, UInt<1>("h0")) @[EmbeddedTLB.scala 300:21]
              node _T_319 = eq(level, UInt<2>("h3")) @[EmbeddedTLB.scala 300:58]
              node _T_320 = eq(level, UInt<2>("h2")) @[EmbeddedTLB.scala 300:73]
              node _T_321 = or(_T_319, _T_320) @[EmbeddedTLB.scala 300:65]
              node _T_322 = and(_T_318, _T_321) @[EmbeddedTLB.scala 300:49]
              when _T_322 : @[EmbeddedTLB.scala 300:82]
                node _T_323 = eq(_WIRE_55.v, UInt<1>("h0")) @[EmbeddedTLB.scala 301:16]
                node _T_324 = eq(_WIRE_55.r, UInt<1>("h0")) @[EmbeddedTLB.scala 301:32]
                node _T_325 = and(_T_324, _WIRE_55.w) @[EmbeddedTLB.scala 301:44]
                node _T_326 = or(_T_323, _T_325) @[EmbeddedTLB.scala 301:28]
                when _T_326 : @[EmbeddedTLB.scala 301:60]
                  state <= UInt<3>("h5") @[EmbeddedTLB.scala 302:73]
                  node _T_327 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
                  node _T_328 = eq(_T_327, UInt<1>("h0")) @[SimpleBus.scala 73:18]
                  node _T_329 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
                  node _T_330 = eq(_T_329, UInt<1>("h0")) @[SimpleBus.scala 73:29]
                  node _T_331 = and(_T_328, _T_330) @[SimpleBus.scala 73:26]
                  node _T_332 = eq(isAMO, UInt<1>("h0")) @[EmbeddedTLB.scala 305:41]
                  node _T_333 = and(_T_331, _T_332) @[EmbeddedTLB.scala 305:38]
                  loadPF <= _T_333 @[EmbeddedTLB.scala 305:22]
                  node _T_334 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_335 = or(_T_334, isAMO) @[EmbeddedTLB.scala 306:40]
                  storePF <= _T_335 @[EmbeddedTLB.scala 306:23]
                  reg REG_3 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_336 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_337 = tail(_T_336, 1) @[GTimer.scala 25:12]
                  REG_3 <= _T_337 @[GTimer.scala 25:7]
                  wire _WIRE_57 : UInt<1>
                  _WIRE_57 <= UInt<1>("h0")
                  node _T_338 = and(UInt<1>("h1"), _WIRE_57) @[Debug.scala 55:16]
                  when _T_338 : @[Debug.scala 55:31]
                    node _T_339 = asUInt(reset) @[Debug.scala 56:24]
                    node _T_340 = eq(_T_339, UInt<1>("h0")) @[Debug.scala 56:24]
                    when _T_340 : @[Debug.scala 56:24]
                      printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_3) : SIM @[Debug.scala 56:24]
                    node _T_341 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_342 = eq(_T_341, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_342 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), "tlbException!!! ") : SIM_1 @[Debug.scala 57:13]
                  reg REG_4 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_343 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_344 = tail(_T_343, 1) @[GTimer.scala 25:12]
                  REG_4 <= _T_344 @[GTimer.scala 25:7]
                  wire _WIRE_58 : UInt<1>
                  _WIRE_58 <= UInt<1>("h0")
                  node _T_345 = and(UInt<1>("h1"), _WIRE_58) @[Debug.scala 55:16]
                  when _T_345 : @[Debug.scala 55:31]
                    node _T_346 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_347 = eq(_T_346, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_347 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), " req:addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x  Memreq:DecoupledIO(ready -> %d, valid -> %d, bits -> addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x)  MemResp:DecoupledIO(ready -> %d, valid -> %d, bits -> rdata = %x, cmd = %d)", io.in.bits.addr, io.in.bits.cmd, io.in.bits.size, io.in.bits.wmask, io.in.bits.wdata, io.mem.req.ready, io.mem.req.valid, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, io.mem.req.bits.wdata, io.mem.resp.ready, io.mem.resp.valid, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) : SIM_2 @[Debug.scala 57:13]
                  reg REG_5 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_348 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_349 = tail(_T_348, 1) @[GTimer.scala 25:12]
                  REG_5 <= _T_349 @[GTimer.scala 25:7]
                  wire _WIRE_59 : UInt<1>
                  _WIRE_59 <= UInt<1>("h0")
                  node _T_350 = and(UInt<1>("h1"), _WIRE_59) @[Debug.scala 55:16]
                  when _T_350 : @[Debug.scala 55:31]
                    node _T_351 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_352 = eq(_T_351, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_352 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), " level:%d", level) : SIM_3 @[Debug.scala 57:13]
                  reg REG_6 : UInt<64>, clock with :
                    reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
                  node _T_353 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
                  node _T_354 = tail(_T_353, 1) @[GTimer.scala 25:12]
                  REG_6 <= _T_354 @[GTimer.scala 25:7]
                  wire _WIRE_60 : UInt<1>
                  _WIRE_60 <= UInt<1>("h0")
                  node _T_355 = and(UInt<1>("h1"), _WIRE_60) @[Debug.scala 55:16]
                  when _T_355 : @[Debug.scala 55:31]
                    node _T_356 = asUInt(reset) @[Debug.scala 57:13]
                    node _T_357 = eq(_T_356, UInt<1>("h0")) @[Debug.scala 57:13]
                    when _T_357 : @[Debug.scala 57:13]
                      printf(clock, UInt<1>("h1"), "\n") : SIM_4 @[Debug.scala 57:13]
                else :
                  state <= UInt<3>("h1") @[EmbeddedTLB.scala 313:19]
                  node _T_358 = eq(level, UInt<2>("h3")) @[EmbeddedTLB.scala 314:57]
                  node _T_359 = mux(_T_358, vpn.vpn1, vpn.vpn0) @[EmbeddedTLB.scala 314:50]
                  node _T_360 = cat(memRdata.ppn, _T_359) @[Cat.scala 30:58]
                  node _T_361 = cat(_T_360, UInt<3>("h0")) @[Cat.scala 30:58]
                  raddr <= _T_361 @[EmbeddedTLB.scala 314:19]
              else :
                node _T_362 = neq(level, UInt<1>("h0")) @[EmbeddedTLB.scala 316:27]
                when _T_362 : @[EmbeddedTLB.scala 316:36]
                  node _T_363 = eq(io.pf.priviledgeMode, UInt<1>("h0")) @[EmbeddedTLB.scala 317:61]
                  node _T_364 = eq(_WIRE_55.u, UInt<1>("h0")) @[EmbeddedTLB.scala 317:74]
                  node _T_365 = and(_T_363, _T_364) @[EmbeddedTLB.scala 317:71]
                  node _T_366 = eq(_T_365, UInt<1>("h0")) @[EmbeddedTLB.scala 317:41]
                  node _T_367 = and(_WIRE_55.v, _T_366) @[EmbeddedTLB.scala 317:38]
                  node _T_368 = eq(io.pf.priviledgeMode, UInt<1>("h1")) @[EmbeddedTLB.scala 317:110]
                  node _T_369 = and(_T_368, _WIRE_55.u) @[EmbeddedTLB.scala 317:120]
                  node _T_370 = eq(io.pf.status_sum, UInt<1>("h0")) @[EmbeddedTLB.scala 317:138]
                  node _T_371 = or(_T_370, UInt<1>("h0")) @[EmbeddedTLB.scala 317:153]
                  node _T_372 = and(_T_369, _T_371) @[EmbeddedTLB.scala 317:134]
                  node _T_373 = eq(_T_372, UInt<1>("h0")) @[EmbeddedTLB.scala 317:90]
                  node _T_374 = and(_T_367, _T_373) @[EmbeddedTLB.scala 317:87]
                  node _T_375 = and(_T_374, _WIRE_55.x) @[EmbeddedTLB.scala 318:36]
                  node _T_376 = and(io.pf.status_mxr, _WIRE_55.x) @[EmbeddedTLB.scala 319:68]
                  node _T_377 = or(_WIRE_55.r, _T_376) @[EmbeddedTLB.scala 319:51]
                  node _T_378 = and(_T_374, _T_377) @[EmbeddedTLB.scala 319:36]
                  node _T_379 = and(_T_374, _WIRE_55.w) @[EmbeddedTLB.scala 320:37]
                  node _T_380 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node lo_4 = cat(UInt<1>("h1"), UInt<6>("h0")) @[Cat.scala 30:58]
                  node hi_9 = cat(UInt<56>("h0"), _T_380) @[Cat.scala 30:58]
                  node _T_381 = cat(hi_9, lo_4) @[Cat.scala 30:58]
                  node _T_382 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node hi_10 = cat(_T_382, UInt<1>("h1")) @[Cat.scala 30:58]
                  node _T_383 = cat(hi_10, UInt<6>("h0")) @[Cat.scala 30:58]
                  node lo_lo_2 = cat(_WIRE_55.r, _WIRE_55.v) @[EmbeddedTLB.scala 323:79]
                  node lo_hi_2 = cat(_WIRE_55.x, _WIRE_55.w) @[EmbeddedTLB.scala 323:79]
                  node lo_5 = cat(lo_hi_2, lo_lo_2) @[EmbeddedTLB.scala 323:79]
                  node hi_lo_2 = cat(_WIRE_55.g, _WIRE_55.u) @[EmbeddedTLB.scala 323:79]
                  node hi_hi_2 = cat(_WIRE_55.d, _WIRE_55.a) @[EmbeddedTLB.scala 323:79]
                  node hi_11 = cat(hi_hi_2, hi_lo_2) @[EmbeddedTLB.scala 323:79]
                  node _T_384 = cat(hi_11, lo_5) @[EmbeddedTLB.scala 323:79]
                  node _T_385 = or(_T_383, _T_384) @[EmbeddedTLB.scala 323:68]
                  missRefillFlag <= _T_385 @[EmbeddedTLB.scala 323:26]
                  node _T_386 = or(io.mem.resp.bits.rdata, _T_381) @[EmbeddedTLB.scala 324:50]
                  memRespStore <= _T_386 @[EmbeddedTLB.scala 324:24]
                  node _T_387 = eq(_T_378, UInt<1>("h0")) @[EmbeddedTLB.scala 333:19]
                  node _T_388 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
                  node _T_389 = eq(_T_388, UInt<1>("h0")) @[SimpleBus.scala 73:18]
                  node _T_390 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
                  node _T_391 = eq(_T_390, UInt<1>("h0")) @[SimpleBus.scala 73:29]
                  node _T_392 = and(_T_389, _T_391) @[SimpleBus.scala 73:26]
                  node _T_393 = and(_T_387, _T_392) @[EmbeddedTLB.scala 333:29]
                  node _T_394 = eq(_T_379, UInt<1>("h0")) @[EmbeddedTLB.scala 333:50]
                  node _T_395 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                  node _T_396 = and(_T_394, _T_395) @[EmbeddedTLB.scala 333:61]
                  node _T_397 = or(_T_393, _T_396) @[EmbeddedTLB.scala 333:46]
                  when _T_397 : @[EmbeddedTLB.scala 333:80]
                    state <= UInt<3>("h5") @[EmbeddedTLB.scala 334:21]
                    node _T_398 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
                    node _T_399 = eq(_T_398, UInt<1>("h0")) @[SimpleBus.scala 73:18]
                    node _T_400 = bits(io.in.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
                    node _T_401 = eq(_T_400, UInt<1>("h0")) @[SimpleBus.scala 73:29]
                    node _T_402 = and(_T_399, _T_401) @[SimpleBus.scala 73:26]
                    node _T_403 = eq(isAMO, UInt<1>("h0")) @[EmbeddedTLB.scala 335:41]
                    node _T_404 = and(_T_402, _T_403) @[EmbeddedTLB.scala 335:38]
                    loadPF <= _T_404 @[EmbeddedTLB.scala 335:22]
                    node _T_405 = bits(io.in.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
                    node _T_406 = or(_T_405, isAMO) @[EmbeddedTLB.scala 336:40]
                    storePF <= _T_406 @[EmbeddedTLB.scala 336:23]
                  else :
                    node _T_407 = mux(UInt<1>("h0"), UInt<3>("h3"), UInt<3>("h4")) @[EmbeddedTLB.scala 338:27]
                    state <= _T_407 @[EmbeddedTLB.scala 338:21]
                    missMetaRefill <= UInt<1>("h1") @[EmbeddedTLB.scala 339:30]
                  node _T_408 = eq(level, UInt<2>("h3")) @[EmbeddedTLB.scala 342:32]
                  node _T_409 = eq(level, UInt<2>("h2")) @[EmbeddedTLB.scala 342:65]
                  node _T_410 = mux(_T_409, UInt<18>("h3fe00"), UInt<18>("h3ffff")) @[EmbeddedTLB.scala 342:59]
                  node _T_411 = mux(_T_408, UInt<18>("h0"), _T_410) @[EmbeddedTLB.scala 342:26]
                  missMask <= _T_411 @[EmbeddedTLB.scala 342:20]
                  missMaskStore <= missMask @[EmbeddedTLB.scala 343:25]
            node _T_412 = sub(level, UInt<1>("h1")) @[EmbeddedTLB.scala 345:24]
            node _T_413 = tail(_T_412, 1) @[EmbeddedTLB.scala 345:24]
            level <= _T_413 @[EmbeddedTLB.scala 345:15]
        else :
          node _T_414 = eq(UInt<3>("h3"), state) @[EmbeddedTLB.scala 272:18]
          when _T_414 : @[EmbeddedTLB.scala 272:18]
            when isFlush : @[EmbeddedTLB.scala 350:22]
              state <= UInt<3>("h0") @[EmbeddedTLB.scala 351:15]
              needFlush <= UInt<1>("h0") @[EmbeddedTLB.scala 352:19]
            else :
              node _T_415 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_415 : @[EmbeddedTLB.scala 353:38]
                state <= UInt<3>("h4") @[EmbeddedTLB.scala 353:46]
          else :
            node _T_416 = eq(UInt<3>("h4"), state) @[EmbeddedTLB.scala 272:18]
            when _T_416 : @[EmbeddedTLB.scala 272:18]
              node _T_417 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
              node _T_418 = or(_T_417, io.flush) @[EmbeddedTLB.scala 356:44]
              node _T_419 = or(_T_418, alreadyOutFire) @[EmbeddedTLB.scala 356:55]
              when _T_419 : @[EmbeddedTLB.scala 356:73]
                state <= UInt<3>("h0") @[EmbeddedTLB.scala 357:13]
                missIPF <= UInt<1>("h0") @[EmbeddedTLB.scala 358:15]
                alreadyOutFire <= UInt<1>("h0") @[EmbeddedTLB.scala 359:22]
            else :
              node _T_420 = eq(UInt<3>("h5"), state) @[EmbeddedTLB.scala 272:18]
              when _T_420 : @[EmbeddedTLB.scala 272:18]
                state <= UInt<3>("h0") @[EmbeddedTLB.scala 363:13]
    node _T_421 = eq(state, UInt<3>("h3")) @[EmbeddedTLB.scala 368:23]
    node cmd = mux(_T_421, UInt<1>("h1"), UInt<1>("h0")) @[EmbeddedTLB.scala 368:16]
    node _T_422 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 369:35]
    node _T_423 = mux(hitWB, hitWBStore, memRespStore) @[EmbeddedTLB.scala 369:138]
    io.mem.req.bits.addr <= _T_422 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _T_423 @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= UInt<8>("hff") @[SimpleBus.scala 68:16]
    node _T_424 = eq(state, UInt<3>("h1")) @[EmbeddedTLB.scala 370:31]
    node _T_425 = eq(state, UInt<3>("h3")) @[EmbeddedTLB.scala 370:57]
    node _T_426 = or(_T_424, _T_425) @[EmbeddedTLB.scala 370:48]
    node _T_427 = eq(isFlush, UInt<1>("h0")) @[EmbeddedTLB.scala 370:77]
    node _T_428 = and(_T_426, _T_427) @[EmbeddedTLB.scala 370:74]
    io.mem.req.valid <= _T_428 @[EmbeddedTLB.scala 370:20]
    io.mem.resp.ready <= UInt<1>("h1") @[EmbeddedTLB.scala 371:21]
    node _T_429 = eq(isFlush, UInt<1>("h0")) @[EmbeddedTLB.scala 374:53]
    node _T_430 = and(missMetaRefill, _T_429) @[EmbeddedTLB.scala 374:50]
    node _T_431 = eq(state, UInt<3>("h0")) @[EmbeddedTLB.scala 374:82]
    node _T_432 = and(hitWB, _T_431) @[EmbeddedTLB.scala 374:73]
    node _T_433 = eq(isFlush, UInt<1>("h0")) @[EmbeddedTLB.scala 374:96]
    node _T_434 = and(_T_432, _T_433) @[EmbeddedTLB.scala 374:93]
    node _T_435 = or(_T_430, _T_434) @[EmbeddedTLB.scala 374:63]
    reg REG_7 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 374:33]
    REG_7 <= _T_435 @[EmbeddedTLB.scala 374:33]
    wire _WIRE_61 : { tag : UInt<23>, index : UInt<4>, off : UInt<12>} @[TLB.scala 200:19]
    wire _WIRE_62 : UInt<39>
    _WIRE_62 <= io.in.bits.addr
    node _T_436 = bits(_WIRE_62, 11, 0) @[TLB.scala 200:19]
    _WIRE_61.off <= _T_436 @[TLB.scala 200:19]
    node _T_437 = bits(_WIRE_62, 15, 12) @[TLB.scala 200:19]
    _WIRE_61.index <= _T_437 @[TLB.scala 200:19]
    node _T_438 = bits(_WIRE_62, 38, 16) @[TLB.scala 200:19]
    _WIRE_61.tag <= _T_438 @[TLB.scala 200:19]
    reg REG_8 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_8) @[EmbeddedTLB.scala 375:21]
    REG_8 <= _WIRE_61.index @[EmbeddedTLB.scala 375:21]
    reg REG_9 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_9) @[EmbeddedTLB.scala 375:60]
    REG_9 <= waymask @[EmbeddedTLB.scala 375:60]
    node hi_12 = cat(vpn.vpn2, vpn.vpn1) @[EmbeddedTLB.scala 375:89]
    node _T_439 = cat(hi_12, vpn.vpn0) @[EmbeddedTLB.scala 375:89]
    reg REG_10 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_10) @[EmbeddedTLB.scala 375:84]
    REG_10 <= _T_439 @[EmbeddedTLB.scala 375:84]
    node _T_440 = mux(hitWB, hitMeta.asid, satp.asid) @[EmbeddedTLB.scala 376:23]
    reg REG_11 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_11) @[EmbeddedTLB.scala 376:19]
    REG_11 <= _T_440 @[EmbeddedTLB.scala 376:19]
    node _T_441 = mux(hitWB, hitMeta.mask, missMask) @[EmbeddedTLB.scala 376:76]
    reg REG_12 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_12) @[EmbeddedTLB.scala 376:72]
    REG_12 <= _T_441 @[EmbeddedTLB.scala 376:72]
    node _T_442 = mux(hitWB, hitRefillFlag, missRefillFlag) @[EmbeddedTLB.scala 377:23]
    reg REG_13 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_13) @[EmbeddedTLB.scala 377:19]
    REG_13 <= _T_442 @[EmbeddedTLB.scala 377:19]
    node _T_443 = mux(hitWB, hitData.ppn, memRdata.ppn) @[EmbeddedTLB.scala 377:81]
    reg REG_14 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_14) @[EmbeddedTLB.scala 377:77]
    REG_14 <= _T_443 @[EmbeddedTLB.scala 377:77]
    node _T_444 = mux(hitWB, hitData.pteaddr, raddr) @[EmbeddedTLB.scala 378:27]
    reg REG_15 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_15) @[EmbeddedTLB.scala 378:22]
    REG_15 <= _T_444 @[EmbeddedTLB.scala 378:22]
    io.mdWrite.wen <= REG_7 @[TLB.scala 214:14]
    io.mdWrite.windex <= REG_8 @[TLB.scala 215:17]
    io.mdWrite.waymask <= REG_9 @[TLB.scala 216:18]
    node lo_hi_3 = cat(REG_13, REG_14) @[Cat.scala 30:58]
    node lo_6 = cat(lo_hi_3, REG_15) @[Cat.scala 30:58]
    node hi_hi_3 = cat(REG_10, REG_11) @[Cat.scala 30:58]
    node hi_13 = cat(hi_hi_3, REG_12) @[Cat.scala 30:58]
    node _T_445 = cat(hi_13, lo_6) @[Cat.scala 30:58]
    io.mdWrite.wdata <= _T_445 @[TLB.scala 217:16]
    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 381:15]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 381:15]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 381:15]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 381:15]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 381:15]
    node _T_446 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 382:63]
    node _T_447 = cat(hitData.ppn, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_448 = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    node hi_14 = cat(_T_448, hitMeta.mask) @[Cat.scala 30:58]
    node _T_449 = cat(hi_14, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_450 = and(_T_447, _T_449) @[BitUtils.scala 32:13]
    node _T_451 = not(_T_449) @[BitUtils.scala 32:38]
    node _T_452 = and(_T_446, _T_451) @[BitUtils.scala 32:36]
    node _T_453 = or(_T_450, _T_452) @[BitUtils.scala 32:25]
    wire _WIRE_63 : { reserved : UInt<34>, ppn : UInt<20>, rsw : UInt<2>, flag : { d : UInt<1>, a : UInt<1>, g : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>, v : UInt<1>}} @[EmbeddedTLB.scala 382:122]
    wire _WIRE_64 : UInt<64>
    _WIRE_64 <= memRespStore
    node _T_454 = bits(_WIRE_64, 0, 0) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.v <= _T_454 @[EmbeddedTLB.scala 382:122]
    node _T_455 = bits(_WIRE_64, 1, 1) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.r <= _T_455 @[EmbeddedTLB.scala 382:122]
    node _T_456 = bits(_WIRE_64, 2, 2) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.w <= _T_456 @[EmbeddedTLB.scala 382:122]
    node _T_457 = bits(_WIRE_64, 3, 3) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.x <= _T_457 @[EmbeddedTLB.scala 382:122]
    node _T_458 = bits(_WIRE_64, 4, 4) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.u <= _T_458 @[EmbeddedTLB.scala 382:122]
    node _T_459 = bits(_WIRE_64, 5, 5) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.g <= _T_459 @[EmbeddedTLB.scala 382:122]
    node _T_460 = bits(_WIRE_64, 6, 6) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.a <= _T_460 @[EmbeddedTLB.scala 382:122]
    node _T_461 = bits(_WIRE_64, 7, 7) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.flag.d <= _T_461 @[EmbeddedTLB.scala 382:122]
    node _T_462 = bits(_WIRE_64, 9, 8) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.rsw <= _T_462 @[EmbeddedTLB.scala 382:122]
    node _T_463 = bits(_WIRE_64, 29, 10) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.ppn <= _T_463 @[EmbeddedTLB.scala 382:122]
    node _T_464 = bits(_WIRE_64, 63, 30) @[EmbeddedTLB.scala 382:122]
    _WIRE_63.reserved <= _T_464 @[EmbeddedTLB.scala 382:122]
    node _T_465 = bits(io.in.bits.addr, 31, 0) @[EmbeddedTLB.scala 382:147]
    node _T_466 = cat(_WIRE_63.ppn, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_467 = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    node hi_15 = cat(_T_467, missMaskStore) @[Cat.scala 30:58]
    node _T_468 = cat(hi_15, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_469 = and(_T_466, _T_468) @[BitUtils.scala 32:13]
    node _T_470 = not(_T_468) @[BitUtils.scala 32:38]
    node _T_471 = and(_T_465, _T_470) @[BitUtils.scala 32:36]
    node _T_472 = or(_T_469, _T_471) @[BitUtils.scala 32:25]
    node _T_473 = mux(hit, _T_453, _T_472) @[EmbeddedTLB.scala 382:26]
    io.out.bits.addr <= _T_473 @[EmbeddedTLB.scala 382:20]
    node _T_474 = eq(hitWB, UInt<1>("h0")) @[EmbeddedTLB.scala 383:45]
    node _T_475 = and(hit, _T_474) @[EmbeddedTLB.scala 383:42]
    node _T_476 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_477 = or(_T_476, loadPF) @[EmbeddedTLB.scala 383:68]
    node _T_478 = or(_T_477, storePF) @[EmbeddedTLB.scala 383:78]
    node _T_479 = eq(_T_478, UInt<1>("h0")) @[EmbeddedTLB.scala 383:53]
    node _T_480 = eq(state, UInt<3>("h4")) @[EmbeddedTLB.scala 383:97]
    node _T_481 = mux(_T_475, _T_479, _T_480) @[EmbeddedTLB.scala 383:37]
    node _T_482 = and(io.in.valid, _T_481) @[EmbeddedTLB.scala 383:31]
    io.out.valid <= _T_482 @[EmbeddedTLB.scala 383:16]
    node _T_483 = eq(state, UInt<3>("h0")) @[EmbeddedTLB.scala 385:41]
    node _T_484 = and(io.out.ready, _T_483) @[EmbeddedTLB.scala 385:31]
    node _T_485 = eq(miss, UInt<1>("h0")) @[EmbeddedTLB.scala 385:56]
    node _T_486 = and(_T_484, _T_485) @[EmbeddedTLB.scala 385:53]
    node _T_487 = eq(hitWB, UInt<1>("h0")) @[EmbeddedTLB.scala 385:65]
    node _T_488 = and(_T_486, _T_487) @[EmbeddedTLB.scala 385:62]
    node _T_489 = and(_T_488, io.mdReady) @[EmbeddedTLB.scala 385:72]
    node _T_490 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_491 = eq(_T_490, UInt<1>("h0")) @[EmbeddedTLB.scala 385:90]
    node _T_492 = eq(loadPF, UInt<1>("h0")) @[EmbeddedTLB.scala 385:107]
    node _T_493 = and(_T_491, _T_492) @[EmbeddedTLB.scala 385:104]
    node _T_494 = eq(storePF, UInt<1>("h0")) @[EmbeddedTLB.scala 385:118]
    node _T_495 = and(_T_493, _T_494) @[EmbeddedTLB.scala 385:115]
    node _T_496 = and(_T_489, _T_495) @[EmbeddedTLB.scala 385:86]
    io.in.ready <= _T_496 @[EmbeddedTLB.scala 385:15]
    node _T_497 = mux(hit, hitinstrPF, missIPF) @[EmbeddedTLB.scala 387:16]
    io.ipf <= _T_497 @[EmbeddedTLB.scala 387:10]
    node _T_498 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_499 = or(io.pf.loadPF, io.pf.storePF) @[Bundle.scala 131:23]
    node _T_500 = or(_T_498, _T_499) @[EmbeddedTLB.scala 388:32]
    io.isFinish <= _T_500 @[EmbeddedTLB.scala 388:15]
    reg REG_16 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_501 = add(REG_16, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_502 = tail(_T_501, 1) @[GTimer.scala 25:12]
    REG_16 <= _T_502 @[GTimer.scala 25:7]
    wire _WIRE_65 : UInt<1>
    _WIRE_65 <= UInt<1>("h0")
    node _T_503 = and(UInt<1>("h1"), _WIRE_65) @[Debug.scala 55:16]
    when _T_503 : @[Debug.scala 55:31]
      node _T_504 = asUInt(reset) @[Debug.scala 56:24]
      node _T_505 = eq(_T_504, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_505 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_16) : SIM_5 @[Debug.scala 56:24]
      node _T_506 = asUInt(reset) @[Debug.scala 57:13]
      node _T_507 = eq(_T_506, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_507 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "In(%d, %d) Out(%d, %d) InAddr:%x OutAddr:%x cmd:%d \n", io.in.valid, io.in.ready, io.out.valid, io.out.ready, io.in.bits.addr, io.out.bits.addr, io.in.bits.cmd) : SIM_6 @[Debug.scala 57:13]
    reg REG_17 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_508 = add(REG_17, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_509 = tail(_T_508, 1) @[GTimer.scala 25:12]
    REG_17 <= _T_509 @[GTimer.scala 25:7]
    wire _WIRE_66 : UInt<1>
    _WIRE_66 <= UInt<1>("h0")
    node _T_510 = and(UInt<1>("h1"), _WIRE_66) @[Debug.scala 55:16]
    when _T_510 : @[Debug.scala 55:31]
      node _T_511 = asUInt(reset) @[Debug.scala 56:24]
      node _T_512 = eq(_T_511, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_512 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_17) : SIM_7 @[Debug.scala 56:24]
      node _T_513 = asUInt(reset) @[Debug.scala 57:13]
      node _T_514 = eq(_T_513, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_514 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "isAMO:%d io.Flush:%d needFlush:%d alreadyOutFire:%d isFinish:%d\n", isAMO, io.flush, needFlush, alreadyOutFire, io.isFinish) : SIM_8 @[Debug.scala 57:13]
    node lo_lo_3 = cat(hitFlag.r, hitFlag.v) @[EmbeddedTLB.scala 392:171]
    node lo_hi_4 = cat(hitFlag.x, hitFlag.w) @[EmbeddedTLB.scala 392:171]
    node lo_7 = cat(lo_hi_4, lo_lo_3) @[EmbeddedTLB.scala 392:171]
    node hi_lo_3 = cat(hitFlag.g, hitFlag.u) @[EmbeddedTLB.scala 392:171]
    node hi_hi_4 = cat(hitFlag.d, hitFlag.a) @[EmbeddedTLB.scala 392:171]
    node hi_16 = cat(hi_hi_4, hi_lo_3) @[EmbeddedTLB.scala 392:171]
    node _T_515 = cat(hi_16, lo_7) @[EmbeddedTLB.scala 392:171]
    reg REG_18 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_516 = add(REG_18, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_517 = tail(_T_516, 1) @[GTimer.scala 25:12]
    REG_18 <= _T_517 @[GTimer.scala 25:7]
    wire _WIRE_67 : UInt<1>
    _WIRE_67 <= UInt<1>("h0")
    node _T_518 = and(UInt<1>("h1"), _WIRE_67) @[Debug.scala 55:16]
    when _T_518 : @[Debug.scala 55:31]
      node _T_519 = asUInt(reset) @[Debug.scala 56:24]
      node _T_520 = eq(_T_519, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_520 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_18) : SIM_9 @[Debug.scala 56:24]
      node _T_521 = asUInt(reset) @[Debug.scala 57:13]
      node _T_522 = eq(_T_521, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_522 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "hit:%d hitWB:%d hitVPN:%x hitFlag:%x hitPPN:%x hitRefillFlag:%x hitWBStore:%x hitCheck:%d hitExec:%d hitLoad:%d hitStore:%d\n", hit, hitWB, hitMeta.vpn, _T_515, hitData.ppn, hitRefillFlag, hitWBStore, hitCheck, hitExec, hitLoad, hitStore) : SIM_10 @[Debug.scala 57:13]
    node lo_lo_4 = cat(memRdata.flag.r, memRdata.flag.v) @[EmbeddedTLB.scala 393:145]
    node lo_hi_hi = cat(memRdata.flag.u, memRdata.flag.x) @[EmbeddedTLB.scala 393:145]
    node lo_hi_5 = cat(lo_hi_hi, memRdata.flag.w) @[EmbeddedTLB.scala 393:145]
    node lo_8 = cat(lo_hi_5, lo_lo_4) @[EmbeddedTLB.scala 393:145]
    node hi_lo_hi = cat(memRdata.flag.d, memRdata.flag.a) @[EmbeddedTLB.scala 393:145]
    node hi_lo_4 = cat(hi_lo_hi, memRdata.flag.g) @[EmbeddedTLB.scala 393:145]
    node hi_hi_hi = cat(memRdata.reserved, memRdata.ppn) @[EmbeddedTLB.scala 393:145]
    node hi_hi_5 = cat(hi_hi_hi, memRdata.rsw) @[EmbeddedTLB.scala 393:145]
    node hi_17 = cat(hi_hi_5, hi_lo_4) @[EmbeddedTLB.scala 393:145]
    node _T_523 = cat(hi_17, lo_8) @[EmbeddedTLB.scala 393:145]
    reg REG_19 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_524 = add(REG_19, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_525 = tail(_T_524, 1) @[GTimer.scala 25:12]
    REG_19 <= _T_525 @[GTimer.scala 25:7]
    wire _WIRE_68 : UInt<1>
    _WIRE_68 <= UInt<1>("h0")
    node _T_526 = and(UInt<1>("h1"), _WIRE_68) @[Debug.scala 55:16]
    when _T_526 : @[Debug.scala 55:31]
      node _T_527 = asUInt(reset) @[Debug.scala 56:24]
      node _T_528 = eq(_T_527, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_528 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_19) : SIM_11 @[Debug.scala 56:24]
      node _T_529 = asUInt(reset) @[Debug.scala 57:13]
      node _T_530 = eq(_T_529, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_530 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "miss:%d state:%d level:%d raddr:%x memRdata:%x missMask:%x missRefillFlag:%x missMetaRefill:%d\n", miss, state, level, raddr, _T_523, missMask, missRefillFlag, missMetaRefill) : SIM_12 @[Debug.scala 57:13]
    wire _WIRE_69 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:96]
    wire _WIRE_70 : UInt<121>
    _WIRE_70 <= io.md[0]
    node _T_531 = bits(_WIRE_70, 31, 0) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.pteaddr <= _T_531 @[EmbeddedTLB.scala 394:96]
    node _T_532 = bits(_WIRE_70, 51, 32) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.ppn <= _T_532 @[EmbeddedTLB.scala 394:96]
    node _T_533 = bits(_WIRE_70, 59, 52) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.flag <= _T_533 @[EmbeddedTLB.scala 394:96]
    node _T_534 = bits(_WIRE_70, 77, 60) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.mask <= _T_534 @[EmbeddedTLB.scala 394:96]
    node _T_535 = bits(_WIRE_70, 93, 78) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.asid <= _T_535 @[EmbeddedTLB.scala 394:96]
    node _T_536 = bits(_WIRE_70, 120, 94) @[EmbeddedTLB.scala 394:96]
    _WIRE_69.vpn <= _T_536 @[EmbeddedTLB.scala 394:96]
    wire _WIRE_71 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:127]
    wire _WIRE_72 : UInt<121>
    _WIRE_72 <= io.md[0]
    node _T_537 = bits(_WIRE_72, 31, 0) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.pteaddr <= _T_537 @[EmbeddedTLB.scala 394:127]
    node _T_538 = bits(_WIRE_72, 51, 32) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.ppn <= _T_538 @[EmbeddedTLB.scala 394:127]
    node _T_539 = bits(_WIRE_72, 59, 52) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.flag <= _T_539 @[EmbeddedTLB.scala 394:127]
    node _T_540 = bits(_WIRE_72, 77, 60) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.mask <= _T_540 @[EmbeddedTLB.scala 394:127]
    node _T_541 = bits(_WIRE_72, 93, 78) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.asid <= _T_541 @[EmbeddedTLB.scala 394:127]
    node _T_542 = bits(_WIRE_72, 120, 94) @[EmbeddedTLB.scala 394:127]
    _WIRE_71.vpn <= _T_542 @[EmbeddedTLB.scala 394:127]
    wire _WIRE_73 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:159]
    wire _WIRE_74 : UInt<121>
    _WIRE_74 <= io.md[0]
    node _T_543 = bits(_WIRE_74, 31, 0) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.pteaddr <= _T_543 @[EmbeddedTLB.scala 394:159]
    node _T_544 = bits(_WIRE_74, 51, 32) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.ppn <= _T_544 @[EmbeddedTLB.scala 394:159]
    node _T_545 = bits(_WIRE_74, 59, 52) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.flag <= _T_545 @[EmbeddedTLB.scala 394:159]
    node _T_546 = bits(_WIRE_74, 77, 60) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.mask <= _T_546 @[EmbeddedTLB.scala 394:159]
    node _T_547 = bits(_WIRE_74, 93, 78) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.asid <= _T_547 @[EmbeddedTLB.scala 394:159]
    node _T_548 = bits(_WIRE_74, 120, 94) @[EmbeddedTLB.scala 394:159]
    _WIRE_73.vpn <= _T_548 @[EmbeddedTLB.scala 394:159]
    wire _WIRE_75 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:190]
    wire _WIRE_76 : UInt<121>
    _WIRE_76 <= io.md[1]
    node _T_549 = bits(_WIRE_76, 31, 0) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.pteaddr <= _T_549 @[EmbeddedTLB.scala 394:190]
    node _T_550 = bits(_WIRE_76, 51, 32) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.ppn <= _T_550 @[EmbeddedTLB.scala 394:190]
    node _T_551 = bits(_WIRE_76, 59, 52) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.flag <= _T_551 @[EmbeddedTLB.scala 394:190]
    node _T_552 = bits(_WIRE_76, 77, 60) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.mask <= _T_552 @[EmbeddedTLB.scala 394:190]
    node _T_553 = bits(_WIRE_76, 93, 78) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.asid <= _T_553 @[EmbeddedTLB.scala 394:190]
    node _T_554 = bits(_WIRE_76, 120, 94) @[EmbeddedTLB.scala 394:190]
    _WIRE_75.vpn <= _T_554 @[EmbeddedTLB.scala 394:190]
    wire _WIRE_77 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:221]
    wire _WIRE_78 : UInt<121>
    _WIRE_78 <= io.md[1]
    node _T_555 = bits(_WIRE_78, 31, 0) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.pteaddr <= _T_555 @[EmbeddedTLB.scala 394:221]
    node _T_556 = bits(_WIRE_78, 51, 32) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.ppn <= _T_556 @[EmbeddedTLB.scala 394:221]
    node _T_557 = bits(_WIRE_78, 59, 52) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.flag <= _T_557 @[EmbeddedTLB.scala 394:221]
    node _T_558 = bits(_WIRE_78, 77, 60) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.mask <= _T_558 @[EmbeddedTLB.scala 394:221]
    node _T_559 = bits(_WIRE_78, 93, 78) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.asid <= _T_559 @[EmbeddedTLB.scala 394:221]
    node _T_560 = bits(_WIRE_78, 120, 94) @[EmbeddedTLB.scala 394:221]
    _WIRE_77.vpn <= _T_560 @[EmbeddedTLB.scala 394:221]
    wire _WIRE_79 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:253]
    wire _WIRE_80 : UInt<121>
    _WIRE_80 <= io.md[1]
    node _T_561 = bits(_WIRE_80, 31, 0) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.pteaddr <= _T_561 @[EmbeddedTLB.scala 394:253]
    node _T_562 = bits(_WIRE_80, 51, 32) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.ppn <= _T_562 @[EmbeddedTLB.scala 394:253]
    node _T_563 = bits(_WIRE_80, 59, 52) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.flag <= _T_563 @[EmbeddedTLB.scala 394:253]
    node _T_564 = bits(_WIRE_80, 77, 60) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.mask <= _T_564 @[EmbeddedTLB.scala 394:253]
    node _T_565 = bits(_WIRE_80, 93, 78) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.asid <= _T_565 @[EmbeddedTLB.scala 394:253]
    node _T_566 = bits(_WIRE_80, 120, 94) @[EmbeddedTLB.scala 394:253]
    _WIRE_79.vpn <= _T_566 @[EmbeddedTLB.scala 394:253]
    wire _WIRE_81 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:284]
    wire _WIRE_82 : UInt<121>
    _WIRE_82 <= io.md[2]
    node _T_567 = bits(_WIRE_82, 31, 0) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.pteaddr <= _T_567 @[EmbeddedTLB.scala 394:284]
    node _T_568 = bits(_WIRE_82, 51, 32) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.ppn <= _T_568 @[EmbeddedTLB.scala 394:284]
    node _T_569 = bits(_WIRE_82, 59, 52) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.flag <= _T_569 @[EmbeddedTLB.scala 394:284]
    node _T_570 = bits(_WIRE_82, 77, 60) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.mask <= _T_570 @[EmbeddedTLB.scala 394:284]
    node _T_571 = bits(_WIRE_82, 93, 78) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.asid <= _T_571 @[EmbeddedTLB.scala 394:284]
    node _T_572 = bits(_WIRE_82, 120, 94) @[EmbeddedTLB.scala 394:284]
    _WIRE_81.vpn <= _T_572 @[EmbeddedTLB.scala 394:284]
    wire _WIRE_83 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:315]
    wire _WIRE_84 : UInt<121>
    _WIRE_84 <= io.md[2]
    node _T_573 = bits(_WIRE_84, 31, 0) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.pteaddr <= _T_573 @[EmbeddedTLB.scala 394:315]
    node _T_574 = bits(_WIRE_84, 51, 32) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.ppn <= _T_574 @[EmbeddedTLB.scala 394:315]
    node _T_575 = bits(_WIRE_84, 59, 52) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.flag <= _T_575 @[EmbeddedTLB.scala 394:315]
    node _T_576 = bits(_WIRE_84, 77, 60) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.mask <= _T_576 @[EmbeddedTLB.scala 394:315]
    node _T_577 = bits(_WIRE_84, 93, 78) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.asid <= _T_577 @[EmbeddedTLB.scala 394:315]
    node _T_578 = bits(_WIRE_84, 120, 94) @[EmbeddedTLB.scala 394:315]
    _WIRE_83.vpn <= _T_578 @[EmbeddedTLB.scala 394:315]
    wire _WIRE_85 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:347]
    wire _WIRE_86 : UInt<121>
    _WIRE_86 <= io.md[2]
    node _T_579 = bits(_WIRE_86, 31, 0) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.pteaddr <= _T_579 @[EmbeddedTLB.scala 394:347]
    node _T_580 = bits(_WIRE_86, 51, 32) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.ppn <= _T_580 @[EmbeddedTLB.scala 394:347]
    node _T_581 = bits(_WIRE_86, 59, 52) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.flag <= _T_581 @[EmbeddedTLB.scala 394:347]
    node _T_582 = bits(_WIRE_86, 77, 60) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.mask <= _T_582 @[EmbeddedTLB.scala 394:347]
    node _T_583 = bits(_WIRE_86, 93, 78) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.asid <= _T_583 @[EmbeddedTLB.scala 394:347]
    node _T_584 = bits(_WIRE_86, 120, 94) @[EmbeddedTLB.scala 394:347]
    _WIRE_85.vpn <= _T_584 @[EmbeddedTLB.scala 394:347]
    wire _WIRE_87 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:378]
    wire _WIRE_88 : UInt<121>
    _WIRE_88 <= io.md[3]
    node _T_585 = bits(_WIRE_88, 31, 0) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.pteaddr <= _T_585 @[EmbeddedTLB.scala 394:378]
    node _T_586 = bits(_WIRE_88, 51, 32) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.ppn <= _T_586 @[EmbeddedTLB.scala 394:378]
    node _T_587 = bits(_WIRE_88, 59, 52) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.flag <= _T_587 @[EmbeddedTLB.scala 394:378]
    node _T_588 = bits(_WIRE_88, 77, 60) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.mask <= _T_588 @[EmbeddedTLB.scala 394:378]
    node _T_589 = bits(_WIRE_88, 93, 78) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.asid <= _T_589 @[EmbeddedTLB.scala 394:378]
    node _T_590 = bits(_WIRE_88, 120, 94) @[EmbeddedTLB.scala 394:378]
    _WIRE_87.vpn <= _T_590 @[EmbeddedTLB.scala 394:378]
    wire _WIRE_89 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:409]
    wire _WIRE_90 : UInt<121>
    _WIRE_90 <= io.md[3]
    node _T_591 = bits(_WIRE_90, 31, 0) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.pteaddr <= _T_591 @[EmbeddedTLB.scala 394:409]
    node _T_592 = bits(_WIRE_90, 51, 32) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.ppn <= _T_592 @[EmbeddedTLB.scala 394:409]
    node _T_593 = bits(_WIRE_90, 59, 52) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.flag <= _T_593 @[EmbeddedTLB.scala 394:409]
    node _T_594 = bits(_WIRE_90, 77, 60) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.mask <= _T_594 @[EmbeddedTLB.scala 394:409]
    node _T_595 = bits(_WIRE_90, 93, 78) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.asid <= _T_595 @[EmbeddedTLB.scala 394:409]
    node _T_596 = bits(_WIRE_90, 120, 94) @[EmbeddedTLB.scala 394:409]
    _WIRE_89.vpn <= _T_596 @[EmbeddedTLB.scala 394:409]
    wire _WIRE_91 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 394:441]
    wire _WIRE_92 : UInt<121>
    _WIRE_92 <= io.md[3]
    node _T_597 = bits(_WIRE_92, 31, 0) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.pteaddr <= _T_597 @[EmbeddedTLB.scala 394:441]
    node _T_598 = bits(_WIRE_92, 51, 32) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.ppn <= _T_598 @[EmbeddedTLB.scala 394:441]
    node _T_599 = bits(_WIRE_92, 59, 52) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.flag <= _T_599 @[EmbeddedTLB.scala 394:441]
    node _T_600 = bits(_WIRE_92, 77, 60) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.mask <= _T_600 @[EmbeddedTLB.scala 394:441]
    node _T_601 = bits(_WIRE_92, 93, 78) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.asid <= _T_601 @[EmbeddedTLB.scala 394:441]
    node _T_602 = bits(_WIRE_92, 120, 94) @[EmbeddedTLB.scala 394:441]
    _WIRE_91.vpn <= _T_602 @[EmbeddedTLB.scala 394:441]
    reg REG_20 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_603 = add(REG_20, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_604 = tail(_T_603, 1) @[GTimer.scala 25:12]
    REG_20 <= _T_604 @[GTimer.scala 25:7]
    wire _WIRE_93 : UInt<1>
    _WIRE_93 <= UInt<1>("h0")
    node _T_605 = and(UInt<1>("h1"), _WIRE_93) @[Debug.scala 55:16]
    when _T_605 : @[Debug.scala 55:31]
      node _T_606 = asUInt(reset) @[Debug.scala 56:24]
      node _T_607 = eq(_T_606, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_607 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_20) : SIM_13 @[Debug.scala 56:24]
      node _T_608 = asUInt(reset) @[Debug.scala 57:13]
      node _T_609 = eq(_T_608, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_609 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "meta/data: (0)%x|%b|%x (1)%x|%b|%x (2)%x|%b|%x (3)%x|%b|%x rread:%d\n", _WIRE_69.vpn, _WIRE_71.flag, _WIRE_73.ppn, _WIRE_75.vpn, _WIRE_77.flag, _WIRE_79.ppn, _WIRE_81.vpn, _WIRE_83.flag, _WIRE_85.ppn, _WIRE_87.vpn, _WIRE_89.flag, _WIRE_91.ppn, io.mdReady) : SIM_14 @[Debug.scala 57:13]
    wire _WIRE_94 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:183]
    wire _WIRE_95 : UInt<121>
    _WIRE_95 <= io.mdWrite.wdata
    node _T_610 = bits(_WIRE_95, 31, 0) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.pteaddr <= _T_610 @[EmbeddedTLB.scala 395:183]
    node _T_611 = bits(_WIRE_95, 51, 32) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.ppn <= _T_611 @[EmbeddedTLB.scala 395:183]
    node _T_612 = bits(_WIRE_95, 59, 52) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.flag <= _T_612 @[EmbeddedTLB.scala 395:183]
    node _T_613 = bits(_WIRE_95, 77, 60) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.mask <= _T_613 @[EmbeddedTLB.scala 395:183]
    node _T_614 = bits(_WIRE_95, 93, 78) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.asid <= _T_614 @[EmbeddedTLB.scala 395:183]
    node _T_615 = bits(_WIRE_95, 120, 94) @[EmbeddedTLB.scala 395:183]
    _WIRE_94.vpn <= _T_615 @[EmbeddedTLB.scala 395:183]
    wire _WIRE_96 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:225]
    wire _WIRE_97 : UInt<121>
    _WIRE_97 <= io.mdWrite.wdata
    node _T_616 = bits(_WIRE_97, 31, 0) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.pteaddr <= _T_616 @[EmbeddedTLB.scala 395:225]
    node _T_617 = bits(_WIRE_97, 51, 32) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.ppn <= _T_617 @[EmbeddedTLB.scala 395:225]
    node _T_618 = bits(_WIRE_97, 59, 52) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.flag <= _T_618 @[EmbeddedTLB.scala 395:225]
    node _T_619 = bits(_WIRE_97, 77, 60) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.mask <= _T_619 @[EmbeddedTLB.scala 395:225]
    node _T_620 = bits(_WIRE_97, 93, 78) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.asid <= _T_620 @[EmbeddedTLB.scala 395:225]
    node _T_621 = bits(_WIRE_97, 120, 94) @[EmbeddedTLB.scala 395:225]
    _WIRE_96.vpn <= _T_621 @[EmbeddedTLB.scala 395:225]
    wire _WIRE_98 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:268]
    wire _WIRE_99 : UInt<121>
    _WIRE_99 <= io.mdWrite.wdata
    node _T_622 = bits(_WIRE_99, 31, 0) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.pteaddr <= _T_622 @[EmbeddedTLB.scala 395:268]
    node _T_623 = bits(_WIRE_99, 51, 32) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.ppn <= _T_623 @[EmbeddedTLB.scala 395:268]
    node _T_624 = bits(_WIRE_99, 59, 52) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.flag <= _T_624 @[EmbeddedTLB.scala 395:268]
    node _T_625 = bits(_WIRE_99, 77, 60) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.mask <= _T_625 @[EmbeddedTLB.scala 395:268]
    node _T_626 = bits(_WIRE_99, 93, 78) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.asid <= _T_626 @[EmbeddedTLB.scala 395:268]
    node _T_627 = bits(_WIRE_99, 120, 94) @[EmbeddedTLB.scala 395:268]
    _WIRE_98.vpn <= _T_627 @[EmbeddedTLB.scala 395:268]
    wire _WIRE_100 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:311]
    wire _WIRE_101 : UInt<121>
    _WIRE_101 <= io.mdWrite.wdata
    node _T_628 = bits(_WIRE_101, 31, 0) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.pteaddr <= _T_628 @[EmbeddedTLB.scala 395:311]
    node _T_629 = bits(_WIRE_101, 51, 32) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.ppn <= _T_629 @[EmbeddedTLB.scala 395:311]
    node _T_630 = bits(_WIRE_101, 59, 52) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.flag <= _T_630 @[EmbeddedTLB.scala 395:311]
    node _T_631 = bits(_WIRE_101, 77, 60) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.mask <= _T_631 @[EmbeddedTLB.scala 395:311]
    node _T_632 = bits(_WIRE_101, 93, 78) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.asid <= _T_632 @[EmbeddedTLB.scala 395:311]
    node _T_633 = bits(_WIRE_101, 120, 94) @[EmbeddedTLB.scala 395:311]
    _WIRE_100.vpn <= _T_633 @[EmbeddedTLB.scala 395:311]
    wire _WIRE_102 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:354]
    wire _WIRE_103 : UInt<121>
    _WIRE_103 <= io.mdWrite.wdata
    node _T_634 = bits(_WIRE_103, 31, 0) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.pteaddr <= _T_634 @[EmbeddedTLB.scala 395:354]
    node _T_635 = bits(_WIRE_103, 51, 32) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.ppn <= _T_635 @[EmbeddedTLB.scala 395:354]
    node _T_636 = bits(_WIRE_103, 59, 52) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.flag <= _T_636 @[EmbeddedTLB.scala 395:354]
    node _T_637 = bits(_WIRE_103, 77, 60) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.mask <= _T_637 @[EmbeddedTLB.scala 395:354]
    node _T_638 = bits(_WIRE_103, 93, 78) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.asid <= _T_638 @[EmbeddedTLB.scala 395:354]
    node _T_639 = bits(_WIRE_103, 120, 94) @[EmbeddedTLB.scala 395:354]
    _WIRE_102.vpn <= _T_639 @[EmbeddedTLB.scala 395:354]
    wire _WIRE_104 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:397]
    wire _WIRE_105 : UInt<121>
    _WIRE_105 <= io.mdWrite.wdata
    node _T_640 = bits(_WIRE_105, 31, 0) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.pteaddr <= _T_640 @[EmbeddedTLB.scala 395:397]
    node _T_641 = bits(_WIRE_105, 51, 32) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.ppn <= _T_641 @[EmbeddedTLB.scala 395:397]
    node _T_642 = bits(_WIRE_105, 59, 52) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.flag <= _T_642 @[EmbeddedTLB.scala 395:397]
    node _T_643 = bits(_WIRE_105, 77, 60) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.mask <= _T_643 @[EmbeddedTLB.scala 395:397]
    node _T_644 = bits(_WIRE_105, 93, 78) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.asid <= _T_644 @[EmbeddedTLB.scala 395:397]
    node _T_645 = bits(_WIRE_105, 120, 94) @[EmbeddedTLB.scala 395:397]
    _WIRE_104.vpn <= _T_645 @[EmbeddedTLB.scala 395:397]
    wire _WIRE_106 : { vpn : UInt<27>, asid : UInt<16>, mask : UInt<18>, flag : UInt<8>, ppn : UInt<20>, pteaddr : UInt<32>} @[EmbeddedTLB.scala 395:439]
    wire _WIRE_107 : UInt<121>
    _WIRE_107 <= io.mdWrite.wdata
    node _T_646 = bits(_WIRE_107, 31, 0) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.pteaddr <= _T_646 @[EmbeddedTLB.scala 395:439]
    node _T_647 = bits(_WIRE_107, 51, 32) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.ppn <= _T_647 @[EmbeddedTLB.scala 395:439]
    node _T_648 = bits(_WIRE_107, 59, 52) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.flag <= _T_648 @[EmbeddedTLB.scala 395:439]
    node _T_649 = bits(_WIRE_107, 77, 60) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.mask <= _T_649 @[EmbeddedTLB.scala 395:439]
    node _T_650 = bits(_WIRE_107, 93, 78) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.asid <= _T_650 @[EmbeddedTLB.scala 395:439]
    node _T_651 = bits(_WIRE_107, 120, 94) @[EmbeddedTLB.scala 395:439]
    _WIRE_106.vpn <= _T_651 @[EmbeddedTLB.scala 395:439]
    reg REG_21 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_652 = add(REG_21, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_653 = tail(_T_652, 1) @[GTimer.scala 25:12]
    REG_21 <= _T_653 @[GTimer.scala 25:7]
    wire _WIRE_108 : UInt<1>
    _WIRE_108 <= UInt<1>("h0")
    node _T_654 = and(UInt<1>("h1"), _WIRE_108) @[Debug.scala 55:16]
    when _T_654 : @[Debug.scala 55:31]
      node _T_655 = asUInt(reset) @[Debug.scala 56:24]
      node _T_656 = eq(_T_655, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_656 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_21) : SIM_15 @[Debug.scala 56:24]
      node _T_657 = asUInt(reset) @[Debug.scala 57:13]
      node _T_658 = eq(_T_657, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_658 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "md: wen:%d windex:%x waymask:%x vpn:%x asid:%x mask:%x flag:%x asid:%x ppn:%x pteaddr:%x\n", io.mdWrite.wen, io.mdWrite.windex, io.mdWrite.waymask, _WIRE_94.vpn, _WIRE_96.asid, _WIRE_98.mask, _WIRE_100.flag, _WIRE_102.asid, _WIRE_104.ppn, _WIRE_106.pteaddr) : SIM_16 @[Debug.scala 57:13]
    reg REG_22 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_659 = add(REG_22, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_660 = tail(_T_659, 1) @[GTimer.scala 25:12]
    REG_22 <= _T_660 @[GTimer.scala 25:7]
    wire _WIRE_109 : UInt<1>
    _WIRE_109 <= UInt<1>("h0")
    node _T_661 = and(UInt<1>("h1"), _WIRE_109) @[Debug.scala 55:16]
    when _T_661 : @[Debug.scala 55:31]
      node _T_662 = asUInt(reset) @[Debug.scala 56:24]
      node _T_663 = eq(_T_662, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_663 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_22) : SIM_17 @[Debug.scala 56:24]
      node _T_664 = asUInt(reset) @[Debug.scala 57:13]
      node _T_665 = eq(_T_664, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_665 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "MemReq(%d, %d) MemResp(%d, %d) addr:%x cmd:%d rdata:%x cmd:%d\n", io.mem.req.valid, io.mem.req.ready, io.mem.resp.valid, io.mem.resp.ready, io.mem.req.bits.addr, io.mem.req.bits.cmd, io.mem.resp.bits.rdata, io.mem.resp.bits.cmd) : SIM_18 @[Debug.scala 57:13]
    reg REG_23 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_666 = add(REG_23, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_667 = tail(_T_666, 1) @[GTimer.scala 25:12]
    REG_23 <= _T_667 @[GTimer.scala 25:7]
    wire _WIRE_110 : UInt<1>
    _WIRE_110 <= UInt<1>("h0")
    node _T_668 = and(UInt<1>("h1"), _WIRE_110) @[Debug.scala 55:16]
    when _T_668 : @[Debug.scala 55:31]
      node _T_669 = asUInt(reset) @[Debug.scala 56:24]
      node _T_670 = eq(_T_669, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_670 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLBExec_1: ", REG_23) : SIM_19 @[Debug.scala 56:24]
      node _T_671 = asUInt(reset) @[Debug.scala 57:13]
      node _T_672 = eq(_T_671, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_672 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "io.ipf:%d hitinstrPF:%d missIPF:%d pf.loadPF:%d pf.storePF:%d loadPF:%d storePF:%d\n", io.ipf, hitinstrPF, missIPF, io.pf.loadPF, io.pf.storePF, loadPF, storePF) : SIM_20 @[Debug.scala 57:13]

  module EmbeddedTLBEmpty_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}

    io.out.bits.wdata <= io.in.bits.wdata @[EmbeddedTLB.scala 406:10]
    io.out.bits.wmask <= io.in.bits.wmask @[EmbeddedTLB.scala 406:10]
    io.out.bits.cmd <= io.in.bits.cmd @[EmbeddedTLB.scala 406:10]
    io.out.bits.size <= io.in.bits.size @[EmbeddedTLB.scala 406:10]
    io.out.bits.addr <= io.in.bits.addr @[EmbeddedTLB.scala 406:10]
    io.out.valid <= io.in.valid @[EmbeddedTLB.scala 406:10]
    io.in.ready <= io.out.ready @[EmbeddedTLB.scala 406:10]

  module EmbeddedTLBMD_1 :
    input clock : Clock
    input reset : Reset
    output io : { tlbmd : UInt<121>[4], flip write : { wen : UInt<1>, windex : UInt<4>, waymask : UInt<4>, wdata : UInt<121>}, flip rindex : UInt<4>, ready : UInt<1>}

    cmem tlbmd : UInt<121>[4] [16] @[EmbeddedTLB.scala 51:18]
    infer mport MPORT = tlbmd[io.rindex], clock @[EmbeddedTLB.scala 52:20]
    io.tlbmd[0] <= MPORT[0] @[EmbeddedTLB.scala 52:12]
    io.tlbmd[1] <= MPORT[1] @[EmbeddedTLB.scala 52:12]
    io.tlbmd[2] <= MPORT[2] @[EmbeddedTLB.scala 52:12]
    io.tlbmd[3] <= MPORT[3] @[EmbeddedTLB.scala 52:12]
    reg resetState : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[EmbeddedTLB.scala 55:27]
    reg resetSet : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 60:40]
    wire resetFinish : UInt<1>
    resetFinish <= UInt<1>("h0")
    when resetState : @[Counter.scala 118:17]
      node wrap_wrap = eq(resetSet, UInt<4>("hf")) @[Counter.scala 72:24]
      node _wrap_value_T = add(resetSet, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      resetSet <= _wrap_value_T_1 @[Counter.scala 76:15]
      resetFinish <= wrap_wrap @[Counter.scala 118:24]
    when resetFinish : @[EmbeddedTLB.scala 57:22]
      resetState <= UInt<1>("h0") @[EmbeddedTLB.scala 57:35]
    node wen = mux(resetState, UInt<1>("h1"), io.write.wen) @[EmbeddedTLB.scala 64:16]
    node setIdx = mux(resetState, resetSet, io.write.windex) @[EmbeddedTLB.scala 65:19]
    node _T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T, io.write.waymask) @[EmbeddedTLB.scala 66:20]
    node dataword = mux(resetState, UInt<1>("h0"), io.write.wdata) @[EmbeddedTLB.scala 67:21]
    wire wdata : UInt<121>[4] @[EmbeddedTLB.scala 68:22]
    wdata[0] <= dataword @[EmbeddedTLB.scala 68:22]
    wdata[1] <= dataword @[EmbeddedTLB.scala 68:22]
    wdata[2] <= dataword @[EmbeddedTLB.scala 68:22]
    wdata[3] <= dataword @[EmbeddedTLB.scala 68:22]
    when wen : @[EmbeddedTLB.scala 70:14]
      node _T_1 = bits(waymask, 0, 0) @[EmbeddedTLB.scala 70:51]
      node _T_2 = bits(waymask, 1, 1) @[EmbeddedTLB.scala 70:51]
      node _T_3 = bits(waymask, 2, 2) @[EmbeddedTLB.scala 70:51]
      node _T_4 = bits(waymask, 3, 3) @[EmbeddedTLB.scala 70:51]
      write mport MPORT_1 = tlbmd[setIdx], clock
      when _T_1 :
        MPORT_1[0] <= wdata[0]
      when _T_2 :
        MPORT_1[1] <= wdata[1]
      when _T_3 :
        MPORT_1[2] <= wdata[2]
      when _T_4 :
        MPORT_1[3] <= wdata[3]
    node _T_5 = eq(resetState, UInt<1>("h0")) @[EmbeddedTLB.scala 72:15]
    io.ready <= _T_5 @[EmbeddedTLB.scala 72:12]

  module EmbeddedTLB_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<1>, csrMMU : { flip priviledgeMode : UInt<2>, flip status_sum : UInt<1>, flip status_mxr : UInt<1>, loadPF : UInt<1>, storePF : UInt<1>, addr : UInt<39>}, flip cacheEmpty : UInt<1>, ipf : UInt<1>}

    wire satp : UInt<64>
    satp <= UInt<64>("h0")
    inst tlbExec of EmbeddedTLBExec_1 @[EmbeddedTLB.scala 83:23]
    tlbExec.clock <= clock
    tlbExec.reset <= reset
    inst tlbEmpty of EmbeddedTLBEmpty_1 @[EmbeddedTLB.scala 84:24]
    tlbEmpty.clock <= clock
    tlbEmpty.reset <= reset
    inst mdTLB of EmbeddedTLBMD_1 @[EmbeddedTLB.scala 85:21]
    mdTLB.clock <= clock
    mdTLB.reset <= reset
    wire mdUpdate : UInt<1> @[EmbeddedTLB.scala 86:22]
    tlbExec.io.flush <= io.flush @[EmbeddedTLB.scala 88:20]
    tlbExec.io.satp <= satp @[EmbeddedTLB.scala 89:19]
    tlbExec.io.mem.resp.bits.rdata <= io.mem.resp.bits.rdata @[EmbeddedTLB.scala 90:18]
    tlbExec.io.mem.resp.bits.cmd <= io.mem.resp.bits.cmd @[EmbeddedTLB.scala 90:18]
    tlbExec.io.mem.resp.valid <= io.mem.resp.valid @[EmbeddedTLB.scala 90:18]
    io.mem.resp.ready <= tlbExec.io.mem.resp.ready @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.wdata <= tlbExec.io.mem.req.bits.wdata @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.wmask <= tlbExec.io.mem.req.bits.wmask @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.cmd <= tlbExec.io.mem.req.bits.cmd @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.size <= tlbExec.io.mem.req.bits.size @[EmbeddedTLB.scala 90:18]
    io.mem.req.bits.addr <= tlbExec.io.mem.req.bits.addr @[EmbeddedTLB.scala 90:18]
    io.mem.req.valid <= tlbExec.io.mem.req.valid @[EmbeddedTLB.scala 90:18]
    tlbExec.io.mem.req.ready <= io.mem.req.ready @[EmbeddedTLB.scala 90:18]
    io.csrMMU.addr <= tlbExec.io.pf.addr @[EmbeddedTLB.scala 91:17]
    io.csrMMU.storePF <= tlbExec.io.pf.storePF @[EmbeddedTLB.scala 91:17]
    io.csrMMU.loadPF <= tlbExec.io.pf.loadPF @[EmbeddedTLB.scala 91:17]
    tlbExec.io.pf.status_mxr <= io.csrMMU.status_mxr @[EmbeddedTLB.scala 91:17]
    tlbExec.io.pf.status_sum <= io.csrMMU.status_sum @[EmbeddedTLB.scala 91:17]
    tlbExec.io.pf.priviledgeMode <= io.csrMMU.priviledgeMode @[EmbeddedTLB.scala 91:17]
    reg r : UInt<121>[4], clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when mdUpdate : @[Reg.scala 16:19]
      r[0] <= mdTLB.io.tlbmd[0] @[Reg.scala 16:23]
      r[1] <= mdTLB.io.tlbmd[1] @[Reg.scala 16:23]
      r[2] <= mdTLB.io.tlbmd[2] @[Reg.scala 16:23]
      r[3] <= mdTLB.io.tlbmd[3] @[Reg.scala 16:23]
    tlbExec.io.md[0] <= r[0] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.md[1] <= r[1] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.md[2] <= r[2] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.md[3] <= r[3] @[EmbeddedTLB.scala 92:17]
    tlbExec.io.mdReady <= mdTLB.io.ready @[EmbeddedTLB.scala 93:22]
    wire _WIRE : { tag : UInt<23>, index : UInt<4>, off : UInt<12>} @[TLB.scala 200:19]
    wire _WIRE_1 : UInt<39>
    _WIRE_1 <= io.in.req.bits.addr
    node _T = bits(_WIRE_1, 11, 0) @[TLB.scala 200:19]
    _WIRE.off <= _T @[TLB.scala 200:19]
    node _T_1 = bits(_WIRE_1, 15, 12) @[TLB.scala 200:19]
    _WIRE.index <= _T_1 @[TLB.scala 200:19]
    node _T_2 = bits(_WIRE_1, 38, 16) @[TLB.scala 200:19]
    _WIRE.tag <= _T_2 @[TLB.scala 200:19]
    mdTLB.io.rindex <= _WIRE.index @[EmbeddedTLB.scala 94:19]
    mdTLB.io.write.wdata <= tlbExec.io.mdWrite.wdata @[EmbeddedTLB.scala 95:18]
    mdTLB.io.write.waymask <= tlbExec.io.mdWrite.waymask @[EmbeddedTLB.scala 95:18]
    mdTLB.io.write.windex <= tlbExec.io.mdWrite.windex @[EmbeddedTLB.scala 95:18]
    mdTLB.io.write.wen <= tlbExec.io.mdWrite.wen @[EmbeddedTLB.scala 95:18]
    io.ipf <= UInt<1>("h0") @[EmbeddedTLB.scala 97:10]
    wire flushTLB : UInt<1>
    flushTLB <= UInt<1>("h0")
    node _T_3 = asUInt(reset) @[EmbeddedTLB.scala 102:24]
    node _T_4 = or(_T_3, flushTLB) @[EmbeddedTLB.scala 102:31]
    mdTLB.reset <= _T_4 @[EmbeddedTLB.scala 102:15]
    wire _WIRE_2 : { mode : UInt<4>, asid : UInt<16>, res : UInt<24>, ppn : UInt<20>} @[EmbeddedTLB.scala 105:31]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= satp
    node _T_5 = bits(_WIRE_3, 19, 0) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.ppn <= _T_5 @[EmbeddedTLB.scala 105:31]
    node _T_6 = bits(_WIRE_3, 43, 20) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.res <= _T_6 @[EmbeddedTLB.scala 105:31]
    node _T_7 = bits(_WIRE_3, 59, 44) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.asid <= _T_7 @[EmbeddedTLB.scala 105:31]
    node _T_8 = bits(_WIRE_3, 63, 60) @[EmbeddedTLB.scala 105:31]
    _WIRE_2.mode <= _T_8 @[EmbeddedTLB.scala 105:31]
    node _T_9 = eq(_WIRE_2.mode, UInt<4>("h8")) @[EmbeddedTLB.scala 105:49]
    node _T_10 = lt(io.csrMMU.priviledgeMode, UInt<2>("h3")) @[EmbeddedTLB.scala 105:86]
    node vmEnable = and(_T_9, _T_10) @[EmbeddedTLB.scala 105:57]
    tlbEmpty.io.in.bits.wdata is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.wmask is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.cmd is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.size is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.bits.addr is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.valid is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.in.ready is invalid @[EmbeddedTLB.scala 120:18]
    tlbEmpty.io.out.ready is invalid @[EmbeddedTLB.scala 121:25]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EmbeddedTLB.scala 108:24]
    when tlbExec.io.isFinish : @[EmbeddedTLB.scala 109:25]
      REG <= UInt<1>("h0") @[EmbeddedTLB.scala 109:33]
    node _T_11 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 110:22]
    node _T_12 = and(_T_11, vmEnable) @[EmbeddedTLB.scala 110:37]
    when _T_12 : @[EmbeddedTLB.scala 110:50]
      REG <= UInt<1>("h1") @[EmbeddedTLB.scala 110:58]
    when io.flush : @[EmbeddedTLB.scala 111:20]
      REG <= UInt<1>("h0") @[EmbeddedTLB.scala 111:28]
    io.in.req.ready <= tlbExec.io.in.ready @[EmbeddedTLB.scala 113:16]
    node _T_13 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 114:51]
    reg r_1 : { addr : UInt<39>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when _T_13 : @[Reg.scala 16:19]
      r_1.wdata <= io.in.req.bits.wdata @[Reg.scala 16:23]
      r_1.wmask <= io.in.req.bits.wmask @[Reg.scala 16:23]
      r_1.cmd <= io.in.req.bits.cmd @[Reg.scala 16:23]
      r_1.size <= io.in.req.bits.size @[Reg.scala 16:23]
      r_1.addr <= io.in.req.bits.addr @[Reg.scala 16:23]
    tlbExec.io.in.bits.wdata <= r_1.wdata @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.wmask <= r_1.wmask @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.cmd <= r_1.cmd @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.size <= r_1.size @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.bits.addr <= r_1.addr @[EmbeddedTLB.scala 114:16]
    tlbExec.io.in.valid <= REG @[EmbeddedTLB.scala 115:17]
    node _T_14 = and(io.in.req.valid, tlbExec.io.in.ready) @[EmbeddedTLB.scala 117:26]
    mdUpdate <= _T_14 @[EmbeddedTLB.scala 117:12]
    node _T_15 = and(tlbEmpty.io.out.ready, tlbEmpty.io.out.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T_15 : @[Pipeline.scala 25:25]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_16 = and(tlbExec.io.out.valid, tlbEmpty.io.in.ready) @[Pipeline.scala 26:22]
    when _T_16 : @[Pipeline.scala 26:38]
      REG_1 <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when io.flush : @[Pipeline.scala 27:20]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 27:28]
    tlbExec.io.out.ready <= tlbEmpty.io.in.ready @[Pipeline.scala 29:16]
    node _T_17 = and(tlbExec.io.out.valid, tlbEmpty.io.in.ready) @[Pipeline.scala 30:51]
    reg r_2 : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), r_2) @[Reg.scala 15:16]
    when _T_17 : @[Reg.scala 16:19]
      r_2.wdata <= tlbExec.io.out.bits.wdata @[Reg.scala 16:23]
      r_2.wmask <= tlbExec.io.out.bits.wmask @[Reg.scala 16:23]
      r_2.cmd <= tlbExec.io.out.bits.cmd @[Reg.scala 16:23]
      r_2.size <= tlbExec.io.out.bits.size @[Reg.scala 16:23]
      r_2.addr <= tlbExec.io.out.bits.addr @[Reg.scala 16:23]
    tlbEmpty.io.in.bits.wdata <= r_2.wdata @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.wmask <= r_2.wmask @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.cmd <= r_2.cmd @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.size <= r_2.size @[Pipeline.scala 30:16]
    tlbEmpty.io.in.bits.addr <= r_2.addr @[Pipeline.scala 30:16]
    tlbEmpty.io.in.valid <= REG_1 @[Pipeline.scala 31:17]
    node _T_18 = eq(vmEnable, UInt<1>("h0")) @[EmbeddedTLB.scala 126:8]
    when _T_18 : @[EmbeddedTLB.scala 126:19]
      tlbExec.io.out.ready <= UInt<1>("h1") @[EmbeddedTLB.scala 127:26]
      tlbEmpty.io.out.ready <= UInt<1>("h1") @[EmbeddedTLB.scala 128:52]
      io.out.req.valid <= io.in.req.valid @[EmbeddedTLB.scala 129:22]
      io.in.req.ready <= io.out.req.ready @[EmbeddedTLB.scala 130:21]
      node _T_19 = bits(io.in.req.bits.addr, 31, 0) @[EmbeddedTLB.scala 131:48]
      io.out.req.bits.addr <= _T_19 @[EmbeddedTLB.scala 131:26]
      io.out.req.bits.size <= io.in.req.bits.size @[EmbeddedTLB.scala 132:26]
      io.out.req.bits.cmd <= io.in.req.bits.cmd @[EmbeddedTLB.scala 133:25]
      io.out.req.bits.wmask <= io.in.req.bits.wmask @[EmbeddedTLB.scala 134:27]
      io.out.req.bits.wdata <= io.in.req.bits.wdata @[EmbeddedTLB.scala 135:27]
    else :
      io.out.req.bits.wdata <= tlbEmpty.io.out.bits.wdata @[EmbeddedTLB.scala 138:41]
      io.out.req.bits.wmask <= tlbEmpty.io.out.bits.wmask @[EmbeddedTLB.scala 138:41]
      io.out.req.bits.cmd <= tlbEmpty.io.out.bits.cmd @[EmbeddedTLB.scala 138:41]
      io.out.req.bits.size <= tlbEmpty.io.out.bits.size @[EmbeddedTLB.scala 138:41]
      io.out.req.bits.addr <= tlbEmpty.io.out.bits.addr @[EmbeddedTLB.scala 138:41]
      io.out.req.valid <= tlbEmpty.io.out.valid @[EmbeddedTLB.scala 138:41]
      tlbEmpty.io.out.ready <= io.out.req.ready @[EmbeddedTLB.scala 138:41]
    io.in.resp.bits.rdata <= io.out.resp.bits.rdata @[EmbeddedTLB.scala 141:15]
    io.in.resp.bits.cmd <= io.out.resp.bits.cmd @[EmbeddedTLB.scala 141:15]
    io.in.resp.valid <= io.out.resp.valid @[EmbeddedTLB.scala 141:15]
    io.out.resp.ready <= io.in.resp.ready @[EmbeddedTLB.scala 141:15]
    node _T_20 = eq(tlbExec.io.out.ready, UInt<1>("h0")) @[EmbeddedTLB.scala 145:84]
    node _T_21 = and(tlbExec.io.out.valid, _T_20) @[EmbeddedTLB.scala 145:81]
    reg r_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 27:20]
    when _T_21 : @[Reg.scala 28:19]
      r_3 <= UInt<1>("h1") @[Reg.scala 28:23]
    node _T_22 = and(tlbExec.io.out.ready, tlbExec.io.out.valid) @[Decoupled.scala 40:37]
    node _T_23 = and(r_3, _T_22) @[EmbeddedTLB.scala 146:27]
    when _T_23 : @[EmbeddedTLB.scala 146:53]
      r_3 <= UInt<1>("h0") @[EmbeddedTLB.scala 146:72]
    node _T_24 = eq(r_3, UInt<1>("h0")) @[EmbeddedTLB.scala 147:46]
    node _T_25 = and(tlbExec.io.out.valid, _T_24) @[EmbeddedTLB.scala 147:43]
    node _T_26 = or(tlbExec.io.pf.loadPF, tlbExec.io.pf.storePF) @[Bundle.scala 131:23]
    node _T_27 = or(_T_25, _T_26) @[EmbeddedTLB.scala 147:65]
    node _T_28 = or(io.csrMMU.loadPF, io.csrMMU.storePF) @[Bundle.scala 131:23]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_29 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_30 = tail(_T_29, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_30 @[GTimer.scala 25:7]
    wire _WIRE_4 : UInt<1>
    _WIRE_4 <= UInt<1>("h0")
    node _T_31 = and(UInt<1>("h1"), _WIRE_4) @[Debug.scala 55:16]
    when _T_31 : @[Debug.scala 55:31]
      node _T_32 = asUInt(reset) @[Debug.scala 56:24]
      node _T_33 = eq(_T_32, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_33 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB_1: ", REG_2) : SIM @[Debug.scala 56:24]
      node _T_34 = asUInt(reset) @[Debug.scala 57:13]
      node _T_35 = eq(_T_34, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_35 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq(%d, %d) InResp(%d, %d) OutReq(%d, %d) OutResp(%d, %d) vmEnable:%d mode:%d\n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready, io.out.req.valid, io.out.req.ready, io.out.resp.valid, io.out.resp.ready, vmEnable, io.csrMMU.priviledgeMode) : SIM_1 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_36 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_37 = tail(_T_36, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_37 @[GTimer.scala 25:7]
    wire _WIRE_5 : UInt<1>
    _WIRE_5 <= UInt<1>("h0")
    node _T_38 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
    when _T_38 : @[Debug.scala 55:31]
      node _T_39 = asUInt(reset) @[Debug.scala 56:24]
      node _T_40 = eq(_T_39, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_40 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB_1: ", REG_3) : SIM_2 @[Debug.scala 56:24]
      node _T_41 = asUInt(reset) @[Debug.scala 57:13]
      node _T_42 = eq(_T_41, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_42 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq: addr:%x cmd:%d wdata:%x OutReq: addr:%x cmd:%x wdata:%x\n", io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.wdata, io.out.req.bits.addr, io.out.req.bits.cmd, io.out.req.bits.wdata) : SIM_3 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_43 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_44 = tail(_T_43, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_44 @[GTimer.scala 25:7]
    wire _WIRE_6 : UInt<1>
    _WIRE_6 <= UInt<1>("h0")
    node _T_45 = and(UInt<1>("h1"), _WIRE_6) @[Debug.scala 55:16]
    when _T_45 : @[Debug.scala 55:31]
      node _T_46 = asUInt(reset) @[Debug.scala 56:24]
      node _T_47 = eq(_T_46, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_47 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB_1: ", REG_4) : SIM_4 @[Debug.scala 56:24]
      node _T_48 = asUInt(reset) @[Debug.scala 57:13]
      node _T_49 = eq(_T_48, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_49 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "OutResp: rdata:%x cmd:%x Inresp: rdata:%x cmd:%x\n", io.out.resp.bits.rdata, io.out.resp.bits.cmd, io.in.resp.bits.rdata, io.in.resp.bits.cmd) : SIM_5 @[Debug.scala 57:13]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_50 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_51 = tail(_T_50, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_51 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_52 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
    when _T_52 : @[Debug.scala 55:31]
      node _T_53 = asUInt(reset) @[Debug.scala 56:24]
      node _T_54 = eq(_T_53, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_54 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] EmbeddedTLB_1: ", REG_5) : SIM_6 @[Debug.scala 56:24]
      node _T_55 = asUInt(reset) @[Debug.scala 57:13]
      node _T_56 = eq(_T_55, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_56 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "satp:%x flush:%d cacheEmpty:%d instrPF:%d loadPF:%d storePF:%d \n", satp, io.flush, io.cacheEmpty, io.ipf, io.csrMMU.loadPF, io.csrMMU.storePF) : SIM_7 @[Debug.scala 57:13]

  module CacheStage1_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, metaReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}}

    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_1 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_2 = tail(_T_1, 1) @[GTimer.scala 25:12]
    REG <= _T_2 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_3 = and(_T, _WIRE) @[Debug.scala 55:16]
    when _T_3 : @[Debug.scala 55:31]
      node _T_4 = asUInt(reset) @[Debug.scala 56:24]
      node _T_5 = eq(_T_4, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_5 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1_1: ", REG) : SIM @[Debug.scala 56:24]
      node _T_6 = asUInt(reset) @[Debug.scala 57:13]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_7 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, UInt<1>("h0"), UInt<1>("h0")) : SIM_1 @[Debug.scala 57:13]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 141:34]
    wire _WIRE_1 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_2 : UInt<32>
    _WIRE_2 <= io.in.bits.addr
    node _T_8 = bits(_WIRE_2, 2, 0) @[Cache.scala 79:45]
    _WIRE_1.byteOffset <= _T_8 @[Cache.scala 79:45]
    node _T_9 = bits(_WIRE_2, 5, 3) @[Cache.scala 79:45]
    _WIRE_1.wordIndex <= _T_9 @[Cache.scala 79:45]
    node _T_10 = bits(_WIRE_2, 12, 6) @[Cache.scala 79:45]
    _WIRE_1.index <= _T_10 @[Cache.scala 79:45]
    node _T_11 = bits(_WIRE_2, 31, 13) @[Cache.scala 79:45]
    _WIRE_1.tag <= _T_11 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _WIRE_1.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _WIRE_3 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _WIRE_4 : UInt<32>
    _WIRE_4 <= io.in.bits.addr
    node _T_12 = bits(_WIRE_4, 2, 0) @[Cache.scala 80:49]
    _WIRE_3.byteOffset <= _T_12 @[Cache.scala 80:49]
    node _T_13 = bits(_WIRE_4, 5, 3) @[Cache.scala 80:49]
    _WIRE_3.wordIndex <= _T_13 @[Cache.scala 80:49]
    node _T_14 = bits(_WIRE_4, 12, 6) @[Cache.scala 80:49]
    _WIRE_3.index <= _T_14 @[Cache.scala 80:49]
    node _T_15 = bits(_WIRE_4, 31, 13) @[Cache.scala 80:49]
    _WIRE_3.tag <= _T_15 @[Cache.scala 80:49]
    wire _WIRE_5 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _WIRE_6 : UInt<32>
    _WIRE_6 <= io.in.bits.addr
    node _T_16 = bits(_WIRE_6, 2, 0) @[Cache.scala 80:82]
    _WIRE_5.byteOffset <= _T_16 @[Cache.scala 80:82]
    node _T_17 = bits(_WIRE_6, 5, 3) @[Cache.scala 80:82]
    _WIRE_5.wordIndex <= _T_17 @[Cache.scala 80:82]
    node _T_18 = bits(_WIRE_6, 12, 6) @[Cache.scala 80:82]
    _WIRE_5.index <= _T_18 @[Cache.scala 80:82]
    node _T_19 = bits(_WIRE_6, 31, 13) @[Cache.scala 80:82]
    _WIRE_5.tag <= _T_19 @[Cache.scala 80:82]
    node _T_20 = cat(_WIRE_3.index, _WIRE_5.wordIndex) @[Cat.scala 30:58]
    io.dataReadBus.req.bits.setIdx <= _T_20 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req.wdata <= io.in.bits.wdata @[Cache.scala 145:19]
    io.out.bits.req.wmask <= io.in.bits.wmask @[Cache.scala 145:19]
    io.out.bits.req.cmd <= io.in.bits.cmd @[Cache.scala 145:19]
    io.out.bits.req.size <= io.in.bits.size @[Cache.scala 145:19]
    io.out.bits.req.addr <= io.in.bits.addr @[Cache.scala 145:19]
    node _T_21 = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 146:31]
    node _T_22 = and(_T_21, io.dataReadBus.req.ready) @[Cache.scala 146:59]
    io.out.valid <= _T_22 @[Cache.scala 146:16]
    node _T_23 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 147:19]
    node _T_24 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_25 = or(_T_23, _T_24) @[Cache.scala 147:32]
    node _T_26 = and(_T_25, io.metaReadBus.req.ready) @[Cache.scala 147:50]
    node _T_27 = and(_T_26, io.dataReadBus.req.ready) @[Cache.scala 147:78]
    io.in.ready <= _T_27 @[Cache.scala 147:15]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_28 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_29 = tail(_T_28, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_29 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_30 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
    when _T_30 : @[Debug.scala 55:31]
      node _T_31 = asUInt(reset) @[Debug.scala 56:24]
      node _T_32 = eq(_T_31, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_32 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1_1: ", REG_1) : SIM_2 @[Debug.scala 56:24]
      node _T_33 = asUInt(reset) @[Debug.scala 57:13]
      node _T_34 = eq(_T_33, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_34 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) : SIM_3 @[Debug.scala 57:13]

  module CacheStage2_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : { data : UInt<64>}[4], flip metaWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    wire addr : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 176:31]
    wire _WIRE : UInt<32>
    _WIRE <= io.in.bits.req.addr
    node _T = bits(_WIRE, 2, 0) @[Cache.scala 176:31]
    addr.byteOffset <= _T @[Cache.scala 176:31]
    node _T_1 = bits(_WIRE, 5, 3) @[Cache.scala 176:31]
    addr.wordIndex <= _T_1 @[Cache.scala 176:31]
    node _T_2 = bits(_WIRE, 12, 6) @[Cache.scala 176:31]
    addr.index <= _T_2 @[Cache.scala 176:31]
    node _T_3 = bits(_WIRE, 31, 13) @[Cache.scala 176:31]
    addr.tag <= _T_3 @[Cache.scala 176:31]
    node _T_4 = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 178:35]
    wire _WIRE_1 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_2 : UInt<32>
    _WIRE_2 <= io.in.bits.req.addr
    node _T_5 = bits(_WIRE_2, 2, 0) @[Cache.scala 79:45]
    _WIRE_1.byteOffset <= _T_5 @[Cache.scala 79:45]
    node _T_6 = bits(_WIRE_2, 5, 3) @[Cache.scala 79:45]
    _WIRE_1.wordIndex <= _T_6 @[Cache.scala 79:45]
    node _T_7 = bits(_WIRE_2, 12, 6) @[Cache.scala 79:45]
    _WIRE_1.index <= _T_7 @[Cache.scala 79:45]
    node _T_8 = bits(_WIRE_2, 31, 13) @[Cache.scala 79:45]
    _WIRE_1.tag <= _T_8 @[Cache.scala 79:45]
    node _T_9 = eq(io.metaWriteBus.req.bits.setIdx, _WIRE_1.index) @[Cache.scala 178:99]
    node isForwardMeta = and(_T_4, _T_9) @[Cache.scala 178:64]
    reg isForwardMetaReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 179:33]
    when isForwardMeta : @[Cache.scala 180:24]
      isForwardMetaReg <= UInt<1>("h1") @[Cache.scala 180:43]
    node _T_10 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_11 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 181:25]
    node _T_12 = or(_T_10, _T_11) @[Cache.scala 181:22]
    when _T_12 : @[Cache.scala 181:39]
      isForwardMetaReg <= UInt<1>("h0") @[Cache.scala 181:58]
    reg forwardMetaReg : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardMetaReg) @[Reg.scala 15:16]
    when isForwardMeta : @[Reg.scala 16:19]
      forwardMetaReg.waymask <= io.metaWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardMetaReg.data.dirty <= io.metaWriteBus.req.bits.data.dirty @[Reg.scala 16:23]
      forwardMetaReg.data.valid <= io.metaWriteBus.req.bits.data.valid @[Reg.scala 16:23]
      forwardMetaReg.data.tag <= io.metaWriteBus.req.bits.data.tag @[Reg.scala 16:23]
      forwardMetaReg.setIdx <= io.metaWriteBus.req.bits.setIdx @[Reg.scala 16:23]
    wire metaWay : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 184:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 185:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 186:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 187:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 187:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 187:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 187:61]
    node _T_13 = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 189:39]
    node _T_14 = mux(_T_13, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 189:22]
    metaWay[0].dirty <= _T_14.dirty @[Cache.scala 189:16]
    metaWay[0].valid <= _T_14.valid @[Cache.scala 189:16]
    metaWay[0].tag <= _T_14.tag @[Cache.scala 189:16]
    node _T_15 = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 189:39]
    node _T_16 = mux(_T_15, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 189:22]
    metaWay[1].dirty <= _T_16.dirty @[Cache.scala 189:16]
    metaWay[1].valid <= _T_16.valid @[Cache.scala 189:16]
    metaWay[1].tag <= _T_16.tag @[Cache.scala 189:16]
    node _T_17 = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 189:39]
    node _T_18 = mux(_T_17, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 189:22]
    metaWay[2].dirty <= _T_18.dirty @[Cache.scala 189:16]
    metaWay[2].valid <= _T_18.valid @[Cache.scala 189:16]
    metaWay[2].tag <= _T_18.tag @[Cache.scala 189:16]
    node _T_19 = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 189:39]
    node _T_20 = mux(_T_19, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 189:22]
    metaWay[3].dirty <= _T_20.dirty @[Cache.scala 189:16]
    metaWay[3].valid <= _T_20.valid @[Cache.scala 189:16]
    metaWay[3].tag <= _T_20.tag @[Cache.scala 189:16]
    node _T_21 = eq(metaWay[0].tag, addr.tag) @[Cache.scala 192:59]
    node _T_22 = and(metaWay[0].valid, _T_21) @[Cache.scala 192:49]
    node _T_23 = and(_T_22, io.in.valid) @[Cache.scala 192:73]
    node _T_24 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 192:59]
    node _T_25 = and(metaWay[1].valid, _T_24) @[Cache.scala 192:49]
    node _T_26 = and(_T_25, io.in.valid) @[Cache.scala 192:73]
    node _T_27 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 192:59]
    node _T_28 = and(metaWay[2].valid, _T_27) @[Cache.scala 192:49]
    node _T_29 = and(_T_28, io.in.valid) @[Cache.scala 192:73]
    node _T_30 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 192:59]
    node _T_31 = and(metaWay[3].valid, _T_30) @[Cache.scala 192:49]
    node _T_32 = and(_T_31, io.in.valid) @[Cache.scala 192:73]
    wire _WIRE_3 : UInt<1>[4] @[Cache.scala 192:23]
    _WIRE_3[0] <= _T_23 @[Cache.scala 192:23]
    _WIRE_3[1] <= _T_26 @[Cache.scala 192:23]
    _WIRE_3[2] <= _T_29 @[Cache.scala 192:23]
    _WIRE_3[3] <= _T_32 @[Cache.scala 192:23]
    node lo = cat(_WIRE_3[1], _WIRE_3[0]) @[Cache.scala 192:90]
    node hi = cat(_WIRE_3[3], _WIRE_3[2]) @[Cache.scala 192:90]
    node hitVec = cat(hi, lo) @[Cache.scala 192:90]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1234567887654321")) @[LFSR64.scala 25:23]
    node _T_33 = bits(REG, 0, 0) @[LFSR64.scala 26:19]
    node _T_34 = bits(REG, 1, 1) @[LFSR64.scala 26:29]
    node _T_35 = xor(_T_33, _T_34) @[LFSR64.scala 26:23]
    node _T_36 = bits(REG, 3, 3) @[LFSR64.scala 26:39]
    node _T_37 = xor(_T_35, _T_36) @[LFSR64.scala 26:33]
    node _T_38 = bits(REG, 4, 4) @[LFSR64.scala 26:49]
    node _T_39 = xor(_T_37, _T_38) @[LFSR64.scala 26:43]
    when UInt<1>("h1") : @[LFSR64.scala 27:22]
      node _T_40 = eq(REG, UInt<1>("h0")) @[LFSR64.scala 28:24]
      node _T_41 = bits(REG, 63, 1) @[LFSR64.scala 28:51]
      node _T_42 = cat(_T_39, _T_41) @[Cat.scala 30:58]
      node _T_43 = mux(_T_40, UInt<1>("h1"), _T_42) @[LFSR64.scala 28:18]
      REG <= _T_43 @[LFSR64.scala 28:12]
    node _T_44 = bits(REG, 1, 0) @[Cache.scala 193:53]
    node victimWaymask = dshl(UInt<1>("h1"), _T_44) @[Cache.scala 193:42]
    node _T_45 = eq(metaWay[0].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_46 = eq(metaWay[1].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_47 = eq(metaWay[2].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_48 = eq(metaWay[3].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    wire _WIRE_4 : UInt<1>[4] @[Cache.scala 195:27]
    _WIRE_4[0] <= _T_45 @[Cache.scala 195:27]
    _WIRE_4[1] <= _T_46 @[Cache.scala 195:27]
    _WIRE_4[2] <= _T_47 @[Cache.scala 195:27]
    _WIRE_4[3] <= _T_48 @[Cache.scala 195:27]
    node lo_1 = cat(_WIRE_4[1], _WIRE_4[0]) @[Cache.scala 195:56]
    node hi_1 = cat(_WIRE_4[3], _WIRE_4[2]) @[Cache.scala 195:56]
    node invalidVec = cat(hi_1, lo_1) @[Cache.scala 195:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 196:34]
    node _T_49 = geq(invalidVec, UInt<4>("h8")) @[Cache.scala 197:45]
    node _T_50 = geq(invalidVec, UInt<3>("h4")) @[Cache.scala 198:20]
    node _T_51 = geq(invalidVec, UInt<2>("h2")) @[Cache.scala 199:20]
    node _T_52 = mux(_T_51, UInt<2>("h2"), UInt<1>("h1")) @[Cache.scala 199:8]
    node _T_53 = mux(_T_50, UInt<3>("h4"), _T_52) @[Cache.scala 198:8]
    node refillInvalidWaymask = mux(_T_49, UInt<4>("h8"), _T_53) @[Cache.scala 197:33]
    node _T_54 = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 202:49]
    node waymask = mux(io.out.bits.hit, hitVec, _T_54) @[Cache.scala 202:20]
    node _T_55 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_56 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_57 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_58 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_59 = add(_T_55, _T_56) @[Bitwise.scala 47:55]
    node _T_60 = bits(_T_59, 1, 0) @[Bitwise.scala 47:55]
    node _T_61 = add(_T_57, _T_58) @[Bitwise.scala 47:55]
    node _T_62 = bits(_T_61, 1, 0) @[Bitwise.scala 47:55]
    node _T_63 = add(_T_60, _T_62) @[Bitwise.scala 47:55]
    node _T_64 = bits(_T_63, 2, 0) @[Bitwise.scala 47:55]
    node _T_65 = gt(_T_64, UInt<1>("h1")) @[Cache.scala 203:26]
    when _T_65 : @[Cache.scala 203:32]
      reg REG_1 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_66 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_67 = tail(_T_66, 1) @[GTimer.scala 25:12]
      REG_1 <= _T_67 @[GTimer.scala 25:7]
      wire _WIRE_5 : UInt<1>
      _WIRE_5 <= UInt<1>("h0")
      node _T_68 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
      when _T_68 : @[Debug.scala 55:31]
        node _T_69 = asUInt(reset) @[Debug.scala 56:24]
        node _T_70 = eq(_T_69, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_70 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_1) : SIM @[Debug.scala 56:24]
        node _T_71 = asUInt(reset) @[Debug.scala 57:13]
        node _T_72 = eq(_T_71, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_72 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) : SIM_1 @[Debug.scala 57:13]
      reg REG_2 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_73 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_74 = tail(_T_73, 1) @[GTimer.scala 25:12]
      REG_2 <= _T_74 @[GTimer.scala 25:7]
      wire _WIRE_6 : UInt<1>
      _WIRE_6 <= UInt<1>("h0")
      node _T_75 = and(UInt<1>("h1"), _WIRE_6) @[Debug.scala 55:16]
      when _T_75 : @[Debug.scala 55:31]
        node _T_76 = asUInt(reset) @[Debug.scala 56:24]
        node _T_77 = eq(_T_76, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_77 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_2) : SIM_2 @[Debug.scala 56:24]
        node _T_78 = asUInt(reset) @[Debug.scala 57:13]
        node _T_79 = eq(_T_78, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_79 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) : SIM_3 @[Debug.scala 57:13]
      reg REG_3 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_80 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_81 = tail(_T_80, 1) @[GTimer.scala 25:12]
      REG_3 <= _T_81 @[GTimer.scala 25:7]
      wire _WIRE_7 : UInt<1>
      _WIRE_7 <= UInt<1>("h0")
      node _T_82 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
      when _T_82 : @[Debug.scala 55:31]
        node _T_83 = asUInt(reset) @[Debug.scala 56:24]
        node _T_84 = eq(_T_83, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_84 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_3) : SIM_4 @[Debug.scala 56:24]
        node _T_85 = asUInt(reset) @[Debug.scala 57:13]
        node _T_86 = eq(_T_85, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_86 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) : SIM_5 @[Debug.scala 57:13]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_87 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_88 = tail(_T_87, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_88 @[GTimer.scala 25:7]
      wire _WIRE_8 : UInt<1>
      _WIRE_8 <= UInt<1>("h0")
      node _T_89 = and(UInt<1>("h1"), _WIRE_8) @[Debug.scala 55:16]
      when _T_89 : @[Debug.scala 55:31]
        node _T_90 = asUInt(reset) @[Debug.scala 56:24]
        node _T_91 = eq(_T_90, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_91 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_4) : SIM_6 @[Debug.scala 56:24]
        node _T_92 = asUInt(reset) @[Debug.scala 57:13]
        node _T_93 = eq(_T_92, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_93 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) : SIM_7 @[Debug.scala 57:13]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_94 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_95 = tail(_T_94, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_95 @[GTimer.scala 25:7]
      wire _WIRE_9 : UInt<1>
      _WIRE_9 <= UInt<1>("h0")
      node _T_96 = and(UInt<1>("h1"), _WIRE_9) @[Debug.scala 55:16]
      when _T_96 : @[Debug.scala 55:31]
        node _T_97 = asUInt(reset) @[Debug.scala 56:24]
        node _T_98 = eq(_T_97, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_98 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_5) : SIM_8 @[Debug.scala 56:24]
        node _T_99 = asUInt(reset) @[Debug.scala 57:13]
        node _T_100 = eq(_T_99, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_100 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) : SIM_9 @[Debug.scala 57:13]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_101 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_102 = tail(_T_101, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_102 @[GTimer.scala 25:7]
      wire _WIRE_10 : UInt<1>
      _WIRE_10 <= UInt<1>("h0")
      node _T_103 = and(UInt<1>("h1"), _WIRE_10) @[Debug.scala 55:16]
      when _T_103 : @[Debug.scala 55:31]
        node _T_104 = asUInt(reset) @[Debug.scala 56:24]
        node _T_105 = eq(_T_104, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_105 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_6) : SIM_10 @[Debug.scala 56:24]
        node _T_106 = asUInt(reset) @[Debug.scala 57:13]
        node _T_107 = eq(_T_106, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_107 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) : SIM_11 @[Debug.scala 57:13]
      reg REG_7 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_108 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_109 = tail(_T_108, 1) @[GTimer.scala 25:12]
      REG_7 <= _T_109 @[GTimer.scala 25:7]
      wire _WIRE_11 : UInt<1>
      _WIRE_11 <= UInt<1>("h0")
      node _T_110 = and(UInt<1>("h1"), _WIRE_11) @[Debug.scala 55:16]
      when _T_110 : @[Debug.scala 55:31]
        node _T_111 = asUInt(reset) @[Debug.scala 56:24]
        node _T_112 = eq(_T_111, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_112 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_7) : SIM_12 @[Debug.scala 56:24]
        node _T_113 = asUInt(reset) @[Debug.scala 57:13]
        node _T_114 = eq(_T_113, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_114 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) : SIM_13 @[Debug.scala 57:13]
      reg REG_8 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_115 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_116 = tail(_T_115, 1) @[GTimer.scala 25:12]
      REG_8 <= _T_116 @[GTimer.scala 25:7]
      wire _WIRE_12 : UInt<1>
      _WIRE_12 <= UInt<1>("h0")
      node _T_117 = and(UInt<1>("h1"), _WIRE_12) @[Debug.scala 55:16]
      when _T_117 : @[Debug.scala 55:31]
        node _T_118 = asUInt(reset) @[Debug.scala 56:24]
        node _T_119 = eq(_T_118, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_119 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_8) : SIM_14 @[Debug.scala 56:24]
        node _T_120 = asUInt(reset) @[Debug.scala 57:13]
        node _T_121 = eq(_T_120, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_121 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) : SIM_15 @[Debug.scala 57:13]
      reg REG_9 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_122 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_123 = tail(_T_122, 1) @[GTimer.scala 25:12]
      REG_9 <= _T_123 @[GTimer.scala 25:7]
      wire _WIRE_13 : UInt<1>
      _WIRE_13 <= UInt<1>("h0")
      node _T_124 = and(UInt<1>("h1"), _WIRE_13) @[Debug.scala 55:16]
      when _T_124 : @[Debug.scala 55:31]
        node _T_125 = asUInt(reset) @[Debug.scala 56:24]
        node _T_126 = eq(_T_125, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_126 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_9) : SIM_16 @[Debug.scala 56:24]
        node _T_127 = asUInt(reset) @[Debug.scala 57:13]
        node _T_128 = eq(_T_127, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_128 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) : SIM_17 @[Debug.scala 57:13]
      reg REG_10 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_129 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_130 = tail(_T_129, 1) @[GTimer.scala 25:12]
      REG_10 <= _T_130 @[GTimer.scala 25:7]
      wire _WIRE_14 : UInt<1>
      _WIRE_14 <= UInt<1>("h0")
      node _T_131 = and(UInt<1>("h1"), _WIRE_14) @[Debug.scala 55:16]
      when _T_131 : @[Debug.scala 55:31]
        node _T_132 = asUInt(reset) @[Debug.scala 56:24]
        node _T_133 = eq(_T_132, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_133 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_10) : SIM_18 @[Debug.scala 56:24]
        node _T_134 = asUInt(reset) @[Debug.scala 57:13]
        node _T_135 = eq(_T_134, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_135 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) : SIM_19 @[Debug.scala 57:13]
    node _T_136 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_137 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_138 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_139 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_140 = add(_T_136, _T_137) @[Bitwise.scala 47:55]
    node _T_141 = bits(_T_140, 1, 0) @[Bitwise.scala 47:55]
    node _T_142 = add(_T_138, _T_139) @[Bitwise.scala 47:55]
    node _T_143 = bits(_T_142, 1, 0) @[Bitwise.scala 47:55]
    node _T_144 = add(_T_141, _T_143) @[Bitwise.scala 47:55]
    node _T_145 = bits(_T_144, 2, 0) @[Bitwise.scala 47:55]
    node _T_146 = gt(_T_145, UInt<1>("h1")) @[Cache.scala 209:26]
    when _T_146 : @[Cache.scala 209:32]
      reg REG_11 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_147 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_148 = tail(_T_147, 1) @[GTimer.scala 25:12]
      REG_11 <= _T_148 @[GTimer.scala 25:7]
      wire _WIRE_15 : UInt<1>
      _WIRE_15 <= UInt<1>("h0")
      node _T_149 = and(UInt<1>("h1"), _WIRE_15) @[Debug.scala 55:16]
      when _T_149 : @[Debug.scala 55:31]
        node _T_150 = asUInt(reset) @[Debug.scala 56:24]
        node _T_151 = eq(_T_150, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_151 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_11) : SIM_20 @[Debug.scala 56:24]
        node _T_152 = asUInt(reset) @[Debug.scala 57:13]
        node _T_153 = eq(_T_152, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_153 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) : SIM_21 @[Debug.scala 57:13]
    node _T_154 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_155 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_156 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_157 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_158 = add(_T_154, _T_155) @[Bitwise.scala 47:55]
    node _T_159 = bits(_T_158, 1, 0) @[Bitwise.scala 47:55]
    node _T_160 = add(_T_156, _T_157) @[Bitwise.scala 47:55]
    node _T_161 = bits(_T_160, 1, 0) @[Bitwise.scala 47:55]
    node _T_162 = add(_T_159, _T_161) @[Bitwise.scala 47:55]
    node _T_163 = bits(_T_162, 2, 0) @[Bitwise.scala 47:55]
    node _T_164 = gt(_T_163, UInt<1>("h1")) @[Cache.scala 210:45]
    node _T_165 = and(io.in.valid, _T_164) @[Cache.scala 210:24]
    node _T_166 = eq(_T_165, UInt<1>("h0")) @[Cache.scala 210:10]
    node _T_167 = asUInt(reset) @[Cache.scala 210:9]
    node _T_168 = or(_T_166, _T_167) @[Cache.scala 210:9]
    node _T_169 = eq(_T_168, UInt<1>("h0")) @[Cache.scala 210:9]
    when _T_169 : @[Cache.scala 210:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:210 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") : SIM_22 @[Cache.scala 210:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 210:9]
    io.out.bits.metas[0].dirty <= metaWay[0].dirty @[Cache.scala 212:21]
    io.out.bits.metas[0].valid <= metaWay[0].valid @[Cache.scala 212:21]
    io.out.bits.metas[0].tag <= metaWay[0].tag @[Cache.scala 212:21]
    io.out.bits.metas[1].dirty <= metaWay[1].dirty @[Cache.scala 212:21]
    io.out.bits.metas[1].valid <= metaWay[1].valid @[Cache.scala 212:21]
    io.out.bits.metas[1].tag <= metaWay[1].tag @[Cache.scala 212:21]
    io.out.bits.metas[2].dirty <= metaWay[2].dirty @[Cache.scala 212:21]
    io.out.bits.metas[2].valid <= metaWay[2].valid @[Cache.scala 212:21]
    io.out.bits.metas[2].tag <= metaWay[2].tag @[Cache.scala 212:21]
    io.out.bits.metas[3].dirty <= metaWay[3].dirty @[Cache.scala 212:21]
    io.out.bits.metas[3].valid <= metaWay[3].valid @[Cache.scala 212:21]
    io.out.bits.metas[3].tag <= metaWay[3].tag @[Cache.scala 212:21]
    node _T_170 = orr(hitVec) @[Cache.scala 213:44]
    node _T_171 = and(io.in.valid, _T_170) @[Cache.scala 213:34]
    io.out.bits.hit <= _T_171 @[Cache.scala 213:19]
    io.out.bits.waymask <= waymask @[Cache.scala 214:23]
    io.out.bits.datas[0].data <= io.dataReadResp[0].data @[Cache.scala 215:21]
    io.out.bits.datas[1].data <= io.dataReadResp[1].data @[Cache.scala 215:21]
    io.out.bits.datas[2].data <= io.dataReadResp[2].data @[Cache.scala 215:21]
    io.out.bits.datas[3].data <= io.dataReadResp[3].data @[Cache.scala 215:21]
    node _T_172 = xor(io.in.bits.req.addr, UInt<30>("h30000000")) @[NutCore.scala 86:11]
    node _T_173 = bits(_T_172, 31, 28) @[NutCore.scala 86:24]
    node _T_174 = eq(_T_173, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_175 = xor(io.in.bits.req.addr, UInt<31>("h40000000")) @[NutCore.scala 86:11]
    node _T_176 = bits(_T_175, 31, 30) @[NutCore.scala 86:24]
    node _T_177 = eq(_T_176, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_178 = or(_T_174, _T_177) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _T_178 @[Cache.scala 216:20]
    wire _WIRE_16 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _WIRE_17 : UInt<32>
    _WIRE_17 <= io.in.bits.req.addr
    node _T_179 = bits(_WIRE_17, 2, 0) @[Cache.scala 80:49]
    _WIRE_16.byteOffset <= _T_179 @[Cache.scala 80:49]
    node _T_180 = bits(_WIRE_17, 5, 3) @[Cache.scala 80:49]
    _WIRE_16.wordIndex <= _T_180 @[Cache.scala 80:49]
    node _T_181 = bits(_WIRE_17, 12, 6) @[Cache.scala 80:49]
    _WIRE_16.index <= _T_181 @[Cache.scala 80:49]
    node _T_182 = bits(_WIRE_17, 31, 13) @[Cache.scala 80:49]
    _WIRE_16.tag <= _T_182 @[Cache.scala 80:49]
    wire _WIRE_18 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _WIRE_19 : UInt<32>
    _WIRE_19 <= io.in.bits.req.addr
    node _T_183 = bits(_WIRE_19, 2, 0) @[Cache.scala 80:82]
    _WIRE_18.byteOffset <= _T_183 @[Cache.scala 80:82]
    node _T_184 = bits(_WIRE_19, 5, 3) @[Cache.scala 80:82]
    _WIRE_18.wordIndex <= _T_184 @[Cache.scala 80:82]
    node _T_185 = bits(_WIRE_19, 12, 6) @[Cache.scala 80:82]
    _WIRE_18.index <= _T_185 @[Cache.scala 80:82]
    node _T_186 = bits(_WIRE_19, 31, 13) @[Cache.scala 80:82]
    _WIRE_18.tag <= _T_186 @[Cache.scala 80:82]
    node _T_187 = cat(_WIRE_16.index, _WIRE_18.wordIndex) @[Cat.scala 30:58]
    node _T_188 = eq(io.dataWriteBus.req.bits.setIdx, _T_187) @[Cache.scala 219:30]
    node _T_189 = and(io.dataWriteBus.req.valid, _T_188) @[Cache.scala 219:13]
    node isForwardData = and(io.in.valid, _T_189) @[Cache.scala 218:35]
    reg isForwardDataReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 221:33]
    when isForwardData : @[Cache.scala 222:24]
      isForwardDataReg <= UInt<1>("h1") @[Cache.scala 222:43]
    node _T_190 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_191 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 223:25]
    node _T_192 = or(_T_190, _T_191) @[Cache.scala 223:22]
    when _T_192 : @[Cache.scala 223:39]
      isForwardDataReg <= UInt<1>("h0") @[Cache.scala 223:58]
    reg forwardDataReg : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardDataReg) @[Reg.scala 15:16]
    when isForwardData : @[Reg.scala 16:19]
      forwardDataReg.waymask <= io.dataWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardDataReg.data.data <= io.dataWriteBus.req.bits.data.data @[Reg.scala 16:23]
      forwardDataReg.setIdx <= io.dataWriteBus.req.bits.setIdx @[Reg.scala 16:23]
    node _T_193 = or(isForwardDataReg, isForwardData) @[Cache.scala 225:49]
    io.out.bits.isForwardData <= _T_193 @[Cache.scala 225:29]
    node _T_194 = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 226:33]
    io.out.bits.forwardData.waymask <= _T_194.waymask @[Cache.scala 226:27]
    io.out.bits.forwardData.data.data <= _T_194.data.data @[Cache.scala 226:27]
    io.out.bits.forwardData.setIdx <= _T_194.setIdx @[Cache.scala 226:27]
    io.out.bits.req.wdata <= io.in.bits.req.wdata @[Cache.scala 228:19]
    io.out.bits.req.wmask <= io.in.bits.req.wmask @[Cache.scala 228:19]
    io.out.bits.req.cmd <= io.in.bits.req.cmd @[Cache.scala 228:19]
    io.out.bits.req.size <= io.in.bits.req.size @[Cache.scala 228:19]
    io.out.bits.req.addr <= io.in.bits.req.addr @[Cache.scala 228:19]
    io.out.valid <= io.in.valid @[Cache.scala 229:16]
    node _T_195 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 230:18]
    node _T_196 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_197 = or(_T_195, _T_196) @[Cache.scala 230:31]
    io.in.ready <= _T_197 @[Cache.scala 230:15]
    node _T_198 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG_12 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_199 = add(REG_12, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_200 = tail(_T_199, 1) @[GTimer.scala 25:12]
    REG_12 <= _T_200 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_201 = and(UInt<1>("h1"), _WIRE_20) @[Debug.scala 55:16]
    when _T_201 : @[Debug.scala 55:31]
      node _T_202 = asUInt(reset) @[Debug.scala 56:24]
      node _T_203 = eq(_T_202, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_203 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_12) : SIM_23 @[Debug.scala 56:24]
      node _T_204 = asUInt(reset) @[Debug.scala 57:13]
      node _T_205 = eq(_T_204, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_205 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_198, io.in.valid) : SIM_24 @[Debug.scala 57:13]
    wire _WIRE_21 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_22 : UInt<32>
    _WIRE_22 <= io.in.bits.req.addr
    node _T_206 = bits(_WIRE_22, 2, 0) @[Cache.scala 79:45]
    _WIRE_21.byteOffset <= _T_206 @[Cache.scala 79:45]
    node _T_207 = bits(_WIRE_22, 5, 3) @[Cache.scala 79:45]
    _WIRE_21.wordIndex <= _T_207 @[Cache.scala 79:45]
    node _T_208 = bits(_WIRE_22, 12, 6) @[Cache.scala 79:45]
    _WIRE_21.index <= _T_208 @[Cache.scala 79:45]
    node _T_209 = bits(_WIRE_22, 31, 13) @[Cache.scala 79:45]
    _WIRE_21.tag <= _T_209 @[Cache.scala 79:45]
    reg REG_13 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_210 = add(REG_13, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_211 = tail(_T_210, 1) @[GTimer.scala 25:12]
    REG_13 <= _T_211 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_212 = and(UInt<1>("h1"), _WIRE_23) @[Debug.scala 55:16]
    when _T_212 : @[Debug.scala 55:31]
      node _T_213 = asUInt(reset) @[Debug.scala 56:24]
      node _T_214 = eq(_T_213, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_214 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2_1: ", REG_13) : SIM_25 @[Debug.scala 56:24]
      node _T_215 = asUInt(reset) @[Debug.scala 57:13]
      node _T_216 = eq(_T_215, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_216 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _WIRE_21.index) : SIM_26 @[Debug.scala 57:13]

  module Arbiter_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.dirty <= io.in[1].bits.data.dirty @[Arbiter.scala 124:15]
    io.out.bits.data.valid <= io.in[1].bits.data.valid @[Arbiter.scala 124:15]
    io.out.bits.data.tag <= io.in[1].bits.data.tag @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.dirty <= io.in[0].bits.data.dirty @[Arbiter.scala 128:19]
      io.out.bits.data.valid <= io.in[0].bits.data.valid @[Arbiter.scala 128:19]
      io.out.bits.data.tag <= io.in[0].bits.data.tag @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module Arbiter_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.data <= io.in[1].bits.data.data @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.data <= io.in[0].bits.data.data @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module CacheStage3_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}, dataWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}

    inst metaWriteArb of Arbiter_5 @[Cache.scala 256:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_6 @[Cache.scala 257:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 260:31]
    wire _WIRE : UInt<32>
    _WIRE <= io.in.bits.req.addr
    node _T = bits(_WIRE, 2, 0) @[Cache.scala 260:31]
    addr.byteOffset <= _T @[Cache.scala 260:31]
    node _T_1 = bits(_WIRE, 5, 3) @[Cache.scala 260:31]
    addr.wordIndex <= _T_1 @[Cache.scala 260:31]
    node _T_2 = bits(_WIRE, 12, 6) @[Cache.scala 260:31]
    addr.index <= _T_2 @[Cache.scala 260:31]
    node _T_3 = bits(_WIRE, 31, 13) @[Cache.scala 260:31]
    addr.tag <= _T_3 @[Cache.scala 260:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 261:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 262:25]
    node _T_4 = eq(io.in.bits.hit, UInt<1>("h0")) @[Cache.scala 263:29]
    node miss = and(io.in.valid, _T_4) @[Cache.scala 263:26]
    node _T_5 = and(io.in.valid, UInt<1>("h1")) @[Cache.scala 264:27]
    node _T_6 = eq(io.in.bits.req.cmd, UInt<4>("h8")) @[SimpleBus.scala 79:23]
    node probe = and(_T_5, _T_6) @[Cache.scala 264:39]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _T_7) @[Cache.scala 265:26]
    node _T_8 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_9 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_10 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_11 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire meta : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:72]
    node _T_12 = mux(_T_8, io.in.bits.metas[0].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_13 = mux(_T_9, io.in.bits.metas[1].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_14 = mux(_T_10, io.in.bits.metas[2].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_15 = mux(_T_11, io.in.bits.metas[3].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_16 = or(_T_12, _T_13) @[Mux.scala 27:72]
    node _T_17 = or(_T_16, _T_14) @[Mux.scala 27:72]
    node _T_18 = or(_T_17, _T_15) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<1> @[Mux.scala 27:72]
    _WIRE_1 <= _T_18 @[Mux.scala 27:72]
    meta.dirty <= _WIRE_1 @[Mux.scala 27:72]
    node _T_19 = mux(_T_8, io.in.bits.metas[0].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_20 = mux(_T_9, io.in.bits.metas[1].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_21 = mux(_T_10, io.in.bits.metas[2].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_22 = mux(_T_11, io.in.bits.metas[3].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_23 = or(_T_19, _T_20) @[Mux.scala 27:72]
    node _T_24 = or(_T_23, _T_21) @[Mux.scala 27:72]
    node _T_25 = or(_T_24, _T_22) @[Mux.scala 27:72]
    wire _WIRE_2 : UInt<1> @[Mux.scala 27:72]
    _WIRE_2 <= _T_25 @[Mux.scala 27:72]
    meta.valid <= _WIRE_2 @[Mux.scala 27:72]
    node _T_26 = mux(_T_8, io.in.bits.metas[0].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_27 = mux(_T_9, io.in.bits.metas[1].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_28 = mux(_T_10, io.in.bits.metas[2].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_29 = mux(_T_11, io.in.bits.metas[3].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_30 = or(_T_26, _T_27) @[Mux.scala 27:72]
    node _T_31 = or(_T_30, _T_28) @[Mux.scala 27:72]
    node _T_32 = or(_T_31, _T_29) @[Mux.scala 27:72]
    wire _WIRE_3 : UInt<19> @[Mux.scala 27:72]
    _WIRE_3 <= _T_32 @[Mux.scala 27:72]
    meta.tag <= _WIRE_3 @[Mux.scala 27:72]
    node _T_33 = and(mmio, hit) @[Cache.scala 267:17]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Cache.scala 267:10]
    node _T_35 = asUInt(reset) @[Cache.scala 267:9]
    node _T_36 = or(_T_34, _T_35) @[Cache.scala 267:9]
    node _T_37 = eq(_T_36, UInt<1>("h0")) @[Cache.scala 267:9]
    when _T_37 : @[Cache.scala 267:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:267 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") : SIM @[Cache.scala 267:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 267:9]
    node _T_38 = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 275:71]
    node useForwardData = and(io.in.bits.isForwardData, _T_38) @[Cache.scala 275:49]
    node _T_39 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_40 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_41 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_42 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _WIRE_4 : { data : UInt<64>} @[Mux.scala 27:72]
    node _T_43 = mux(_T_39, io.in.bits.datas[0].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_44 = mux(_T_40, io.in.bits.datas[1].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_45 = mux(_T_41, io.in.bits.datas[2].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_46 = mux(_T_42, io.in.bits.datas[3].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_47 = or(_T_43, _T_44) @[Mux.scala 27:72]
    node _T_48 = or(_T_47, _T_45) @[Mux.scala 27:72]
    node _T_49 = or(_T_48, _T_46) @[Mux.scala 27:72]
    wire _WIRE_5 : UInt<64> @[Mux.scala 27:72]
    _WIRE_5 <= _T_49 @[Mux.scala 27:72]
    _WIRE_4.data <= _WIRE_5 @[Mux.scala 27:72]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _WIRE_4.data) @[Cache.scala 277:21]
    node _T_50 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 278:22]
    node _T_51 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_52 = and(_T_50, _T_51) @[Cache.scala 278:28]
    node _T_53 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _T_54 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _T_55 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _T_61 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_62 = mux(_T_61, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_63 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_64, _T_62) @[Cat.scala 30:58]
    node lo_hi = cat(_T_68, _T_66) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_72, _T_70) @[Cat.scala 30:58]
    node hi_hi = cat(_T_76, _T_74) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node _T_77 = cat(hi, lo) @[Cat.scala 30:58]
    node wordMask = mux(_T_52, _T_77, UInt<64>("h0")) @[Cache.scala 278:21]
    reg value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    node _T_78 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_79 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 281:34]
    node _T_80 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_81 = or(_T_79, _T_80) @[Cache.scala 281:62]
    node _T_82 = and(_T_78, _T_81) @[Cache.scala 281:22]
    when _T_82 : @[Cache.scala 281:85]
      node wrap = eq(value, UInt<3>("h7")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    node _T_83 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _T_83) @[Cache.scala 285:22]
    wire dataHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 286:29]
    wire _WIRE_6 : { data : UInt<64>} @[Cache.scala 287:16]
    node _T_84 = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 32:13]
    node _T_85 = not(wordMask) @[BitUtils.scala 32:38]
    node _T_86 = and(dataRead, _T_85) @[BitUtils.scala 32:36]
    node _T_87 = or(_T_84, _T_86) @[BitUtils.scala 32:25]
    _WIRE_6.data <= _T_87 @[Cache.scala 106:15]
    node _T_88 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 288:60]
    node _T_89 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_90 = or(_T_88, _T_89) @[Cache.scala 288:88]
    node _T_91 = mux(_T_90, value, addr.wordIndex) @[Cache.scala 288:51]
    node _T_92 = cat(addr.index, _T_91) @[Cat.scala 30:58]
    dataHitWriteBus.req.bits.setIdx <= _T_92 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data.data <= _WIRE_6.data @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 290:29]
    node _T_93 = eq(meta.dirty, UInt<1>("h0")) @[Cache.scala 291:25]
    node _T_94 = and(hitWrite, _T_93) @[Cache.scala 291:22]
    wire _WIRE_7 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_8 : UInt<32>
    _WIRE_8 <= io.in.bits.req.addr
    node _T_95 = bits(_WIRE_8, 2, 0) @[Cache.scala 79:45]
    _WIRE_7.byteOffset <= _T_95 @[Cache.scala 79:45]
    node _T_96 = bits(_WIRE_8, 5, 3) @[Cache.scala 79:45]
    _WIRE_7.wordIndex <= _T_96 @[Cache.scala 79:45]
    node _T_97 = bits(_WIRE_8, 12, 6) @[Cache.scala 79:45]
    _WIRE_7.index <= _T_97 @[Cache.scala 79:45]
    node _T_98 = bits(_WIRE_8, 31, 13) @[Cache.scala 79:45]
    _WIRE_7.tag <= _T_98 @[Cache.scala 79:45]
    wire _WIRE_9 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 292:16]
    _WIRE_9.tag <= meta.tag @[Cache.scala 95:14]
    _WIRE_9.valid <= UInt<1>("h1") @[Cache.scala 96:16]
    _WIRE_9.dirty <= UInt<1>("h1") @[Cache.scala 97:16]
    metaHitWriteBus.req.bits.setIdx <= _WIRE_7.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data.dirty <= _WIRE_9.dirty @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.valid <= _WIRE_9.valid @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.tag <= _WIRE_9.tag @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= _T_94 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Cache.scala 296:22]
    reg needFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 297:26]
    node _T_99 = neq(state, UInt<4>("h0")) @[Cache.scala 299:28]
    node _T_100 = and(io.flush, _T_99) @[Cache.scala 299:18]
    when _T_100 : @[Cache.scala 299:41]
      needFlush <= UInt<1>("h1") @[Cache.scala 299:53]
    node _T_101 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_102 = and(_T_101, needFlush) @[Cache.scala 300:23]
    when _T_102 : @[Cache.scala 300:37]
      needFlush <= UInt<1>("h0") @[Cache.scala 300:49]
    reg value_1 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg value_2 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg state2 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Cache.scala 306:23]
    node _T_103 = eq(state, UInt<4>("h3")) @[Cache.scala 308:39]
    node _T_104 = eq(state, UInt<4>("h8")) @[Cache.scala 308:66]
    node _T_105 = or(_T_103, _T_104) @[Cache.scala 308:57]
    node _T_106 = eq(state2, UInt<2>("h0")) @[Cache.scala 308:92]
    node _T_107 = and(_T_105, _T_106) @[Cache.scala 308:81]
    node _T_108 = eq(state, UInt<4>("h8")) @[Cache.scala 309:40]
    node _T_109 = mux(_T_108, value_1, value_2) @[Cache.scala 309:33]
    node _T_110 = cat(addr.index, _T_109) @[Cat.scala 30:58]
    io.dataReadBus.req.bits.setIdx <= _T_110 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_107 @[SRAMTemplate.scala 53:20]
    node _T_111 = eq(state2, UInt<2>("h1")) @[Cache.scala 310:60]
    reg dataWay : { data : UInt<64>}[4], clock with :
      reset => (UInt<1>("h0"), dataWay) @[Reg.scala 15:16]
    when _T_111 : @[Reg.scala 16:19]
      dataWay[0].data <= io.dataReadBus.resp.data[0].data @[Reg.scala 16:23]
      dataWay[1].data <= io.dataReadBus.resp.data[1].data @[Reg.scala 16:23]
      dataWay[2].data <= io.dataReadBus.resp.data[2].data @[Reg.scala 16:23]
      dataWay[3].data <= io.dataReadBus.resp.data[3].data @[Reg.scala 16:23]
    node _T_112 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_113 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_114 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_115 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _WIRE_10 : { data : UInt<64>} @[Mux.scala 27:72]
    node _T_116 = mux(_T_112, dataWay[0].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_117 = mux(_T_113, dataWay[1].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_118 = mux(_T_114, dataWay[2].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_119 = mux(_T_115, dataWay[3].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_120 = or(_T_116, _T_117) @[Mux.scala 27:72]
    node _T_121 = or(_T_120, _T_118) @[Mux.scala 27:72]
    node _T_122 = or(_T_121, _T_119) @[Mux.scala 27:72]
    wire _WIRE_11 : UInt<64> @[Mux.scala 27:72]
    _WIRE_11 <= _T_122 @[Mux.scala 27:72]
    _WIRE_10.data <= _WIRE_11 @[Mux.scala 27:72]
    node _T_123 = eq(UInt<2>("h0"), state2) @[Cache.scala 313:19]
    when _T_123 : @[Cache.scala 313:19]
      node _T_124 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 40:37]
      when _T_124 : @[Cache.scala 314:53]
        state2 <= UInt<2>("h1") @[Cache.scala 314:62]
    else :
      node _T_125 = eq(UInt<2>("h1"), state2) @[Cache.scala 313:19]
      when _T_125 : @[Cache.scala 313:19]
        state2 <= UInt<2>("h2") @[Cache.scala 315:35]
      else :
        node _T_126 = eq(UInt<2>("h2"), state2) @[Cache.scala 313:19]
        when _T_126 : @[Cache.scala 313:19]
          node _T_127 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          node _T_128 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
          node _T_129 = or(_T_127, _T_128) @[Cache.scala 316:46]
          node _T_130 = and(hitReadBurst, io.out.ready) @[Cache.scala 316:83]
          node _T_131 = or(_T_129, _T_130) @[Cache.scala 316:67]
          when _T_131 : @[Cache.scala 316:100]
            state2 <= UInt<2>("h0") @[Cache.scala 316:109]
    node _T_132 = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 320:44]
    node raddr = cat(_T_132, UInt<3>("h0")) @[Cat.scala 30:58]
    node hi_1 = cat(meta.tag, addr.index) @[Cat.scala 30:58]
    node waddr = cat(hi_1, UInt<6>("h0")) @[Cat.scala 30:58]
    node _T_133 = eq(state, UInt<4>("h1")) @[Cache.scala 324:23]
    node _T_134 = eq(value_2, UInt<3>("h7")) @[Cache.scala 325:29]
    node _T_135 = mux(_T_134, UInt<3>("h7"), UInt<2>("h3")) @[Cache.scala 325:8]
    node cmd = mux(_T_133, UInt<2>("h2"), _T_135) @[Cache.scala 324:16]
    node _T_136 = eq(state, UInt<4>("h1")) @[Cache.scala 326:42]
    node _T_137 = mux(_T_136, raddr, waddr) @[Cache.scala 326:35]
    node _T_138 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    io.mem.req.bits.addr <= _T_137 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _WIRE_10.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_138 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h1") @[Cache.scala 330:21]
    node _T_139 = eq(state, UInt<4>("h1")) @[Cache.scala 331:30]
    node _T_140 = eq(state, UInt<4>("h3")) @[Cache.scala 331:59]
    node _T_141 = eq(state2, UInt<2>("h2")) @[Cache.scala 331:89]
    node _T_142 = and(_T_140, _T_141) @[Cache.scala 331:78]
    node _T_143 = or(_T_139, _T_142) @[Cache.scala 331:48]
    io.mem.req.valid <= _T_143 @[Cache.scala 331:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 334:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 334:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 334:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 334:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 334:20]
    io.mmio.resp.ready <= UInt<1>("h1") @[Cache.scala 335:22]
    node _T_144 = eq(state, UInt<4>("h5")) @[Cache.scala 336:31]
    io.mmio.req.valid <= _T_144 @[Cache.scala 336:21]
    reg afterFirstRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 338:31]
    node _T_145 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 27:20]
    when _T_145 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h1") @[Reg.scala 28:23]
    node _T_146 = eq(afterFirstRead, UInt<1>("h0")) @[Cache.scala 340:22]
    node _T_147 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_148 = and(_T_146, _T_147) @[Cache.scala 340:38]
    node _T_149 = eq(state, UInt<4>("h2")) @[Cache.scala 340:70]
    node readingFirst = and(_T_148, _T_149) @[Cache.scala 340:60]
    node _T_150 = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 341:39]
    node _T_151 = eq(state, UInt<4>("h6")) @[Cache.scala 342:52]
    node _T_152 = mux(mmio, _T_151, readingFirst) @[Cache.scala 342:39]
    reg inRdataRegDemand : UInt<64>, clock with :
      reset => (UInt<1>("h0"), inRdataRegDemand) @[Reg.scala 15:16]
    when _T_152 : @[Reg.scala 16:19]
      inRdataRegDemand <= _T_150 @[Reg.scala 16:23]
    node _T_153 = eq(state, UInt<4>("h0")) @[Cache.scala 345:31]
    node _T_154 = and(_T_153, probe) @[Cache.scala 345:43]
    node _T_155 = eq(state, UInt<4>("h8")) @[Cache.scala 346:31]
    node _T_156 = eq(state2, UInt<2>("h2")) @[Cache.scala 346:57]
    node _T_157 = and(_T_155, _T_156) @[Cache.scala 346:46]
    node _T_158 = or(_T_154, _T_157) @[Cache.scala 345:53]
    io.cohResp.valid <= _T_158 @[Cache.scala 345:20]
    io.cohResp.bits.rdata <= _WIRE_10.data @[Cache.scala 347:25]
    node _T_159 = eq(state, UInt<4>("h8")) @[Cache.scala 348:35]
    node _T_160 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_161 = and(_T_159, _T_160) @[Cache.scala 348:49]
    reg value_3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    wire releaseLast : UInt<1>
    releaseLast <= UInt<1>("h0")
    when _T_161 : @[Counter.scala 118:17]
      node wrap_wrap = eq(value_3, UInt<3>("h7")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value_3, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value_3 <= _wrap_value_T_1 @[Counter.scala 76:15]
      releaseLast <= wrap_wrap @[Counter.scala 118:24]
    node _T_162 = eq(state, UInt<4>("h8")) @[Cache.scala 349:36]
    node _T_163 = mux(releaseLast, UInt<3>("h6"), UInt<1>("h0")) @[Cache.scala 349:54]
    node _T_164 = mux(hit, UInt<4>("hc"), UInt<4>("h8")) @[Cache.scala 350:8]
    node _T_165 = mux(_T_162, _T_163, _T_164) @[Cache.scala 349:29]
    io.cohResp.bits.cmd <= _T_165 @[Cache.scala 349:23]
    node _T_166 = and(hitReadBurst, io.out.ready) @[Cache.scala 352:35]
    node _T_167 = eq(state2, UInt<2>("h2")) @[Cache.scala 352:61]
    node respToL1Fire = and(_T_166, _T_167) @[Cache.scala 352:51]
    node _T_168 = eq(state, UInt<4>("h0")) @[Cache.scala 353:37]
    node _T_169 = eq(state, UInt<4>("h8")) @[Cache.scala 353:57]
    node _T_170 = eq(state2, UInt<2>("h2")) @[Cache.scala 353:81]
    node _T_171 = and(_T_169, _T_170) @[Cache.scala 353:71]
    node _T_172 = or(_T_168, _T_171) @[Cache.scala 353:48]
    node _T_173 = and(_T_172, hitReadBurst) @[Cache.scala 353:96]
    node _T_174 = and(_T_173, io.out.ready) @[Cache.scala 353:112]
    reg value_4 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    wire respToL1Last : UInt<1>
    respToL1Last <= UInt<1>("h0")
    when _T_174 : @[Counter.scala 118:17]
      node wrap_wrap_1 = eq(value_4, UInt<3>("h7")) @[Counter.scala 72:24]
      node _wrap_value_T_2 = add(value_4, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24]
      value_4 <= _wrap_value_T_3 @[Counter.scala 76:15]
      respToL1Last <= wrap_wrap_1 @[Counter.scala 118:24]
    node _T_175 = eq(UInt<4>("h0"), state) @[Cache.scala 355:18]
    when _T_175 : @[Cache.scala 355:18]
      afterFirstRead <= UInt<1>("h0") @[Cache.scala 357:22]
      alreadyOutFire <= UInt<1>("h0") @[Cache.scala 358:22]
      when probe : @[Cache.scala 360:20]
        node _T_176 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
        when _T_176 : @[Cache.scala 361:34]
          node _T_177 = mux(hit, UInt<4>("h8"), UInt<4>("h0")) @[Cache.scala 362:23]
          state <= _T_177 @[Cache.scala 362:17]
          value_1 <= addr.wordIndex @[Cache.scala 363:29]
      else :
        node _T_178 = and(hitReadBurst, io.out.ready) @[Cache.scala 365:33]
        when _T_178 : @[Cache.scala 365:50]
          state <= UInt<4>("h8") @[Cache.scala 366:15]
          node _value_T_2 = eq(addr.wordIndex, UInt<3>("h7")) @[Cache.scala 367:49]
          node _value_T_3 = add(addr.wordIndex, UInt<1>("h1")) @[Cache.scala 367:93]
          node _value_T_4 = tail(_value_T_3, 1) @[Cache.scala 367:93]
          node _value_T_5 = mux(_value_T_2, UInt<1>("h0"), _value_T_4) @[Cache.scala 367:33]
          value_1 <= _value_T_5 @[Cache.scala 367:27]
        else :
          node _T_179 = or(miss, mmio) @[Cache.scala 368:26]
          node _T_180 = eq(io.flush, UInt<1>("h0")) @[Cache.scala 368:38]
          node _T_181 = and(_T_179, _T_180) @[Cache.scala 368:35]
          when _T_181 : @[Cache.scala 368:49]
            node _T_182 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 369:43]
            node _T_183 = and(_T_182, meta.dirty) @[Cache.scala 369:49]
            node _T_184 = mux(_T_183, UInt<4>("h3"), UInt<4>("h1")) @[Cache.scala 369:42]
            node _T_185 = mux(mmio, UInt<4>("h5"), _T_184) @[Cache.scala 369:21]
            state <= _T_185 @[Cache.scala 369:15]
    else :
      node _T_186 = eq(UInt<4>("h5"), state) @[Cache.scala 355:18]
      when _T_186 : @[Cache.scala 355:18]
        node _T_187 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 40:37]
        when _T_187 : @[Cache.scala 373:48]
          state <= UInt<4>("h6") @[Cache.scala 373:56]
      else :
        node _T_188 = eq(UInt<4>("h6"), state) @[Cache.scala 355:18]
        when _T_188 : @[Cache.scala 355:18]
          node _T_189 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 40:37]
          when _T_189 : @[Cache.scala 374:50]
            state <= UInt<4>("h7") @[Cache.scala 374:58]
        else :
          node _T_190 = eq(UInt<4>("h8"), state) @[Cache.scala 355:18]
          when _T_190 : @[Cache.scala 355:18]
            node _T_191 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_192 = or(_T_191, respToL1Fire) @[Cache.scala 377:31]
            when _T_192 : @[Cache.scala 377:48]
              node wrap_1 = eq(value_1, UInt<3>("h7")) @[Counter.scala 72:24]
              node _value_T_6 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
              node _value_T_7 = tail(_value_T_6, 1) @[Counter.scala 76:24]
              value_1 <= _value_T_7 @[Counter.scala 76:15]
            node _T_193 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_194 = and(probe, _T_193) @[Cache.scala 378:19]
            node _T_195 = and(_T_194, releaseLast) @[Cache.scala 378:40]
            node _T_196 = and(respToL1Fire, respToL1Last) @[Cache.scala 378:71]
            node _T_197 = or(_T_195, _T_196) @[Cache.scala 378:55]
            when _T_197 : @[Cache.scala 378:88]
              state <= UInt<4>("h0") @[Cache.scala 378:96]
          else :
            node _T_198 = eq(UInt<4>("h1"), state) @[Cache.scala 355:18]
            when _T_198 : @[Cache.scala 355:18]
              node _T_199 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_199 : @[Cache.scala 381:50]
                state <= UInt<4>("h2") @[Cache.scala 382:13]
                value_1 <= addr.wordIndex @[Cache.scala 383:25]
            else :
              node _T_200 = eq(UInt<4>("h2"), state) @[Cache.scala 355:18]
              when _T_200 : @[Cache.scala 355:18]
                node _T_201 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_201 : @[Cache.scala 387:33]
                  afterFirstRead <= UInt<1>("h1") @[Cache.scala 388:24]
                  node wrap_2 = eq(value_1, UInt<3>("h7")) @[Counter.scala 72:24]
                  node _value_T_8 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
                  node _value_T_9 = tail(_value_T_8, 1) @[Counter.scala 76:24]
                  value_1 <= _value_T_9 @[Counter.scala 76:15]
                  node _T_202 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 390:23]
                  when _T_202 : @[Cache.scala 390:52]
                    value <= UInt<1>("h0") @[Cache.scala 390:75]
                  node _T_203 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
                  when _T_203 : @[Cache.scala 391:46]
                    state <= UInt<4>("h7") @[Cache.scala 391:54]
              else :
                node _T_204 = eq(UInt<4>("h3"), state) @[Cache.scala 355:18]
                when _T_204 : @[Cache.scala 355:18]
                  node _T_205 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  when _T_205 : @[Cache.scala 396:32]
                    node wrap_3 = eq(value_2, UInt<3>("h7")) @[Counter.scala 72:24]
                    node _value_T_10 = add(value_2, UInt<1>("h1")) @[Counter.scala 76:24]
                    node _value_T_11 = tail(_value_T_10, 1) @[Counter.scala 76:24]
                    value_2 <= _value_T_11 @[Counter.scala 76:15]
                  node _T_206 = eq(io.mem.req.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
                  node _T_207 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  node _T_208 = and(_T_206, _T_207) @[Cache.scala 397:43]
                  when _T_208 : @[Cache.scala 397:65]
                    state <= UInt<4>("h4") @[Cache.scala 397:73]
                else :
                  node _T_209 = eq(UInt<4>("h4"), state) @[Cache.scala 355:18]
                  when _T_209 : @[Cache.scala 355:18]
                    node _T_210 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                    when _T_210 : @[Cache.scala 400:53]
                      state <= UInt<4>("h1") @[Cache.scala 400:61]
                  else :
                    node _T_211 = eq(UInt<4>("h7"), state) @[Cache.scala 355:18]
                    when _T_211 : @[Cache.scala 355:18]
                      node _T_212 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
                      node _T_213 = or(_T_212, needFlush) @[Cache.scala 401:44]
                      node _T_214 = or(_T_213, alreadyOutFire) @[Cache.scala 401:57]
                      when _T_214 : @[Cache.scala 401:76]
                        state <= UInt<4>("h0") @[Cache.scala 401:84]
    node _T_215 = mux(readingFirst, wordMask, UInt<64>("h0")) @[Cache.scala 404:67]
    node _T_216 = and(io.in.bits.req.wdata, _T_215) @[BitUtils.scala 32:13]
    node _T_217 = not(_T_215) @[BitUtils.scala 32:38]
    node _T_218 = and(io.mem.resp.bits.rdata, _T_217) @[BitUtils.scala 32:36]
    node dataRefill = or(_T_216, _T_218) @[BitUtils.scala 32:25]
    wire dataRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 405:32]
    node _T_219 = eq(state, UInt<4>("h2")) @[Cache.scala 406:20]
    node _T_220 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_221 = and(_T_219, _T_220) @[Cache.scala 406:39]
    node _T_222 = cat(addr.index, value_1) @[Cat.scala 30:58]
    wire _WIRE_12 : { data : UInt<64>} @[Cache.scala 407:16]
    _WIRE_12.data <= dataRefill @[Cache.scala 106:15]
    dataRefillWriteBus.req.bits.setIdx <= _T_222 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data.data <= _WIRE_12.data @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= _T_221 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0].bits.waymask <= dataHitWriteBus.req.bits.waymask @[Cache.scala 409:25]
    dataWriteArb.io.in[0].bits.data.data <= dataHitWriteBus.req.bits.data.data @[Cache.scala 409:25]
    dataWriteArb.io.in[0].bits.setIdx <= dataHitWriteBus.req.bits.setIdx @[Cache.scala 409:25]
    dataWriteArb.io.in[0].valid <= dataHitWriteBus.req.valid @[Cache.scala 409:25]
    dataHitWriteBus.req.ready <= dataWriteArb.io.in[0].ready @[Cache.scala 409:25]
    dataWriteArb.io.in[1].bits.waymask <= dataRefillWriteBus.req.bits.waymask @[Cache.scala 410:25]
    dataWriteArb.io.in[1].bits.data.data <= dataRefillWriteBus.req.bits.data.data @[Cache.scala 410:25]
    dataWriteArb.io.in[1].bits.setIdx <= dataRefillWriteBus.req.bits.setIdx @[Cache.scala 410:25]
    dataWriteArb.io.in[1].valid <= dataRefillWriteBus.req.valid @[Cache.scala 410:25]
    dataRefillWriteBus.req.ready <= dataWriteArb.io.in[1].ready @[Cache.scala 410:25]
    io.dataWriteBus.req.bits.waymask <= dataWriteArb.io.out.bits.waymask @[Cache.scala 411:23]
    io.dataWriteBus.req.bits.data.data <= dataWriteArb.io.out.bits.data.data @[Cache.scala 411:23]
    io.dataWriteBus.req.bits.setIdx <= dataWriteArb.io.out.bits.setIdx @[Cache.scala 411:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 411:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 411:23]
    wire metaRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 413:32]
    node _T_223 = eq(state, UInt<4>("h2")) @[Cache.scala 414:20]
    node _T_224 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_225 = and(_T_223, _T_224) @[Cache.scala 414:39]
    node _T_226 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
    node _T_227 = and(_T_225, _T_226) @[Cache.scala 414:61]
    wire _WIRE_13 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 415:16]
    node _T_228 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 415:79]
    node _T_229 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_230 = and(_T_228, _T_229) @[Cache.scala 415:85]
    _WIRE_13.tag <= addr.tag @[Cache.scala 95:14]
    _WIRE_13.valid <= UInt<1>("h1") @[Cache.scala 96:16]
    _WIRE_13.dirty <= _T_230 @[Cache.scala 97:16]
    wire _WIRE_14 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_15 : UInt<32>
    _WIRE_15 <= io.in.bits.req.addr
    node _T_231 = bits(_WIRE_15, 2, 0) @[Cache.scala 79:45]
    _WIRE_14.byteOffset <= _T_231 @[Cache.scala 79:45]
    node _T_232 = bits(_WIRE_15, 5, 3) @[Cache.scala 79:45]
    _WIRE_14.wordIndex <= _T_232 @[Cache.scala 79:45]
    node _T_233 = bits(_WIRE_15, 12, 6) @[Cache.scala 79:45]
    _WIRE_14.index <= _T_233 @[Cache.scala 79:45]
    node _T_234 = bits(_WIRE_15, 31, 13) @[Cache.scala 79:45]
    _WIRE_14.tag <= _T_234 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _WIRE_14.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data.dirty <= _WIRE_13.dirty @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.valid <= _WIRE_13.valid @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.tag <= _WIRE_13.tag @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _T_227 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0].bits.waymask <= metaHitWriteBus.req.bits.waymask @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.dirty <= metaHitWriteBus.req.bits.data.dirty @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.valid <= metaHitWriteBus.req.bits.data.valid @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.tag <= metaHitWriteBus.req.bits.data.tag @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.setIdx <= metaHitWriteBus.req.bits.setIdx @[Cache.scala 419:25]
    metaWriteArb.io.in[0].valid <= metaHitWriteBus.req.valid @[Cache.scala 419:25]
    metaHitWriteBus.req.ready <= metaWriteArb.io.in[0].ready @[Cache.scala 419:25]
    metaWriteArb.io.in[1].bits.waymask <= metaRefillWriteBus.req.bits.waymask @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.dirty <= metaRefillWriteBus.req.bits.data.dirty @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.valid <= metaRefillWriteBus.req.bits.data.valid @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.tag <= metaRefillWriteBus.req.bits.data.tag @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.setIdx <= metaRefillWriteBus.req.bits.setIdx @[Cache.scala 420:25]
    metaWriteArb.io.in[1].valid <= metaRefillWriteBus.req.valid @[Cache.scala 420:25]
    metaRefillWriteBus.req.ready <= metaWriteArb.io.in[1].ready @[Cache.scala 420:25]
    io.metaWriteBus.req.bits.waymask <= metaWriteArb.io.out.bits.waymask @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.dirty <= metaWriteArb.io.out.bits.data.dirty @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.valid <= metaWriteArb.io.out.bits.data.valid @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.tag <= metaWriteArb.io.out.bits.data.tag @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.setIdx <= metaWriteArb.io.out.bits.setIdx @[Cache.scala 421:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 421:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 421:23]
    node _T_235 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 441:29]
    io.out.bits.rdata <= _T_235 @[Cache.scala 441:23]
    node _T_236 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_237 = eq(_T_236, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_238 = bits(io.in.bits.req.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_239 = eq(_T_238, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_240 = and(_T_237, _T_239) @[SimpleBus.scala 73:26]
    node _T_241 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    wire _WIRE_16 : UInt<3> @[Cache.scala 442:79]
    _WIRE_16 is invalid @[Cache.scala 442:79]
    node _T_242 = mux(_T_241, UInt<3>("h5"), _WIRE_16) @[Cache.scala 442:79]
    node _T_243 = mux(_T_240, UInt<3>("h6"), _T_242) @[Cache.scala 442:27]
    io.out.bits.cmd <= _T_243 @[Cache.scala 442:21]
    node _T_244 = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_245 = and(_T_244, UInt<1>("h0")) @[Cache.scala 447:52]
    node _T_246 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_247 = eq(hit, UInt<1>("h0")) @[Cache.scala 448:34]
    node _T_248 = eq(state, UInt<4>("h7")) @[Cache.scala 448:48]
    node _T_249 = and(_T_247, _T_248) @[Cache.scala 448:39]
    node _T_250 = or(hit, _T_249) @[Cache.scala 448:31]
    node _T_251 = and(_T_246, _T_250) @[Cache.scala 448:23]
    node _T_252 = eq(state, UInt<4>("h2")) @[Cache.scala 448:81]
    node _T_253 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_254 = and(_T_252, _T_253) @[Cache.scala 448:99]
    node _T_255 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[Cache.scala 448:132]
    node _T_256 = and(_T_254, _T_255) @[Cache.scala 448:121]
    node _T_257 = mux(_T_251, UInt<1>("h1"), _T_256) @[Cache.scala 448:8]
    node _T_258 = and(respToL1Fire, respToL1Last) @[Cache.scala 448:178]
    node _T_259 = eq(state, UInt<4>("h8")) @[Cache.scala 448:203]
    node _T_260 = and(_T_258, _T_259) @[Cache.scala 448:194]
    node _T_261 = or(_T_257, _T_260) @[Cache.scala 448:161]
    node _T_262 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_263 = or(_T_262, mmio) @[Cache.scala 449:60]
    node _T_264 = eq(state, UInt<4>("h7")) @[Cache.scala 449:75]
    node _T_265 = eq(alreadyOutFire, UInt<1>("h0")) @[Cache.scala 449:110]
    node _T_266 = and(afterFirstRead, _T_265) @[Cache.scala 449:107]
    node _T_267 = mux(_T_263, _T_264, _T_266) @[Cache.scala 449:45]
    node _T_268 = mux(hit, UInt<1>("h1"), _T_267) @[Cache.scala 449:28]
    node _T_269 = mux(probe, UInt<1>("h0"), _T_268) @[Cache.scala 449:8]
    node _T_270 = mux(_T_245, _T_261, _T_269) @[Cache.scala 447:37]
    node _T_271 = and(io.in.valid, _T_270) @[Cache.scala 447:31]
    io.out.valid <= _T_271 @[Cache.scala 447:16]
    node _T_272 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_273 = eq(state, UInt<4>("h0")) @[Cache.scala 456:66]
    node _T_274 = eq(state, UInt<4>("h8")) @[Cache.scala 456:85]
    node _T_275 = and(_T_274, releaseLast) @[Cache.scala 456:100]
    node _T_276 = mux(miss, _T_273, _T_275) @[Cache.scala 456:53]
    node _T_277 = and(_T_272, _T_276) @[Cache.scala 456:47]
    node _T_278 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_279 = or(hit, _T_278) @[Cache.scala 457:13]
    node _T_280 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_281 = eq(state, UInt<4>("h7")) @[Cache.scala 457:53]
    node _T_282 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_283 = or(_T_282, alreadyOutFire) @[Cache.scala 457:88]
    node _T_284 = and(_T_281, _T_283) @[Cache.scala 457:70]
    node _T_285 = mux(_T_279, _T_280, _T_284) @[Cache.scala 457:8]
    node _T_286 = mux(probe, _T_277, _T_285) @[Cache.scala 456:21]
    io.isFinish <= _T_286 @[Cache.scala 456:15]
    node _T_287 = eq(state, UInt<4>("h0")) @[Cache.scala 460:41]
    node _T_288 = eq(hitReadBurst, UInt<1>("h0")) @[Cache.scala 460:55]
    node _T_289 = and(_T_287, _T_288) @[Cache.scala 460:52]
    node _T_290 = and(io.out.ready, _T_289) @[Cache.scala 460:31]
    node _T_291 = eq(miss, UInt<1>("h0")) @[Cache.scala 460:73]
    node _T_292 = and(_T_290, _T_291) @[Cache.scala 460:70]
    node _T_293 = eq(probe, UInt<1>("h0")) @[Cache.scala 460:82]
    node _T_294 = and(_T_292, _T_293) @[Cache.scala 460:79]
    io.in.ready <= _T_294 @[Cache.scala 460:15]
    node _T_295 = eq(state, UInt<4>("h0")) @[Cache.scala 461:49]
    node _T_296 = and(_T_295, io.out.ready) @[Cache.scala 461:60]
    node _T_297 = eq(state, UInt<4>("h8")) @[Cache.scala 461:85]
    node _T_298 = eq(state2, UInt<2>("h2")) @[Cache.scala 461:109]
    node _T_299 = and(_T_297, _T_298) @[Cache.scala 461:99]
    node _T_300 = or(_T_296, _T_299) @[Cache.scala 461:76]
    node _T_301 = and(hitReadBurst, _T_300) @[Cache.scala 461:39]
    io.dataReadRespToL1 <= _T_301 @[Cache.scala 461:23]
    node _T_302 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 463:38]
    node _T_303 = eq(_T_302, UInt<1>("h0")) @[Cache.scala 463:10]
    node _T_304 = asUInt(reset) @[Cache.scala 463:9]
    node _T_305 = or(_T_303, _T_304) @[Cache.scala 463:9]
    node _T_306 = eq(_T_305, UInt<1>("h0")) @[Cache.scala 463:9]
    when _T_306 : @[Cache.scala 463:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:463 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") : SIM_1 @[Cache.scala 463:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 463:9]
    node _T_307 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 464:38]
    node _T_308 = eq(_T_307, UInt<1>("h0")) @[Cache.scala 464:10]
    node _T_309 = asUInt(reset) @[Cache.scala 464:9]
    node _T_310 = or(_T_308, _T_309) @[Cache.scala 464:9]
    node _T_311 = eq(_T_310, UInt<1>("h0")) @[Cache.scala 464:9]
    when _T_311 : @[Cache.scala 464:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:464 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") : SIM_2 @[Cache.scala 464:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 464:9]
    node _T_312 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 465:12]
    node _T_313 = and(_T_312, io.flush) @[Cache.scala 465:18]
    node _T_314 = eq(_T_313, UInt<1>("h0")) @[Cache.scala 465:10]
    node _T_315 = asUInt(reset) @[Cache.scala 465:9]
    node _T_316 = or(_T_314, _T_315) @[Cache.scala 465:9]
    node _T_317 = eq(_T_316, UInt<1>("h0")) @[Cache.scala 465:9]
    when _T_317 : @[Cache.scala 465:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: only allow to flush icache\n    at Cache.scala:465 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") : SIM_3 @[Cache.scala 465:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 465:9]
    wire _WIRE_17 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_18 : UInt<32>
    _WIRE_18 <= io.in.bits.req.addr
    node _T_318 = bits(_WIRE_18, 2, 0) @[Cache.scala 79:45]
    _WIRE_17.byteOffset <= _T_318 @[Cache.scala 79:45]
    node _T_319 = bits(_WIRE_18, 5, 3) @[Cache.scala 79:45]
    _WIRE_17.wordIndex <= _T_319 @[Cache.scala 79:45]
    node _T_320 = bits(_WIRE_18, 12, 6) @[Cache.scala 79:45]
    _WIRE_17.index <= _T_320 @[Cache.scala 79:45]
    node _T_321 = bits(_WIRE_18, 31, 13) @[Cache.scala 79:45]
    _WIRE_17.tag <= _T_321 @[Cache.scala 79:45]
    node lo_1 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 466:465]
    node hi_2 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 466:465]
    node _T_322 = cat(hi_2, lo_1) @[Cache.scala 466:465]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_323 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_324 = tail(_T_323, 1) @[GTimer.scala 25:12]
    REG <= _T_324 @[GTimer.scala 25:7]
    wire _WIRE_19 : UInt<1>
    _WIRE_19 <= UInt<1>("h0")
    node _T_325 = and(UInt<1>("h1"), _WIRE_19) @[Debug.scala 55:16]
    when _T_325 : @[Debug.scala 55:31]
      node _T_326 = asUInt(reset) @[Debug.scala 56:24]
      node _T_327 = eq(_T_326, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_327 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG) : SIM_4 @[Debug.scala 56:24]
      node _T_328 = asUInt(reset) @[Debug.scala 57:13]
      node _T_329 = eq(_T_328, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_329 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _WIRE_17.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_322) : SIM_5 @[Debug.scala 57:13]
    node _T_330 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_331 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_332 = tail(_T_331, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_332 @[GTimer.scala 25:7]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_333 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_334 = tail(_T_333, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_334 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_335 = and(_T_330, _WIRE_20) @[Debug.scala 55:16]
    when _T_335 : @[Debug.scala 55:31]
      node _T_336 = asUInt(reset) @[Debug.scala 56:24]
      node _T_337 = eq(_T_336, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_337 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_2) : SIM_6 @[Debug.scala 56:24]
      node _T_338 = asUInt(reset) @[Debug.scala 57:13]
      node _T_339 = eq(_T_338, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_339 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "%d: [dcache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", REG_1, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) : SIM_7 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_340 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_341 = tail(_T_340, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_341 @[GTimer.scala 25:7]
    wire _WIRE_21 : UInt<1>
    _WIRE_21 <= UInt<1>("h0")
    node _T_342 = and(UInt<1>("h1"), _WIRE_21) @[Debug.scala 55:16]
    when _T_342 : @[Debug.scala 55:31]
      node _T_343 = asUInt(reset) @[Debug.scala 56:24]
      node _T_344 = eq(_T_343, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_344 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_3) : SIM_8 @[Debug.scala 56:24]
      node _T_345 = asUInt(reset) @[Debug.scala 57:13]
      node _T_346 = eq(_T_345, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_346 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) : SIM_9 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_347 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_348 = tail(_T_347, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_348 @[GTimer.scala 25:7]
    wire _WIRE_22 : UInt<1>
    _WIRE_22 <= UInt<1>("h0")
    node _T_349 = and(UInt<1>("h1"), _WIRE_22) @[Debug.scala 55:16]
    when _T_349 : @[Debug.scala 55:31]
      node _T_350 = asUInt(reset) @[Debug.scala 56:24]
      node _T_351 = eq(_T_350, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_351 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_4) : SIM_10 @[Debug.scala 56:24]
      node _T_352 = asUInt(reset) @[Debug.scala 57:13]
      node _T_353 = eq(_T_352, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_353 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, UInt<1>("h0"), UInt<1>("h0")) : SIM_11 @[Debug.scala 57:13]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_354 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_355 = tail(_T_354, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_355 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_356 = and(UInt<1>("h1"), _WIRE_23) @[Debug.scala 55:16]
    when _T_356 : @[Debug.scala 55:31]
      node _T_357 = asUInt(reset) @[Debug.scala 56:24]
      node _T_358 = eq(_T_357, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_358 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_5) : SIM_12 @[Debug.scala 56:24]
      node _T_359 = asUInt(reset) @[Debug.scala 57:13]
      node _T_360 = eq(_T_359, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_360 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) : SIM_13 @[Debug.scala 57:13]
    node lo_2 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 471:48]
    node hi_3 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 471:48]
    node _T_361 = cat(hi_3, lo_2) @[Cache.scala 471:48]
    reg REG_6 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_362 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_363 = tail(_T_362, 1) @[GTimer.scala 25:12]
    REG_6 <= _T_363 @[GTimer.scala 25:7]
    wire _WIRE_24 : UInt<1>
    _WIRE_24 <= UInt<1>("h0")
    node _T_364 = and(UInt<1>("h1"), _WIRE_24) @[Debug.scala 55:16]
    when _T_364 : @[Debug.scala 55:31]
      node _T_365 = asUInt(reset) @[Debug.scala 56:24]
      node _T_366 = eq(_T_365, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_366 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_6) : SIM_14 @[Debug.scala 56:24]
      node _T_367 = asUInt(reset) @[Debug.scala 57:13]
      node _T_368 = eq(_T_367, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_368 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DreadCache: %x \n", _T_361) : SIM_15 @[Debug.scala 57:13]
    reg REG_7 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_369 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_370 = tail(_T_369, 1) @[GTimer.scala 25:12]
    REG_7 <= _T_370 @[GTimer.scala 25:7]
    wire _WIRE_25 : UInt<1>
    _WIRE_25 <= UInt<1>("h0")
    node _T_371 = and(UInt<1>("h1"), _WIRE_25) @[Debug.scala 55:16]
    when _T_371 : @[Debug.scala 55:31]
      node _T_372 = asUInt(reset) @[Debug.scala 56:24]
      node _T_373 = eq(_T_372, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_373 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_7) : SIM_16 @[Debug.scala 56:24]
      node _T_374 = asUInt(reset) @[Debug.scala 57:13]
      node _T_375 = eq(_T_374, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_375 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _WIRE_4.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) : SIM_17 @[Debug.scala 57:13]
    node _T_376 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg REG_8 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_377 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_378 = tail(_T_377, 1) @[GTimer.scala 25:12]
    REG_8 <= _T_378 @[GTimer.scala 25:7]
    wire _WIRE_26 : UInt<1>
    _WIRE_26 <= UInt<1>("h0")
    node _T_379 = and(_T_376, _WIRE_26) @[Debug.scala 55:16]
    when _T_379 : @[Debug.scala 55:31]
      node _T_380 = asUInt(reset) @[Debug.scala 56:24]
      node _T_381 = eq(_T_380, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_381 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_8) : SIM_18 @[Debug.scala 56:24]
      node _T_382 = asUInt(reset) @[Debug.scala 57:13]
      node _T_383 = eq(_T_382, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_383 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) : SIM_19 @[Debug.scala 57:13]
    node _T_384 = eq(state, UInt<4>("h3")) @[Cache.scala 475:16]
    node _T_385 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_386 = and(_T_384, _T_385) @[Cache.scala 475:35]
    wire _WIRE_27 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_28 : UInt<32>
    _WIRE_28 <= io.in.bits.req.addr
    node _T_387 = bits(_WIRE_28, 2, 0) @[Cache.scala 79:45]
    _WIRE_27.byteOffset <= _T_387 @[Cache.scala 79:45]
    node _T_388 = bits(_WIRE_28, 5, 3) @[Cache.scala 79:45]
    _WIRE_27.wordIndex <= _T_388 @[Cache.scala 79:45]
    node _T_389 = bits(_WIRE_28, 12, 6) @[Cache.scala 79:45]
    _WIRE_27.index <= _T_389 @[Cache.scala 79:45]
    node _T_390 = bits(_WIRE_28, 31, 13) @[Cache.scala 79:45]
    _WIRE_27.tag <= _T_390 @[Cache.scala 79:45]
    reg REG_9 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_391 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_392 = tail(_T_391, 1) @[GTimer.scala 25:12]
    REG_9 <= _T_392 @[GTimer.scala 25:7]
    wire _WIRE_29 : UInt<1>
    _WIRE_29 <= UInt<1>("h0")
    node _T_393 = and(_T_386, _WIRE_29) @[Debug.scala 55:16]
    when _T_393 : @[Debug.scala 55:31]
      node _T_394 = asUInt(reset) @[Debug.scala 56:24]
      node _T_395 = eq(_T_394, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_395 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_9) : SIM_20 @[Debug.scala 56:24]
      node _T_396 = asUInt(reset) @[Debug.scala 57:13]
      node _T_397 = eq(_T_396, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_397 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", value_2, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _WIRE_27.index, io.in.bits.waymask) : SIM_21 @[Debug.scala 57:13]
    node _T_398 = eq(state, UInt<4>("h1")) @[Cache.scala 476:16]
    node _T_399 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_400 = and(_T_398, _T_399) @[Cache.scala 476:34]
    wire _WIRE_30 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_31 : UInt<32>
    _WIRE_31 <= io.in.bits.req.addr
    node _T_401 = bits(_WIRE_31, 2, 0) @[Cache.scala 79:45]
    _WIRE_30.byteOffset <= _T_401 @[Cache.scala 79:45]
    node _T_402 = bits(_WIRE_31, 5, 3) @[Cache.scala 79:45]
    _WIRE_30.wordIndex <= _T_402 @[Cache.scala 79:45]
    node _T_403 = bits(_WIRE_31, 12, 6) @[Cache.scala 79:45]
    _WIRE_30.index <= _T_403 @[Cache.scala 79:45]
    node _T_404 = bits(_WIRE_31, 31, 13) @[Cache.scala 79:45]
    _WIRE_30.tag <= _T_404 @[Cache.scala 79:45]
    reg REG_10 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_405 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_406 = tail(_T_405, 1) @[GTimer.scala 25:12]
    REG_10 <= _T_406 @[GTimer.scala 25:7]
    wire _WIRE_32 : UInt<1>
    _WIRE_32 <= UInt<1>("h0")
    node _T_407 = and(_T_400, _WIRE_32) @[Debug.scala 55:16]
    when _T_407 : @[Debug.scala 55:31]
      node _T_408 = asUInt(reset) @[Debug.scala 56:24]
      node _T_409 = eq(_T_408, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_409 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_10) : SIM_22 @[Debug.scala 56:24]
      node _T_410 = asUInt(reset) @[Debug.scala 57:13]
      node _T_411 = eq(_T_410, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_411 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _WIRE_30.index, io.in.bits.waymask) : SIM_23 @[Debug.scala 57:13]
    node _T_412 = eq(state, UInt<4>("h2")) @[Cache.scala 477:16]
    node _T_413 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_414 = and(_T_412, _T_413) @[Cache.scala 477:35]
    wire _WIRE_33 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_34 : UInt<32>
    _WIRE_34 <= io.in.bits.req.addr
    node _T_415 = bits(_WIRE_34, 2, 0) @[Cache.scala 79:45]
    _WIRE_33.byteOffset <= _T_415 @[Cache.scala 79:45]
    node _T_416 = bits(_WIRE_34, 5, 3) @[Cache.scala 79:45]
    _WIRE_33.wordIndex <= _T_416 @[Cache.scala 79:45]
    node _T_417 = bits(_WIRE_34, 12, 6) @[Cache.scala 79:45]
    _WIRE_33.index <= _T_417 @[Cache.scala 79:45]
    node _T_418 = bits(_WIRE_34, 31, 13) @[Cache.scala 79:45]
    _WIRE_33.tag <= _T_418 @[Cache.scala 79:45]
    reg REG_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_419 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_420 = tail(_T_419, 1) @[GTimer.scala 25:12]
    REG_11 <= _T_420 @[GTimer.scala 25:7]
    wire _WIRE_35 : UInt<1>
    _WIRE_35 <= UInt<1>("h0")
    node _T_421 = and(_T_414, _WIRE_35) @[Debug.scala 55:16]
    when _T_421 : @[Debug.scala 55:31]
      node _T_422 = asUInt(reset) @[Debug.scala 56:24]
      node _T_423 = eq(_T_422, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_423 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_1: ", REG_11) : SIM_24 @[Debug.scala 56:24]
      node _T_424 = asUInt(reset) @[Debug.scala 57:13]
      node _T_425 = eq(_T_424, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_425 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", value_1, io.mem.resp.bits.rdata, addr.tag, _WIRE_33.index, io.in.bits.waymask) : SIM_25 @[Debug.scala 57:13]

  module SRAMTemplate_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    smem array : UInt<21>[4] [128] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SRAMTemplate.scala 80:30]
    reg value : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 60:40]
    wire wrap : UInt<1>
    wrap <= UInt<1>("h0")
    when REG : @[Counter.scala 118:17]
      node wrap_wrap = eq(value, UInt<7>("h7f")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value <= _wrap_value_T_1 @[Counter.scala 76:15]
      wrap <= wrap_wrap @[Counter.scala 118:24]
    when wrap : @[SRAMTemplate.scala 82:24]
      REG <= UInt<1>("h0") @[SRAMTemplate.scala 82:38]
    resetState <= REG @[SRAMTemplate.scala 84:16]
    resetSet <= value @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<21> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_1 = cat(hi, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _WIRE, _T_1) @[SRAMTemplate.scala 92:22]
    node _T_2 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_2, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<21>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_3 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_6 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_7 = or(setIdx, UInt<7>("h0"))
      node _T_8 = bits(_T_7, 6, 0)
      write mport MPORT = array[_T_8], clock
      when _T_3 :
        MPORT[0] <= wdata[0]
      when _T_4 :
        MPORT[1] <= wdata[1]
      when _T_5 :
        MPORT[2] <= wdata[2]
      when _T_6 :
        MPORT[3] <= wdata[3]
    wire _WIRE_1 : UInt @[SRAMTemplate.scala 98:31]
    _WIRE_1 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _WIRE_1 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_9 = or(_WIRE_1, UInt<7>("h0")) @[SRAMTemplate.scala 98:31]
      node _T_10 = bits(_T_9, 6, 0) @[SRAMTemplate.scala 98:31]
      read mport MPORT_1 = array[_T_10], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_2 : UInt<21>
    _WIRE_2 <= MPORT_1[0]
    node _T_11 = bits(_WIRE_2, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _T_11 @[SRAMTemplate.scala 98:78]
    node _T_12 = bits(_WIRE_2, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_12 @[SRAMTemplate.scala 98:78]
    node _T_13 = bits(_WIRE_2, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_13 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<21>
    _WIRE_3 <= MPORT_1[1]
    node _T_14 = bits(_WIRE_3, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _T_14 @[SRAMTemplate.scala 98:78]
    node _T_15 = bits(_WIRE_3, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _T_15 @[SRAMTemplate.scala 98:78]
    node _T_16 = bits(_WIRE_3, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _T_16 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : UInt<21>
    _WIRE_4 <= MPORT_1[2]
    node _T_17 = bits(_WIRE_4, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _T_17 @[SRAMTemplate.scala 98:78]
    node _T_18 = bits(_WIRE_4, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _T_18 @[SRAMTemplate.scala 98:78]
    node _T_19 = bits(_WIRE_4, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _T_19 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_5 : UInt<21>
    _WIRE_5 <= MPORT_1[3]
    node _T_20 = bits(_WIRE_5, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _T_20 @[SRAMTemplate.scala 98:78]
    node _T_21 = bits(_WIRE_5, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _T_21 @[SRAMTemplate.scala 98:78]
    node _T_22 = bits(_WIRE_5, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _T_22 @[SRAMTemplate.scala 98:78]
    wire _WIRE_6 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].dirty <= rdata_0.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].dirty <= rdata_1.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].valid <= rdata_1.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].tag <= rdata_1.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].dirty <= rdata_2.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].valid <= rdata_2.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].tag <= rdata_2.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].dirty <= rdata_3.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].valid <= rdata_3.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].tag <= rdata_3.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].dirty <= _WIRE_6[0].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].valid <= _WIRE_6[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _WIRE_6[0].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].dirty <= _WIRE_6[1].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].valid <= _WIRE_6[1].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].tag <= _WIRE_6[1].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].dirty <= _WIRE_6[2].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].valid <= _WIRE_6[2].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].tag <= _WIRE_6[2].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].dirty <= _WIRE_6[3].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].valid <= _WIRE_6[3].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].tag <= _WIRE_6[3].tag @[SRAMTemplate.scala 99:18]
    node _T_23 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_24 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_25 = and(_T_23, _T_24) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_25 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, chosen : UInt<0>}

    io.chosen <= UInt<1>("h0") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 124:15]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(UInt<1>("h1"), UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module SRAMTemplateWithArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_3 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.dirty <= io.w.req.bits.data.dirty @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.valid <= io.w.req.bits.data.valid @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.tag <= io.w.req.bits.data.tag @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_7 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _WIRE[0].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[1].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[2].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[3].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    reg r : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when REG : @[Reg.scala 28:19]
      r[0].dirty <= ram.io.r.resp.data[0].dirty @[Reg.scala 28:23]
      r[0].valid <= ram.io.r.resp.data[0].valid @[Reg.scala 28:23]
      r[0].tag <= ram.io.r.resp.data[0].tag @[Reg.scala 28:23]
      r[1].dirty <= ram.io.r.resp.data[1].dirty @[Reg.scala 28:23]
      r[1].valid <= ram.io.r.resp.data[1].valid @[Reg.scala 28:23]
      r[1].tag <= ram.io.r.resp.data[1].tag @[Reg.scala 28:23]
      r[2].dirty <= ram.io.r.resp.data[2].dirty @[Reg.scala 28:23]
      r[2].valid <= ram.io.r.resp.data[2].valid @[Reg.scala 28:23]
      r[2].tag <= ram.io.r.resp.data[2].tag @[Reg.scala 28:23]
      r[3].dirty <= ram.io.r.resp.data[3].dirty @[Reg.scala 28:23]
      r[3].valid <= ram.io.r.resp.data[3].valid @[Reg.scala 28:23]
      r[3].tag <= ram.io.r.resp.data[3].tag @[Reg.scala 28:23]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data[0].dirty <= _T_1[0].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].valid <= _T_1[0].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].tag <= _T_1[0].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].dirty <= _T_1[1].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].valid <= _T_1[1].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].tag <= _T_1[1].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].dirty <= _T_1[2].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].valid <= _T_1[2].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].tag <= _T_1[2].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].dirty <= _T_1[3].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].valid <= _T_1[3].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].tag <= _T_1[3].tag @[SRAMTemplate.scala 130:17]

  module SRAMTemplate_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    smem array : UInt<64>[4] [1024] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<64> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _WIRE, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _T_1 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_1, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_2 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_3 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_6 = or(setIdx, UInt<10>("h0"))
      node _T_7 = bits(_T_6, 9, 0)
      write mport MPORT = array[_T_7], clock
      when _T_2 :
        MPORT[0] <= wdata[0]
      when _T_3 :
        MPORT[1] <= wdata[1]
      when _T_4 :
        MPORT[2] <= wdata[2]
      when _T_5 :
        MPORT[3] <= wdata[3]
    wire _WIRE_1 : UInt @[SRAMTemplate.scala 98:31]
    _WIRE_1 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _WIRE_1 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_8 = or(_WIRE_1, UInt<10>("h0")) @[SRAMTemplate.scala 98:31]
      node _T_9 = bits(_T_8, 9, 0) @[SRAMTemplate.scala 98:31]
      read mport MPORT_1 = array[_T_9], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_2 : UInt<64>
    _WIRE_2 <= MPORT_1[0]
    node _T_10 = bits(_WIRE_2, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _T_10 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= MPORT_1[1]
    node _T_11 = bits(_WIRE_3, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _T_11 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : UInt<64>
    _WIRE_4 <= MPORT_1[2]
    node _T_12 = bits(_WIRE_4, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _T_12 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_5 : UInt<64>
    _WIRE_5 <= MPORT_1[3]
    node _T_13 = bits(_WIRE_5, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _T_13 @[SRAMTemplate.scala 98:78]
    wire _WIRE_6 : { data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].data <= rdata_0.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].data <= rdata_1.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].data <= rdata_2.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].data <= rdata_3.data @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].data <= _WIRE_6[0].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].data <= _WIRE_6[1].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].data <= _WIRE_6[2].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].data <= _WIRE_6[3].data @[SRAMTemplate.scala 99:18]
    node _T_14 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_15 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_16 = and(_T_14, _T_15) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_16 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module SRAMTemplateWithArbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}[2], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_4 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.data <= io.w.req.bits.data.data @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_8 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].bits.setIdx <= io.r[1].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].valid <= io.r[1].req.valid @[SRAMTemplate.scala 125:17]
    io.r[1].req.ready <= readArb.io.in[1].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when REG : @[Reg.scala 28:19]
      r[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      r[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      r[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      r[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data[0].data <= _T_1[0].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].data <= _T_1[1].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].data <= _T_1[2].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].data <= _T_1[3].data @[SRAMTemplate.scala 130:17]
    node _T_2 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[SRAMTemplate.scala 130:58]
    REG_1 <= _T_2 @[SRAMTemplate.scala 130:58]
    wire _WIRE_1 : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE_1[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r_1 : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE_1) @[Reg.scala 27:20]
    when REG_1 : @[Reg.scala 28:19]
      r_1[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      r_1[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      r_1[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      r_1[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
    node _T_3 = mux(REG_1, ram.io.r.resp.data, r_1) @[Hold.scala 23:48]
    io.r[1].resp.data[0].data <= _T_3[0].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[1].data <= _T_3[1].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[2].data <= _T_3[2].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[3].data <= _T_3[3].data @[SRAMTemplate.scala 130:17]

  module Arbiter_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.wdata <= io.in[1].bits.wdata @[Arbiter.scala 124:15]
    io.out.bits.wmask <= io.in[1].bits.wmask @[Arbiter.scala 124:15]
    io.out.bits.cmd <= io.in[1].bits.cmd @[Arbiter.scala 124:15]
    io.out.bits.size <= io.in[1].bits.size @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[1].bits.addr @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.wdata <= io.in[0].bits.wdata @[Arbiter.scala 128:19]
      io.out.bits.wmask <= io.in[0].bits.wmask @[Arbiter.scala 128:19]
      io.out.bits.cmd <= io.in[0].bits.cmd @[Arbiter.scala 128:19]
      io.out.bits.size <= io.in[0].bits.size @[Arbiter.scala 128:19]
      io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module Cache_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<2>, out : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}

    inst s1 of CacheStage1_1 @[Cache.scala 482:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2_1 @[Cache.scala 483:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3_1 @[Cache.scala 484:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter_2 @[Cache.scala 485:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_3 @[Cache.scala 486:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    inst arb of Arbiter_9 @[Cache.scala 495:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[1].bits.wdata <= io.in.req.bits.wdata @[Cache.scala 496:28]
    arb.io.in[1].bits.wmask <= io.in.req.bits.wmask @[Cache.scala 496:28]
    arb.io.in[1].bits.cmd <= io.in.req.bits.cmd @[Cache.scala 496:28]
    arb.io.in[1].bits.size <= io.in.req.bits.size @[Cache.scala 496:28]
    arb.io.in[1].bits.addr <= io.in.req.bits.addr @[Cache.scala 496:28]
    arb.io.in[1].valid <= io.in.req.valid @[Cache.scala 496:28]
    io.in.req.ready <= arb.io.in[1].ready @[Cache.scala 496:28]
    s1.io.in.bits.wdata <= arb.io.out.bits.wdata @[Cache.scala 498:12]
    s1.io.in.bits.wmask <= arb.io.out.bits.wmask @[Cache.scala 498:12]
    s1.io.in.bits.cmd <= arb.io.out.bits.cmd @[Cache.scala 498:12]
    s1.io.in.bits.size <= arb.io.out.bits.size @[Cache.scala 498:12]
    s1.io.in.bits.addr <= arb.io.out.bits.addr @[Cache.scala 498:12]
    s1.io.in.valid <= arb.io.out.valid @[Cache.scala 498:12]
    arb.io.out.ready <= s1.io.in.ready @[Cache.scala 498:12]
    node _T = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = bits(io.flush, 0, 0) @[Cache.scala 504:66]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      REG <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_2 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_2 : @[Pipeline.scala 26:38]
      REG <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_1 : @[Pipeline.scala 27:20]
      REG <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _T_3 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg r : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when _T_3 : @[Reg.scala 16:19]
      r.req.wdata <= s1.io.out.bits.req.wdata @[Reg.scala 16:23]
      r.req.wmask <= s1.io.out.bits.req.wmask @[Reg.scala 16:23]
      r.req.cmd <= s1.io.out.bits.req.cmd @[Reg.scala 16:23]
      r.req.size <= s1.io.out.bits.req.size @[Reg.scala 16:23]
      r.req.addr <= s1.io.out.bits.req.addr @[Reg.scala 16:23]
    s2.io.in.bits.req.wdata <= r.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= r.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= r.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= r.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= r.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= REG @[Pipeline.scala 31:17]
    node _T_4 = bits(io.flush, 1, 1) @[Cache.scala 505:64]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_5 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_5 : @[Pipeline.scala 26:38]
      REG_1 <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_4 : @[Pipeline.scala 27:20]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _T_6 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg r_1 : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when _T_6 : @[Reg.scala 16:19]
      r_1.forwardData.waymask <= s2.io.out.bits.forwardData.waymask @[Reg.scala 16:23]
      r_1.forwardData.data.data <= s2.io.out.bits.forwardData.data.data @[Reg.scala 16:23]
      r_1.forwardData.setIdx <= s2.io.out.bits.forwardData.setIdx @[Reg.scala 16:23]
      r_1.isForwardData <= s2.io.out.bits.isForwardData @[Reg.scala 16:23]
      r_1.mmio <= s2.io.out.bits.mmio @[Reg.scala 16:23]
      r_1.waymask <= s2.io.out.bits.waymask @[Reg.scala 16:23]
      r_1.hit <= s2.io.out.bits.hit @[Reg.scala 16:23]
      r_1.datas[0].data <= s2.io.out.bits.datas[0].data @[Reg.scala 16:23]
      r_1.datas[1].data <= s2.io.out.bits.datas[1].data @[Reg.scala 16:23]
      r_1.datas[2].data <= s2.io.out.bits.datas[2].data @[Reg.scala 16:23]
      r_1.datas[3].data <= s2.io.out.bits.datas[3].data @[Reg.scala 16:23]
      r_1.metas[0].dirty <= s2.io.out.bits.metas[0].dirty @[Reg.scala 16:23]
      r_1.metas[0].valid <= s2.io.out.bits.metas[0].valid @[Reg.scala 16:23]
      r_1.metas[0].tag <= s2.io.out.bits.metas[0].tag @[Reg.scala 16:23]
      r_1.metas[1].dirty <= s2.io.out.bits.metas[1].dirty @[Reg.scala 16:23]
      r_1.metas[1].valid <= s2.io.out.bits.metas[1].valid @[Reg.scala 16:23]
      r_1.metas[1].tag <= s2.io.out.bits.metas[1].tag @[Reg.scala 16:23]
      r_1.metas[2].dirty <= s2.io.out.bits.metas[2].dirty @[Reg.scala 16:23]
      r_1.metas[2].valid <= s2.io.out.bits.metas[2].valid @[Reg.scala 16:23]
      r_1.metas[2].tag <= s2.io.out.bits.metas[2].tag @[Reg.scala 16:23]
      r_1.metas[3].dirty <= s2.io.out.bits.metas[3].dirty @[Reg.scala 16:23]
      r_1.metas[3].valid <= s2.io.out.bits.metas[3].valid @[Reg.scala 16:23]
      r_1.metas[3].tag <= s2.io.out.bits.metas[3].tag @[Reg.scala 16:23]
      r_1.req.wdata <= s2.io.out.bits.req.wdata @[Reg.scala 16:23]
      r_1.req.wmask <= s2.io.out.bits.req.wmask @[Reg.scala 16:23]
      r_1.req.cmd <= s2.io.out.bits.req.cmd @[Reg.scala 16:23]
      r_1.req.size <= s2.io.out.bits.req.size @[Reg.scala 16:23]
      r_1.req.addr <= s2.io.out.bits.req.addr @[Reg.scala 16:23]
    s3.io.in.bits.forwardData.waymask <= r_1.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= r_1.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= r_1.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= r_1.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= r_1.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= r_1.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= r_1.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= r_1.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= r_1.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= r_1.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= r_1.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= r_1.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= r_1.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= r_1.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= r_1.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= r_1.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= r_1.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= r_1.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= r_1.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= r_1.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= r_1.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= r_1.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= r_1.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= r_1.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= r_1.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= r_1.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= r_1.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= r_1.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= REG_1 @[Pipeline.scala 31:17]
    io.in.resp.bits.rdata <= s3.io.out.bits.rdata @[Cache.scala 506:14]
    io.in.resp.bits.cmd <= s3.io.out.bits.cmd @[Cache.scala 506:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 506:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 506:14]
    node _T_7 = bits(io.flush, 1, 1) @[Cache.scala 507:26]
    s3.io.flush <= _T_7 @[Cache.scala 507:15]
    s3.io.mem.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Cache.scala 508:14]
    s3.io.mem.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Cache.scala 508:14]
    s3.io.mem.resp.valid <= io.out.mem.resp.valid @[Cache.scala 508:14]
    io.out.mem.resp.ready <= s3.io.mem.resp.ready @[Cache.scala 508:14]
    io.out.mem.req.bits.wdata <= s3.io.mem.req.bits.wdata @[Cache.scala 508:14]
    io.out.mem.req.bits.wmask <= s3.io.mem.req.bits.wmask @[Cache.scala 508:14]
    io.out.mem.req.bits.cmd <= s3.io.mem.req.bits.cmd @[Cache.scala 508:14]
    io.out.mem.req.bits.size <= s3.io.mem.req.bits.size @[Cache.scala 508:14]
    io.out.mem.req.bits.addr <= s3.io.mem.req.bits.addr @[Cache.scala 508:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 508:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 508:14]
    s3.io.mmio.resp.bits.rdata <= io.mmio.resp.bits.rdata @[Cache.scala 509:11]
    s3.io.mmio.resp.bits.cmd <= io.mmio.resp.bits.cmd @[Cache.scala 509:11]
    s3.io.mmio.resp.valid <= io.mmio.resp.valid @[Cache.scala 509:11]
    io.mmio.resp.ready <= s3.io.mmio.resp.ready @[Cache.scala 509:11]
    io.mmio.req.bits.wdata <= s3.io.mmio.req.bits.wdata @[Cache.scala 509:11]
    io.mmio.req.bits.wmask <= s3.io.mmio.req.bits.wmask @[Cache.scala 509:11]
    io.mmio.req.bits.cmd <= s3.io.mmio.req.bits.cmd @[Cache.scala 509:11]
    io.mmio.req.bits.size <= s3.io.mmio.req.bits.size @[Cache.scala 509:11]
    io.mmio.req.bits.addr <= s3.io.mmio.req.bits.addr @[Cache.scala 509:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 509:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 509:11]
    node _T_8 = eq(s2.io.in.valid, UInt<1>("h0")) @[Cache.scala 510:15]
    node _T_9 = eq(s3.io.in.valid, UInt<1>("h0")) @[Cache.scala 510:34]
    node _T_10 = and(_T_8, _T_9) @[Cache.scala 510:31]
    io.empty <= _T_10 @[Cache.scala 510:12]
    node _T_11 = eq(s3.io.out.bits.cmd, UInt<3>("h4")) @[SimpleBus.scala 95:26]
    node _T_12 = and(s3.io.out.valid, _T_11) @[Cache.scala 512:43]
    node _T_13 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 512:100]
    node _T_14 = mux(_T_12, UInt<1>("h0"), _T_13) @[Cache.scala 512:26]
    io.in.resp.valid <= _T_14 @[Cache.scala 512:20]
    wire _WIRE : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>} @[Cache.scala 517:19]
    _WIRE.addr <= io.out.coh.req.bits.addr @[SimpleBus.scala 64:15]
    _WIRE.cmd <= io.out.coh.req.bits.cmd @[SimpleBus.scala 65:14]
    _WIRE.size <= io.out.coh.req.bits.size @[SimpleBus.scala 66:15]
    _WIRE.wdata <= io.out.coh.req.bits.wdata @[SimpleBus.scala 67:16]
    _WIRE.wmask <= io.out.coh.req.bits.wmask @[SimpleBus.scala 68:16]
    arb.io.in[0].bits.wdata <= _WIRE.wdata @[Cache.scala 519:23]
    arb.io.in[0].bits.wmask <= _WIRE.wmask @[Cache.scala 519:23]
    arb.io.in[0].bits.cmd <= _WIRE.cmd @[Cache.scala 519:23]
    arb.io.in[0].bits.size <= _WIRE.size @[Cache.scala 519:23]
    arb.io.in[0].bits.addr <= _WIRE.addr @[Cache.scala 519:23]
    arb.io.in[0].valid <= io.out.coh.req.valid @[Cache.scala 520:24]
    io.out.coh.req.ready <= arb.io.in[0].ready @[Cache.scala 521:26]
    io.out.coh.resp.bits.rdata <= s3.io.cohResp.bits.rdata @[Cache.scala 522:21]
    io.out.coh.resp.bits.cmd <= s3.io.cohResp.bits.cmd @[Cache.scala 522:21]
    io.out.coh.resp.valid <= s3.io.cohResp.valid @[Cache.scala 522:21]
    s3.io.cohResp.ready <= io.out.coh.resp.ready @[Cache.scala 522:21]
    s1.io.metaReadBus.resp.data[0].dirty <= metaArray.io.r[0].resp.data[0].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[0].valid <= metaArray.io.r[0].resp.data[0].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[0].tag <= metaArray.io.r[0].resp.data[0].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].dirty <= metaArray.io.r[0].resp.data[1].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].valid <= metaArray.io.r[0].resp.data[1].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].tag <= metaArray.io.r[0].resp.data[1].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].dirty <= metaArray.io.r[0].resp.data[2].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].valid <= metaArray.io.r[0].resp.data[2].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].tag <= metaArray.io.r[0].resp.data[2].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].dirty <= metaArray.io.r[0].resp.data[3].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].valid <= metaArray.io.r[0].resp.data[3].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].tag <= metaArray.io.r[0].resp.data[3].tag @[Cache.scala 530:21]
    metaArray.io.r[0].req.bits.setIdx <= s1.io.metaReadBus.req.bits.setIdx @[Cache.scala 530:21]
    metaArray.io.r[0].req.valid <= s1.io.metaReadBus.req.valid @[Cache.scala 530:21]
    s1.io.metaReadBus.req.ready <= metaArray.io.r[0].req.ready @[Cache.scala 530:21]
    s1.io.dataReadBus.resp.data[0].data <= dataArray.io.r[0].resp.data[0].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[1].data <= dataArray.io.r[0].resp.data[1].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[2].data <= dataArray.io.r[0].resp.data[2].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[3].data <= dataArray.io.r[0].resp.data[3].data @[Cache.scala 531:21]
    dataArray.io.r[0].req.bits.setIdx <= s1.io.dataReadBus.req.bits.setIdx @[Cache.scala 531:21]
    dataArray.io.r[0].req.valid <= s1.io.dataReadBus.req.valid @[Cache.scala 531:21]
    s1.io.dataReadBus.req.ready <= dataArray.io.r[0].req.ready @[Cache.scala 531:21]
    s3.io.dataReadBus.resp.data[0].data <= dataArray.io.r[1].resp.data[0].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[1].data <= dataArray.io.r[1].resp.data[1].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[2].data <= dataArray.io.r[1].resp.data[2].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[3].data <= dataArray.io.r[1].resp.data[3].data @[Cache.scala 532:21]
    dataArray.io.r[1].req.bits.setIdx <= s3.io.dataReadBus.req.bits.setIdx @[Cache.scala 532:21]
    dataArray.io.r[1].req.valid <= s3.io.dataReadBus.req.valid @[Cache.scala 532:21]
    s3.io.dataReadBus.req.ready <= dataArray.io.r[1].req.ready @[Cache.scala 532:21]
    metaArray.io.w.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 534:18]
    metaArray.io.w.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 534:18]
    metaArray.io.w.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 534:18]
    s3.io.metaWriteBus.req.ready <= metaArray.io.w.req.ready @[Cache.scala 534:18]
    dataArray.io.w.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 535:18]
    dataArray.io.w.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 535:18]
    dataArray.io.w.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 535:18]
    dataArray.io.w.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 535:18]
    s3.io.dataWriteBus.req.ready <= dataArray.io.w.req.ready @[Cache.scala 535:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 537:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 538:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 538:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 538:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 538:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 539:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 540:22]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_15 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_16 = tail(_T_15, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_16 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_17 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 55:16]
    when _T_17 : @[Debug.scala 55:31]
      node _T_18 = asUInt(reset) @[Debug.scala 56:24]
      node _T_19 = eq(_T_18, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_19 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache_1: ", REG_2) : SIM @[Debug.scala 56:24]
      node _T_20 = asUInt(reset) @[Debug.scala 57:13]
      node _T_21 = eq(_T_20, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_21 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) : SIM_1 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_22 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_23 = tail(_T_22, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_23 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_24 = and(UInt<1>("h1"), _WIRE_2) @[Debug.scala 55:16]
    when _T_24 : @[Debug.scala 55:31]
      node _T_25 = asUInt(reset) @[Debug.scala 56:24]
      node _T_26 = eq(_T_25, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_26 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache_1: ", REG_3) : SIM_2 @[Debug.scala 56:24]
      node _T_27 = asUInt(reset) @[Debug.scala 57:13]
      node _T_28 = eq(_T_27, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_28 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) : SIM_3 @[Debug.scala 57:13]
    when s1.io.in.valid : @[Cache.scala 550:25]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_29 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_30 = tail(_T_29, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_30 @[GTimer.scala 25:7]
      wire _WIRE_3 : UInt<1>
      _WIRE_3 <= UInt<1>("h0")
      node _T_31 = and(UInt<1>("h1"), _WIRE_3) @[Debug.scala 55:16]
      when _T_31 : @[Debug.scala 55:31]
        node _T_32 = asUInt(reset) @[Debug.scala 56:24]
        node _T_33 = eq(_T_32, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_33 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache_1: ", REG_4) : SIM_4 @[Debug.scala 56:24]
        node _T_34 = asUInt(reset) @[Debug.scala 57:13]
        node _T_35 = eq(_T_34, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_35 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[dcache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) : SIM_5 @[Debug.scala 57:13]
    when s2.io.in.valid : @[Cache.scala 551:25]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_36 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_37 = tail(_T_36, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_37 @[GTimer.scala 25:7]
      wire _WIRE_4 : UInt<1>
      _WIRE_4 <= UInt<1>("h0")
      node _T_38 = and(UInt<1>("h1"), _WIRE_4) @[Debug.scala 55:16]
      when _T_38 : @[Debug.scala 55:31]
        node _T_39 = asUInt(reset) @[Debug.scala 56:24]
        node _T_40 = eq(_T_39, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_40 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache_1: ", REG_5) : SIM_6 @[Debug.scala 56:24]
        node _T_41 = asUInt(reset) @[Debug.scala 57:13]
        node _T_42 = eq(_T_41, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_42 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[dcache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) : SIM_7 @[Debug.scala 57:13]
    when s3.io.in.valid : @[Cache.scala 552:25]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_43 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_44 = tail(_T_43, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_44 @[GTimer.scala 25:7]
      wire _WIRE_5 : UInt<1>
      _WIRE_5 <= UInt<1>("h0")
      node _T_45 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
      when _T_45 : @[Debug.scala 55:31]
        node _T_46 = asUInt(reset) @[Debug.scala 56:24]
        node _T_47 = eq(_T_46, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_47 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache_1: ", REG_6) : SIM_8 @[Debug.scala 56:24]
        node _T_48 = asUInt(reset) @[Debug.scala 57:13]
        node _T_49 = eq(_T_48, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_49 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[dcache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) : SIM_9 @[Debug.scala 57:13]

  module NutCore :
    input clock : Clock
    input reset : Reset
    output io : { imem : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}, dmem : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip frontend : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}

    inst frontend of Frontend_inorder @[NutCore.scala 103:34]
    frontend.clock <= clock
    frontend.reset <= reset
    inst Backend_inorder of Backend_inorder @[NutCore.scala 146:25]
    Backend_inorder.clock <= clock
    Backend_inorder.reset <= reset
    node _T = bits(frontend.io.flushVec, 1, 1) @[NutCore.scala 148:138]
    wire _WIRE : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _WIRE.data.imm <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE.data.src2 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE.data.src1 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.isBlocked <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.noSpecExec <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.isSrc2Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.isSrc1Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.isNutCoreTrap <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.rfDest <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.rfWen <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.rfSrc2 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.rfSrc1 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.fuOpType <= UInt<7>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.fuType <= UInt<3>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.src2Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.ctrl.src1Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.isBranch <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.runahead_checkpoint_id <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.crossPageIPFFix <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.isRVC <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.brIdx <= UInt<4>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.intrVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[12] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[13] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[14] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.exceptionVec[15] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.redirect.valid <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.redirect.rtype <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.redirect.target <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.pnpc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.pc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE.cf.instr <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    wire _WIRE_1 : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _WIRE_1.data.imm <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.data.src2 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.data.src1 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.isBlocked <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.noSpecExec <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.isSrc2Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.isSrc1Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.isNutCoreTrap <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.rfDest <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.rfWen <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.rfSrc2 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.rfSrc1 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.fuOpType <= UInt<7>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.fuType <= UInt<3>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.src2Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.ctrl.src1Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.isBranch <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.runahead_checkpoint_id <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.crossPageIPFFix <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.isRVC <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.brIdx <= UInt<4>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.intrVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[12] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[13] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[14] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.exceptionVec[15] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.redirect.valid <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.redirect.rtype <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.redirect.target <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.pnpc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.pc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_1.cf.instr <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    wire _WIRE_2 : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _WIRE_2.data.imm <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.data.src2 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.data.src1 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.isBlocked <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.noSpecExec <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.isSrc2Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.isSrc1Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.isNutCoreTrap <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.rfDest <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.rfWen <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.rfSrc2 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.rfSrc1 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.fuOpType <= UInt<7>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.fuType <= UInt<3>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.src2Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.ctrl.src1Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.isBranch <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.runahead_checkpoint_id <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.crossPageIPFFix <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.isRVC <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.brIdx <= UInt<4>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.intrVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[12] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[13] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[14] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.exceptionVec[15] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.redirect.valid <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.redirect.rtype <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.redirect.target <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.pnpc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.pc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_2.cf.instr <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    wire _WIRE_3 : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}} @[PipelineVector.scala 29:71]
    _WIRE_3.data.imm <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.data.src2 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.data.src1 <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.isBlocked <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.noSpecExec <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.isSrc2Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.isSrc1Forward <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.isNutCoreTrap <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.rfDest <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.rfWen <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.rfSrc2 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.rfSrc1 <= UInt<5>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.fuOpType <= UInt<7>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.fuType <= UInt<3>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.src2Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.ctrl.src1Type <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.isBranch <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.runahead_checkpoint_id <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.crossPageIPFFix <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.isRVC <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.brIdx <= UInt<4>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.intrVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[0] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[1] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[2] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[3] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[4] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[5] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[6] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[7] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[8] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[9] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[10] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[11] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[12] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[13] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[14] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.exceptionVec[15] <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.redirect.valid <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.redirect.rtype <= UInt<1>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.redirect.target <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.pnpc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.pc <= UInt<39>("h0") @[PipelineVector.scala 29:71]
    _WIRE_3.cf.instr <= UInt<64>("h0") @[PipelineVector.scala 29:71]
    wire _WIRE_4 : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}[4] @[PipelineVector.scala 29:37]
    _WIRE_4[0].data.imm <= _WIRE.data.imm @[PipelineVector.scala 29:37]
    _WIRE_4[0].data.src2 <= _WIRE.data.src2 @[PipelineVector.scala 29:37]
    _WIRE_4[0].data.src1 <= _WIRE.data.src1 @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.isBlocked <= _WIRE.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.noSpecExec <= _WIRE.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.isSrc2Forward <= _WIRE.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.isSrc1Forward <= _WIRE.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.isNutCoreTrap <= _WIRE.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.rfDest <= _WIRE.ctrl.rfDest @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.rfWen <= _WIRE.ctrl.rfWen @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.rfSrc2 <= _WIRE.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.rfSrc1 <= _WIRE.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.fuOpType <= _WIRE.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.fuType <= _WIRE.ctrl.fuType @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.src2Type <= _WIRE.ctrl.src2Type @[PipelineVector.scala 29:37]
    _WIRE_4[0].ctrl.src1Type <= _WIRE.ctrl.src1Type @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.isBranch <= _WIRE.cf.isBranch @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.runahead_checkpoint_id <= _WIRE.cf.runahead_checkpoint_id @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.crossPageIPFFix <= _WIRE.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.isRVC <= _WIRE.cf.isRVC @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.brIdx <= _WIRE.cf.brIdx @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[0] <= _WIRE.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[1] <= _WIRE.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[2] <= _WIRE.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[3] <= _WIRE.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[4] <= _WIRE.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[5] <= _WIRE.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[6] <= _WIRE.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[7] <= _WIRE.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[8] <= _WIRE.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[9] <= _WIRE.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[10] <= _WIRE.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.intrVec[11] <= _WIRE.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[0] <= _WIRE.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[1] <= _WIRE.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[2] <= _WIRE.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[3] <= _WIRE.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[4] <= _WIRE.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[5] <= _WIRE.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[6] <= _WIRE.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[7] <= _WIRE.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[8] <= _WIRE.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[9] <= _WIRE.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[10] <= _WIRE.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[11] <= _WIRE.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[12] <= _WIRE.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[13] <= _WIRE.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[14] <= _WIRE.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.exceptionVec[15] <= _WIRE.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.redirect.valid <= _WIRE.cf.redirect.valid @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.redirect.rtype <= _WIRE.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.redirect.target <= _WIRE.cf.redirect.target @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.pnpc <= _WIRE.cf.pnpc @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.pc <= _WIRE.cf.pc @[PipelineVector.scala 29:37]
    _WIRE_4[0].cf.instr <= _WIRE.cf.instr @[PipelineVector.scala 29:37]
    _WIRE_4[1].data.imm <= _WIRE_1.data.imm @[PipelineVector.scala 29:37]
    _WIRE_4[1].data.src2 <= _WIRE_1.data.src2 @[PipelineVector.scala 29:37]
    _WIRE_4[1].data.src1 <= _WIRE_1.data.src1 @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.isBlocked <= _WIRE_1.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.noSpecExec <= _WIRE_1.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.isSrc2Forward <= _WIRE_1.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.isSrc1Forward <= _WIRE_1.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.isNutCoreTrap <= _WIRE_1.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.rfDest <= _WIRE_1.ctrl.rfDest @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.rfWen <= _WIRE_1.ctrl.rfWen @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.rfSrc2 <= _WIRE_1.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.rfSrc1 <= _WIRE_1.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.fuOpType <= _WIRE_1.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.fuType <= _WIRE_1.ctrl.fuType @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.src2Type <= _WIRE_1.ctrl.src2Type @[PipelineVector.scala 29:37]
    _WIRE_4[1].ctrl.src1Type <= _WIRE_1.ctrl.src1Type @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.isBranch <= _WIRE_1.cf.isBranch @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.runahead_checkpoint_id <= _WIRE_1.cf.runahead_checkpoint_id @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.crossPageIPFFix <= _WIRE_1.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.isRVC <= _WIRE_1.cf.isRVC @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.brIdx <= _WIRE_1.cf.brIdx @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[0] <= _WIRE_1.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[1] <= _WIRE_1.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[2] <= _WIRE_1.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[3] <= _WIRE_1.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[4] <= _WIRE_1.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[5] <= _WIRE_1.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[6] <= _WIRE_1.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[7] <= _WIRE_1.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[8] <= _WIRE_1.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[9] <= _WIRE_1.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[10] <= _WIRE_1.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.intrVec[11] <= _WIRE_1.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[0] <= _WIRE_1.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[1] <= _WIRE_1.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[2] <= _WIRE_1.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[3] <= _WIRE_1.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[4] <= _WIRE_1.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[5] <= _WIRE_1.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[6] <= _WIRE_1.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[7] <= _WIRE_1.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[8] <= _WIRE_1.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[9] <= _WIRE_1.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[10] <= _WIRE_1.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[11] <= _WIRE_1.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[12] <= _WIRE_1.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[13] <= _WIRE_1.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[14] <= _WIRE_1.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.exceptionVec[15] <= _WIRE_1.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.redirect.valid <= _WIRE_1.cf.redirect.valid @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.redirect.rtype <= _WIRE_1.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.redirect.target <= _WIRE_1.cf.redirect.target @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.pnpc <= _WIRE_1.cf.pnpc @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.pc <= _WIRE_1.cf.pc @[PipelineVector.scala 29:37]
    _WIRE_4[1].cf.instr <= _WIRE_1.cf.instr @[PipelineVector.scala 29:37]
    _WIRE_4[2].data.imm <= _WIRE_2.data.imm @[PipelineVector.scala 29:37]
    _WIRE_4[2].data.src2 <= _WIRE_2.data.src2 @[PipelineVector.scala 29:37]
    _WIRE_4[2].data.src1 <= _WIRE_2.data.src1 @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.isBlocked <= _WIRE_2.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.noSpecExec <= _WIRE_2.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.isSrc2Forward <= _WIRE_2.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.isSrc1Forward <= _WIRE_2.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.isNutCoreTrap <= _WIRE_2.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.rfDest <= _WIRE_2.ctrl.rfDest @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.rfWen <= _WIRE_2.ctrl.rfWen @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.rfSrc2 <= _WIRE_2.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.rfSrc1 <= _WIRE_2.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.fuOpType <= _WIRE_2.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.fuType <= _WIRE_2.ctrl.fuType @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.src2Type <= _WIRE_2.ctrl.src2Type @[PipelineVector.scala 29:37]
    _WIRE_4[2].ctrl.src1Type <= _WIRE_2.ctrl.src1Type @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.isBranch <= _WIRE_2.cf.isBranch @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.runahead_checkpoint_id <= _WIRE_2.cf.runahead_checkpoint_id @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.crossPageIPFFix <= _WIRE_2.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.isRVC <= _WIRE_2.cf.isRVC @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.brIdx <= _WIRE_2.cf.brIdx @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[0] <= _WIRE_2.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[1] <= _WIRE_2.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[2] <= _WIRE_2.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[3] <= _WIRE_2.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[4] <= _WIRE_2.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[5] <= _WIRE_2.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[6] <= _WIRE_2.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[7] <= _WIRE_2.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[8] <= _WIRE_2.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[9] <= _WIRE_2.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[10] <= _WIRE_2.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.intrVec[11] <= _WIRE_2.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[0] <= _WIRE_2.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[1] <= _WIRE_2.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[2] <= _WIRE_2.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[3] <= _WIRE_2.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[4] <= _WIRE_2.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[5] <= _WIRE_2.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[6] <= _WIRE_2.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[7] <= _WIRE_2.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[8] <= _WIRE_2.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[9] <= _WIRE_2.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[10] <= _WIRE_2.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[11] <= _WIRE_2.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[12] <= _WIRE_2.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[13] <= _WIRE_2.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[14] <= _WIRE_2.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.exceptionVec[15] <= _WIRE_2.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.redirect.valid <= _WIRE_2.cf.redirect.valid @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.redirect.rtype <= _WIRE_2.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.redirect.target <= _WIRE_2.cf.redirect.target @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.pnpc <= _WIRE_2.cf.pnpc @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.pc <= _WIRE_2.cf.pc @[PipelineVector.scala 29:37]
    _WIRE_4[2].cf.instr <= _WIRE_2.cf.instr @[PipelineVector.scala 29:37]
    _WIRE_4[3].data.imm <= _WIRE_3.data.imm @[PipelineVector.scala 29:37]
    _WIRE_4[3].data.src2 <= _WIRE_3.data.src2 @[PipelineVector.scala 29:37]
    _WIRE_4[3].data.src1 <= _WIRE_3.data.src1 @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.isBlocked <= _WIRE_3.ctrl.isBlocked @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.noSpecExec <= _WIRE_3.ctrl.noSpecExec @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.isSrc2Forward <= _WIRE_3.ctrl.isSrc2Forward @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.isSrc1Forward <= _WIRE_3.ctrl.isSrc1Forward @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.isNutCoreTrap <= _WIRE_3.ctrl.isNutCoreTrap @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.rfDest <= _WIRE_3.ctrl.rfDest @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.rfWen <= _WIRE_3.ctrl.rfWen @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.rfSrc2 <= _WIRE_3.ctrl.rfSrc2 @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.rfSrc1 <= _WIRE_3.ctrl.rfSrc1 @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.fuOpType <= _WIRE_3.ctrl.fuOpType @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.fuType <= _WIRE_3.ctrl.fuType @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.src2Type <= _WIRE_3.ctrl.src2Type @[PipelineVector.scala 29:37]
    _WIRE_4[3].ctrl.src1Type <= _WIRE_3.ctrl.src1Type @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.isBranch <= _WIRE_3.cf.isBranch @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.runahead_checkpoint_id <= _WIRE_3.cf.runahead_checkpoint_id @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.crossPageIPFFix <= _WIRE_3.cf.crossPageIPFFix @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.isRVC <= _WIRE_3.cf.isRVC @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.brIdx <= _WIRE_3.cf.brIdx @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[0] <= _WIRE_3.cf.intrVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[1] <= _WIRE_3.cf.intrVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[2] <= _WIRE_3.cf.intrVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[3] <= _WIRE_3.cf.intrVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[4] <= _WIRE_3.cf.intrVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[5] <= _WIRE_3.cf.intrVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[6] <= _WIRE_3.cf.intrVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[7] <= _WIRE_3.cf.intrVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[8] <= _WIRE_3.cf.intrVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[9] <= _WIRE_3.cf.intrVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[10] <= _WIRE_3.cf.intrVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.intrVec[11] <= _WIRE_3.cf.intrVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[0] <= _WIRE_3.cf.exceptionVec[0] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[1] <= _WIRE_3.cf.exceptionVec[1] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[2] <= _WIRE_3.cf.exceptionVec[2] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[3] <= _WIRE_3.cf.exceptionVec[3] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[4] <= _WIRE_3.cf.exceptionVec[4] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[5] <= _WIRE_3.cf.exceptionVec[5] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[6] <= _WIRE_3.cf.exceptionVec[6] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[7] <= _WIRE_3.cf.exceptionVec[7] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[8] <= _WIRE_3.cf.exceptionVec[8] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[9] <= _WIRE_3.cf.exceptionVec[9] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[10] <= _WIRE_3.cf.exceptionVec[10] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[11] <= _WIRE_3.cf.exceptionVec[11] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[12] <= _WIRE_3.cf.exceptionVec[12] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[13] <= _WIRE_3.cf.exceptionVec[13] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[14] <= _WIRE_3.cf.exceptionVec[14] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.exceptionVec[15] <= _WIRE_3.cf.exceptionVec[15] @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.redirect.valid <= _WIRE_3.cf.redirect.valid @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.redirect.rtype <= _WIRE_3.cf.redirect.rtype @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.redirect.target <= _WIRE_3.cf.redirect.target @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.pnpc <= _WIRE_3.cf.pnpc @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.pc <= _WIRE_3.cf.pc @[PipelineVector.scala 29:37]
    _WIRE_4[3].cf.instr <= _WIRE_3.cf.instr @[PipelineVector.scala 29:37]
    reg REG : { cf : { instr : UInt<64>, pc : UInt<39>, pnpc : UInt<39>, redirect : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1>}, exceptionVec : UInt<1>[16], intrVec : UInt<1>[12], brIdx : UInt<4>, isRVC : UInt<1>, crossPageIPFFix : UInt<1>, runahead_checkpoint_id : UInt<64>, isBranch : UInt<1>}, ctrl : { src1Type : UInt<1>, src2Type : UInt<1>, fuType : UInt<3>, fuOpType : UInt<7>, rfSrc1 : UInt<5>, rfSrc2 : UInt<5>, rfWen : UInt<1>, rfDest : UInt<5>, isNutCoreTrap : UInt<1>, isSrc1Forward : UInt<1>, isSrc2Forward : UInt<1>, noSpecExec : UInt<1>, isBlocked : UInt<1>}, data : { src1 : UInt<64>, src2 : UInt<64>, imm : UInt<64>}}[4], clock with :
      reset => (reset, _WIRE_4) @[PipelineVector.scala 29:29]
    reg REG_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[PipelineVector.scala 30:33]
    reg REG_2 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[PipelineVector.scala 31:33]
    node _T_1 = eq(REG_1, REG_2) @[PipelineVector.scala 32:42]
    node _T_2 = add(REG_1, UInt<1>("h1")) @[PipelineVector.scala 33:63]
    node _T_3 = tail(_T_2, 1) @[PipelineVector.scala 33:63]
    node _T_4 = neq(_T_3, REG_2) @[PipelineVector.scala 33:74]
    node _T_5 = add(REG_1, UInt<2>("h2")) @[PipelineVector.scala 33:63]
    node _T_6 = tail(_T_5, 1) @[PipelineVector.scala 33:63]
    node _T_7 = neq(_T_6, REG_2) @[PipelineVector.scala 33:74]
    node _T_8 = and(_T_7, UInt<1>("h1")) @[PipelineVector.scala 33:124]
    node _T_9 = and(_T_4, _T_8) @[PipelineVector.scala 33:124]
    wire _WIRE_5 : UInt<1>[2] @[PipelineVector.scala 36:27]
    _WIRE_5[0] <= frontend.io.out[0].valid @[PipelineVector.scala 37:20]
    _WIRE_5[1] <= frontend.io.out[1].valid @[PipelineVector.scala 38:20]
    node _T_10 = add(_WIRE_5[0], _WIRE_5[1]) @[PipelineVector.scala 40:46]
    node _T_11 = geq(_T_10, UInt<1>("h1")) @[PipelineVector.scala 41:53]
    node _T_12 = geq(_T_10, UInt<2>("h2")) @[PipelineVector.scala 41:53]
    node _T_13 = and(frontend.io.out[0].ready, frontend.io.out[0].valid) @[Decoupled.scala 40:37]
    node _T_14 = and(frontend.io.out[1].ready, frontend.io.out[1].valid) @[Decoupled.scala 40:37]
    node _T_15 = or(_T_13, _T_14) @[PipelineVector.scala 43:26]
    when _T_15 : @[PipelineVector.scala 44:14]
      when _T_11 : @[PipelineVector.scala 45:29]
        node _T_16 = add(UInt<1>("h0"), REG_1) @[PipelineVector.scala 45:45]
        node _T_17 = tail(_T_16, 1) @[PipelineVector.scala 45:45]
        node _T_18 = mux(_WIRE_5[0], frontend.io.out[0].bits, frontend.io.out[1].bits) @[PipelineVector.scala 45:69]
        REG[_T_17].data.imm <= _T_18.data.imm @[PipelineVector.scala 45:63]
        REG[_T_17].data.src2 <= _T_18.data.src2 @[PipelineVector.scala 45:63]
        REG[_T_17].data.src1 <= _T_18.data.src1 @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.isBlocked <= _T_18.ctrl.isBlocked @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.noSpecExec <= _T_18.ctrl.noSpecExec @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.isSrc2Forward <= _T_18.ctrl.isSrc2Forward @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.isSrc1Forward <= _T_18.ctrl.isSrc1Forward @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.isNutCoreTrap <= _T_18.ctrl.isNutCoreTrap @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.rfDest <= _T_18.ctrl.rfDest @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.rfWen <= _T_18.ctrl.rfWen @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.rfSrc2 <= _T_18.ctrl.rfSrc2 @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.rfSrc1 <= _T_18.ctrl.rfSrc1 @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.fuOpType <= _T_18.ctrl.fuOpType @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.fuType <= _T_18.ctrl.fuType @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.src2Type <= _T_18.ctrl.src2Type @[PipelineVector.scala 45:63]
        REG[_T_17].ctrl.src1Type <= _T_18.ctrl.src1Type @[PipelineVector.scala 45:63]
        REG[_T_17].cf.isBranch <= _T_18.cf.isBranch @[PipelineVector.scala 45:63]
        REG[_T_17].cf.runahead_checkpoint_id <= _T_18.cf.runahead_checkpoint_id @[PipelineVector.scala 45:63]
        REG[_T_17].cf.crossPageIPFFix <= _T_18.cf.crossPageIPFFix @[PipelineVector.scala 45:63]
        REG[_T_17].cf.isRVC <= _T_18.cf.isRVC @[PipelineVector.scala 45:63]
        REG[_T_17].cf.brIdx <= _T_18.cf.brIdx @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[0] <= _T_18.cf.intrVec[0] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[1] <= _T_18.cf.intrVec[1] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[2] <= _T_18.cf.intrVec[2] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[3] <= _T_18.cf.intrVec[3] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[4] <= _T_18.cf.intrVec[4] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[5] <= _T_18.cf.intrVec[5] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[6] <= _T_18.cf.intrVec[6] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[7] <= _T_18.cf.intrVec[7] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[8] <= _T_18.cf.intrVec[8] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[9] <= _T_18.cf.intrVec[9] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[10] <= _T_18.cf.intrVec[10] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.intrVec[11] <= _T_18.cf.intrVec[11] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[0] <= _T_18.cf.exceptionVec[0] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[1] <= _T_18.cf.exceptionVec[1] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[2] <= _T_18.cf.exceptionVec[2] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[3] <= _T_18.cf.exceptionVec[3] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[4] <= _T_18.cf.exceptionVec[4] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[5] <= _T_18.cf.exceptionVec[5] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[6] <= _T_18.cf.exceptionVec[6] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[7] <= _T_18.cf.exceptionVec[7] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[8] <= _T_18.cf.exceptionVec[8] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[9] <= _T_18.cf.exceptionVec[9] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[10] <= _T_18.cf.exceptionVec[10] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[11] <= _T_18.cf.exceptionVec[11] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[12] <= _T_18.cf.exceptionVec[12] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[13] <= _T_18.cf.exceptionVec[13] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[14] <= _T_18.cf.exceptionVec[14] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.exceptionVec[15] <= _T_18.cf.exceptionVec[15] @[PipelineVector.scala 45:63]
        REG[_T_17].cf.redirect.valid <= _T_18.cf.redirect.valid @[PipelineVector.scala 45:63]
        REG[_T_17].cf.redirect.rtype <= _T_18.cf.redirect.rtype @[PipelineVector.scala 45:63]
        REG[_T_17].cf.redirect.target <= _T_18.cf.redirect.target @[PipelineVector.scala 45:63]
        REG[_T_17].cf.pnpc <= _T_18.cf.pnpc @[PipelineVector.scala 45:63]
        REG[_T_17].cf.pc <= _T_18.cf.pc @[PipelineVector.scala 45:63]
        REG[_T_17].cf.instr <= _T_18.cf.instr @[PipelineVector.scala 45:63]
      when _T_12 : @[PipelineVector.scala 46:29]
        node _T_19 = add(UInt<1>("h1"), REG_1) @[PipelineVector.scala 46:45]
        node _T_20 = tail(_T_19, 1) @[PipelineVector.scala 46:45]
        REG[_T_20].data.imm <= frontend.io.out[1].bits.data.imm @[PipelineVector.scala 46:63]
        REG[_T_20].data.src2 <= frontend.io.out[1].bits.data.src2 @[PipelineVector.scala 46:63]
        REG[_T_20].data.src1 <= frontend.io.out[1].bits.data.src1 @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.isBlocked <= frontend.io.out[1].bits.ctrl.isBlocked @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.noSpecExec <= frontend.io.out[1].bits.ctrl.noSpecExec @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.isSrc2Forward <= frontend.io.out[1].bits.ctrl.isSrc2Forward @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.isSrc1Forward <= frontend.io.out[1].bits.ctrl.isSrc1Forward @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.isNutCoreTrap <= frontend.io.out[1].bits.ctrl.isNutCoreTrap @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.rfDest <= frontend.io.out[1].bits.ctrl.rfDest @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.rfWen <= frontend.io.out[1].bits.ctrl.rfWen @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.rfSrc2 <= frontend.io.out[1].bits.ctrl.rfSrc2 @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.rfSrc1 <= frontend.io.out[1].bits.ctrl.rfSrc1 @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.fuOpType <= frontend.io.out[1].bits.ctrl.fuOpType @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.fuType <= frontend.io.out[1].bits.ctrl.fuType @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.src2Type <= frontend.io.out[1].bits.ctrl.src2Type @[PipelineVector.scala 46:63]
        REG[_T_20].ctrl.src1Type <= frontend.io.out[1].bits.ctrl.src1Type @[PipelineVector.scala 46:63]
        REG[_T_20].cf.isBranch <= frontend.io.out[1].bits.cf.isBranch @[PipelineVector.scala 46:63]
        REG[_T_20].cf.runahead_checkpoint_id <= frontend.io.out[1].bits.cf.runahead_checkpoint_id @[PipelineVector.scala 46:63]
        REG[_T_20].cf.crossPageIPFFix <= frontend.io.out[1].bits.cf.crossPageIPFFix @[PipelineVector.scala 46:63]
        REG[_T_20].cf.isRVC <= frontend.io.out[1].bits.cf.isRVC @[PipelineVector.scala 46:63]
        REG[_T_20].cf.brIdx <= frontend.io.out[1].bits.cf.brIdx @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[0] <= frontend.io.out[1].bits.cf.intrVec[0] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[1] <= frontend.io.out[1].bits.cf.intrVec[1] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[2] <= frontend.io.out[1].bits.cf.intrVec[2] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[3] <= frontend.io.out[1].bits.cf.intrVec[3] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[4] <= frontend.io.out[1].bits.cf.intrVec[4] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[5] <= frontend.io.out[1].bits.cf.intrVec[5] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[6] <= frontend.io.out[1].bits.cf.intrVec[6] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[7] <= frontend.io.out[1].bits.cf.intrVec[7] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[8] <= frontend.io.out[1].bits.cf.intrVec[8] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[9] <= frontend.io.out[1].bits.cf.intrVec[9] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[10] <= frontend.io.out[1].bits.cf.intrVec[10] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.intrVec[11] <= frontend.io.out[1].bits.cf.intrVec[11] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[0] <= frontend.io.out[1].bits.cf.exceptionVec[0] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[1] <= frontend.io.out[1].bits.cf.exceptionVec[1] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[2] <= frontend.io.out[1].bits.cf.exceptionVec[2] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[3] <= frontend.io.out[1].bits.cf.exceptionVec[3] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[4] <= frontend.io.out[1].bits.cf.exceptionVec[4] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[5] <= frontend.io.out[1].bits.cf.exceptionVec[5] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[6] <= frontend.io.out[1].bits.cf.exceptionVec[6] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[7] <= frontend.io.out[1].bits.cf.exceptionVec[7] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[8] <= frontend.io.out[1].bits.cf.exceptionVec[8] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[9] <= frontend.io.out[1].bits.cf.exceptionVec[9] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[10] <= frontend.io.out[1].bits.cf.exceptionVec[10] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[11] <= frontend.io.out[1].bits.cf.exceptionVec[11] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[12] <= frontend.io.out[1].bits.cf.exceptionVec[12] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[13] <= frontend.io.out[1].bits.cf.exceptionVec[13] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[14] <= frontend.io.out[1].bits.cf.exceptionVec[14] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.exceptionVec[15] <= frontend.io.out[1].bits.cf.exceptionVec[15] @[PipelineVector.scala 46:63]
        REG[_T_20].cf.redirect.valid <= frontend.io.out[1].bits.cf.redirect.valid @[PipelineVector.scala 46:63]
        REG[_T_20].cf.redirect.rtype <= frontend.io.out[1].bits.cf.redirect.rtype @[PipelineVector.scala 46:63]
        REG[_T_20].cf.redirect.target <= frontend.io.out[1].bits.cf.redirect.target @[PipelineVector.scala 46:63]
        REG[_T_20].cf.pnpc <= frontend.io.out[1].bits.cf.pnpc @[PipelineVector.scala 46:63]
        REG[_T_20].cf.pc <= frontend.io.out[1].bits.cf.pc @[PipelineVector.scala 46:63]
        REG[_T_20].cf.instr <= frontend.io.out[1].bits.cf.instr @[PipelineVector.scala 46:63]
      node _T_21 = add(REG_1, _T_10) @[PipelineVector.scala 47:42]
      node _T_22 = tail(_T_21, 1) @[PipelineVector.scala 47:42]
      REG_1 <= _T_22 @[PipelineVector.scala 47:24]
    node _T_23 = eq(frontend.io.out[0].valid, UInt<1>("h0")) @[PipelineVector.scala 50:39]
    node _T_24 = or(_T_9, _T_23) @[PipelineVector.scala 50:36]
    frontend.io.out[0].ready <= _T_24 @[PipelineVector.scala 50:15]
    node _T_25 = eq(frontend.io.out[1].valid, UInt<1>("h0")) @[PipelineVector.scala 51:39]
    node _T_26 = or(_T_9, _T_25) @[PipelineVector.scala 51:36]
    frontend.io.out[1].ready <= _T_26 @[PipelineVector.scala 51:15]
    Backend_inorder.io.in[0].bits.data.imm <= REG[REG_2].data.imm @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.data.src2 <= REG[REG_2].data.src2 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.data.src1 <= REG[REG_2].data.src1 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isBlocked <= REG[REG_2].ctrl.isBlocked @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.noSpecExec <= REG[REG_2].ctrl.noSpecExec @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isSrc2Forward <= REG[REG_2].ctrl.isSrc2Forward @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isSrc1Forward <= REG[REG_2].ctrl.isSrc1Forward @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.isNutCoreTrap <= REG[REG_2].ctrl.isNutCoreTrap @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfDest <= REG[REG_2].ctrl.rfDest @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfWen <= REG[REG_2].ctrl.rfWen @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfSrc2 <= REG[REG_2].ctrl.rfSrc2 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.rfSrc1 <= REG[REG_2].ctrl.rfSrc1 @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.fuOpType <= REG[REG_2].ctrl.fuOpType @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.fuType <= REG[REG_2].ctrl.fuType @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.src2Type <= REG[REG_2].ctrl.src2Type @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.ctrl.src1Type <= REG[REG_2].ctrl.src1Type @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.isBranch <= REG[REG_2].cf.isBranch @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.runahead_checkpoint_id <= REG[REG_2].cf.runahead_checkpoint_id @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.crossPageIPFFix <= REG[REG_2].cf.crossPageIPFFix @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.isRVC <= REG[REG_2].cf.isRVC @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.brIdx <= REG[REG_2].cf.brIdx @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[0] <= REG[REG_2].cf.intrVec[0] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[1] <= REG[REG_2].cf.intrVec[1] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[2] <= REG[REG_2].cf.intrVec[2] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[3] <= REG[REG_2].cf.intrVec[3] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[4] <= REG[REG_2].cf.intrVec[4] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[5] <= REG[REG_2].cf.intrVec[5] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[6] <= REG[REG_2].cf.intrVec[6] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[7] <= REG[REG_2].cf.intrVec[7] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[8] <= REG[REG_2].cf.intrVec[8] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[9] <= REG[REG_2].cf.intrVec[9] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[10] <= REG[REG_2].cf.intrVec[10] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.intrVec[11] <= REG[REG_2].cf.intrVec[11] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[0] <= REG[REG_2].cf.exceptionVec[0] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[1] <= REG[REG_2].cf.exceptionVec[1] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[2] <= REG[REG_2].cf.exceptionVec[2] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[3] <= REG[REG_2].cf.exceptionVec[3] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[4] <= REG[REG_2].cf.exceptionVec[4] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[5] <= REG[REG_2].cf.exceptionVec[5] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[6] <= REG[REG_2].cf.exceptionVec[6] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[7] <= REG[REG_2].cf.exceptionVec[7] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[8] <= REG[REG_2].cf.exceptionVec[8] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[9] <= REG[REG_2].cf.exceptionVec[9] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[10] <= REG[REG_2].cf.exceptionVec[10] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[11] <= REG[REG_2].cf.exceptionVec[11] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[12] <= REG[REG_2].cf.exceptionVec[12] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[13] <= REG[REG_2].cf.exceptionVec[13] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[14] <= REG[REG_2].cf.exceptionVec[14] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.exceptionVec[15] <= REG[REG_2].cf.exceptionVec[15] @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.redirect.valid <= REG[REG_2].cf.redirect.valid @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.redirect.rtype <= REG[REG_2].cf.redirect.rtype @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.redirect.target <= REG[REG_2].cf.redirect.target @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.pnpc <= REG[REG_2].cf.pnpc @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.pc <= REG[REG_2].cf.pc @[PipelineVector.scala 55:15]
    Backend_inorder.io.in[0].bits.cf.instr <= REG[REG_2].cf.instr @[PipelineVector.scala 55:15]
    node _T_27 = neq(REG_1, REG_2) @[PipelineVector.scala 56:34]
    Backend_inorder.io.in[0].valid <= _T_27 @[PipelineVector.scala 56:16]
    node _T_28 = add(REG_2, UInt<1>("h1")) @[PipelineVector.scala 59:42]
    node _T_29 = tail(_T_28, 1) @[PipelineVector.scala 59:42]
    Backend_inorder.io.in[1].bits.data.imm <= REG[_T_29].data.imm @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.data.src2 <= REG[_T_29].data.src2 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.data.src1 <= REG[_T_29].data.src1 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isBlocked <= REG[_T_29].ctrl.isBlocked @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.noSpecExec <= REG[_T_29].ctrl.noSpecExec @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isSrc2Forward <= REG[_T_29].ctrl.isSrc2Forward @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isSrc1Forward <= REG[_T_29].ctrl.isSrc1Forward @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.isNutCoreTrap <= REG[_T_29].ctrl.isNutCoreTrap @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfDest <= REG[_T_29].ctrl.rfDest @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfWen <= REG[_T_29].ctrl.rfWen @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfSrc2 <= REG[_T_29].ctrl.rfSrc2 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.rfSrc1 <= REG[_T_29].ctrl.rfSrc1 @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.fuOpType <= REG[_T_29].ctrl.fuOpType @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.fuType <= REG[_T_29].ctrl.fuType @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.src2Type <= REG[_T_29].ctrl.src2Type @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.ctrl.src1Type <= REG[_T_29].ctrl.src1Type @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.isBranch <= REG[_T_29].cf.isBranch @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.runahead_checkpoint_id <= REG[_T_29].cf.runahead_checkpoint_id @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.crossPageIPFFix <= REG[_T_29].cf.crossPageIPFFix @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.isRVC <= REG[_T_29].cf.isRVC @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.brIdx <= REG[_T_29].cf.brIdx @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[0] <= REG[_T_29].cf.intrVec[0] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[1] <= REG[_T_29].cf.intrVec[1] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[2] <= REG[_T_29].cf.intrVec[2] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[3] <= REG[_T_29].cf.intrVec[3] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[4] <= REG[_T_29].cf.intrVec[4] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[5] <= REG[_T_29].cf.intrVec[5] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[6] <= REG[_T_29].cf.intrVec[6] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[7] <= REG[_T_29].cf.intrVec[7] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[8] <= REG[_T_29].cf.intrVec[8] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[9] <= REG[_T_29].cf.intrVec[9] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[10] <= REG[_T_29].cf.intrVec[10] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.intrVec[11] <= REG[_T_29].cf.intrVec[11] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[0] <= REG[_T_29].cf.exceptionVec[0] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[1] <= REG[_T_29].cf.exceptionVec[1] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[2] <= REG[_T_29].cf.exceptionVec[2] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[3] <= REG[_T_29].cf.exceptionVec[3] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[4] <= REG[_T_29].cf.exceptionVec[4] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[5] <= REG[_T_29].cf.exceptionVec[5] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[6] <= REG[_T_29].cf.exceptionVec[6] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[7] <= REG[_T_29].cf.exceptionVec[7] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[8] <= REG[_T_29].cf.exceptionVec[8] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[9] <= REG[_T_29].cf.exceptionVec[9] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[10] <= REG[_T_29].cf.exceptionVec[10] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[11] <= REG[_T_29].cf.exceptionVec[11] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[12] <= REG[_T_29].cf.exceptionVec[12] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[13] <= REG[_T_29].cf.exceptionVec[13] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[14] <= REG[_T_29].cf.exceptionVec[14] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.exceptionVec[15] <= REG[_T_29].cf.exceptionVec[15] @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.redirect.valid <= REG[_T_29].cf.redirect.valid @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.redirect.rtype <= REG[_T_29].cf.redirect.rtype @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.redirect.target <= REG[_T_29].cf.redirect.target @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.pnpc <= REG[_T_29].cf.pnpc @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.pc <= REG[_T_29].cf.pc @[PipelineVector.scala 60:15]
    Backend_inorder.io.in[1].bits.cf.instr <= REG[_T_29].cf.instr @[PipelineVector.scala 60:15]
    node _T_30 = neq(REG_1, _T_29) @[PipelineVector.scala 61:34]
    node _T_31 = and(_T_30, Backend_inorder.io.in[0].valid) @[PipelineVector.scala 61:54]
    Backend_inorder.io.in[1].valid <= _T_31 @[PipelineVector.scala 61:16]
    node _T_32 = and(Backend_inorder.io.in[0].ready, Backend_inorder.io.in[0].valid) @[Decoupled.scala 40:37]
    node _T_33 = and(Backend_inorder.io.in[1].ready, Backend_inorder.io.in[1].valid) @[Decoupled.scala 40:37]
    node _T_34 = add(_T_32, _T_33) @[PipelineVector.scala 64:44]
    node _T_35 = gt(_T_34, UInt<1>("h0")) @[PipelineVector.scala 65:35]
    when _T_35 : @[PipelineVector.scala 66:22]
      node _T_36 = add(REG_2, _T_34) @[PipelineVector.scala 67:42]
      node _T_37 = tail(_T_36, 1) @[PipelineVector.scala 67:42]
      REG_2 <= _T_37 @[PipelineVector.scala 67:24]
    when _T : @[PipelineVector.scala 71:16]
      REG_1 <= UInt<1>("h0") @[PipelineVector.scala 72:24]
      REG_2 <= UInt<1>("h0") @[PipelineVector.scala 73:24]
    wire _WIRE_6 : UInt<1>
    _WIRE_6 <= UInt<1>("h0")
    node _T_38 = and(UInt<1>("h1"), _WIRE_6) @[Debug.scala 80:29]
    when _T_38 : @[Debug.scala 80:52]
      node _T_39 = add(UInt<3>("h4"), REG_1) @[PipelineVector.scala 77:86]
      node _T_40 = sub(_T_39, REG_2) @[PipelineVector.scala 77:113]
      node _T_41 = tail(_T_40, 1) @[PipelineVector.scala 77:113]
      node _T_42 = rem(_T_41, UInt<3>("h4")) @[PipelineVector.scala 77:140]
      node _T_43 = asUInt(reset) @[PipelineVector.scala 77:15]
      node _T_44 = eq(_T_43, UInt<1>("h0")) @[PipelineVector.scala 77:15]
      when _T_44 : @[PipelineVector.scala 77:15]
        printf(clock, UInt<1>("h1"), "[DPQ] size %x head %x tail %x enq %x deq %x\n", _T_42, REG_1, REG_2, _T_10, _T_34) : SIM @[PipelineVector.scala 77:15]
    inst SimpleBusCrossbarNto1 of SimpleBusCrossbarNto1 @[NutCore.scala 150:26]
    SimpleBusCrossbarNto1.clock <= clock
    SimpleBusCrossbarNto1.reset <= reset
    inst SimpleBusCrossbarNto1_1 of SimpleBusCrossbarNto1_1 @[NutCore.scala 151:26]
    SimpleBusCrossbarNto1_1.clock <= clock
    SimpleBusCrossbarNto1_1.reset <= reset
    node _T_45 = bits(frontend.io.flushVec, 0, 0) @[NutCore.scala 153:104]
    node _T_46 = or(_T_45, frontend.io.bpFlush) @[NutCore.scala 153:108]
    inst EmbeddedTLB of EmbeddedTLB @[EmbeddedTLB.scala 421:23]
    EmbeddedTLB.clock <= clock
    EmbeddedTLB.reset <= reset
    frontend.io.imem.resp.bits.user <= EmbeddedTLB.io.in.resp.bits.user @[EmbeddedTLB.scala 422:17]
    frontend.io.imem.resp.bits.rdata <= EmbeddedTLB.io.in.resp.bits.rdata @[EmbeddedTLB.scala 422:17]
    frontend.io.imem.resp.bits.cmd <= EmbeddedTLB.io.in.resp.bits.cmd @[EmbeddedTLB.scala 422:17]
    frontend.io.imem.resp.valid <= EmbeddedTLB.io.in.resp.valid @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.resp.ready <= frontend.io.imem.resp.ready @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.bits.user <= frontend.io.imem.req.bits.user @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.bits.wdata <= frontend.io.imem.req.bits.wdata @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.bits.wmask <= frontend.io.imem.req.bits.wmask @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.bits.cmd <= frontend.io.imem.req.bits.cmd @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.bits.size <= frontend.io.imem.req.bits.size @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.bits.addr <= frontend.io.imem.req.bits.addr @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.in.req.valid <= frontend.io.imem.req.valid @[EmbeddedTLB.scala 422:17]
    frontend.io.imem.req.ready <= EmbeddedTLB.io.in.req.ready @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB.io.mem.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[1].resp.bits.rdata @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB.io.mem.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[1].resp.bits.cmd @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB.io.mem.resp.valid <= SimpleBusCrossbarNto1_1.io.in[1].resp.valid @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].resp.ready <= EmbeddedTLB.io.mem.resp.ready @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.wdata <= EmbeddedTLB.io.mem.req.bits.wdata @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.wmask <= EmbeddedTLB.io.mem.req.bits.wmask @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.cmd <= EmbeddedTLB.io.mem.req.bits.cmd @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.size <= EmbeddedTLB.io.mem.req.bits.size @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.bits.addr <= EmbeddedTLB.io.mem.req.bits.addr @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[1].req.valid <= EmbeddedTLB.io.mem.req.valid @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB.io.mem.req.ready <= SimpleBusCrossbarNto1_1.io.in[1].req.ready @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB.io.flush <= _T_46 @[EmbeddedTLB.scala 424:20]
    Backend_inorder.io.memMMU.imem.addr <= EmbeddedTLB.io.csrMMU.addr @[EmbeddedTLB.scala 425:21]
    Backend_inorder.io.memMMU.imem.storePF <= EmbeddedTLB.io.csrMMU.storePF @[EmbeddedTLB.scala 425:21]
    Backend_inorder.io.memMMU.imem.loadPF <= EmbeddedTLB.io.csrMMU.loadPF @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB.io.csrMMU.status_mxr <= Backend_inorder.io.memMMU.imem.status_mxr @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB.io.csrMMU.status_sum <= Backend_inorder.io.memMMU.imem.status_sum @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB.io.csrMMU.priviledgeMode <= Backend_inorder.io.memMMU.imem.priviledgeMode @[EmbeddedTLB.scala 425:21]
    frontend.io.ipf <= EmbeddedTLB.io.ipf @[NutCore.scala 154:21]
    node _T_47 = bits(frontend.io.flushVec, 0, 0) @[NutCore.scala 155:107]
    node _T_48 = or(_T_47, frontend.io.bpFlush) @[NutCore.scala 155:111]
    node _T_49 = bits(_T_48, 0, 0) @[Bitwise.scala 72:15]
    node _T_50 = mux(_T_49, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 72:12]
    inst Cache of Cache @[Cache.scala 670:35]
    Cache.clock <= clock
    Cache.reset <= reset
    Cache.io.flush <= _T_50 @[Cache.scala 675:20]
    EmbeddedTLB.io.out.resp.bits.user <= Cache.io.in.resp.bits.user @[Cache.scala 676:17]
    EmbeddedTLB.io.out.resp.bits.rdata <= Cache.io.in.resp.bits.rdata @[Cache.scala 676:17]
    EmbeddedTLB.io.out.resp.bits.cmd <= Cache.io.in.resp.bits.cmd @[Cache.scala 676:17]
    EmbeddedTLB.io.out.resp.valid <= Cache.io.in.resp.valid @[Cache.scala 676:17]
    Cache.io.in.resp.ready <= EmbeddedTLB.io.out.resp.ready @[Cache.scala 676:17]
    Cache.io.in.req.bits.user <= EmbeddedTLB.io.out.req.bits.user @[Cache.scala 676:17]
    Cache.io.in.req.bits.wdata <= EmbeddedTLB.io.out.req.bits.wdata @[Cache.scala 676:17]
    Cache.io.in.req.bits.wmask <= EmbeddedTLB.io.out.req.bits.wmask @[Cache.scala 676:17]
    Cache.io.in.req.bits.cmd <= EmbeddedTLB.io.out.req.bits.cmd @[Cache.scala 676:17]
    Cache.io.in.req.bits.size <= EmbeddedTLB.io.out.req.bits.size @[Cache.scala 676:17]
    Cache.io.in.req.bits.addr <= EmbeddedTLB.io.out.req.bits.addr @[Cache.scala 676:17]
    Cache.io.in.req.valid <= EmbeddedTLB.io.out.req.valid @[Cache.scala 676:17]
    EmbeddedTLB.io.out.req.ready <= Cache.io.in.req.ready @[Cache.scala 676:17]
    Cache.io.mmio.resp.bits.rdata <= SimpleBusCrossbarNto1.io.in[0].resp.bits.rdata @[Cache.scala 677:13]
    Cache.io.mmio.resp.bits.cmd <= SimpleBusCrossbarNto1.io.in[0].resp.bits.cmd @[Cache.scala 677:13]
    Cache.io.mmio.resp.valid <= SimpleBusCrossbarNto1.io.in[0].resp.valid @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].resp.ready <= Cache.io.mmio.resp.ready @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.wdata <= Cache.io.mmio.req.bits.wdata @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.wmask <= Cache.io.mmio.req.bits.wmask @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.cmd <= Cache.io.mmio.req.bits.cmd @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.size <= Cache.io.mmio.req.bits.size @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].req.bits.addr <= Cache.io.mmio.req.bits.addr @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[0].req.valid <= Cache.io.mmio.req.valid @[Cache.scala 677:13]
    Cache.io.mmio.req.ready <= SimpleBusCrossbarNto1.io.in[0].req.ready @[Cache.scala 677:13]
    EmbeddedTLB.io.cacheEmpty <= Cache.io.empty @[Cache.scala 678:11]
    io.imem.coh.resp.bits.rdata <= Cache.io.out.coh.resp.bits.rdata @[NutCore.scala 155:13]
    io.imem.coh.resp.bits.cmd <= Cache.io.out.coh.resp.bits.cmd @[NutCore.scala 155:13]
    io.imem.coh.resp.valid <= Cache.io.out.coh.resp.valid @[NutCore.scala 155:13]
    Cache.io.out.coh.resp.ready <= io.imem.coh.resp.ready @[NutCore.scala 155:13]
    Cache.io.out.coh.req.bits.wdata <= io.imem.coh.req.bits.wdata @[NutCore.scala 155:13]
    Cache.io.out.coh.req.bits.wmask <= io.imem.coh.req.bits.wmask @[NutCore.scala 155:13]
    Cache.io.out.coh.req.bits.cmd <= io.imem.coh.req.bits.cmd @[NutCore.scala 155:13]
    Cache.io.out.coh.req.bits.size <= io.imem.coh.req.bits.size @[NutCore.scala 155:13]
    Cache.io.out.coh.req.bits.addr <= io.imem.coh.req.bits.addr @[NutCore.scala 155:13]
    Cache.io.out.coh.req.valid <= io.imem.coh.req.valid @[NutCore.scala 155:13]
    io.imem.coh.req.ready <= Cache.io.out.coh.req.ready @[NutCore.scala 155:13]
    Cache.io.out.mem.resp.bits.rdata <= io.imem.mem.resp.bits.rdata @[NutCore.scala 155:13]
    Cache.io.out.mem.resp.bits.cmd <= io.imem.mem.resp.bits.cmd @[NutCore.scala 155:13]
    Cache.io.out.mem.resp.valid <= io.imem.mem.resp.valid @[NutCore.scala 155:13]
    io.imem.mem.resp.ready <= Cache.io.out.mem.resp.ready @[NutCore.scala 155:13]
    io.imem.mem.req.bits.wdata <= Cache.io.out.mem.req.bits.wdata @[NutCore.scala 155:13]
    io.imem.mem.req.bits.wmask <= Cache.io.out.mem.req.bits.wmask @[NutCore.scala 155:13]
    io.imem.mem.req.bits.cmd <= Cache.io.out.mem.req.bits.cmd @[NutCore.scala 155:13]
    io.imem.mem.req.bits.size <= Cache.io.out.mem.req.bits.size @[NutCore.scala 155:13]
    io.imem.mem.req.bits.addr <= Cache.io.out.mem.req.bits.addr @[NutCore.scala 155:13]
    io.imem.mem.req.valid <= Cache.io.out.mem.req.valid @[NutCore.scala 155:13]
    Cache.io.out.mem.req.ready <= io.imem.mem.req.ready @[NutCore.scala 155:13]
    inst EmbeddedTLB_1 of EmbeddedTLB_1 @[EmbeddedTLB.scala 421:23]
    EmbeddedTLB_1.clock <= clock
    EmbeddedTLB_1.reset <= reset
    Backend_inorder.io.dmem.resp.bits.rdata <= EmbeddedTLB_1.io.in.resp.bits.rdata @[EmbeddedTLB.scala 422:17]
    Backend_inorder.io.dmem.resp.bits.cmd <= EmbeddedTLB_1.io.in.resp.bits.cmd @[EmbeddedTLB.scala 422:17]
    Backend_inorder.io.dmem.resp.valid <= EmbeddedTLB_1.io.in.resp.valid @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.resp.ready <= Backend_inorder.io.dmem.resp.ready @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.req.bits.wdata <= Backend_inorder.io.dmem.req.bits.wdata @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.req.bits.wmask <= Backend_inorder.io.dmem.req.bits.wmask @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.req.bits.cmd <= Backend_inorder.io.dmem.req.bits.cmd @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.req.bits.size <= Backend_inorder.io.dmem.req.bits.size @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.req.bits.addr <= Backend_inorder.io.dmem.req.bits.addr @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.in.req.valid <= Backend_inorder.io.dmem.req.valid @[EmbeddedTLB.scala 422:17]
    Backend_inorder.io.dmem.req.ready <= EmbeddedTLB_1.io.in.req.ready @[EmbeddedTLB.scala 422:17]
    EmbeddedTLB_1.io.mem.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[2].resp.bits.rdata @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB_1.io.mem.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[2].resp.bits.cmd @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB_1.io.mem.resp.valid <= SimpleBusCrossbarNto1_1.io.in[2].resp.valid @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].resp.ready <= EmbeddedTLB_1.io.mem.resp.ready @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.wdata <= EmbeddedTLB_1.io.mem.req.bits.wdata @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.wmask <= EmbeddedTLB_1.io.mem.req.bits.wmask @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.cmd <= EmbeddedTLB_1.io.mem.req.bits.cmd @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.size <= EmbeddedTLB_1.io.mem.req.bits.size @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.bits.addr <= EmbeddedTLB_1.io.mem.req.bits.addr @[EmbeddedTLB.scala 423:18]
    SimpleBusCrossbarNto1_1.io.in[2].req.valid <= EmbeddedTLB_1.io.mem.req.valid @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB_1.io.mem.req.ready <= SimpleBusCrossbarNto1_1.io.in[2].req.ready @[EmbeddedTLB.scala 423:18]
    EmbeddedTLB_1.io.flush <= UInt<1>("h0") @[EmbeddedTLB.scala 424:20]
    Backend_inorder.io.memMMU.dmem.addr <= EmbeddedTLB_1.io.csrMMU.addr @[EmbeddedTLB.scala 425:21]
    Backend_inorder.io.memMMU.dmem.storePF <= EmbeddedTLB_1.io.csrMMU.storePF @[EmbeddedTLB.scala 425:21]
    Backend_inorder.io.memMMU.dmem.loadPF <= EmbeddedTLB_1.io.csrMMU.loadPF @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB_1.io.csrMMU.status_mxr <= Backend_inorder.io.memMMU.dmem.status_mxr @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB_1.io.csrMMU.status_sum <= Backend_inorder.io.memMMU.dmem.status_sum @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB_1.io.csrMMU.priviledgeMode <= Backend_inorder.io.memMMU.dmem.priviledgeMode @[EmbeddedTLB.scala 425:21]
    EmbeddedTLB_1.io.out.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[0].resp.bits.rdata @[NutCore.scala 159:23]
    EmbeddedTLB_1.io.out.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[0].resp.bits.cmd @[NutCore.scala 159:23]
    EmbeddedTLB_1.io.out.resp.valid <= SimpleBusCrossbarNto1_1.io.in[0].resp.valid @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].resp.ready <= EmbeddedTLB_1.io.out.resp.ready @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.wdata <= EmbeddedTLB_1.io.out.req.bits.wdata @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.wmask <= EmbeddedTLB_1.io.out.req.bits.wmask @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.cmd <= EmbeddedTLB_1.io.out.req.bits.cmd @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.size <= EmbeddedTLB_1.io.out.req.bits.size @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.bits.addr <= EmbeddedTLB_1.io.out.req.bits.addr @[NutCore.scala 159:23]
    SimpleBusCrossbarNto1_1.io.in[0].req.valid <= EmbeddedTLB_1.io.out.req.valid @[NutCore.scala 159:23]
    EmbeddedTLB_1.io.out.req.ready <= SimpleBusCrossbarNto1_1.io.in[0].req.ready @[NutCore.scala 159:23]
    inst Cache_1 of Cache_1 @[Cache.scala 670:35]
    Cache_1.clock <= clock
    Cache_1.reset <= reset
    Cache_1.io.flush <= UInt<1>("h0") @[Cache.scala 675:20]
    SimpleBusCrossbarNto1_1.io.out.resp.bits.rdata <= Cache_1.io.in.resp.bits.rdata @[Cache.scala 676:17]
    SimpleBusCrossbarNto1_1.io.out.resp.bits.cmd <= Cache_1.io.in.resp.bits.cmd @[Cache.scala 676:17]
    SimpleBusCrossbarNto1_1.io.out.resp.valid <= Cache_1.io.in.resp.valid @[Cache.scala 676:17]
    Cache_1.io.in.resp.ready <= SimpleBusCrossbarNto1_1.io.out.resp.ready @[Cache.scala 676:17]
    Cache_1.io.in.req.bits.wdata <= SimpleBusCrossbarNto1_1.io.out.req.bits.wdata @[Cache.scala 676:17]
    Cache_1.io.in.req.bits.wmask <= SimpleBusCrossbarNto1_1.io.out.req.bits.wmask @[Cache.scala 676:17]
    Cache_1.io.in.req.bits.cmd <= SimpleBusCrossbarNto1_1.io.out.req.bits.cmd @[Cache.scala 676:17]
    Cache_1.io.in.req.bits.size <= SimpleBusCrossbarNto1_1.io.out.req.bits.size @[Cache.scala 676:17]
    Cache_1.io.in.req.bits.addr <= SimpleBusCrossbarNto1_1.io.out.req.bits.addr @[Cache.scala 676:17]
    Cache_1.io.in.req.valid <= SimpleBusCrossbarNto1_1.io.out.req.valid @[Cache.scala 676:17]
    SimpleBusCrossbarNto1_1.io.out.req.ready <= Cache_1.io.in.req.ready @[Cache.scala 676:17]
    Cache_1.io.mmio.resp.bits.rdata <= SimpleBusCrossbarNto1.io.in[1].resp.bits.rdata @[Cache.scala 677:13]
    Cache_1.io.mmio.resp.bits.cmd <= SimpleBusCrossbarNto1.io.in[1].resp.bits.cmd @[Cache.scala 677:13]
    Cache_1.io.mmio.resp.valid <= SimpleBusCrossbarNto1.io.in[1].resp.valid @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].resp.ready <= Cache_1.io.mmio.resp.ready @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.wdata <= Cache_1.io.mmio.req.bits.wdata @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.wmask <= Cache_1.io.mmio.req.bits.wmask @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.cmd <= Cache_1.io.mmio.req.bits.cmd @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.size <= Cache_1.io.mmio.req.bits.size @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].req.bits.addr <= Cache_1.io.mmio.req.bits.addr @[Cache.scala 677:13]
    SimpleBusCrossbarNto1.io.in[1].req.valid <= Cache_1.io.mmio.req.valid @[Cache.scala 677:13]
    Cache_1.io.mmio.req.ready <= SimpleBusCrossbarNto1.io.in[1].req.ready @[Cache.scala 677:13]
    EmbeddedTLB_1.io.cacheEmpty <= Cache_1.io.empty @[Cache.scala 678:11]
    io.dmem.coh.resp.bits.rdata <= Cache_1.io.out.coh.resp.bits.rdata @[NutCore.scala 160:13]
    io.dmem.coh.resp.bits.cmd <= Cache_1.io.out.coh.resp.bits.cmd @[NutCore.scala 160:13]
    io.dmem.coh.resp.valid <= Cache_1.io.out.coh.resp.valid @[NutCore.scala 160:13]
    Cache_1.io.out.coh.resp.ready <= io.dmem.coh.resp.ready @[NutCore.scala 160:13]
    Cache_1.io.out.coh.req.bits.wdata <= io.dmem.coh.req.bits.wdata @[NutCore.scala 160:13]
    Cache_1.io.out.coh.req.bits.wmask <= io.dmem.coh.req.bits.wmask @[NutCore.scala 160:13]
    Cache_1.io.out.coh.req.bits.cmd <= io.dmem.coh.req.bits.cmd @[NutCore.scala 160:13]
    Cache_1.io.out.coh.req.bits.size <= io.dmem.coh.req.bits.size @[NutCore.scala 160:13]
    Cache_1.io.out.coh.req.bits.addr <= io.dmem.coh.req.bits.addr @[NutCore.scala 160:13]
    Cache_1.io.out.coh.req.valid <= io.dmem.coh.req.valid @[NutCore.scala 160:13]
    io.dmem.coh.req.ready <= Cache_1.io.out.coh.req.ready @[NutCore.scala 160:13]
    Cache_1.io.out.mem.resp.bits.rdata <= io.dmem.mem.resp.bits.rdata @[NutCore.scala 160:13]
    Cache_1.io.out.mem.resp.bits.cmd <= io.dmem.mem.resp.bits.cmd @[NutCore.scala 160:13]
    Cache_1.io.out.mem.resp.valid <= io.dmem.mem.resp.valid @[NutCore.scala 160:13]
    io.dmem.mem.resp.ready <= Cache_1.io.out.mem.resp.ready @[NutCore.scala 160:13]
    io.dmem.mem.req.bits.wdata <= Cache_1.io.out.mem.req.bits.wdata @[NutCore.scala 160:13]
    io.dmem.mem.req.bits.wmask <= Cache_1.io.out.mem.req.bits.wmask @[NutCore.scala 160:13]
    io.dmem.mem.req.bits.cmd <= Cache_1.io.out.mem.req.bits.cmd @[NutCore.scala 160:13]
    io.dmem.mem.req.bits.size <= Cache_1.io.out.mem.req.bits.size @[NutCore.scala 160:13]
    io.dmem.mem.req.bits.addr <= Cache_1.io.out.mem.req.bits.addr @[NutCore.scala 160:13]
    io.dmem.mem.req.valid <= Cache_1.io.out.mem.req.valid @[NutCore.scala 160:13]
    Cache_1.io.out.mem.req.ready <= io.dmem.mem.req.ready @[NutCore.scala 160:13]
    frontend.io.redirect.valid <= Backend_inorder.io.redirect.valid @[NutCore.scala 163:26]
    frontend.io.redirect.rtype <= Backend_inorder.io.redirect.rtype @[NutCore.scala 163:26]
    frontend.io.redirect.target <= Backend_inorder.io.redirect.target @[NutCore.scala 163:26]
    node _T_51 = bits(frontend.io.flushVec, 3, 2) @[NutCore.scala 164:45]
    Backend_inorder.io.flush <= _T_51 @[NutCore.scala 164:22]
    io.frontend.resp.bits.rdata <= SimpleBusCrossbarNto1_1.io.in[3].resp.bits.rdata @[NutCore.scala 167:23]
    io.frontend.resp.bits.cmd <= SimpleBusCrossbarNto1_1.io.in[3].resp.bits.cmd @[NutCore.scala 167:23]
    io.frontend.resp.valid <= SimpleBusCrossbarNto1_1.io.in[3].resp.valid @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].resp.ready <= io.frontend.resp.ready @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.wdata <= io.frontend.req.bits.wdata @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.wmask <= io.frontend.req.bits.wmask @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.cmd <= io.frontend.req.bits.cmd @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.size <= io.frontend.req.bits.size @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.bits.addr <= io.frontend.req.bits.addr @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1_1.io.in[3].req.valid <= io.frontend.req.valid @[NutCore.scala 167:23]
    io.frontend.req.ready <= SimpleBusCrossbarNto1_1.io.in[3].req.ready @[NutCore.scala 167:23]
    SimpleBusCrossbarNto1.io.out.resp.bits.rdata <= io.mmio.resp.bits.rdata @[NutCore.scala 169:13]
    SimpleBusCrossbarNto1.io.out.resp.bits.cmd <= io.mmio.resp.bits.cmd @[NutCore.scala 169:13]
    SimpleBusCrossbarNto1.io.out.resp.valid <= io.mmio.resp.valid @[NutCore.scala 169:13]
    io.mmio.resp.ready <= SimpleBusCrossbarNto1.io.out.resp.ready @[NutCore.scala 169:13]
    io.mmio.req.bits.wdata <= SimpleBusCrossbarNto1.io.out.req.bits.wdata @[NutCore.scala 169:13]
    io.mmio.req.bits.wmask <= SimpleBusCrossbarNto1.io.out.req.bits.wmask @[NutCore.scala 169:13]
    io.mmio.req.bits.cmd <= SimpleBusCrossbarNto1.io.out.req.bits.cmd @[NutCore.scala 169:13]
    io.mmio.req.bits.size <= SimpleBusCrossbarNto1.io.out.req.bits.size @[NutCore.scala 169:13]
    io.mmio.req.bits.addr <= SimpleBusCrossbarNto1.io.out.req.bits.addr @[NutCore.scala 169:13]
    io.mmio.req.valid <= SimpleBusCrossbarNto1.io.out.req.valid @[NutCore.scala 169:13]
    SimpleBusCrossbarNto1.io.out.req.ready <= io.mmio.req.ready @[NutCore.scala 169:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_52 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_53 = tail(_T_52, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_53 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_54 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
    when _T_54 : @[Debug.scala 55:31]
      node _T_55 = asUInt(reset) @[Debug.scala 56:24]
      node _T_56 = eq(_T_55, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_56 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] NutCore: ", REG_3) : SIM_1 @[Debug.scala 56:24]
      node _T_57 = asUInt(reset) @[Debug.scala 57:13]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_58 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "------------------------ BACKEND ------------------------\n") : SIM_2 @[Debug.scala 57:13]

  module CoherenceManager :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Coherence.scala 45:22]
    node inflight = neq(state, UInt<3>("h0")) @[Coherence.scala 46:24]
    node _T = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Coherence.scala 49:29]
    node _T_6 = and(io.in.req.valid, _T_5) @[Coherence.scala 49:26]
    node _T_7 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[Coherence.scala 49:55]
    node _T_9 = and(_T_6, _T_8) @[Coherence.scala 49:52]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Coherence.scala 49:10]
    node _T_11 = asUInt(reset) @[Coherence.scala 49:9]
    node _T_12 = or(_T_10, _T_11) @[Coherence.scala 49:9]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[Coherence.scala 49:9]
    when _T_13 : @[Coherence.scala 49:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Coherence.scala:49 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") : SIM @[Coherence.scala 49:9]
      stop(clock, UInt<1>("h1"), 1) @[Coherence.scala 49:9]
    node _T_14 = eq(inflight, UInt<1>("h0")) @[Coherence.scala 52:42]
    node _T_15 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_17 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_19 = and(_T_16, _T_18) @[SimpleBus.scala 73:26]
    node _T_20 = and(_T_14, _T_19) @[Coherence.scala 52:52]
    reg reqLatch : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), reqLatch) @[Reg.scala 15:16]
    when _T_20 : @[Reg.scala 16:19]
      reqLatch.wdata <= io.in.req.bits.wdata @[Reg.scala 16:23]
      reqLatch.wmask <= io.in.req.bits.wmask @[Reg.scala 16:23]
      reqLatch.cmd <= io.in.req.bits.cmd @[Reg.scala 16:23]
      reqLatch.size <= io.in.req.bits.size @[Reg.scala 16:23]
      reqLatch.addr <= io.in.req.bits.addr @[Reg.scala 16:23]
    io.out.coh.req.bits.wdata <= io.in.req.bits.wdata @[Coherence.scala 54:16]
    io.out.coh.req.bits.wmask <= io.in.req.bits.wmask @[Coherence.scala 54:16]
    io.out.coh.req.bits.cmd <= io.in.req.bits.cmd @[Coherence.scala 54:16]
    io.out.coh.req.bits.size <= io.in.req.bits.size @[Coherence.scala 54:16]
    io.out.coh.req.bits.addr <= io.in.req.bits.addr @[Coherence.scala 54:16]
    io.out.coh.req.bits.cmd <= UInt<4>("h8") @[Coherence.scala 55:20]
    io.out.coh.resp.ready <= UInt<1>("h1") @[Coherence.scala 56:18]
    io.out.mem.req.bits.wdata <= io.in.req.bits.wdata @[Coherence.scala 59:23]
    io.out.mem.req.bits.wmask <= io.in.req.bits.wmask @[Coherence.scala 59:23]
    io.out.mem.req.bits.cmd <= io.in.req.bits.cmd @[Coherence.scala 59:23]
    io.out.mem.req.bits.size <= io.in.req.bits.size @[Coherence.scala 59:23]
    io.out.mem.req.bits.addr <= io.in.req.bits.addr @[Coherence.scala 59:23]
    io.out.mem.req.valid <= UInt<1>("h0") @[Coherence.scala 61:24]
    io.in.req.ready <= UInt<1>("h0") @[Coherence.scala 62:17]
    io.out.coh.req.valid <= UInt<1>("h0") @[Coherence.scala 63:24]
    node _T_21 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    when _T_21 : @[Coherence.scala 64:61]
      node _T_22 = eq(inflight, UInt<1>("h0")) @[Coherence.scala 65:46]
      node _T_23 = and(io.in.req.valid, _T_22) @[Coherence.scala 65:43]
      io.out.mem.req.valid <= _T_23 @[Coherence.scala 65:26]
      node _T_24 = eq(inflight, UInt<1>("h0")) @[Coherence.scala 66:46]
      node _T_25 = and(io.out.mem.req.ready, _T_24) @[Coherence.scala 66:43]
      io.in.req.ready <= _T_25 @[Coherence.scala 66:19]
    else :
      node _T_26 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
      node _T_27 = eq(_T_26, UInt<1>("h0")) @[SimpleBus.scala 73:18]
      node _T_28 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
      node _T_29 = eq(_T_28, UInt<1>("h0")) @[SimpleBus.scala 73:29]
      node _T_30 = and(_T_27, _T_29) @[SimpleBus.scala 73:26]
      when _T_30 : @[Coherence.scala 67:39]
        node _T_31 = eq(inflight, UInt<1>("h0")) @[Coherence.scala 68:46]
        node _T_32 = and(io.in.req.valid, _T_31) @[Coherence.scala 68:43]
        io.out.coh.req.valid <= _T_32 @[Coherence.scala 68:26]
        node _T_33 = eq(inflight, UInt<1>("h0")) @[Coherence.scala 69:46]
        node _T_34 = and(io.out.coh.req.ready, _T_33) @[Coherence.scala 69:43]
        io.in.req.ready <= _T_34 @[Coherence.scala 69:19]
    io.in.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Coherence.scala 72:14]
    io.in.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Coherence.scala 72:14]
    io.in.resp.valid <= io.out.mem.resp.valid @[Coherence.scala 72:14]
    io.out.mem.resp.ready <= io.in.resp.ready @[Coherence.scala 72:14]
    node _T_35 = eq(UInt<3>("h0"), state) @[Coherence.scala 74:18]
    when _T_35 : @[Coherence.scala 74:18]
      node _T_36 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
      when _T_36 : @[Coherence.scala 76:29]
        node _T_37 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_38 = eq(_T_37, UInt<1>("h0")) @[SimpleBus.scala 73:18]
        node _T_39 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_40 = eq(_T_39, UInt<1>("h0")) @[SimpleBus.scala 73:29]
        node _T_41 = and(_T_38, _T_40) @[SimpleBus.scala 73:26]
        when _T_41 : @[Coherence.scala 77:38]
          node _T_42 = mux(UInt<1>("h1"), UInt<3>("h1"), UInt<3>("h4")) @[Coherence.scala 77:52]
          state <= _T_42 @[Coherence.scala 77:46]
        else :
          node _T_43 = eq(io.in.req.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
          when _T_43 : @[Coherence.scala 78:48]
            state <= UInt<3>("h5") @[Coherence.scala 78:56]
    else :
      node _T_44 = eq(UInt<3>("h1"), state) @[Coherence.scala 74:18]
      when _T_44 : @[Coherence.scala 74:18]
        node _T_45 = and(io.out.coh.resp.ready, io.out.coh.resp.valid) @[Decoupled.scala 40:37]
        when _T_45 : @[Coherence.scala 82:37]
          node _T_46 = eq(io.out.coh.resp.bits.cmd, UInt<4>("hc")) @[SimpleBus.scala 92:26]
          node _T_47 = mux(_T_46, UInt<3>("h2"), UInt<3>("h3")) @[Coherence.scala 83:21]
          state <= _T_47 @[Coherence.scala 83:15]
      else :
        node _T_48 = eq(UInt<3>("h2"), state) @[Coherence.scala 74:18]
        when _T_48 : @[Coherence.scala 74:18]
          io.in.resp.bits.rdata <= io.out.coh.resp.bits.rdata @[Coherence.scala 88:16]
          io.in.resp.bits.cmd <= io.out.coh.resp.bits.cmd @[Coherence.scala 88:16]
          io.in.resp.valid <= io.out.coh.resp.valid @[Coherence.scala 88:16]
          io.out.coh.resp.ready <= io.in.resp.ready @[Coherence.scala 88:16]
          node _T_49 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
          node _T_50 = eq(io.in.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
          node _T_51 = and(_T_49, _T_50) @[Coherence.scala 89:29]
          when _T_51 : @[Coherence.scala 89:60]
            state <= UInt<3>("h0") @[Coherence.scala 89:68]
        else :
          node _T_52 = eq(UInt<3>("h3"), state) @[Coherence.scala 74:18]
          when _T_52 : @[Coherence.scala 74:18]
            io.out.mem.req.bits.wdata <= reqLatch.wdata @[Coherence.scala 92:27]
            io.out.mem.req.bits.wmask <= reqLatch.wmask @[Coherence.scala 92:27]
            io.out.mem.req.bits.cmd <= reqLatch.cmd @[Coherence.scala 92:27]
            io.out.mem.req.bits.size <= reqLatch.size @[Coherence.scala 92:27]
            io.out.mem.req.bits.addr <= reqLatch.addr @[Coherence.scala 92:27]
            io.out.mem.req.valid <= UInt<1>("h1") @[Coherence.scala 93:28]
            node _T_53 = and(io.out.mem.req.ready, io.out.mem.req.valid) @[Decoupled.scala 40:37]
            when _T_53 : @[Coherence.scala 94:36]
              state <= UInt<3>("h4") @[Coherence.scala 94:44]
          else :
            node _T_54 = eq(UInt<3>("h4"), state) @[Coherence.scala 74:18]
            when _T_54 : @[Coherence.scala 74:18]
              node _T_55 = and(io.out.mem.resp.ready, io.out.mem.resp.valid) @[Decoupled.scala 40:37]
              node _T_56 = eq(io.out.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
              node _T_57 = and(_T_55, _T_56) @[Coherence.scala 96:55]
              when _T_57 : @[Coherence.scala 96:93]
                state <= UInt<3>("h0") @[Coherence.scala 96:101]
            else :
              node _T_58 = eq(UInt<3>("h5"), state) @[Coherence.scala 74:18]
              when _T_58 : @[Coherence.scala 74:18]
                node _T_59 = and(io.out.mem.resp.ready, io.out.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_59 : @[Coherence.scala 97:57]
                  state <= UInt<3>("h0") @[Coherence.scala 97:65]

  module LockingArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 40:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 41:16]
    io.out.bits.wdata <= io.in[io.chosen].bits.wdata @[Arbiter.scala 42:15]
    io.out.bits.wmask <= io.in[io.chosen].bits.wmask @[Arbiter.scala 42:15]
    io.out.bits.cmd <= io.in[io.chosen].bits.cmd @[Arbiter.scala 42:15]
    io.out.bits.size <= io.in[io.chosen].bits.size @[Arbiter.scala 42:15]
    io.out.bits.addr <= io.in[io.chosen].bits.addr @[Arbiter.scala 42:15]
    reg value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg lockIdx : UInt, clock with :
      reset => (UInt<1>("h0"), lockIdx) @[Arbiter.scala 46:22]
    node locked = neq(value, UInt<1>("h0")) @[Arbiter.scala 47:34]
    node _wantsLock_T = bits(io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _wantsLock_T_1 = bits(io.out.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node wantsLock = and(_wantsLock_T, _wantsLock_T_1) @[Crossbar.scala 100:62]
    node _T = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(_T, wantsLock) @[Arbiter.scala 50:25]
    when _T_1 : @[Arbiter.scala 50:39]
      lockIdx <= io.chosen @[Arbiter.scala 51:15]
      node wrap = eq(value, UInt<3>("h7")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    when locked : @[Arbiter.scala 55:19]
      io.chosen <= lockIdx @[Arbiter.scala 55:31]
    node _T_2 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = eq(lockIdx, UInt<1>("h0")) @[Arbiter.scala 57:39]
    node _io_in_0_ready_T_1 = mux(locked, _io_in_0_ready_T, UInt<1>("h1")) @[Arbiter.scala 57:22]
    node _io_in_0_ready_T_2 = and(_io_in_0_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[0].ready <= _io_in_0_ready_T_2 @[Arbiter.scala 57:16]
    node _io_in_1_ready_T = eq(lockIdx, UInt<1>("h1")) @[Arbiter.scala 57:39]
    node _io_in_1_ready_T_1 = mux(locked, _io_in_1_ready_T, _T_2) @[Arbiter.scala 57:22]
    node _io_in_1_ready_T_2 = and(_io_in_1_ready_T_1, io.out.ready) @[Arbiter.scala 57:56]
    io.in[1].ready <= _io_in_1_ready_T_2 @[Arbiter.scala 57:16]
    when io.in[0].valid : @[Arbiter.scala 88:27]
      choice <= UInt<1>("h0") @[Arbiter.scala 88:36]

  module SimpleBusCrossbarNto1_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}[2], out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Crossbar.scala 98:22]
    inst inputArb of LockingArbiter_2 @[Crossbar.scala 101:24]
    inputArb.clock <= clock
    inputArb.reset <= reset
    inputArb.io.in[0].bits.wdata <= io.in[0].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.wmask <= io.in[0].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.cmd <= io.in[0].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.size <= io.in[0].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[0].bits.addr <= io.in[0].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[0].valid <= io.in[0].req.valid @[Crossbar.scala 102:68]
    io.in[0].req.ready <= inputArb.io.in[0].ready @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wdata <= io.in[1].req.bits.wdata @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.wmask <= io.in[1].req.bits.wmask @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.cmd <= io.in[1].req.bits.cmd @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.size <= io.in[1].req.bits.size @[Crossbar.scala 102:68]
    inputArb.io.in[1].bits.addr <= io.in[1].req.bits.addr @[Crossbar.scala 102:68]
    inputArb.io.in[1].valid <= io.in[1].req.valid @[Crossbar.scala 102:68]
    io.in[1].req.ready <= inputArb.io.in[1].ready @[Crossbar.scala 102:68]
    node _T = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Crossbar.scala 104:29]
    node _T_6 = and(inputArb.io.out.valid, _T_5) @[Crossbar.scala 104:26]
    node _T_7 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[Crossbar.scala 104:55]
    node _T_9 = and(_T_6, _T_8) @[Crossbar.scala 104:52]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Crossbar.scala 104:10]
    node _T_11 = asUInt(reset) @[Crossbar.scala 104:9]
    node _T_12 = or(_T_10, _T_11) @[Crossbar.scala 104:9]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[Crossbar.scala 104:9]
    when _T_13 : @[Crossbar.scala 104:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Crossbar.scala:104 assert(!(thisReq.valid && !thisReq.bits.isRead() && !thisReq.bits.isWrite()))\n") : SIM @[Crossbar.scala 104:9]
      stop(clock, UInt<1>("h1"), 1) @[Crossbar.scala 104:9]
    reg inflightSrc : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflightSrc) @[Crossbar.scala 105:24]
    io.out.req.bits.wdata <= inputArb.io.out.bits.wdata @[Crossbar.scala 107:19]
    io.out.req.bits.wmask <= inputArb.io.out.bits.wmask @[Crossbar.scala 107:19]
    io.out.req.bits.cmd <= inputArb.io.out.bits.cmd @[Crossbar.scala 107:19]
    io.out.req.bits.size <= inputArb.io.out.bits.size @[Crossbar.scala 107:19]
    io.out.req.bits.addr <= inputArb.io.out.bits.addr @[Crossbar.scala 107:19]
    node _T_14 = eq(state, UInt<2>("h0")) @[Crossbar.scala 109:47]
    node _T_15 = and(inputArb.io.out.valid, _T_14) @[Crossbar.scala 109:37]
    io.out.req.valid <= _T_15 @[Crossbar.scala 109:20]
    node _T_16 = eq(state, UInt<2>("h0")) @[Crossbar.scala 110:47]
    node _T_17 = and(io.out.req.ready, _T_16) @[Crossbar.scala 110:37]
    inputArb.io.out.ready <= _T_17 @[Crossbar.scala 110:17]
    io.in[0].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[0].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[1].resp.bits.rdata <= io.out.resp.bits.rdata @[Crossbar.scala 112:25]
    io.in[1].resp.bits.cmd <= io.out.resp.bits.cmd @[Crossbar.scala 112:25]
    io.in[0].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[1].resp.valid <= UInt<1>("h0") @[Crossbar.scala 113:26]
    io.in[inflightSrc].resp.valid <= io.out.resp.valid @[Crossbar.scala 115:13]
    io.out.resp.ready <= io.in[inflightSrc].resp.ready @[Crossbar.scala 116:13]
    node _T_18 = eq(UInt<2>("h0"), state) @[Crossbar.scala 119:18]
    when _T_18 : @[Crossbar.scala 119:18]
      node _T_19 = and(inputArb.io.out.ready, inputArb.io.out.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[Crossbar.scala 121:29]
        inflightSrc <= inputArb.io.chosen @[Crossbar.scala 122:21]
        node _T_20 = bits(inputArb.io.out.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
        node _T_21 = eq(_T_20, UInt<1>("h0")) @[SimpleBus.scala 73:18]
        node _T_22 = bits(inputArb.io.out.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
        node _T_23 = eq(_T_22, UInt<1>("h0")) @[SimpleBus.scala 73:29]
        node _T_24 = and(_T_21, _T_23) @[SimpleBus.scala 73:26]
        when _T_24 : @[Crossbar.scala 123:38]
          state <= UInt<2>("h1") @[Crossbar.scala 123:46]
        else :
          node _T_25 = eq(inputArb.io.out.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
          node _T_26 = eq(inputArb.io.out.bits.cmd, UInt<1>("h1")) @[SimpleBus.scala 77:29]
          node _T_27 = or(_T_25, _T_26) @[Crossbar.scala 124:47]
          when _T_27 : @[Crossbar.scala 124:80]
            state <= UInt<2>("h2") @[Crossbar.scala 124:88]
    else :
      node _T_28 = eq(UInt<2>("h1"), state) @[Crossbar.scala 119:18]
      when _T_28 : @[Crossbar.scala 119:18]
        node _T_29 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
        node _T_30 = eq(io.out.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
        node _T_31 = and(_T_29, _T_30) @[Crossbar.scala 127:48]
        when _T_31 : @[Crossbar.scala 127:82]
          state <= UInt<2>("h0") @[Crossbar.scala 127:90]
      else :
        node _T_32 = eq(UInt<2>("h2"), state) @[Crossbar.scala 119:18]
        when _T_32 : @[Crossbar.scala 119:18]
          node _T_33 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
          when _T_33 : @[Crossbar.scala 128:50]
            state <= UInt<2>("h0") @[Crossbar.scala 128:58]

  module AXI42SimpleBusConverter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<18>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<18>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<18>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<18>, user : UInt<1>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}

    reg inflight_id_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 38:32]
    reg inflight_type : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[ToAXI4.scala 40:30]
    wire default_mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}} @[ToAXI4.scala 57:33]
    default_mem.resp.bits.rdata <= UInt<64>("h0") @[ToAXI4.scala 57:33]
    default_mem.resp.bits.cmd <= UInt<4>("h0") @[ToAXI4.scala 57:33]
    default_mem.resp.valid <= UInt<1>("h0") @[ToAXI4.scala 57:33]
    default_mem.resp.ready <= UInt<1>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.bits.wdata <= UInt<64>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.bits.wmask <= UInt<8>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.bits.cmd <= UInt<4>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.bits.size <= UInt<3>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.bits.addr <= UInt<32>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.valid <= UInt<1>("h0") @[ToAXI4.scala 57:33]
    default_mem.req.ready <= UInt<1>("h0") @[ToAXI4.scala 57:33]
    wire default_axi : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}} @[ToAXI4.scala 58:33]
    default_axi.r.bits.user <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.r.bits.id <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.r.bits.last <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.r.bits.data <= UInt<64>("h0") @[ToAXI4.scala 58:33]
    default_axi.r.bits.resp <= UInt<2>("h0") @[ToAXI4.scala 58:33]
    default_axi.r.valid <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.r.ready <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.qos <= UInt<4>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.cache <= UInt<4>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.lock <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.burst <= UInt<2>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.size <= UInt<3>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.len <= UInt<8>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.user <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.id <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.prot <= UInt<3>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.bits.addr <= UInt<32>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.valid <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.ar.ready <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.b.bits.user <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.b.bits.id <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.b.bits.resp <= UInt<2>("h0") @[ToAXI4.scala 58:33]
    default_axi.b.valid <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.b.ready <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.w.bits.last <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.w.bits.strb <= UInt<8>("h0") @[ToAXI4.scala 58:33]
    default_axi.w.bits.data <= UInt<64>("h0") @[ToAXI4.scala 58:33]
    default_axi.w.valid <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.w.ready <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.qos <= UInt<4>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.cache <= UInt<4>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.lock <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.burst <= UInt<2>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.size <= UInt<3>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.len <= UInt<8>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.user <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.id <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.prot <= UInt<3>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.bits.addr <= UInt<32>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.valid <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    default_axi.aw.ready <= UInt<1>("h0") @[ToAXI4.scala 58:33]
    io.out.req.bits.wdata <= default_mem.req.bits.wdata @[ToAXI4.scala 59:7]
    io.out.req.bits.wmask <= default_mem.req.bits.wmask @[ToAXI4.scala 59:7]
    io.out.req.bits.cmd <= default_mem.req.bits.cmd @[ToAXI4.scala 59:7]
    io.out.req.bits.size <= default_mem.req.bits.size @[ToAXI4.scala 59:7]
    io.out.req.bits.addr <= default_mem.req.bits.addr @[ToAXI4.scala 59:7]
    io.in.r.bits.user <= default_axi.r.bits.user @[ToAXI4.scala 60:5]
    io.in.r.bits.id <= default_axi.r.bits.id @[ToAXI4.scala 60:5]
    io.in.r.bits.last <= default_axi.r.bits.last @[ToAXI4.scala 60:5]
    io.in.r.bits.data <= default_axi.r.bits.data @[ToAXI4.scala 60:5]
    io.in.r.bits.resp <= default_axi.r.bits.resp @[ToAXI4.scala 60:5]
    io.in.b.bits.user <= default_axi.b.bits.user @[ToAXI4.scala 61:5]
    io.in.b.bits.id <= default_axi.b.bits.id @[ToAXI4.scala 61:5]
    io.in.b.bits.resp <= default_axi.b.bits.resp @[ToAXI4.scala 61:5]
    node _T = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
    node _T_1 = eq(_T, UInt<1>("h0")) @[ToAXI4.scala 53:5]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 64:9]
    node _T_3 = and(_T_2, io.in.ar.valid) @[ToAXI4.scala 64:23]
    when _T_3 : @[ToAXI4.scala 64:40]
      io.out.req.valid <= UInt<1>("h1") @[ToAXI4.scala 65:19]
      io.out.req.bits.addr <= io.in.ar.bits.addr @[ToAXI4.scala 66:14]
      node _T_4 = eq(io.in.ar.bits.len, UInt<1>("h0")) @[ToAXI4.scala 67:27]
      node _T_5 = mux(_T_4, UInt<1>("h0"), UInt<2>("h2")) @[ToAXI4.scala 67:19]
      io.out.req.bits.cmd <= _T_5 @[ToAXI4.scala 67:13]
      io.out.req.bits.size <= io.in.ar.bits.size @[ToAXI4.scala 69:14]
      io.out.req.bits.wmask <= UInt<1>("h0") @[ToAXI4.scala 71:15]
      io.out.req.bits.wdata <= UInt<1>("h0") @[ToAXI4.scala 72:15]
      node _T_6 = and(io.out.req.ready, io.out.req.valid) @[Decoupled.scala 40:37]
      when _T_6 : @[ToAXI4.scala 74:25]
        inflight_id_reg <= io.in.ar.bits.id @[ToAXI4.scala 42:21]
        inflight_type <= UInt<2>("h1") @[ToAXI4.scala 43:19]
    node _T_7 = eq(inflight_type, UInt<2>("h1")) @[ToAXI4.scala 50:19]
    node _T_8 = and(_T_7, io.out.resp.valid) @[ToAXI4.scala 79:27]
    when _T_8 : @[ToAXI4.scala 79:46]
      io.in.r.valid <= UInt<1>("h1") @[ToAXI4.scala 80:17]
      io.in.r.bits.data <= io.out.resp.bits.rdata @[ToAXI4.scala 81:12]
      io.in.r.bits.id <= inflight_id_reg @[ToAXI4.scala 82:10]
      io.in.r.bits.resp <= UInt<2>("h0") @[ToAXI4.scala 84:12]
      node _T_9 = eq(io.out.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
      io.in.r.bits.last <= _T_9 @[ToAXI4.scala 85:12]
      node _T_10 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
      node _T_11 = eq(io.out.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
      node _T_12 = and(_T_10, _T_11) @[ToAXI4.scala 88:22]
      when _T_12 : @[ToAXI4.scala 88:42]
        inflight_type <= UInt<2>("h0") @[ToAXI4.scala 46:19]
        inflight_id_reg <= UInt<1>("h0") @[ToAXI4.scala 47:21]
    reg aw_reg : { addr : UInt<32>, prot : UInt<3>, id : UInt<18>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), aw_reg) @[ToAXI4.scala 94:19]
    reg bresp_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 95:25]
    node _T_13 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[ToAXI4.scala 53:5]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[ToAXI4.scala 97:9]
    node _T_16 = and(_T_15, io.in.aw.valid) @[ToAXI4.scala 97:23]
    node _T_17 = eq(io.in.ar.valid, UInt<1>("h0")) @[ToAXI4.scala 97:42]
    node _T_18 = and(_T_16, _T_17) @[ToAXI4.scala 97:39]
    when _T_18 : @[ToAXI4.scala 97:57]
      aw_reg.qos <= io.in.aw.bits.qos @[ToAXI4.scala 98:12]
      aw_reg.cache <= io.in.aw.bits.cache @[ToAXI4.scala 98:12]
      aw_reg.lock <= io.in.aw.bits.lock @[ToAXI4.scala 98:12]
      aw_reg.burst <= io.in.aw.bits.burst @[ToAXI4.scala 98:12]
      aw_reg.size <= io.in.aw.bits.size @[ToAXI4.scala 98:12]
      aw_reg.len <= io.in.aw.bits.len @[ToAXI4.scala 98:12]
      aw_reg.user <= io.in.aw.bits.user @[ToAXI4.scala 98:12]
      aw_reg.id <= io.in.aw.bits.id @[ToAXI4.scala 98:12]
      aw_reg.prot <= io.in.aw.bits.prot @[ToAXI4.scala 98:12]
      aw_reg.addr <= io.in.aw.bits.addr @[ToAXI4.scala 98:12]
      node _T_19 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
      when _T_19 : @[ToAXI4.scala 100:24]
        inflight_id_reg <= io.in.aw.bits.id @[ToAXI4.scala 42:21]
        inflight_type <= UInt<2>("h2") @[ToAXI4.scala 43:19]
    node _T_20 = eq(inflight_type, UInt<2>("h2")) @[ToAXI4.scala 50:19]
    node _T_21 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_22 = and(_T_20, _T_21) @[ToAXI4.scala 105:28]
    when _T_22 : @[ToAXI4.scala 105:45]
      io.out.req.valid <= UInt<1>("h1") @[ToAXI4.scala 106:19]
      node _T_23 = eq(aw_reg.len, UInt<1>("h0")) @[ToAXI4.scala 107:31]
      node _T_24 = mux(io.in.w.bits.last, UInt<3>("h7"), UInt<2>("h3")) @[ToAXI4.scala 108:10]
      node _T_25 = mux(_T_23, UInt<1>("h1"), _T_24) @[ToAXI4.scala 107:19]
      io.out.req.bits.cmd <= _T_25 @[ToAXI4.scala 107:13]
      io.out.req.bits.addr <= aw_reg.addr @[ToAXI4.scala 109:14]
      io.out.req.bits.size <= aw_reg.size @[ToAXI4.scala 110:14]
      io.out.req.bits.wmask <= io.in.w.bits.strb @[ToAXI4.scala 111:15]
      io.out.req.bits.wdata <= io.in.w.bits.data @[ToAXI4.scala 112:15]
      when io.in.w.bits.last : @[ToAXI4.scala 115:19]
        bresp_en <= UInt<1>("h1") @[ToAXI4.scala 116:16]
    node _T_26 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    when _T_26 : @[ToAXI4.scala 120:21]
      bresp_en <= UInt<1>("h0") @[ToAXI4.scala 121:14]
      inflight_type <= UInt<2>("h0") @[ToAXI4.scala 46:19]
      inflight_id_reg <= UInt<1>("h0") @[ToAXI4.scala 47:21]
    node _T_27 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[ToAXI4.scala 53:5]
    node _T_29 = eq(_T_28, UInt<1>("h0")) @[ToAXI4.scala 127:21]
    node _T_30 = and(_T_29, io.in.ar.valid) @[ToAXI4.scala 127:35]
    node _T_31 = eq(inflight_type, UInt<2>("h2")) @[ToAXI4.scala 50:19]
    node _T_32 = and(_T_31, io.in.w.valid) @[ToAXI4.scala 127:75]
    node _T_33 = or(_T_30, _T_32) @[ToAXI4.scala 127:52]
    io.out.req.valid <= _T_33 @[ToAXI4.scala 127:17]
    node _T_34 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
    node _T_35 = eq(_T_34, UInt<1>("h0")) @[ToAXI4.scala 53:5]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[ToAXI4.scala 128:21]
    node _T_37 = eq(inflight_type, UInt<2>("h1")) @[ToAXI4.scala 50:19]
    node _T_38 = and(_T_37, io.in.r.ready) @[ToAXI4.scala 128:57]
    node _T_39 = or(_T_36, _T_38) @[ToAXI4.scala 128:35]
    node _T_40 = eq(inflight_type, UInt<2>("h2")) @[ToAXI4.scala 50:19]
    node _T_41 = and(_T_40, io.in.b.ready) @[ToAXI4.scala 128:96]
    node _T_42 = or(_T_39, _T_41) @[ToAXI4.scala 128:73]
    io.out.resp.ready <= _T_42 @[ToAXI4.scala 128:18]
    node _T_43 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
    node _T_44 = eq(_T_43, UInt<1>("h0")) @[ToAXI4.scala 53:5]
    node _T_45 = eq(_T_44, UInt<1>("h0")) @[ToAXI4.scala 129:19]
    node _T_46 = and(_T_45, io.out.req.ready) @[ToAXI4.scala 129:33]
    io.in.ar.ready <= _T_46 @[ToAXI4.scala 129:16]
    node _T_47 = eq(inflight_type, UInt<2>("h1")) @[ToAXI4.scala 50:19]
    node _T_48 = and(_T_47, io.out.resp.valid) @[ToAXI4.scala 130:36]
    io.in.r.valid <= _T_48 @[ToAXI4.scala 130:15]
    node _T_49 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
    node _T_50 = eq(_T_49, UInt<1>("h0")) @[ToAXI4.scala 53:5]
    node _T_51 = eq(_T_50, UInt<1>("h0")) @[ToAXI4.scala 132:19]
    node _T_52 = eq(io.in.ar.valid, UInt<1>("h0")) @[ToAXI4.scala 132:36]
    node _T_53 = and(_T_51, _T_52) @[ToAXI4.scala 132:33]
    io.in.aw.ready <= _T_53 @[ToAXI4.scala 132:16]
    node _T_54 = eq(inflight_type, UInt<2>("h2")) @[ToAXI4.scala 50:19]
    node _T_55 = and(_T_54, io.out.req.ready) @[ToAXI4.scala 133:38]
    io.in.w.ready <= _T_55 @[ToAXI4.scala 133:16]
    node _T_56 = and(bresp_en, io.out.resp.valid) @[ToAXI4.scala 134:27]
    io.in.b.valid <= _T_56 @[ToAXI4.scala 134:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[ToAXI4.scala 135:19]
    node _T_57 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    when _T_57 : @[ToAXI4.scala 137:24]
      node _T_58 = and(io.out.req.ready, io.out.req.valid) @[Decoupled.scala 40:37]
      node _T_59 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
      node _T_60 = eq(_T_59, UInt<1>("h0")) @[ToAXI4.scala 53:5]
      node _T_61 = eq(_T_60, UInt<1>("h0")) @[ToAXI4.scala 137:51]
      node _T_62 = and(_T_58, _T_61) @[ToAXI4.scala 137:48]
      node _T_63 = asUInt(reset) @[ToAXI4.scala 137:32]
      node _T_64 = or(_T_62, _T_63) @[ToAXI4.scala 137:32]
      node _T_65 = eq(_T_64, UInt<1>("h0")) @[ToAXI4.scala 137:32]
      when _T_65 : @[ToAXI4.scala 137:32]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:137 when (axi.ar.fire()) { assert(mem.req.fire() && !isInflight()); }\n") : SIM @[ToAXI4.scala 137:32]
        stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 137:32]
    node _T_66 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    when _T_66 : @[ToAXI4.scala 138:24]
      node _T_67 = eq(inflight_type, UInt<2>("h0")) @[ToAXI4.scala 50:19]
      node _T_68 = eq(_T_67, UInt<1>("h0")) @[ToAXI4.scala 53:5]
      node _T_69 = eq(_T_68, UInt<1>("h0")) @[ToAXI4.scala 138:33]
      node _T_70 = asUInt(reset) @[ToAXI4.scala 138:32]
      node _T_71 = or(_T_69, _T_70) @[ToAXI4.scala 138:32]
      node _T_72 = eq(_T_71, UInt<1>("h0")) @[ToAXI4.scala 138:32]
      when _T_72 : @[ToAXI4.scala 138:32]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:138 when (axi.aw.fire()) { assert(!isInflight()); }\n") : SIM_1 @[ToAXI4.scala 138:32]
        stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 138:32]
    node _T_73 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    when _T_73 : @[ToAXI4.scala 139:23]
      node _T_74 = and(io.out.req.ready, io.out.req.valid) @[Decoupled.scala 40:37]
      node _T_75 = eq(inflight_type, UInt<2>("h2")) @[ToAXI4.scala 50:19]
      node _T_76 = and(_T_74, _T_75) @[ToAXI4.scala 139:48]
      node _T_77 = asUInt(reset) @[ToAXI4.scala 139:31]
      node _T_78 = or(_T_76, _T_77) @[ToAXI4.scala 139:31]
      node _T_79 = eq(_T_78, UInt<1>("h0")) @[ToAXI4.scala 139:31]
      when _T_79 : @[ToAXI4.scala 139:31]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:139 when (axi.w.fire()) { assert(mem.req .fire() && isState(axi_write)); }\n") : SIM_2 @[ToAXI4.scala 139:31]
        stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 139:31]
    node _T_80 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    when _T_80 : @[ToAXI4.scala 140:23]
      node _T_81 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
      node _T_82 = eq(inflight_type, UInt<2>("h2")) @[ToAXI4.scala 50:19]
      node _T_83 = and(_T_81, _T_82) @[ToAXI4.scala 140:48]
      node _T_84 = asUInt(reset) @[ToAXI4.scala 140:31]
      node _T_85 = or(_T_83, _T_84) @[ToAXI4.scala 140:31]
      node _T_86 = eq(_T_85, UInt<1>("h0")) @[ToAXI4.scala 140:31]
      when _T_86 : @[ToAXI4.scala 140:31]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:140 when (axi.b.fire()) { assert(mem.resp.fire() && isState(axi_write)); }\n") : SIM_3 @[ToAXI4.scala 140:31]
        stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 140:31]
    node _T_87 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    when _T_87 : @[ToAXI4.scala 141:23]
      node _T_88 = and(io.out.resp.ready, io.out.resp.valid) @[Decoupled.scala 40:37]
      node _T_89 = eq(inflight_type, UInt<2>("h1")) @[ToAXI4.scala 50:19]
      node _T_90 = and(_T_88, _T_89) @[ToAXI4.scala 141:48]
      node _T_91 = asUInt(reset) @[ToAXI4.scala 141:31]
      node _T_92 = or(_T_90, _T_91) @[ToAXI4.scala 141:31]
      node _T_93 = eq(_T_92, UInt<1>("h0")) @[ToAXI4.scala 141:31]
      when _T_93 : @[ToAXI4.scala 141:31]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:141 when (axi.r.fire()) { assert(mem.resp.fire() && isState(axi_read)); }\n") : SIM_4 @[ToAXI4.scala 141:31]
        stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 141:31]

  module SimpleBus2MemPortConverter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, fcn : UInt<1>, typ : UInt<3>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>}}}}

    io.in.req.ready <= io.out.req.ready @[ToMemPort.scala 34:19]
    io.in.resp.valid <= io.out.resp.valid @[ToMemPort.scala 35:20]
    io.out.req.valid <= io.in.req.valid @[ToMemPort.scala 36:20]
    io.out.resp.ready <= io.in.resp.ready @[ToMemPort.scala 37:21]
    io.out.req.bits.addr <= io.in.req.bits.addr @[ToMemPort.scala 39:24]
    io.out.req.bits.data <= io.in.req.bits.wdata @[ToMemPort.scala 40:24]
    node _T = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_1 = eq(_T, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_2 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_4 = and(_T_1, _T_3) @[SimpleBus.scala 73:26]
    node _T_5 = mux(_T_4, UInt<1>("h0"), UInt<1>("h1")) @[ToMemPort.scala 41:29]
    io.out.req.bits.fcn <= _T_5 @[ToMemPort.scala 41:23]
    io.out.req.bits.typ <= UInt<3>("h3") @[ToMemPort.scala 42:23]
    io.in.resp.bits.rdata <= io.out.resp.bits.data @[ToMemPort.scala 44:25]
    io.in.resp.bits.cmd <= UInt<3>("h6") @[ToMemPort.scala 45:23]

  module Prefetcher :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}

    reg getNewReq : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Prefetcher.scala 37:26]
    reg prefetchReq : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), prefetchReq) @[Prefetcher.scala 38:28]
    prefetchReq.wdata <= io.in.bits.wdata @[Prefetcher.scala 38:28]
    prefetchReq.wmask <= io.in.bits.wmask @[Prefetcher.scala 38:28]
    prefetchReq.cmd <= io.in.bits.cmd @[Prefetcher.scala 38:28]
    prefetchReq.size <= io.in.bits.size @[Prefetcher.scala 38:28]
    prefetchReq.addr <= io.in.bits.addr @[Prefetcher.scala 38:28]
    prefetchReq.cmd <= UInt<3>("h4") @[Prefetcher.scala 39:19]
    node _T = add(io.in.bits.addr, UInt<7>("h40")) @[Prefetcher.scala 40:39]
    node _T_1 = tail(_T, 1) @[Prefetcher.scala 40:39]
    prefetchReq.addr <= _T_1 @[Prefetcher.scala 40:20]
    reg lastReqAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Prefetcher.scala 44:28]
    node _T_2 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    when _T_2 : @[Prefetcher.scala 45:23]
      lastReqAddr <= io.in.bits.addr @[Prefetcher.scala 46:18]
    node _T_3 = mux(UInt<1>("h1"), UInt<58>("h3ffffffffffffff"), UInt<58>("h0")) @[Bitwise.scala 72:12]
    node lineMask = cat(_T_3, UInt<6>("h0")) @[Cat.scala 30:58]
    node _T_4 = and(io.in.bits.addr, lineMask) @[Prefetcher.scala 50:30]
    node _T_5 = and(lastReqAddr, lineMask) @[Prefetcher.scala 50:59]
    node neqAddr = neq(_T_4, _T_5) @[Prefetcher.scala 50:42]
    node _T_6 = eq(getNewReq, UInt<1>("h0")) @[Prefetcher.scala 52:9]
    when _T_6 : @[Prefetcher.scala 52:21]
      io.out.bits.wdata <= io.in.bits.wdata @[Prefetcher.scala 53:17]
      io.out.bits.wmask <= io.in.bits.wmask @[Prefetcher.scala 53:17]
      io.out.bits.cmd <= io.in.bits.cmd @[Prefetcher.scala 53:17]
      io.out.bits.size <= io.in.bits.size @[Prefetcher.scala 53:17]
      io.out.bits.addr <= io.in.bits.addr @[Prefetcher.scala 53:17]
      io.out.valid <= io.in.valid @[Prefetcher.scala 54:18]
      node _T_7 = eq(io.in.valid, UInt<1>("h0")) @[Prefetcher.scala 55:20]
      node _T_8 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
      node _T_9 = or(_T_7, _T_8) @[Prefetcher.scala 55:33]
      io.in.ready <= _T_9 @[Prefetcher.scala 55:17]
      node _T_10 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
      node _T_11 = bits(io.in.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
      node _T_12 = and(_T_10, _T_11) @[Prefetcher.scala 56:31]
      node _T_13 = and(_T_12, neqAddr) @[Prefetcher.scala 56:55]
      getNewReq <= _T_13 @[Prefetcher.scala 56:15]
    else :
      io.out.bits.wdata <= prefetchReq.wdata @[Prefetcher.scala 58:17]
      io.out.bits.wmask <= prefetchReq.wmask @[Prefetcher.scala 58:17]
      io.out.bits.cmd <= prefetchReq.cmd @[Prefetcher.scala 58:17]
      io.out.bits.size <= prefetchReq.size @[Prefetcher.scala 58:17]
      io.out.bits.addr <= prefetchReq.addr @[Prefetcher.scala 58:17]
      node _T_14 = xor(prefetchReq.addr, UInt<30>("h30000000")) @[NutCore.scala 86:11]
      node _T_15 = bits(_T_14, 31, 28) @[NutCore.scala 86:24]
      node _T_16 = eq(_T_15, UInt<1>("h0")) @[NutCore.scala 86:44]
      node _T_17 = xor(prefetchReq.addr, UInt<31>("h40000000")) @[NutCore.scala 86:11]
      node _T_18 = bits(_T_17, 31, 30) @[NutCore.scala 86:24]
      node _T_19 = eq(_T_18, UInt<1>("h0")) @[NutCore.scala 86:44]
      node _T_20 = or(_T_16, _T_19) @[NutCore.scala 87:15]
      node _T_21 = eq(_T_20, UInt<1>("h0")) @[Prefetcher.scala 59:21]
      io.out.valid <= _T_21 @[Prefetcher.scala 59:18]
      io.in.ready <= UInt<1>("h0") @[Prefetcher.scala 60:17]
      node _T_22 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
      node _T_23 = xor(prefetchReq.addr, UInt<30>("h30000000")) @[NutCore.scala 86:11]
      node _T_24 = bits(_T_23, 31, 28) @[NutCore.scala 86:24]
      node _T_25 = eq(_T_24, UInt<1>("h0")) @[NutCore.scala 86:44]
      node _T_26 = xor(prefetchReq.addr, UInt<31>("h40000000")) @[NutCore.scala 86:11]
      node _T_27 = bits(_T_26, 31, 30) @[NutCore.scala 86:24]
      node _T_28 = eq(_T_27, UInt<1>("h0")) @[NutCore.scala 86:44]
      node _T_29 = or(_T_25, _T_28) @[NutCore.scala 87:15]
      node _T_30 = or(_T_22, _T_29) @[Prefetcher.scala 61:34]
      node _T_31 = eq(_T_30, UInt<1>("h0")) @[Prefetcher.scala 61:18]
      getNewReq <= _T_31 @[Prefetcher.scala 61:15]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_32 = and(UInt<1>("h1"), _WIRE) @[Debug.scala 80:29]
    when _T_32 : @[Debug.scala 80:52]
      reg REG : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_33 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_34 = tail(_T_33, 1) @[GTimer.scala 25:12]
      REG <= _T_34 @[GTimer.scala 25:7]
      node _T_35 = asUInt(reset) @[Prefetcher.scala 65:11]
      node _T_36 = eq(_T_35, UInt<1>("h0")) @[Prefetcher.scala 65:11]
      when _T_36 : @[Prefetcher.scala 65:11]
        printf(clock, UInt<1>("h1"), "%d: [Prefetcher]: in(%d,%d), out(%d,%d), in.bits.addr = %x\n", REG, io.in.valid, io.in.ready, io.out.valid, io.out.ready, io.in.bits.addr) : SIM @[Prefetcher.scala 65:11]

  module CacheStage1_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, metaReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>}}, flip resp : { data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>}}, flip resp : { data : { data : UInt<64>}[4]}}}

    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_1 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_2 = tail(_T_1, 1) @[GTimer.scala 25:12]
    REG <= _T_2 @[GTimer.scala 25:7]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    node _T_3 = and(_T, _WIRE) @[Debug.scala 55:16]
    when _T_3 : @[Debug.scala 55:31]
      node _T_4 = asUInt(reset) @[Debug.scala 56:24]
      node _T_5 = eq(_T_4, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_5 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1_2: ", REG) : SIM @[Debug.scala 56:24]
      node _T_6 = asUInt(reset) @[Debug.scala 57:13]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_7 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, UInt<1>("h0"), UInt<1>("h0")) : SIM_1 @[Debug.scala 57:13]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 141:34]
    wire _WIRE_1 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_2 : UInt<32>
    _WIRE_2 <= io.in.bits.addr
    node _T_8 = bits(_WIRE_2, 2, 0) @[Cache.scala 79:45]
    _WIRE_1.byteOffset <= _T_8 @[Cache.scala 79:45]
    node _T_9 = bits(_WIRE_2, 5, 3) @[Cache.scala 79:45]
    _WIRE_1.wordIndex <= _T_9 @[Cache.scala 79:45]
    node _T_10 = bits(_WIRE_2, 14, 6) @[Cache.scala 79:45]
    _WIRE_1.index <= _T_10 @[Cache.scala 79:45]
    node _T_11 = bits(_WIRE_2, 31, 15) @[Cache.scala 79:45]
    _WIRE_1.tag <= _T_11 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _WIRE_1.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _WIRE_3 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _WIRE_4 : UInt<32>
    _WIRE_4 <= io.in.bits.addr
    node _T_12 = bits(_WIRE_4, 2, 0) @[Cache.scala 80:49]
    _WIRE_3.byteOffset <= _T_12 @[Cache.scala 80:49]
    node _T_13 = bits(_WIRE_4, 5, 3) @[Cache.scala 80:49]
    _WIRE_3.wordIndex <= _T_13 @[Cache.scala 80:49]
    node _T_14 = bits(_WIRE_4, 14, 6) @[Cache.scala 80:49]
    _WIRE_3.index <= _T_14 @[Cache.scala 80:49]
    node _T_15 = bits(_WIRE_4, 31, 15) @[Cache.scala 80:49]
    _WIRE_3.tag <= _T_15 @[Cache.scala 80:49]
    wire _WIRE_5 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _WIRE_6 : UInt<32>
    _WIRE_6 <= io.in.bits.addr
    node _T_16 = bits(_WIRE_6, 2, 0) @[Cache.scala 80:82]
    _WIRE_5.byteOffset <= _T_16 @[Cache.scala 80:82]
    node _T_17 = bits(_WIRE_6, 5, 3) @[Cache.scala 80:82]
    _WIRE_5.wordIndex <= _T_17 @[Cache.scala 80:82]
    node _T_18 = bits(_WIRE_6, 14, 6) @[Cache.scala 80:82]
    _WIRE_5.index <= _T_18 @[Cache.scala 80:82]
    node _T_19 = bits(_WIRE_6, 31, 15) @[Cache.scala 80:82]
    _WIRE_5.tag <= _T_19 @[Cache.scala 80:82]
    node _T_20 = cat(_WIRE_3.index, _WIRE_5.wordIndex) @[Cat.scala 30:58]
    io.dataReadBus.req.bits.setIdx <= _T_20 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req.wdata <= io.in.bits.wdata @[Cache.scala 145:19]
    io.out.bits.req.wmask <= io.in.bits.wmask @[Cache.scala 145:19]
    io.out.bits.req.cmd <= io.in.bits.cmd @[Cache.scala 145:19]
    io.out.bits.req.size <= io.in.bits.size @[Cache.scala 145:19]
    io.out.bits.req.addr <= io.in.bits.addr @[Cache.scala 145:19]
    node _T_21 = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 146:31]
    node _T_22 = and(_T_21, io.dataReadBus.req.ready) @[Cache.scala 146:59]
    io.out.valid <= _T_22 @[Cache.scala 146:16]
    node _T_23 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 147:19]
    node _T_24 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_25 = or(_T_23, _T_24) @[Cache.scala 147:32]
    node _T_26 = and(_T_25, io.metaReadBus.req.ready) @[Cache.scala 147:50]
    node _T_27 = and(_T_26, io.dataReadBus.req.ready) @[Cache.scala 147:78]
    io.in.ready <= _T_27 @[Cache.scala 147:15]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_28 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_29 = tail(_T_28, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_29 @[GTimer.scala 25:7]
    wire _WIRE_7 : UInt<1>
    _WIRE_7 <= UInt<1>("h0")
    node _T_30 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
    when _T_30 : @[Debug.scala 55:31]
      node _T_31 = asUInt(reset) @[Debug.scala 56:24]
      node _T_32 = eq(_T_31, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_32 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1_2: ", REG_1) : SIM_2 @[Debug.scala 56:24]
      node _T_33 = asUInt(reset) @[Debug.scala 57:13]
      node _T_34 = eq(_T_33, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_34 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) : SIM_3 @[Debug.scala 57:13]

  module CacheStage2_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : { data : UInt<64>}[4], flip metaWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    wire addr : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 176:31]
    wire _WIRE : UInt<32>
    _WIRE <= io.in.bits.req.addr
    node _T = bits(_WIRE, 2, 0) @[Cache.scala 176:31]
    addr.byteOffset <= _T @[Cache.scala 176:31]
    node _T_1 = bits(_WIRE, 5, 3) @[Cache.scala 176:31]
    addr.wordIndex <= _T_1 @[Cache.scala 176:31]
    node _T_2 = bits(_WIRE, 14, 6) @[Cache.scala 176:31]
    addr.index <= _T_2 @[Cache.scala 176:31]
    node _T_3 = bits(_WIRE, 31, 15) @[Cache.scala 176:31]
    addr.tag <= _T_3 @[Cache.scala 176:31]
    node _T_4 = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 178:35]
    wire _WIRE_1 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_2 : UInt<32>
    _WIRE_2 <= io.in.bits.req.addr
    node _T_5 = bits(_WIRE_2, 2, 0) @[Cache.scala 79:45]
    _WIRE_1.byteOffset <= _T_5 @[Cache.scala 79:45]
    node _T_6 = bits(_WIRE_2, 5, 3) @[Cache.scala 79:45]
    _WIRE_1.wordIndex <= _T_6 @[Cache.scala 79:45]
    node _T_7 = bits(_WIRE_2, 14, 6) @[Cache.scala 79:45]
    _WIRE_1.index <= _T_7 @[Cache.scala 79:45]
    node _T_8 = bits(_WIRE_2, 31, 15) @[Cache.scala 79:45]
    _WIRE_1.tag <= _T_8 @[Cache.scala 79:45]
    node _T_9 = eq(io.metaWriteBus.req.bits.setIdx, _WIRE_1.index) @[Cache.scala 178:99]
    node isForwardMeta = and(_T_4, _T_9) @[Cache.scala 178:64]
    reg isForwardMetaReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 179:33]
    when isForwardMeta : @[Cache.scala 180:24]
      isForwardMetaReg <= UInt<1>("h1") @[Cache.scala 180:43]
    node _T_10 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_11 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 181:25]
    node _T_12 = or(_T_10, _T_11) @[Cache.scala 181:22]
    when _T_12 : @[Cache.scala 181:39]
      isForwardMetaReg <= UInt<1>("h0") @[Cache.scala 181:58]
    reg forwardMetaReg : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardMetaReg) @[Reg.scala 15:16]
    when isForwardMeta : @[Reg.scala 16:19]
      forwardMetaReg.waymask <= io.metaWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardMetaReg.data.dirty <= io.metaWriteBus.req.bits.data.dirty @[Reg.scala 16:23]
      forwardMetaReg.data.valid <= io.metaWriteBus.req.bits.data.valid @[Reg.scala 16:23]
      forwardMetaReg.data.tag <= io.metaWriteBus.req.bits.data.tag @[Reg.scala 16:23]
      forwardMetaReg.setIdx <= io.metaWriteBus.req.bits.setIdx @[Reg.scala 16:23]
    wire metaWay : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 184:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 185:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 186:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 187:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 187:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 187:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 187:61]
    node _T_13 = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 189:39]
    node _T_14 = mux(_T_13, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 189:22]
    metaWay[0].dirty <= _T_14.dirty @[Cache.scala 189:16]
    metaWay[0].valid <= _T_14.valid @[Cache.scala 189:16]
    metaWay[0].tag <= _T_14.tag @[Cache.scala 189:16]
    node _T_15 = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 189:39]
    node _T_16 = mux(_T_15, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 189:22]
    metaWay[1].dirty <= _T_16.dirty @[Cache.scala 189:16]
    metaWay[1].valid <= _T_16.valid @[Cache.scala 189:16]
    metaWay[1].tag <= _T_16.tag @[Cache.scala 189:16]
    node _T_17 = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 189:39]
    node _T_18 = mux(_T_17, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 189:22]
    metaWay[2].dirty <= _T_18.dirty @[Cache.scala 189:16]
    metaWay[2].valid <= _T_18.valid @[Cache.scala 189:16]
    metaWay[2].tag <= _T_18.tag @[Cache.scala 189:16]
    node _T_19 = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 189:39]
    node _T_20 = mux(_T_19, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 189:22]
    metaWay[3].dirty <= _T_20.dirty @[Cache.scala 189:16]
    metaWay[3].valid <= _T_20.valid @[Cache.scala 189:16]
    metaWay[3].tag <= _T_20.tag @[Cache.scala 189:16]
    node _T_21 = eq(metaWay[0].tag, addr.tag) @[Cache.scala 192:59]
    node _T_22 = and(metaWay[0].valid, _T_21) @[Cache.scala 192:49]
    node _T_23 = and(_T_22, io.in.valid) @[Cache.scala 192:73]
    node _T_24 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 192:59]
    node _T_25 = and(metaWay[1].valid, _T_24) @[Cache.scala 192:49]
    node _T_26 = and(_T_25, io.in.valid) @[Cache.scala 192:73]
    node _T_27 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 192:59]
    node _T_28 = and(metaWay[2].valid, _T_27) @[Cache.scala 192:49]
    node _T_29 = and(_T_28, io.in.valid) @[Cache.scala 192:73]
    node _T_30 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 192:59]
    node _T_31 = and(metaWay[3].valid, _T_30) @[Cache.scala 192:49]
    node _T_32 = and(_T_31, io.in.valid) @[Cache.scala 192:73]
    wire _WIRE_3 : UInt<1>[4] @[Cache.scala 192:23]
    _WIRE_3[0] <= _T_23 @[Cache.scala 192:23]
    _WIRE_3[1] <= _T_26 @[Cache.scala 192:23]
    _WIRE_3[2] <= _T_29 @[Cache.scala 192:23]
    _WIRE_3[3] <= _T_32 @[Cache.scala 192:23]
    node lo = cat(_WIRE_3[1], _WIRE_3[0]) @[Cache.scala 192:90]
    node hi = cat(_WIRE_3[3], _WIRE_3[2]) @[Cache.scala 192:90]
    node hitVec = cat(hi, lo) @[Cache.scala 192:90]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1234567887654321")) @[LFSR64.scala 25:23]
    node _T_33 = bits(REG, 0, 0) @[LFSR64.scala 26:19]
    node _T_34 = bits(REG, 1, 1) @[LFSR64.scala 26:29]
    node _T_35 = xor(_T_33, _T_34) @[LFSR64.scala 26:23]
    node _T_36 = bits(REG, 3, 3) @[LFSR64.scala 26:39]
    node _T_37 = xor(_T_35, _T_36) @[LFSR64.scala 26:33]
    node _T_38 = bits(REG, 4, 4) @[LFSR64.scala 26:49]
    node _T_39 = xor(_T_37, _T_38) @[LFSR64.scala 26:43]
    when UInt<1>("h1") : @[LFSR64.scala 27:22]
      node _T_40 = eq(REG, UInt<1>("h0")) @[LFSR64.scala 28:24]
      node _T_41 = bits(REG, 63, 1) @[LFSR64.scala 28:51]
      node _T_42 = cat(_T_39, _T_41) @[Cat.scala 30:58]
      node _T_43 = mux(_T_40, UInt<1>("h1"), _T_42) @[LFSR64.scala 28:18]
      REG <= _T_43 @[LFSR64.scala 28:12]
    node _T_44 = bits(REG, 1, 0) @[Cache.scala 193:53]
    node victimWaymask = dshl(UInt<1>("h1"), _T_44) @[Cache.scala 193:42]
    node _T_45 = eq(metaWay[0].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_46 = eq(metaWay[1].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_47 = eq(metaWay[2].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    node _T_48 = eq(metaWay[3].valid, UInt<1>("h0")) @[Cache.scala 195:45]
    wire _WIRE_4 : UInt<1>[4] @[Cache.scala 195:27]
    _WIRE_4[0] <= _T_45 @[Cache.scala 195:27]
    _WIRE_4[1] <= _T_46 @[Cache.scala 195:27]
    _WIRE_4[2] <= _T_47 @[Cache.scala 195:27]
    _WIRE_4[3] <= _T_48 @[Cache.scala 195:27]
    node lo_1 = cat(_WIRE_4[1], _WIRE_4[0]) @[Cache.scala 195:56]
    node hi_1 = cat(_WIRE_4[3], _WIRE_4[2]) @[Cache.scala 195:56]
    node invalidVec = cat(hi_1, lo_1) @[Cache.scala 195:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 196:34]
    node _T_49 = geq(invalidVec, UInt<4>("h8")) @[Cache.scala 197:45]
    node _T_50 = geq(invalidVec, UInt<3>("h4")) @[Cache.scala 198:20]
    node _T_51 = geq(invalidVec, UInt<2>("h2")) @[Cache.scala 199:20]
    node _T_52 = mux(_T_51, UInt<2>("h2"), UInt<1>("h1")) @[Cache.scala 199:8]
    node _T_53 = mux(_T_50, UInt<3>("h4"), _T_52) @[Cache.scala 198:8]
    node refillInvalidWaymask = mux(_T_49, UInt<4>("h8"), _T_53) @[Cache.scala 197:33]
    node _T_54 = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 202:49]
    node waymask = mux(io.out.bits.hit, hitVec, _T_54) @[Cache.scala 202:20]
    node _T_55 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_56 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_57 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_58 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_59 = add(_T_55, _T_56) @[Bitwise.scala 47:55]
    node _T_60 = bits(_T_59, 1, 0) @[Bitwise.scala 47:55]
    node _T_61 = add(_T_57, _T_58) @[Bitwise.scala 47:55]
    node _T_62 = bits(_T_61, 1, 0) @[Bitwise.scala 47:55]
    node _T_63 = add(_T_60, _T_62) @[Bitwise.scala 47:55]
    node _T_64 = bits(_T_63, 2, 0) @[Bitwise.scala 47:55]
    node _T_65 = gt(_T_64, UInt<1>("h1")) @[Cache.scala 203:26]
    when _T_65 : @[Cache.scala 203:32]
      reg REG_1 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_66 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_67 = tail(_T_66, 1) @[GTimer.scala 25:12]
      REG_1 <= _T_67 @[GTimer.scala 25:7]
      wire _WIRE_5 : UInt<1>
      _WIRE_5 <= UInt<1>("h0")
      node _T_68 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
      when _T_68 : @[Debug.scala 55:31]
        node _T_69 = asUInt(reset) @[Debug.scala 56:24]
        node _T_70 = eq(_T_69, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_70 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_1) : SIM @[Debug.scala 56:24]
        node _T_71 = asUInt(reset) @[Debug.scala 57:13]
        node _T_72 = eq(_T_71, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_72 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) : SIM_1 @[Debug.scala 57:13]
      reg REG_2 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_73 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_74 = tail(_T_73, 1) @[GTimer.scala 25:12]
      REG_2 <= _T_74 @[GTimer.scala 25:7]
      wire _WIRE_6 : UInt<1>
      _WIRE_6 <= UInt<1>("h0")
      node _T_75 = and(UInt<1>("h1"), _WIRE_6) @[Debug.scala 55:16]
      when _T_75 : @[Debug.scala 55:31]
        node _T_76 = asUInt(reset) @[Debug.scala 56:24]
        node _T_77 = eq(_T_76, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_77 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_2) : SIM_2 @[Debug.scala 56:24]
        node _T_78 = asUInt(reset) @[Debug.scala 57:13]
        node _T_79 = eq(_T_78, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_79 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) : SIM_3 @[Debug.scala 57:13]
      reg REG_3 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_80 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_81 = tail(_T_80, 1) @[GTimer.scala 25:12]
      REG_3 <= _T_81 @[GTimer.scala 25:7]
      wire _WIRE_7 : UInt<1>
      _WIRE_7 <= UInt<1>("h0")
      node _T_82 = and(UInt<1>("h1"), _WIRE_7) @[Debug.scala 55:16]
      when _T_82 : @[Debug.scala 55:31]
        node _T_83 = asUInt(reset) @[Debug.scala 56:24]
        node _T_84 = eq(_T_83, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_84 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_3) : SIM_4 @[Debug.scala 56:24]
        node _T_85 = asUInt(reset) @[Debug.scala 57:13]
        node _T_86 = eq(_T_85, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_86 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) : SIM_5 @[Debug.scala 57:13]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_87 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_88 = tail(_T_87, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_88 @[GTimer.scala 25:7]
      wire _WIRE_8 : UInt<1>
      _WIRE_8 <= UInt<1>("h0")
      node _T_89 = and(UInt<1>("h1"), _WIRE_8) @[Debug.scala 55:16]
      when _T_89 : @[Debug.scala 55:31]
        node _T_90 = asUInt(reset) @[Debug.scala 56:24]
        node _T_91 = eq(_T_90, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_91 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_4) : SIM_6 @[Debug.scala 56:24]
        node _T_92 = asUInt(reset) @[Debug.scala 57:13]
        node _T_93 = eq(_T_92, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_93 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) : SIM_7 @[Debug.scala 57:13]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_94 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_95 = tail(_T_94, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_95 @[GTimer.scala 25:7]
      wire _WIRE_9 : UInt<1>
      _WIRE_9 <= UInt<1>("h0")
      node _T_96 = and(UInt<1>("h1"), _WIRE_9) @[Debug.scala 55:16]
      when _T_96 : @[Debug.scala 55:31]
        node _T_97 = asUInt(reset) @[Debug.scala 56:24]
        node _T_98 = eq(_T_97, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_98 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_5) : SIM_8 @[Debug.scala 56:24]
        node _T_99 = asUInt(reset) @[Debug.scala 57:13]
        node _T_100 = eq(_T_99, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_100 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) : SIM_9 @[Debug.scala 57:13]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_101 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_102 = tail(_T_101, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_102 @[GTimer.scala 25:7]
      wire _WIRE_10 : UInt<1>
      _WIRE_10 <= UInt<1>("h0")
      node _T_103 = and(UInt<1>("h1"), _WIRE_10) @[Debug.scala 55:16]
      when _T_103 : @[Debug.scala 55:31]
        node _T_104 = asUInt(reset) @[Debug.scala 56:24]
        node _T_105 = eq(_T_104, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_105 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_6) : SIM_10 @[Debug.scala 56:24]
        node _T_106 = asUInt(reset) @[Debug.scala 57:13]
        node _T_107 = eq(_T_106, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_107 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) : SIM_11 @[Debug.scala 57:13]
      reg REG_7 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_108 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_109 = tail(_T_108, 1) @[GTimer.scala 25:12]
      REG_7 <= _T_109 @[GTimer.scala 25:7]
      wire _WIRE_11 : UInt<1>
      _WIRE_11 <= UInt<1>("h0")
      node _T_110 = and(UInt<1>("h1"), _WIRE_11) @[Debug.scala 55:16]
      when _T_110 : @[Debug.scala 55:31]
        node _T_111 = asUInt(reset) @[Debug.scala 56:24]
        node _T_112 = eq(_T_111, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_112 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_7) : SIM_12 @[Debug.scala 56:24]
        node _T_113 = asUInt(reset) @[Debug.scala 57:13]
        node _T_114 = eq(_T_113, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_114 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) : SIM_13 @[Debug.scala 57:13]
      reg REG_8 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_115 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_116 = tail(_T_115, 1) @[GTimer.scala 25:12]
      REG_8 <= _T_116 @[GTimer.scala 25:7]
      wire _WIRE_12 : UInt<1>
      _WIRE_12 <= UInt<1>("h0")
      node _T_117 = and(UInt<1>("h1"), _WIRE_12) @[Debug.scala 55:16]
      when _T_117 : @[Debug.scala 55:31]
        node _T_118 = asUInt(reset) @[Debug.scala 56:24]
        node _T_119 = eq(_T_118, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_119 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_8) : SIM_14 @[Debug.scala 56:24]
        node _T_120 = asUInt(reset) @[Debug.scala 57:13]
        node _T_121 = eq(_T_120, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_121 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) : SIM_15 @[Debug.scala 57:13]
      reg REG_9 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_122 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_123 = tail(_T_122, 1) @[GTimer.scala 25:12]
      REG_9 <= _T_123 @[GTimer.scala 25:7]
      wire _WIRE_13 : UInt<1>
      _WIRE_13 <= UInt<1>("h0")
      node _T_124 = and(UInt<1>("h1"), _WIRE_13) @[Debug.scala 55:16]
      when _T_124 : @[Debug.scala 55:31]
        node _T_125 = asUInt(reset) @[Debug.scala 56:24]
        node _T_126 = eq(_T_125, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_126 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_9) : SIM_16 @[Debug.scala 56:24]
        node _T_127 = asUInt(reset) @[Debug.scala 57:13]
        node _T_128 = eq(_T_127, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_128 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) : SIM_17 @[Debug.scala 57:13]
      reg REG_10 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_129 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_130 = tail(_T_129, 1) @[GTimer.scala 25:12]
      REG_10 <= _T_130 @[GTimer.scala 25:7]
      wire _WIRE_14 : UInt<1>
      _WIRE_14 <= UInt<1>("h0")
      node _T_131 = and(UInt<1>("h1"), _WIRE_14) @[Debug.scala 55:16]
      when _T_131 : @[Debug.scala 55:31]
        node _T_132 = asUInt(reset) @[Debug.scala 56:24]
        node _T_133 = eq(_T_132, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_133 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_10) : SIM_18 @[Debug.scala 56:24]
        node _T_134 = asUInt(reset) @[Debug.scala 57:13]
        node _T_135 = eq(_T_134, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_135 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) : SIM_19 @[Debug.scala 57:13]
    node _T_136 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_137 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_138 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_139 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_140 = add(_T_136, _T_137) @[Bitwise.scala 47:55]
    node _T_141 = bits(_T_140, 1, 0) @[Bitwise.scala 47:55]
    node _T_142 = add(_T_138, _T_139) @[Bitwise.scala 47:55]
    node _T_143 = bits(_T_142, 1, 0) @[Bitwise.scala 47:55]
    node _T_144 = add(_T_141, _T_143) @[Bitwise.scala 47:55]
    node _T_145 = bits(_T_144, 2, 0) @[Bitwise.scala 47:55]
    node _T_146 = gt(_T_145, UInt<1>("h1")) @[Cache.scala 209:26]
    when _T_146 : @[Cache.scala 209:32]
      reg REG_11 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_147 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_148 = tail(_T_147, 1) @[GTimer.scala 25:12]
      REG_11 <= _T_148 @[GTimer.scala 25:7]
      wire _WIRE_15 : UInt<1>
      _WIRE_15 <= UInt<1>("h0")
      node _T_149 = and(UInt<1>("h1"), _WIRE_15) @[Debug.scala 55:16]
      when _T_149 : @[Debug.scala 55:31]
        node _T_150 = asUInt(reset) @[Debug.scala 56:24]
        node _T_151 = eq(_T_150, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_151 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_11) : SIM_20 @[Debug.scala 56:24]
        node _T_152 = asUInt(reset) @[Debug.scala 57:13]
        node _T_153 = eq(_T_152, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_153 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) : SIM_21 @[Debug.scala 57:13]
    node _T_154 = bits(waymask, 0, 0) @[Bitwise.scala 49:65]
    node _T_155 = bits(waymask, 1, 1) @[Bitwise.scala 49:65]
    node _T_156 = bits(waymask, 2, 2) @[Bitwise.scala 49:65]
    node _T_157 = bits(waymask, 3, 3) @[Bitwise.scala 49:65]
    node _T_158 = add(_T_154, _T_155) @[Bitwise.scala 47:55]
    node _T_159 = bits(_T_158, 1, 0) @[Bitwise.scala 47:55]
    node _T_160 = add(_T_156, _T_157) @[Bitwise.scala 47:55]
    node _T_161 = bits(_T_160, 1, 0) @[Bitwise.scala 47:55]
    node _T_162 = add(_T_159, _T_161) @[Bitwise.scala 47:55]
    node _T_163 = bits(_T_162, 2, 0) @[Bitwise.scala 47:55]
    node _T_164 = gt(_T_163, UInt<1>("h1")) @[Cache.scala 210:45]
    node _T_165 = and(io.in.valid, _T_164) @[Cache.scala 210:24]
    node _T_166 = eq(_T_165, UInt<1>("h0")) @[Cache.scala 210:10]
    node _T_167 = asUInt(reset) @[Cache.scala 210:9]
    node _T_168 = or(_T_166, _T_167) @[Cache.scala 210:9]
    node _T_169 = eq(_T_168, UInt<1>("h0")) @[Cache.scala 210:9]
    when _T_169 : @[Cache.scala 210:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:210 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") : SIM_22 @[Cache.scala 210:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 210:9]
    io.out.bits.metas[0].dirty <= metaWay[0].dirty @[Cache.scala 212:21]
    io.out.bits.metas[0].valid <= metaWay[0].valid @[Cache.scala 212:21]
    io.out.bits.metas[0].tag <= metaWay[0].tag @[Cache.scala 212:21]
    io.out.bits.metas[1].dirty <= metaWay[1].dirty @[Cache.scala 212:21]
    io.out.bits.metas[1].valid <= metaWay[1].valid @[Cache.scala 212:21]
    io.out.bits.metas[1].tag <= metaWay[1].tag @[Cache.scala 212:21]
    io.out.bits.metas[2].dirty <= metaWay[2].dirty @[Cache.scala 212:21]
    io.out.bits.metas[2].valid <= metaWay[2].valid @[Cache.scala 212:21]
    io.out.bits.metas[2].tag <= metaWay[2].tag @[Cache.scala 212:21]
    io.out.bits.metas[3].dirty <= metaWay[3].dirty @[Cache.scala 212:21]
    io.out.bits.metas[3].valid <= metaWay[3].valid @[Cache.scala 212:21]
    io.out.bits.metas[3].tag <= metaWay[3].tag @[Cache.scala 212:21]
    node _T_170 = orr(hitVec) @[Cache.scala 213:44]
    node _T_171 = and(io.in.valid, _T_170) @[Cache.scala 213:34]
    io.out.bits.hit <= _T_171 @[Cache.scala 213:19]
    io.out.bits.waymask <= waymask @[Cache.scala 214:23]
    io.out.bits.datas[0].data <= io.dataReadResp[0].data @[Cache.scala 215:21]
    io.out.bits.datas[1].data <= io.dataReadResp[1].data @[Cache.scala 215:21]
    io.out.bits.datas[2].data <= io.dataReadResp[2].data @[Cache.scala 215:21]
    io.out.bits.datas[3].data <= io.dataReadResp[3].data @[Cache.scala 215:21]
    node _T_172 = xor(io.in.bits.req.addr, UInt<30>("h30000000")) @[NutCore.scala 86:11]
    node _T_173 = bits(_T_172, 31, 28) @[NutCore.scala 86:24]
    node _T_174 = eq(_T_173, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_175 = xor(io.in.bits.req.addr, UInt<31>("h40000000")) @[NutCore.scala 86:11]
    node _T_176 = bits(_T_175, 31, 30) @[NutCore.scala 86:24]
    node _T_177 = eq(_T_176, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _T_178 = or(_T_174, _T_177) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _T_178 @[Cache.scala 216:20]
    wire _WIRE_16 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:49]
    wire _WIRE_17 : UInt<32>
    _WIRE_17 <= io.in.bits.req.addr
    node _T_179 = bits(_WIRE_17, 2, 0) @[Cache.scala 80:49]
    _WIRE_16.byteOffset <= _T_179 @[Cache.scala 80:49]
    node _T_180 = bits(_WIRE_17, 5, 3) @[Cache.scala 80:49]
    _WIRE_16.wordIndex <= _T_180 @[Cache.scala 80:49]
    node _T_181 = bits(_WIRE_17, 14, 6) @[Cache.scala 80:49]
    _WIRE_16.index <= _T_181 @[Cache.scala 80:49]
    node _T_182 = bits(_WIRE_17, 31, 15) @[Cache.scala 80:49]
    _WIRE_16.tag <= _T_182 @[Cache.scala 80:49]
    wire _WIRE_18 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 80:82]
    wire _WIRE_19 : UInt<32>
    _WIRE_19 <= io.in.bits.req.addr
    node _T_183 = bits(_WIRE_19, 2, 0) @[Cache.scala 80:82]
    _WIRE_18.byteOffset <= _T_183 @[Cache.scala 80:82]
    node _T_184 = bits(_WIRE_19, 5, 3) @[Cache.scala 80:82]
    _WIRE_18.wordIndex <= _T_184 @[Cache.scala 80:82]
    node _T_185 = bits(_WIRE_19, 14, 6) @[Cache.scala 80:82]
    _WIRE_18.index <= _T_185 @[Cache.scala 80:82]
    node _T_186 = bits(_WIRE_19, 31, 15) @[Cache.scala 80:82]
    _WIRE_18.tag <= _T_186 @[Cache.scala 80:82]
    node _T_187 = cat(_WIRE_16.index, _WIRE_18.wordIndex) @[Cat.scala 30:58]
    node _T_188 = eq(io.dataWriteBus.req.bits.setIdx, _T_187) @[Cache.scala 219:30]
    node _T_189 = and(io.dataWriteBus.req.valid, _T_188) @[Cache.scala 219:13]
    node isForwardData = and(io.in.valid, _T_189) @[Cache.scala 218:35]
    reg isForwardDataReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 221:33]
    when isForwardData : @[Cache.scala 222:24]
      isForwardDataReg <= UInt<1>("h1") @[Cache.scala 222:43]
    node _T_190 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    node _T_191 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 223:25]
    node _T_192 = or(_T_190, _T_191) @[Cache.scala 223:22]
    when _T_192 : @[Cache.scala 223:39]
      isForwardDataReg <= UInt<1>("h0") @[Cache.scala 223:58]
    reg forwardDataReg : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardDataReg) @[Reg.scala 15:16]
    when isForwardData : @[Reg.scala 16:19]
      forwardDataReg.waymask <= io.dataWriteBus.req.bits.waymask @[Reg.scala 16:23]
      forwardDataReg.data.data <= io.dataWriteBus.req.bits.data.data @[Reg.scala 16:23]
      forwardDataReg.setIdx <= io.dataWriteBus.req.bits.setIdx @[Reg.scala 16:23]
    node _T_193 = or(isForwardDataReg, isForwardData) @[Cache.scala 225:49]
    io.out.bits.isForwardData <= _T_193 @[Cache.scala 225:29]
    node _T_194 = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 226:33]
    io.out.bits.forwardData.waymask <= _T_194.waymask @[Cache.scala 226:27]
    io.out.bits.forwardData.data.data <= _T_194.data.data @[Cache.scala 226:27]
    io.out.bits.forwardData.setIdx <= _T_194.setIdx @[Cache.scala 226:27]
    io.out.bits.req.wdata <= io.in.bits.req.wdata @[Cache.scala 228:19]
    io.out.bits.req.wmask <= io.in.bits.req.wmask @[Cache.scala 228:19]
    io.out.bits.req.cmd <= io.in.bits.req.cmd @[Cache.scala 228:19]
    io.out.bits.req.size <= io.in.bits.req.size @[Cache.scala 228:19]
    io.out.bits.req.addr <= io.in.bits.req.addr @[Cache.scala 228:19]
    io.out.valid <= io.in.valid @[Cache.scala 229:16]
    node _T_195 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 230:18]
    node _T_196 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_197 = or(_T_195, _T_196) @[Cache.scala 230:31]
    io.in.ready <= _T_197 @[Cache.scala 230:15]
    node _T_198 = and(io.in.ready, io.in.valid) @[Decoupled.scala 40:37]
    reg REG_12 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_199 = add(REG_12, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_200 = tail(_T_199, 1) @[GTimer.scala 25:12]
    REG_12 <= _T_200 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_201 = and(UInt<1>("h1"), _WIRE_20) @[Debug.scala 55:16]
    when _T_201 : @[Debug.scala 55:31]
      node _T_202 = asUInt(reset) @[Debug.scala 56:24]
      node _T_203 = eq(_T_202, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_203 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_12) : SIM_23 @[Debug.scala 56:24]
      node _T_204 = asUInt(reset) @[Debug.scala 57:13]
      node _T_205 = eq(_T_204, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_205 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_198, io.in.valid) : SIM_24 @[Debug.scala 57:13]
    wire _WIRE_21 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_22 : UInt<32>
    _WIRE_22 <= io.in.bits.req.addr
    node _T_206 = bits(_WIRE_22, 2, 0) @[Cache.scala 79:45]
    _WIRE_21.byteOffset <= _T_206 @[Cache.scala 79:45]
    node _T_207 = bits(_WIRE_22, 5, 3) @[Cache.scala 79:45]
    _WIRE_21.wordIndex <= _T_207 @[Cache.scala 79:45]
    node _T_208 = bits(_WIRE_22, 14, 6) @[Cache.scala 79:45]
    _WIRE_21.index <= _T_208 @[Cache.scala 79:45]
    node _T_209 = bits(_WIRE_22, 31, 15) @[Cache.scala 79:45]
    _WIRE_21.tag <= _T_209 @[Cache.scala 79:45]
    reg REG_13 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_210 = add(REG_13, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_211 = tail(_T_210, 1) @[GTimer.scala 25:12]
    REG_13 <= _T_211 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_212 = and(UInt<1>("h1"), _WIRE_23) @[Debug.scala 55:16]
    when _T_212 : @[Debug.scala 55:31]
      node _T_213 = asUInt(reset) @[Debug.scala 56:24]
      node _T_214 = eq(_T_213, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_214 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2_2: ", REG_13) : SIM_25 @[Debug.scala 56:24]
      node _T_215 = asUInt(reset) @[Debug.scala 57:13]
      node _T_216 = eq(_T_215, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_216 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _WIRE_21.index) : SIM_26 @[Debug.scala 57:13]

  module Arbiter_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.dirty <= io.in[1].bits.data.dirty @[Arbiter.scala 124:15]
    io.out.bits.data.valid <= io.in[1].bits.data.valid @[Arbiter.scala 124:15]
    io.out.bits.data.tag <= io.in[1].bits.data.tag @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.dirty <= io.in[0].bits.data.dirty @[Arbiter.scala 128:19]
      io.out.bits.data.valid <= io.in[0].bits.data.valid @[Arbiter.scala 128:19]
      io.out.bits.data.tag <= io.in[0].bits.data.tag @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module Arbiter_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.waymask <= io.in[1].bits.waymask @[Arbiter.scala 124:15]
    io.out.bits.data.data <= io.in[1].bits.data.data @[Arbiter.scala 124:15]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.waymask <= io.in[0].bits.waymask @[Arbiter.scala 128:19]
      io.out.bits.data.data <= io.in[0].bits.data.data @[Arbiter.scala 128:19]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module CacheStage3_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>}}, flip resp : { data : { data : UInt<64>}[4]}}, dataWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}

    inst metaWriteArb of Arbiter_10 @[Cache.scala 256:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_11 @[Cache.scala 257:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 260:31]
    wire _WIRE : UInt<32>
    _WIRE <= io.in.bits.req.addr
    node _T = bits(_WIRE, 2, 0) @[Cache.scala 260:31]
    addr.byteOffset <= _T @[Cache.scala 260:31]
    node _T_1 = bits(_WIRE, 5, 3) @[Cache.scala 260:31]
    addr.wordIndex <= _T_1 @[Cache.scala 260:31]
    node _T_2 = bits(_WIRE, 14, 6) @[Cache.scala 260:31]
    addr.index <= _T_2 @[Cache.scala 260:31]
    node _T_3 = bits(_WIRE, 31, 15) @[Cache.scala 260:31]
    addr.tag <= _T_3 @[Cache.scala 260:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 261:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 262:25]
    node _T_4 = eq(io.in.bits.hit, UInt<1>("h0")) @[Cache.scala 263:29]
    node miss = and(io.in.valid, _T_4) @[Cache.scala 263:26]
    node _T_5 = and(io.in.valid, UInt<1>("h1")) @[Cache.scala 264:27]
    node _T_6 = eq(io.in.bits.req.cmd, UInt<4>("h8")) @[SimpleBus.scala 79:23]
    node probe = and(_T_5, _T_6) @[Cache.scala 264:39]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _T_7) @[Cache.scala 265:26]
    node _T_8 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_9 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_10 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_11 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire meta : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:72]
    node _T_12 = mux(_T_8, io.in.bits.metas[0].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_13 = mux(_T_9, io.in.bits.metas[1].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_14 = mux(_T_10, io.in.bits.metas[2].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_15 = mux(_T_11, io.in.bits.metas[3].dirty, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_16 = or(_T_12, _T_13) @[Mux.scala 27:72]
    node _T_17 = or(_T_16, _T_14) @[Mux.scala 27:72]
    node _T_18 = or(_T_17, _T_15) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<1> @[Mux.scala 27:72]
    _WIRE_1 <= _T_18 @[Mux.scala 27:72]
    meta.dirty <= _WIRE_1 @[Mux.scala 27:72]
    node _T_19 = mux(_T_8, io.in.bits.metas[0].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_20 = mux(_T_9, io.in.bits.metas[1].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_21 = mux(_T_10, io.in.bits.metas[2].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_22 = mux(_T_11, io.in.bits.metas[3].valid, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_23 = or(_T_19, _T_20) @[Mux.scala 27:72]
    node _T_24 = or(_T_23, _T_21) @[Mux.scala 27:72]
    node _T_25 = or(_T_24, _T_22) @[Mux.scala 27:72]
    wire _WIRE_2 : UInt<1> @[Mux.scala 27:72]
    _WIRE_2 <= _T_25 @[Mux.scala 27:72]
    meta.valid <= _WIRE_2 @[Mux.scala 27:72]
    node _T_26 = mux(_T_8, io.in.bits.metas[0].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_27 = mux(_T_9, io.in.bits.metas[1].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_28 = mux(_T_10, io.in.bits.metas[2].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_29 = mux(_T_11, io.in.bits.metas[3].tag, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_30 = or(_T_26, _T_27) @[Mux.scala 27:72]
    node _T_31 = or(_T_30, _T_28) @[Mux.scala 27:72]
    node _T_32 = or(_T_31, _T_29) @[Mux.scala 27:72]
    wire _WIRE_3 : UInt<17> @[Mux.scala 27:72]
    _WIRE_3 <= _T_32 @[Mux.scala 27:72]
    meta.tag <= _WIRE_3 @[Mux.scala 27:72]
    node _T_33 = and(mmio, hit) @[Cache.scala 267:17]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Cache.scala 267:10]
    node _T_35 = asUInt(reset) @[Cache.scala 267:9]
    node _T_36 = or(_T_34, _T_35) @[Cache.scala 267:9]
    node _T_37 = eq(_T_36, UInt<1>("h0")) @[Cache.scala 267:9]
    when _T_37 : @[Cache.scala 267:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:267 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") : SIM @[Cache.scala 267:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 267:9]
    node _T_38 = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 275:71]
    node useForwardData = and(io.in.bits.isForwardData, _T_38) @[Cache.scala 275:49]
    node _T_39 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_40 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_41 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_42 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _WIRE_4 : { data : UInt<64>} @[Mux.scala 27:72]
    node _T_43 = mux(_T_39, io.in.bits.datas[0].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_44 = mux(_T_40, io.in.bits.datas[1].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_45 = mux(_T_41, io.in.bits.datas[2].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_46 = mux(_T_42, io.in.bits.datas[3].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_47 = or(_T_43, _T_44) @[Mux.scala 27:72]
    node _T_48 = or(_T_47, _T_45) @[Mux.scala 27:72]
    node _T_49 = or(_T_48, _T_46) @[Mux.scala 27:72]
    wire _WIRE_5 : UInt<64> @[Mux.scala 27:72]
    _WIRE_5 <= _T_49 @[Mux.scala 27:72]
    _WIRE_4.data <= _WIRE_5 @[Mux.scala 27:72]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _WIRE_4.data) @[Cache.scala 277:21]
    node _T_50 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 278:22]
    node _T_51 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_52 = and(_T_50, _T_51) @[Cache.scala 278:28]
    node _T_53 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _T_54 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _T_55 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _T_61 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_62 = mux(_T_61, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_63 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_64, _T_62) @[Cat.scala 30:58]
    node lo_hi = cat(_T_68, _T_66) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_72, _T_70) @[Cat.scala 30:58]
    node hi_hi = cat(_T_76, _T_74) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node _T_77 = cat(hi, lo) @[Cat.scala 30:58]
    node wordMask = mux(_T_52, _T_77, UInt<64>("h0")) @[Cache.scala 278:21]
    reg value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    node _T_78 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_79 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 281:34]
    node _T_80 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_81 = or(_T_79, _T_80) @[Cache.scala 281:62]
    node _T_82 = and(_T_78, _T_81) @[Cache.scala 281:22]
    when _T_82 : @[Cache.scala 281:85]
      node wrap = eq(value, UInt<3>("h7")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
    node _T_83 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _T_83) @[Cache.scala 285:22]
    wire dataHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 286:29]
    wire _WIRE_6 : { data : UInt<64>} @[Cache.scala 287:16]
    node _T_84 = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 32:13]
    node _T_85 = not(wordMask) @[BitUtils.scala 32:38]
    node _T_86 = and(dataRead, _T_85) @[BitUtils.scala 32:36]
    node _T_87 = or(_T_84, _T_86) @[BitUtils.scala 32:25]
    _WIRE_6.data <= _T_87 @[Cache.scala 106:15]
    node _T_88 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 288:60]
    node _T_89 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_90 = or(_T_88, _T_89) @[Cache.scala 288:88]
    node _T_91 = mux(_T_90, value, addr.wordIndex) @[Cache.scala 288:51]
    node _T_92 = cat(addr.index, _T_91) @[Cat.scala 30:58]
    dataHitWriteBus.req.bits.setIdx <= _T_92 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data.data <= _WIRE_6.data @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 290:29]
    node _T_93 = eq(meta.dirty, UInt<1>("h0")) @[Cache.scala 291:25]
    node _T_94 = and(hitWrite, _T_93) @[Cache.scala 291:22]
    wire _WIRE_7 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_8 : UInt<32>
    _WIRE_8 <= io.in.bits.req.addr
    node _T_95 = bits(_WIRE_8, 2, 0) @[Cache.scala 79:45]
    _WIRE_7.byteOffset <= _T_95 @[Cache.scala 79:45]
    node _T_96 = bits(_WIRE_8, 5, 3) @[Cache.scala 79:45]
    _WIRE_7.wordIndex <= _T_96 @[Cache.scala 79:45]
    node _T_97 = bits(_WIRE_8, 14, 6) @[Cache.scala 79:45]
    _WIRE_7.index <= _T_97 @[Cache.scala 79:45]
    node _T_98 = bits(_WIRE_8, 31, 15) @[Cache.scala 79:45]
    _WIRE_7.tag <= _T_98 @[Cache.scala 79:45]
    wire _WIRE_9 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 292:16]
    _WIRE_9.tag <= meta.tag @[Cache.scala 95:14]
    _WIRE_9.valid <= UInt<1>("h1") @[Cache.scala 96:16]
    _WIRE_9.dirty <= UInt<1>("h1") @[Cache.scala 97:16]
    metaHitWriteBus.req.bits.setIdx <= _WIRE_7.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data.dirty <= _WIRE_9.dirty @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.valid <= _WIRE_9.valid @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.data.tag <= _WIRE_9.tag @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= _T_94 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Cache.scala 296:22]
    reg needFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 297:26]
    node _T_99 = neq(state, UInt<4>("h0")) @[Cache.scala 299:28]
    node _T_100 = and(io.flush, _T_99) @[Cache.scala 299:18]
    when _T_100 : @[Cache.scala 299:41]
      needFlush <= UInt<1>("h1") @[Cache.scala 299:53]
    node _T_101 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_102 = and(_T_101, needFlush) @[Cache.scala 300:23]
    when _T_102 : @[Cache.scala 300:37]
      needFlush <= UInt<1>("h0") @[Cache.scala 300:49]
    reg value_1 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg value_2 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg state2 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Cache.scala 306:23]
    node _T_103 = eq(state, UInt<4>("h3")) @[Cache.scala 308:39]
    node _T_104 = eq(state, UInt<4>("h8")) @[Cache.scala 308:66]
    node _T_105 = or(_T_103, _T_104) @[Cache.scala 308:57]
    node _T_106 = eq(state2, UInt<2>("h0")) @[Cache.scala 308:92]
    node _T_107 = and(_T_105, _T_106) @[Cache.scala 308:81]
    node _T_108 = eq(state, UInt<4>("h8")) @[Cache.scala 309:40]
    node _T_109 = mux(_T_108, value_1, value_2) @[Cache.scala 309:33]
    node _T_110 = cat(addr.index, _T_109) @[Cat.scala 30:58]
    io.dataReadBus.req.bits.setIdx <= _T_110 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_107 @[SRAMTemplate.scala 53:20]
    node _T_111 = eq(state2, UInt<2>("h1")) @[Cache.scala 310:60]
    reg dataWay : { data : UInt<64>}[4], clock with :
      reset => (UInt<1>("h0"), dataWay) @[Reg.scala 15:16]
    when _T_111 : @[Reg.scala 16:19]
      dataWay[0].data <= io.dataReadBus.resp.data[0].data @[Reg.scala 16:23]
      dataWay[1].data <= io.dataReadBus.resp.data[1].data @[Reg.scala 16:23]
      dataWay[2].data <= io.dataReadBus.resp.data[2].data @[Reg.scala 16:23]
      dataWay[3].data <= io.dataReadBus.resp.data[3].data @[Reg.scala 16:23]
    node _T_112 = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _T_113 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _T_114 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _T_115 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _WIRE_10 : { data : UInt<64>} @[Mux.scala 27:72]
    node _T_116 = mux(_T_112, dataWay[0].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_117 = mux(_T_113, dataWay[1].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_118 = mux(_T_114, dataWay[2].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_119 = mux(_T_115, dataWay[3].data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_120 = or(_T_116, _T_117) @[Mux.scala 27:72]
    node _T_121 = or(_T_120, _T_118) @[Mux.scala 27:72]
    node _T_122 = or(_T_121, _T_119) @[Mux.scala 27:72]
    wire _WIRE_11 : UInt<64> @[Mux.scala 27:72]
    _WIRE_11 <= _T_122 @[Mux.scala 27:72]
    _WIRE_10.data <= _WIRE_11 @[Mux.scala 27:72]
    node _T_123 = eq(UInt<2>("h0"), state2) @[Cache.scala 313:19]
    when _T_123 : @[Cache.scala 313:19]
      node _T_124 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 40:37]
      when _T_124 : @[Cache.scala 314:53]
        state2 <= UInt<2>("h1") @[Cache.scala 314:62]
    else :
      node _T_125 = eq(UInt<2>("h1"), state2) @[Cache.scala 313:19]
      when _T_125 : @[Cache.scala 313:19]
        state2 <= UInt<2>("h2") @[Cache.scala 315:35]
      else :
        node _T_126 = eq(UInt<2>("h2"), state2) @[Cache.scala 313:19]
        when _T_126 : @[Cache.scala 313:19]
          node _T_127 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
          node _T_128 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
          node _T_129 = or(_T_127, _T_128) @[Cache.scala 316:46]
          node _T_130 = and(hitReadBurst, io.out.ready) @[Cache.scala 316:83]
          node _T_131 = or(_T_129, _T_130) @[Cache.scala 316:67]
          when _T_131 : @[Cache.scala 316:100]
            state2 <= UInt<2>("h0") @[Cache.scala 316:109]
    node _T_132 = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 320:44]
    node raddr = cat(_T_132, UInt<3>("h0")) @[Cat.scala 30:58]
    node hi_1 = cat(meta.tag, addr.index) @[Cat.scala 30:58]
    node waddr = cat(hi_1, UInt<6>("h0")) @[Cat.scala 30:58]
    node _T_133 = eq(state, UInt<4>("h1")) @[Cache.scala 324:23]
    node _T_134 = eq(value_2, UInt<3>("h7")) @[Cache.scala 325:29]
    node _T_135 = mux(_T_134, UInt<3>("h7"), UInt<2>("h3")) @[Cache.scala 325:8]
    node cmd = mux(_T_133, UInt<2>("h2"), _T_135) @[Cache.scala 324:16]
    node _T_136 = eq(state, UInt<4>("h1")) @[Cache.scala 326:42]
    node _T_137 = mux(_T_136, raddr, waddr) @[Cache.scala 326:35]
    node _T_138 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    io.mem.req.bits.addr <= _T_137 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _WIRE_10.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_138 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h1") @[Cache.scala 330:21]
    node _T_139 = eq(state, UInt<4>("h1")) @[Cache.scala 331:30]
    node _T_140 = eq(state, UInt<4>("h3")) @[Cache.scala 331:59]
    node _T_141 = eq(state2, UInt<2>("h2")) @[Cache.scala 331:89]
    node _T_142 = and(_T_140, _T_141) @[Cache.scala 331:78]
    node _T_143 = or(_T_139, _T_142) @[Cache.scala 331:48]
    io.mem.req.valid <= _T_143 @[Cache.scala 331:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 334:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 334:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 334:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 334:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 334:20]
    io.mmio.resp.ready <= UInt<1>("h1") @[Cache.scala 335:22]
    node _T_144 = eq(state, UInt<4>("h5")) @[Cache.scala 336:31]
    io.mmio.req.valid <= _T_144 @[Cache.scala 336:21]
    reg afterFirstRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 338:31]
    node _T_145 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    reg alreadyOutFire : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 27:20]
    when _T_145 : @[Reg.scala 28:19]
      alreadyOutFire <= UInt<1>("h1") @[Reg.scala 28:23]
    node _T_146 = eq(afterFirstRead, UInt<1>("h0")) @[Cache.scala 340:22]
    node _T_147 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_148 = and(_T_146, _T_147) @[Cache.scala 340:38]
    node _T_149 = eq(state, UInt<4>("h2")) @[Cache.scala 340:70]
    node readingFirst = and(_T_148, _T_149) @[Cache.scala 340:60]
    node _T_150 = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 341:39]
    node _T_151 = eq(state, UInt<4>("h6")) @[Cache.scala 342:52]
    node _T_152 = mux(mmio, _T_151, readingFirst) @[Cache.scala 342:39]
    reg inRdataRegDemand : UInt<64>, clock with :
      reset => (UInt<1>("h0"), inRdataRegDemand) @[Reg.scala 15:16]
    when _T_152 : @[Reg.scala 16:19]
      inRdataRegDemand <= _T_150 @[Reg.scala 16:23]
    node _T_153 = eq(state, UInt<4>("h0")) @[Cache.scala 345:31]
    node _T_154 = and(_T_153, probe) @[Cache.scala 345:43]
    node _T_155 = eq(state, UInt<4>("h8")) @[Cache.scala 346:31]
    node _T_156 = eq(state2, UInt<2>("h2")) @[Cache.scala 346:57]
    node _T_157 = and(_T_155, _T_156) @[Cache.scala 346:46]
    node _T_158 = or(_T_154, _T_157) @[Cache.scala 345:53]
    io.cohResp.valid <= _T_158 @[Cache.scala 345:20]
    io.cohResp.bits.rdata <= _WIRE_10.data @[Cache.scala 347:25]
    node _T_159 = eq(state, UInt<4>("h8")) @[Cache.scala 348:35]
    node _T_160 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_161 = and(_T_159, _T_160) @[Cache.scala 348:49]
    reg value_3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    wire releaseLast : UInt<1>
    releaseLast <= UInt<1>("h0")
    when _T_161 : @[Counter.scala 118:17]
      node wrap_wrap = eq(value_3, UInt<3>("h7")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value_3, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value_3 <= _wrap_value_T_1 @[Counter.scala 76:15]
      releaseLast <= wrap_wrap @[Counter.scala 118:24]
    node _T_162 = eq(state, UInt<4>("h8")) @[Cache.scala 349:36]
    node _T_163 = mux(releaseLast, UInt<3>("h6"), UInt<1>("h0")) @[Cache.scala 349:54]
    node _T_164 = mux(hit, UInt<4>("hc"), UInt<4>("h8")) @[Cache.scala 350:8]
    node _T_165 = mux(_T_162, _T_163, _T_164) @[Cache.scala 349:29]
    io.cohResp.bits.cmd <= _T_165 @[Cache.scala 349:23]
    node _T_166 = and(hitReadBurst, io.out.ready) @[Cache.scala 352:35]
    node _T_167 = eq(state2, UInt<2>("h2")) @[Cache.scala 352:61]
    node respToL1Fire = and(_T_166, _T_167) @[Cache.scala 352:51]
    node _T_168 = eq(state, UInt<4>("h0")) @[Cache.scala 353:37]
    node _T_169 = eq(state, UInt<4>("h8")) @[Cache.scala 353:57]
    node _T_170 = eq(state2, UInt<2>("h2")) @[Cache.scala 353:81]
    node _T_171 = and(_T_169, _T_170) @[Cache.scala 353:71]
    node _T_172 = or(_T_168, _T_171) @[Cache.scala 353:48]
    node _T_173 = and(_T_172, hitReadBurst) @[Cache.scala 353:96]
    node _T_174 = and(_T_173, io.out.ready) @[Cache.scala 353:112]
    reg value_4 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    wire respToL1Last : UInt<1>
    respToL1Last <= UInt<1>("h0")
    when _T_174 : @[Counter.scala 118:17]
      node wrap_wrap_1 = eq(value_4, UInt<3>("h7")) @[Counter.scala 72:24]
      node _wrap_value_T_2 = add(value_4, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24]
      value_4 <= _wrap_value_T_3 @[Counter.scala 76:15]
      respToL1Last <= wrap_wrap_1 @[Counter.scala 118:24]
    node _T_175 = eq(UInt<4>("h0"), state) @[Cache.scala 355:18]
    when _T_175 : @[Cache.scala 355:18]
      afterFirstRead <= UInt<1>("h0") @[Cache.scala 357:22]
      alreadyOutFire <= UInt<1>("h0") @[Cache.scala 358:22]
      when probe : @[Cache.scala 360:20]
        node _T_176 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
        when _T_176 : @[Cache.scala 361:34]
          node _T_177 = mux(hit, UInt<4>("h8"), UInt<4>("h0")) @[Cache.scala 362:23]
          state <= _T_177 @[Cache.scala 362:17]
          value_1 <= addr.wordIndex @[Cache.scala 363:29]
      else :
        node _T_178 = and(hitReadBurst, io.out.ready) @[Cache.scala 365:33]
        when _T_178 : @[Cache.scala 365:50]
          state <= UInt<4>("h8") @[Cache.scala 366:15]
          node _value_T_2 = eq(addr.wordIndex, UInt<3>("h7")) @[Cache.scala 367:49]
          node _value_T_3 = add(addr.wordIndex, UInt<1>("h1")) @[Cache.scala 367:93]
          node _value_T_4 = tail(_value_T_3, 1) @[Cache.scala 367:93]
          node _value_T_5 = mux(_value_T_2, UInt<1>("h0"), _value_T_4) @[Cache.scala 367:33]
          value_1 <= _value_T_5 @[Cache.scala 367:27]
        else :
          node _T_179 = or(miss, mmio) @[Cache.scala 368:26]
          node _T_180 = eq(io.flush, UInt<1>("h0")) @[Cache.scala 368:38]
          node _T_181 = and(_T_179, _T_180) @[Cache.scala 368:35]
          when _T_181 : @[Cache.scala 368:49]
            node _T_182 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 369:43]
            node _T_183 = and(_T_182, meta.dirty) @[Cache.scala 369:49]
            node _T_184 = mux(_T_183, UInt<4>("h3"), UInt<4>("h1")) @[Cache.scala 369:42]
            node _T_185 = mux(mmio, UInt<4>("h5"), _T_184) @[Cache.scala 369:21]
            state <= _T_185 @[Cache.scala 369:15]
    else :
      node _T_186 = eq(UInt<4>("h5"), state) @[Cache.scala 355:18]
      when _T_186 : @[Cache.scala 355:18]
        node _T_187 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 40:37]
        when _T_187 : @[Cache.scala 373:48]
          state <= UInt<4>("h6") @[Cache.scala 373:56]
      else :
        node _T_188 = eq(UInt<4>("h6"), state) @[Cache.scala 355:18]
        when _T_188 : @[Cache.scala 355:18]
          node _T_189 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 40:37]
          when _T_189 : @[Cache.scala 374:50]
            state <= UInt<4>("h7") @[Cache.scala 374:58]
        else :
          node _T_190 = eq(UInt<4>("h8"), state) @[Cache.scala 355:18]
          when _T_190 : @[Cache.scala 355:18]
            node _T_191 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_192 = or(_T_191, respToL1Fire) @[Cache.scala 377:31]
            when _T_192 : @[Cache.scala 377:48]
              node wrap_1 = eq(value_1, UInt<3>("h7")) @[Counter.scala 72:24]
              node _value_T_6 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
              node _value_T_7 = tail(_value_T_6, 1) @[Counter.scala 76:24]
              value_1 <= _value_T_7 @[Counter.scala 76:15]
            node _T_193 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
            node _T_194 = and(probe, _T_193) @[Cache.scala 378:19]
            node _T_195 = and(_T_194, releaseLast) @[Cache.scala 378:40]
            node _T_196 = and(respToL1Fire, respToL1Last) @[Cache.scala 378:71]
            node _T_197 = or(_T_195, _T_196) @[Cache.scala 378:55]
            when _T_197 : @[Cache.scala 378:88]
              state <= UInt<4>("h0") @[Cache.scala 378:96]
          else :
            node _T_198 = eq(UInt<4>("h1"), state) @[Cache.scala 355:18]
            when _T_198 : @[Cache.scala 355:18]
              node _T_199 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
              when _T_199 : @[Cache.scala 381:50]
                state <= UInt<4>("h2") @[Cache.scala 382:13]
                value_1 <= addr.wordIndex @[Cache.scala 383:25]
            else :
              node _T_200 = eq(UInt<4>("h2"), state) @[Cache.scala 355:18]
              when _T_200 : @[Cache.scala 355:18]
                node _T_201 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                when _T_201 : @[Cache.scala 387:33]
                  afterFirstRead <= UInt<1>("h1") @[Cache.scala 388:24]
                  node wrap_2 = eq(value_1, UInt<3>("h7")) @[Counter.scala 72:24]
                  node _value_T_8 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
                  node _value_T_9 = tail(_value_T_8, 1) @[Counter.scala 76:24]
                  value_1 <= _value_T_9 @[Counter.scala 76:15]
                  node _T_202 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 390:23]
                  when _T_202 : @[Cache.scala 390:52]
                    value <= UInt<1>("h0") @[Cache.scala 390:75]
                  node _T_203 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
                  when _T_203 : @[Cache.scala 391:46]
                    state <= UInt<4>("h7") @[Cache.scala 391:54]
              else :
                node _T_204 = eq(UInt<4>("h3"), state) @[Cache.scala 355:18]
                when _T_204 : @[Cache.scala 355:18]
                  node _T_205 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  when _T_205 : @[Cache.scala 396:32]
                    node wrap_3 = eq(value_2, UInt<3>("h7")) @[Counter.scala 72:24]
                    node _value_T_10 = add(value_2, UInt<1>("h1")) @[Counter.scala 76:24]
                    node _value_T_11 = tail(_value_T_10, 1) @[Counter.scala 76:24]
                    value_2 <= _value_T_11 @[Counter.scala 76:15]
                  node _T_206 = eq(io.mem.req.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
                  node _T_207 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
                  node _T_208 = and(_T_206, _T_207) @[Cache.scala 397:43]
                  when _T_208 : @[Cache.scala 397:65]
                    state <= UInt<4>("h4") @[Cache.scala 397:73]
                else :
                  node _T_209 = eq(UInt<4>("h4"), state) @[Cache.scala 355:18]
                  when _T_209 : @[Cache.scala 355:18]
                    node _T_210 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
                    when _T_210 : @[Cache.scala 400:53]
                      state <= UInt<4>("h1") @[Cache.scala 400:61]
                  else :
                    node _T_211 = eq(UInt<4>("h7"), state) @[Cache.scala 355:18]
                    when _T_211 : @[Cache.scala 355:18]
                      node _T_212 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
                      node _T_213 = or(_T_212, needFlush) @[Cache.scala 401:44]
                      node _T_214 = or(_T_213, alreadyOutFire) @[Cache.scala 401:57]
                      when _T_214 : @[Cache.scala 401:76]
                        state <= UInt<4>("h0") @[Cache.scala 401:84]
    node _T_215 = mux(readingFirst, wordMask, UInt<64>("h0")) @[Cache.scala 404:67]
    node _T_216 = and(io.in.bits.req.wdata, _T_215) @[BitUtils.scala 32:13]
    node _T_217 = not(_T_215) @[BitUtils.scala 32:38]
    node _T_218 = and(io.mem.resp.bits.rdata, _T_217) @[BitUtils.scala 32:36]
    node dataRefill = or(_T_216, _T_218) @[BitUtils.scala 32:25]
    wire dataRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 405:32]
    node _T_219 = eq(state, UInt<4>("h2")) @[Cache.scala 406:20]
    node _T_220 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_221 = and(_T_219, _T_220) @[Cache.scala 406:39]
    node _T_222 = cat(addr.index, value_1) @[Cat.scala 30:58]
    wire _WIRE_12 : { data : UInt<64>} @[Cache.scala 407:16]
    _WIRE_12.data <= dataRefill @[Cache.scala 106:15]
    dataRefillWriteBus.req.bits.setIdx <= _T_222 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data.data <= _WIRE_12.data @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= _T_221 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0].bits.waymask <= dataHitWriteBus.req.bits.waymask @[Cache.scala 409:25]
    dataWriteArb.io.in[0].bits.data.data <= dataHitWriteBus.req.bits.data.data @[Cache.scala 409:25]
    dataWriteArb.io.in[0].bits.setIdx <= dataHitWriteBus.req.bits.setIdx @[Cache.scala 409:25]
    dataWriteArb.io.in[0].valid <= dataHitWriteBus.req.valid @[Cache.scala 409:25]
    dataHitWriteBus.req.ready <= dataWriteArb.io.in[0].ready @[Cache.scala 409:25]
    dataWriteArb.io.in[1].bits.waymask <= dataRefillWriteBus.req.bits.waymask @[Cache.scala 410:25]
    dataWriteArb.io.in[1].bits.data.data <= dataRefillWriteBus.req.bits.data.data @[Cache.scala 410:25]
    dataWriteArb.io.in[1].bits.setIdx <= dataRefillWriteBus.req.bits.setIdx @[Cache.scala 410:25]
    dataWriteArb.io.in[1].valid <= dataRefillWriteBus.req.valid @[Cache.scala 410:25]
    dataRefillWriteBus.req.ready <= dataWriteArb.io.in[1].ready @[Cache.scala 410:25]
    io.dataWriteBus.req.bits.waymask <= dataWriteArb.io.out.bits.waymask @[Cache.scala 411:23]
    io.dataWriteBus.req.bits.data.data <= dataWriteArb.io.out.bits.data.data @[Cache.scala 411:23]
    io.dataWriteBus.req.bits.setIdx <= dataWriteArb.io.out.bits.setIdx @[Cache.scala 411:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 411:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 411:23]
    wire metaRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 413:32]
    node _T_223 = eq(state, UInt<4>("h2")) @[Cache.scala 414:20]
    node _T_224 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_225 = and(_T_223, _T_224) @[Cache.scala 414:39]
    node _T_226 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
    node _T_227 = and(_T_225, _T_226) @[Cache.scala 414:61]
    wire _WIRE_13 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 415:16]
    node _T_228 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 415:79]
    node _T_229 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_230 = and(_T_228, _T_229) @[Cache.scala 415:85]
    _WIRE_13.tag <= addr.tag @[Cache.scala 95:14]
    _WIRE_13.valid <= UInt<1>("h1") @[Cache.scala 96:16]
    _WIRE_13.dirty <= _T_230 @[Cache.scala 97:16]
    wire _WIRE_14 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_15 : UInt<32>
    _WIRE_15 <= io.in.bits.req.addr
    node _T_231 = bits(_WIRE_15, 2, 0) @[Cache.scala 79:45]
    _WIRE_14.byteOffset <= _T_231 @[Cache.scala 79:45]
    node _T_232 = bits(_WIRE_15, 5, 3) @[Cache.scala 79:45]
    _WIRE_14.wordIndex <= _T_232 @[Cache.scala 79:45]
    node _T_233 = bits(_WIRE_15, 14, 6) @[Cache.scala 79:45]
    _WIRE_14.index <= _T_233 @[Cache.scala 79:45]
    node _T_234 = bits(_WIRE_15, 31, 15) @[Cache.scala 79:45]
    _WIRE_14.tag <= _T_234 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _WIRE_14.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data.dirty <= _WIRE_13.dirty @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.valid <= _WIRE_13.valid @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.data.tag <= _WIRE_13.tag @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _T_227 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0].bits.waymask <= metaHitWriteBus.req.bits.waymask @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.dirty <= metaHitWriteBus.req.bits.data.dirty @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.valid <= metaHitWriteBus.req.bits.data.valid @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.data.tag <= metaHitWriteBus.req.bits.data.tag @[Cache.scala 419:25]
    metaWriteArb.io.in[0].bits.setIdx <= metaHitWriteBus.req.bits.setIdx @[Cache.scala 419:25]
    metaWriteArb.io.in[0].valid <= metaHitWriteBus.req.valid @[Cache.scala 419:25]
    metaHitWriteBus.req.ready <= metaWriteArb.io.in[0].ready @[Cache.scala 419:25]
    metaWriteArb.io.in[1].bits.waymask <= metaRefillWriteBus.req.bits.waymask @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.dirty <= metaRefillWriteBus.req.bits.data.dirty @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.valid <= metaRefillWriteBus.req.bits.data.valid @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.data.tag <= metaRefillWriteBus.req.bits.data.tag @[Cache.scala 420:25]
    metaWriteArb.io.in[1].bits.setIdx <= metaRefillWriteBus.req.bits.setIdx @[Cache.scala 420:25]
    metaWriteArb.io.in[1].valid <= metaRefillWriteBus.req.valid @[Cache.scala 420:25]
    metaRefillWriteBus.req.ready <= metaWriteArb.io.in[1].ready @[Cache.scala 420:25]
    io.metaWriteBus.req.bits.waymask <= metaWriteArb.io.out.bits.waymask @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.dirty <= metaWriteArb.io.out.bits.data.dirty @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.valid <= metaWriteArb.io.out.bits.data.valid @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.data.tag <= metaWriteArb.io.out.bits.data.tag @[Cache.scala 421:23]
    io.metaWriteBus.req.bits.setIdx <= metaWriteArb.io.out.bits.setIdx @[Cache.scala 421:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 421:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 421:23]
    node _T_235 = eq(state, UInt<4>("h2")) @[Cache.scala 424:18]
    node _T_236 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_237 = and(_T_235, _T_236) @[Cache.scala 424:37]
    node _T_238 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[SimpleBus.scala 76:27]
    node _T_239 = and(_T_237, _T_238) @[Cache.scala 424:59]
    when _T_239 : @[Cache.scala 424:81]
      io.out.bits.rdata <= dataRefill @[Cache.scala 426:25]
      node _T_240 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:26]
      node _T_241 = mux(_T_240, UInt<3>("h6"), UInt<2>("h2")) @[Cache.scala 427:29]
      io.out.bits.cmd <= _T_241 @[Cache.scala 427:23]
    else :
      node _T_242 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
      node _T_243 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 428:46]
      node _T_244 = or(_T_242, _T_243) @[Cache.scala 428:35]
      when _T_244 : @[Cache.scala 428:75]
        node _T_245 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 430:31]
        io.out.bits.rdata <= _T_245 @[Cache.scala 430:25]
        io.out.bits.cmd is invalid @[Cache.scala 431:23]
      else :
        node _T_246 = eq(state, UInt<4>("h8")) @[Cache.scala 432:39]
        node _T_247 = and(hitReadBurst, _T_246) @[Cache.scala 432:30]
        when _T_247 : @[Cache.scala 432:54]
          io.out.bits.rdata <= _WIRE_10.data @[Cache.scala 434:25]
          node _T_248 = mux(respToL1Last, UInt<3>("h6"), UInt<2>("h2")) @[Cache.scala 435:29]
          io.out.bits.cmd <= _T_248 @[Cache.scala 435:23]
        else :
          node _T_249 = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 437:31]
          io.out.bits.rdata <= _T_249 @[Cache.scala 437:25]
          io.out.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 438:23]
    node _T_250 = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_251 = and(_T_250, UInt<1>("h1")) @[Cache.scala 447:52]
    node _T_252 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_253 = eq(hit, UInt<1>("h0")) @[Cache.scala 448:34]
    node _T_254 = eq(state, UInt<4>("h7")) @[Cache.scala 448:48]
    node _T_255 = and(_T_253, _T_254) @[Cache.scala 448:39]
    node _T_256 = or(hit, _T_255) @[Cache.scala 448:31]
    node _T_257 = and(_T_252, _T_256) @[Cache.scala 448:23]
    node _T_258 = eq(state, UInt<4>("h2")) @[Cache.scala 448:81]
    node _T_259 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_260 = and(_T_258, _T_259) @[Cache.scala 448:99]
    node _T_261 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[Cache.scala 448:132]
    node _T_262 = and(_T_260, _T_261) @[Cache.scala 448:121]
    node _T_263 = mux(_T_257, UInt<1>("h1"), _T_262) @[Cache.scala 448:8]
    node _T_264 = and(respToL1Fire, respToL1Last) @[Cache.scala 448:178]
    node _T_265 = eq(state, UInt<4>("h8")) @[Cache.scala 448:203]
    node _T_266 = and(_T_264, _T_265) @[Cache.scala 448:194]
    node _T_267 = or(_T_263, _T_266) @[Cache.scala 448:161]
    node _T_268 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_269 = or(_T_268, mmio) @[Cache.scala 449:60]
    node _T_270 = eq(state, UInt<4>("h7")) @[Cache.scala 449:75]
    node _T_271 = eq(alreadyOutFire, UInt<1>("h0")) @[Cache.scala 449:110]
    node _T_272 = and(afterFirstRead, _T_271) @[Cache.scala 449:107]
    node _T_273 = mux(_T_269, _T_270, _T_272) @[Cache.scala 449:45]
    node _T_274 = mux(hit, UInt<1>("h1"), _T_273) @[Cache.scala 449:28]
    node _T_275 = mux(probe, UInt<1>("h0"), _T_274) @[Cache.scala 449:8]
    node _T_276 = mux(_T_251, _T_267, _T_275) @[Cache.scala 447:37]
    node _T_277 = and(io.in.valid, _T_276) @[Cache.scala 447:31]
    io.out.valid <= _T_277 @[Cache.scala 447:16]
    node _T_278 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 40:37]
    node _T_279 = eq(state, UInt<4>("h0")) @[Cache.scala 456:66]
    node _T_280 = eq(state, UInt<4>("h8")) @[Cache.scala 456:85]
    node _T_281 = and(_T_280, releaseLast) @[Cache.scala 456:100]
    node _T_282 = mux(miss, _T_279, _T_281) @[Cache.scala 456:53]
    node _T_283 = and(_T_278, _T_282) @[Cache.scala 456:47]
    node _T_284 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_285 = or(hit, _T_284) @[Cache.scala 457:13]
    node _T_286 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_287 = eq(state, UInt<4>("h7")) @[Cache.scala 457:53]
    node _T_288 = and(io.out.ready, io.out.valid) @[Decoupled.scala 40:37]
    node _T_289 = or(_T_288, alreadyOutFire) @[Cache.scala 457:88]
    node _T_290 = and(_T_287, _T_289) @[Cache.scala 457:70]
    node _T_291 = mux(_T_285, _T_286, _T_290) @[Cache.scala 457:8]
    node _T_292 = mux(probe, _T_283, _T_291) @[Cache.scala 456:21]
    io.isFinish <= _T_292 @[Cache.scala 456:15]
    node _T_293 = eq(state, UInt<4>("h0")) @[Cache.scala 460:41]
    node _T_294 = eq(hitReadBurst, UInt<1>("h0")) @[Cache.scala 460:55]
    node _T_295 = and(_T_293, _T_294) @[Cache.scala 460:52]
    node _T_296 = and(io.out.ready, _T_295) @[Cache.scala 460:31]
    node _T_297 = eq(miss, UInt<1>("h0")) @[Cache.scala 460:73]
    node _T_298 = and(_T_296, _T_297) @[Cache.scala 460:70]
    node _T_299 = eq(probe, UInt<1>("h0")) @[Cache.scala 460:82]
    node _T_300 = and(_T_298, _T_299) @[Cache.scala 460:79]
    io.in.ready <= _T_300 @[Cache.scala 460:15]
    node _T_301 = eq(state, UInt<4>("h0")) @[Cache.scala 461:49]
    node _T_302 = and(_T_301, io.out.ready) @[Cache.scala 461:60]
    node _T_303 = eq(state, UInt<4>("h8")) @[Cache.scala 461:85]
    node _T_304 = eq(state2, UInt<2>("h2")) @[Cache.scala 461:109]
    node _T_305 = and(_T_303, _T_304) @[Cache.scala 461:99]
    node _T_306 = or(_T_302, _T_305) @[Cache.scala 461:76]
    node _T_307 = and(hitReadBurst, _T_306) @[Cache.scala 461:39]
    io.dataReadRespToL1 <= _T_307 @[Cache.scala 461:23]
    node _T_308 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 463:38]
    node _T_309 = eq(_T_308, UInt<1>("h0")) @[Cache.scala 463:10]
    node _T_310 = asUInt(reset) @[Cache.scala 463:9]
    node _T_311 = or(_T_309, _T_310) @[Cache.scala 463:9]
    node _T_312 = eq(_T_311, UInt<1>("h0")) @[Cache.scala 463:9]
    when _T_312 : @[Cache.scala 463:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:463 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") : SIM_1 @[Cache.scala 463:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 463:9]
    node _T_313 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 464:38]
    node _T_314 = eq(_T_313, UInt<1>("h0")) @[Cache.scala 464:10]
    node _T_315 = asUInt(reset) @[Cache.scala 464:9]
    node _T_316 = or(_T_314, _T_315) @[Cache.scala 464:9]
    node _T_317 = eq(_T_316, UInt<1>("h0")) @[Cache.scala 464:9]
    when _T_317 : @[Cache.scala 464:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:464 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") : SIM_2 @[Cache.scala 464:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 464:9]
    node _T_318 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 465:12]
    node _T_319 = and(_T_318, io.flush) @[Cache.scala 465:18]
    node _T_320 = eq(_T_319, UInt<1>("h0")) @[Cache.scala 465:10]
    node _T_321 = asUInt(reset) @[Cache.scala 465:9]
    node _T_322 = or(_T_320, _T_321) @[Cache.scala 465:9]
    node _T_323 = eq(_T_322, UInt<1>("h0")) @[Cache.scala 465:9]
    when _T_323 : @[Cache.scala 465:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: only allow to flush icache\n    at Cache.scala:465 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") : SIM_3 @[Cache.scala 465:9]
      stop(clock, UInt<1>("h1"), 1) @[Cache.scala 465:9]
    wire _WIRE_16 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_17 : UInt<32>
    _WIRE_17 <= io.in.bits.req.addr
    node _T_324 = bits(_WIRE_17, 2, 0) @[Cache.scala 79:45]
    _WIRE_16.byteOffset <= _T_324 @[Cache.scala 79:45]
    node _T_325 = bits(_WIRE_17, 5, 3) @[Cache.scala 79:45]
    _WIRE_16.wordIndex <= _T_325 @[Cache.scala 79:45]
    node _T_326 = bits(_WIRE_17, 14, 6) @[Cache.scala 79:45]
    _WIRE_16.index <= _T_326 @[Cache.scala 79:45]
    node _T_327 = bits(_WIRE_17, 31, 15) @[Cache.scala 79:45]
    _WIRE_16.tag <= _T_327 @[Cache.scala 79:45]
    node lo_1 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 466:465]
    node hi_2 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 466:465]
    node _T_328 = cat(hi_2, lo_1) @[Cache.scala 466:465]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_329 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_330 = tail(_T_329, 1) @[GTimer.scala 25:12]
    REG <= _T_330 @[GTimer.scala 25:7]
    wire _WIRE_18 : UInt<1>
    _WIRE_18 <= UInt<1>("h0")
    node _T_331 = and(UInt<1>("h1"), _WIRE_18) @[Debug.scala 55:16]
    when _T_331 : @[Debug.scala 55:31]
      node _T_332 = asUInt(reset) @[Debug.scala 56:24]
      node _T_333 = eq(_T_332, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_333 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG) : SIM_4 @[Debug.scala 56:24]
      node _T_334 = asUInt(reset) @[Debug.scala 57:13]
      node _T_335 = eq(_T_334, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_335 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _WIRE_16.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_328) : SIM_5 @[Debug.scala 57:13]
    node _T_336 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_337 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_338 = tail(_T_337, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_338 @[GTimer.scala 25:7]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_339 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_340 = tail(_T_339, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_340 @[GTimer.scala 25:7]
    wire _WIRE_19 : UInt<1>
    _WIRE_19 <= UInt<1>("h0")
    node _T_341 = and(_T_336, _WIRE_19) @[Debug.scala 55:16]
    when _T_341 : @[Debug.scala 55:31]
      node _T_342 = asUInt(reset) @[Debug.scala 56:24]
      node _T_343 = eq(_T_342, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_343 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_2) : SIM_6 @[Debug.scala 56:24]
      node _T_344 = asUInt(reset) @[Debug.scala 57:13]
      node _T_345 = eq(_T_344, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_345 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "%d: [l2cache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", REG_1, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) : SIM_7 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_346 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_347 = tail(_T_346, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_347 @[GTimer.scala 25:7]
    wire _WIRE_20 : UInt<1>
    _WIRE_20 <= UInt<1>("h0")
    node _T_348 = and(UInt<1>("h1"), _WIRE_20) @[Debug.scala 55:16]
    when _T_348 : @[Debug.scala 55:31]
      node _T_349 = asUInt(reset) @[Debug.scala 56:24]
      node _T_350 = eq(_T_349, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_350 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_3) : SIM_8 @[Debug.scala 56:24]
      node _T_351 = asUInt(reset) @[Debug.scala 57:13]
      node _T_352 = eq(_T_351, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_352 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) : SIM_9 @[Debug.scala 57:13]
    reg REG_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_353 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_354 = tail(_T_353, 1) @[GTimer.scala 25:12]
    REG_4 <= _T_354 @[GTimer.scala 25:7]
    wire _WIRE_21 : UInt<1>
    _WIRE_21 <= UInt<1>("h0")
    node _T_355 = and(UInt<1>("h1"), _WIRE_21) @[Debug.scala 55:16]
    when _T_355 : @[Debug.scala 55:31]
      node _T_356 = asUInt(reset) @[Debug.scala 56:24]
      node _T_357 = eq(_T_356, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_357 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_4) : SIM_10 @[Debug.scala 56:24]
      node _T_358 = asUInt(reset) @[Debug.scala 57:13]
      node _T_359 = eq(_T_358, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_359 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, UInt<1>("h0"), UInt<1>("h0")) : SIM_11 @[Debug.scala 57:13]
    reg REG_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_360 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_361 = tail(_T_360, 1) @[GTimer.scala 25:12]
    REG_5 <= _T_361 @[GTimer.scala 25:7]
    wire _WIRE_22 : UInt<1>
    _WIRE_22 <= UInt<1>("h0")
    node _T_362 = and(UInt<1>("h1"), _WIRE_22) @[Debug.scala 55:16]
    when _T_362 : @[Debug.scala 55:31]
      node _T_363 = asUInt(reset) @[Debug.scala 56:24]
      node _T_364 = eq(_T_363, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_364 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_5) : SIM_12 @[Debug.scala 56:24]
      node _T_365 = asUInt(reset) @[Debug.scala 57:13]
      node _T_366 = eq(_T_365, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_366 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) : SIM_13 @[Debug.scala 57:13]
    node lo_2 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 471:48]
    node hi_3 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 471:48]
    node _T_367 = cat(hi_3, lo_2) @[Cache.scala 471:48]
    reg REG_6 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_368 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_369 = tail(_T_368, 1) @[GTimer.scala 25:12]
    REG_6 <= _T_369 @[GTimer.scala 25:7]
    wire _WIRE_23 : UInt<1>
    _WIRE_23 <= UInt<1>("h0")
    node _T_370 = and(UInt<1>("h1"), _WIRE_23) @[Debug.scala 55:16]
    when _T_370 : @[Debug.scala 55:31]
      node _T_371 = asUInt(reset) @[Debug.scala 56:24]
      node _T_372 = eq(_T_371, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_372 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_6) : SIM_14 @[Debug.scala 56:24]
      node _T_373 = asUInt(reset) @[Debug.scala 57:13]
      node _T_374 = eq(_T_373, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_374 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DreadCache: %x \n", _T_367) : SIM_15 @[Debug.scala 57:13]
    reg REG_7 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_375 = add(REG_7, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_376 = tail(_T_375, 1) @[GTimer.scala 25:12]
    REG_7 <= _T_376 @[GTimer.scala 25:7]
    wire _WIRE_24 : UInt<1>
    _WIRE_24 <= UInt<1>("h0")
    node _T_377 = and(UInt<1>("h1"), _WIRE_24) @[Debug.scala 55:16]
    when _T_377 : @[Debug.scala 55:31]
      node _T_378 = asUInt(reset) @[Debug.scala 56:24]
      node _T_379 = eq(_T_378, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_379 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_7) : SIM_16 @[Debug.scala 56:24]
      node _T_380 = asUInt(reset) @[Debug.scala 57:13]
      node _T_381 = eq(_T_380, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_381 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _WIRE_4.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) : SIM_17 @[Debug.scala 57:13]
    node _T_382 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 40:37]
    reg REG_8 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_383 = add(REG_8, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_384 = tail(_T_383, 1) @[GTimer.scala 25:12]
    REG_8 <= _T_384 @[GTimer.scala 25:7]
    wire _WIRE_25 : UInt<1>
    _WIRE_25 <= UInt<1>("h0")
    node _T_385 = and(_T_382, _WIRE_25) @[Debug.scala 55:16]
    when _T_385 : @[Debug.scala 55:31]
      node _T_386 = asUInt(reset) @[Debug.scala 56:24]
      node _T_387 = eq(_T_386, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_387 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_8) : SIM_18 @[Debug.scala 56:24]
      node _T_388 = asUInt(reset) @[Debug.scala 57:13]
      node _T_389 = eq(_T_388, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_389 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) : SIM_19 @[Debug.scala 57:13]
    node _T_390 = eq(state, UInt<4>("h3")) @[Cache.scala 475:16]
    node _T_391 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_392 = and(_T_390, _T_391) @[Cache.scala 475:35]
    wire _WIRE_26 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_27 : UInt<32>
    _WIRE_27 <= io.in.bits.req.addr
    node _T_393 = bits(_WIRE_27, 2, 0) @[Cache.scala 79:45]
    _WIRE_26.byteOffset <= _T_393 @[Cache.scala 79:45]
    node _T_394 = bits(_WIRE_27, 5, 3) @[Cache.scala 79:45]
    _WIRE_26.wordIndex <= _T_394 @[Cache.scala 79:45]
    node _T_395 = bits(_WIRE_27, 14, 6) @[Cache.scala 79:45]
    _WIRE_26.index <= _T_395 @[Cache.scala 79:45]
    node _T_396 = bits(_WIRE_27, 31, 15) @[Cache.scala 79:45]
    _WIRE_26.tag <= _T_396 @[Cache.scala 79:45]
    reg REG_9 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_397 = add(REG_9, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_398 = tail(_T_397, 1) @[GTimer.scala 25:12]
    REG_9 <= _T_398 @[GTimer.scala 25:7]
    wire _WIRE_28 : UInt<1>
    _WIRE_28 <= UInt<1>("h0")
    node _T_399 = and(_T_392, _WIRE_28) @[Debug.scala 55:16]
    when _T_399 : @[Debug.scala 55:31]
      node _T_400 = asUInt(reset) @[Debug.scala 56:24]
      node _T_401 = eq(_T_400, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_401 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_9) : SIM_20 @[Debug.scala 56:24]
      node _T_402 = asUInt(reset) @[Debug.scala 57:13]
      node _T_403 = eq(_T_402, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_403 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", value_2, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _WIRE_26.index, io.in.bits.waymask) : SIM_21 @[Debug.scala 57:13]
    node _T_404 = eq(state, UInt<4>("h1")) @[Cache.scala 476:16]
    node _T_405 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 40:37]
    node _T_406 = and(_T_404, _T_405) @[Cache.scala 476:34]
    wire _WIRE_29 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_30 : UInt<32>
    _WIRE_30 <= io.in.bits.req.addr
    node _T_407 = bits(_WIRE_30, 2, 0) @[Cache.scala 79:45]
    _WIRE_29.byteOffset <= _T_407 @[Cache.scala 79:45]
    node _T_408 = bits(_WIRE_30, 5, 3) @[Cache.scala 79:45]
    _WIRE_29.wordIndex <= _T_408 @[Cache.scala 79:45]
    node _T_409 = bits(_WIRE_30, 14, 6) @[Cache.scala 79:45]
    _WIRE_29.index <= _T_409 @[Cache.scala 79:45]
    node _T_410 = bits(_WIRE_30, 31, 15) @[Cache.scala 79:45]
    _WIRE_29.tag <= _T_410 @[Cache.scala 79:45]
    reg REG_10 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_411 = add(REG_10, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_412 = tail(_T_411, 1) @[GTimer.scala 25:12]
    REG_10 <= _T_412 @[GTimer.scala 25:7]
    wire _WIRE_31 : UInt<1>
    _WIRE_31 <= UInt<1>("h0")
    node _T_413 = and(_T_406, _WIRE_31) @[Debug.scala 55:16]
    when _T_413 : @[Debug.scala 55:31]
      node _T_414 = asUInt(reset) @[Debug.scala 56:24]
      node _T_415 = eq(_T_414, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_415 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_10) : SIM_22 @[Debug.scala 56:24]
      node _T_416 = asUInt(reset) @[Debug.scala 57:13]
      node _T_417 = eq(_T_416, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_417 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _WIRE_29.index, io.in.bits.waymask) : SIM_23 @[Debug.scala 57:13]
    node _T_418 = eq(state, UInt<4>("h2")) @[Cache.scala 477:16]
    node _T_419 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 40:37]
    node _T_420 = and(_T_418, _T_419) @[Cache.scala 477:35]
    wire _WIRE_32 : { tag : UInt<17>, index : UInt<9>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_33 : UInt<32>
    _WIRE_33 <= io.in.bits.req.addr
    node _T_421 = bits(_WIRE_33, 2, 0) @[Cache.scala 79:45]
    _WIRE_32.byteOffset <= _T_421 @[Cache.scala 79:45]
    node _T_422 = bits(_WIRE_33, 5, 3) @[Cache.scala 79:45]
    _WIRE_32.wordIndex <= _T_422 @[Cache.scala 79:45]
    node _T_423 = bits(_WIRE_33, 14, 6) @[Cache.scala 79:45]
    _WIRE_32.index <= _T_423 @[Cache.scala 79:45]
    node _T_424 = bits(_WIRE_33, 31, 15) @[Cache.scala 79:45]
    _WIRE_32.tag <= _T_424 @[Cache.scala 79:45]
    reg REG_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_425 = add(REG_11, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_426 = tail(_T_425, 1) @[GTimer.scala 25:12]
    REG_11 <= _T_426 @[GTimer.scala 25:7]
    wire _WIRE_34 : UInt<1>
    _WIRE_34 <= UInt<1>("h0")
    node _T_427 = and(_T_420, _WIRE_34) @[Debug.scala 55:16]
    when _T_427 : @[Debug.scala 55:31]
      node _T_428 = asUInt(reset) @[Debug.scala 56:24]
      node _T_429 = eq(_T_428, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_429 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3_2: ", REG_11) : SIM_24 @[Debug.scala 56:24]
      node _T_430 = asUInt(reset) @[Debug.scala 57:13]
      node _T_431 = eq(_T_430, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_431 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", value_1, io.mem.resp.bits.rdata, addr.tag, _WIRE_32.index, io.in.bits.waymask) : SIM_25 @[Debug.scala 57:13]

  module SRAMTemplate_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>}}, flip resp : { data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    smem array : UInt<19>[4] [512] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SRAMTemplate.scala 80:30]
    reg value : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[Counter.scala 60:40]
    wire wrap : UInt<1>
    wrap <= UInt<1>("h0")
    when REG : @[Counter.scala 118:17]
      node wrap_wrap = eq(value, UInt<9>("h1ff")) @[Counter.scala 72:24]
      node _wrap_value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      value <= _wrap_value_T_1 @[Counter.scala 76:15]
      wrap <= wrap_wrap @[Counter.scala 118:24]
    when wrap : @[SRAMTemplate.scala 82:24]
      REG <= UInt<1>("h0") @[SRAMTemplate.scala 82:38]
    resetState <= REG @[SRAMTemplate.scala 84:16]
    resetSet <= value @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<19> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _T_1 = cat(hi, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _WIRE, _T_1) @[SRAMTemplate.scala 92:22]
    node _T_2 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_2, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<19>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_3 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_6 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_7 = or(setIdx, UInt<9>("h0"))
      node _T_8 = bits(_T_7, 8, 0)
      write mport MPORT = array[_T_8], clock
      when _T_3 :
        MPORT[0] <= wdata[0]
      when _T_4 :
        MPORT[1] <= wdata[1]
      when _T_5 :
        MPORT[2] <= wdata[2]
      when _T_6 :
        MPORT[3] <= wdata[3]
    wire _WIRE_1 : UInt @[SRAMTemplate.scala 98:31]
    _WIRE_1 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _WIRE_1 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_9 = or(_WIRE_1, UInt<9>("h0")) @[SRAMTemplate.scala 98:31]
      node _T_10 = bits(_T_9, 8, 0) @[SRAMTemplate.scala 98:31]
      read mport MPORT_1 = array[_T_10], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_2 : UInt<19>
    _WIRE_2 <= MPORT_1[0]
    node _T_11 = bits(_WIRE_2, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _T_11 @[SRAMTemplate.scala 98:78]
    node _T_12 = bits(_WIRE_2, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _T_12 @[SRAMTemplate.scala 98:78]
    node _T_13 = bits(_WIRE_2, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _T_13 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<19>
    _WIRE_3 <= MPORT_1[1]
    node _T_14 = bits(_WIRE_3, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _T_14 @[SRAMTemplate.scala 98:78]
    node _T_15 = bits(_WIRE_3, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _T_15 @[SRAMTemplate.scala 98:78]
    node _T_16 = bits(_WIRE_3, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _T_16 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : UInt<19>
    _WIRE_4 <= MPORT_1[2]
    node _T_17 = bits(_WIRE_4, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _T_17 @[SRAMTemplate.scala 98:78]
    node _T_18 = bits(_WIRE_4, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _T_18 @[SRAMTemplate.scala 98:78]
    node _T_19 = bits(_WIRE_4, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _T_19 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_5 : UInt<19>
    _WIRE_5 <= MPORT_1[3]
    node _T_20 = bits(_WIRE_5, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _T_20 @[SRAMTemplate.scala 98:78]
    node _T_21 = bits(_WIRE_5, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _T_21 @[SRAMTemplate.scala 98:78]
    node _T_22 = bits(_WIRE_5, 18, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _T_22 @[SRAMTemplate.scala 98:78]
    wire _WIRE_6 : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].dirty <= rdata_0.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].valid <= rdata_0.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].tag <= rdata_0.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].dirty <= rdata_1.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].valid <= rdata_1.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].tag <= rdata_1.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].dirty <= rdata_2.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].valid <= rdata_2.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].tag <= rdata_2.tag @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].dirty <= rdata_3.dirty @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].valid <= rdata_3.valid @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].tag <= rdata_3.tag @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].dirty <= _WIRE_6[0].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].valid <= _WIRE_6[0].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[0].tag <= _WIRE_6[0].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].dirty <= _WIRE_6[1].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].valid <= _WIRE_6[1].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].tag <= _WIRE_6[1].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].dirty <= _WIRE_6[2].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].valid <= _WIRE_6[2].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].tag <= _WIRE_6[2].tag @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].dirty <= _WIRE_6[3].dirty @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].valid <= _WIRE_6[3].valid @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].tag <= _WIRE_6[3].tag @[SRAMTemplate.scala 99:18]
    node _T_23 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_24 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_25 = and(_T_23, _T_24) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_25 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>}}, chosen : UInt<0>}

    io.chosen <= UInt<1>("h0") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 124:15]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(UInt<1>("h1"), UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module SRAMTemplateWithArbiter_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>}}, flip resp : { data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_5 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.dirty <= io.w.req.bits.data.dirty @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.valid <= io.w.req.bits.data.valid @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.tag <= io.w.req.bits.data.tag @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_12 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _WIRE[0].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].tag <= UInt<17>("h0") @[Hold.scala 23:81]
    _WIRE[1].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].tag <= UInt<17>("h0") @[Hold.scala 23:81]
    _WIRE[2].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].tag <= UInt<17>("h0") @[Hold.scala 23:81]
    _WIRE[3].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].tag <= UInt<17>("h0") @[Hold.scala 23:81]
    reg r : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when REG : @[Reg.scala 28:19]
      r[0].dirty <= ram.io.r.resp.data[0].dirty @[Reg.scala 28:23]
      r[0].valid <= ram.io.r.resp.data[0].valid @[Reg.scala 28:23]
      r[0].tag <= ram.io.r.resp.data[0].tag @[Reg.scala 28:23]
      r[1].dirty <= ram.io.r.resp.data[1].dirty @[Reg.scala 28:23]
      r[1].valid <= ram.io.r.resp.data[1].valid @[Reg.scala 28:23]
      r[1].tag <= ram.io.r.resp.data[1].tag @[Reg.scala 28:23]
      r[2].dirty <= ram.io.r.resp.data[2].dirty @[Reg.scala 28:23]
      r[2].valid <= ram.io.r.resp.data[2].valid @[Reg.scala 28:23]
      r[2].tag <= ram.io.r.resp.data[2].tag @[Reg.scala 28:23]
      r[3].dirty <= ram.io.r.resp.data[3].dirty @[Reg.scala 28:23]
      r[3].valid <= ram.io.r.resp.data[3].valid @[Reg.scala 28:23]
      r[3].tag <= ram.io.r.resp.data[3].tag @[Reg.scala 28:23]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data[0].dirty <= _T_1[0].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].valid <= _T_1[0].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[0].tag <= _T_1[0].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].dirty <= _T_1[1].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].valid <= _T_1[1].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].tag <= _T_1[1].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].dirty <= _T_1[2].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].valid <= _T_1[2].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].tag <= _T_1[2].tag @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].dirty <= _T_1[3].dirty @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].valid <= _T_1[3].valid @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].tag <= _T_1[3].tag @[SRAMTemplate.scala 130:17]

  module SRAMTemplate_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>}}, flip resp : { data : { data : UInt<64>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    smem array : UInt<64>[4] [4096] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1>
    resetState <= UInt<1>("h0")
    wire resetSet : UInt
    resetSet <= UInt<1>("h0")
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _WIRE : UInt<64> @[SRAMTemplate.scala 92:47]
    _WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _WIRE, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _T_1 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node waymask = mux(resetState, _T_1, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T_2 = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_3 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_4 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_5 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_6 = or(setIdx, UInt<12>("h0"))
      node _T_7 = bits(_T_6, 11, 0)
      write mport MPORT = array[_T_7], clock
      when _T_2 :
        MPORT[0] <= wdata[0]
      when _T_3 :
        MPORT[1] <= wdata[1]
      when _T_4 :
        MPORT[2] <= wdata[2]
      when _T_5 :
        MPORT[3] <= wdata[3]
    wire _WIRE_1 : UInt @[SRAMTemplate.scala 98:31]
    _WIRE_1 is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _WIRE_1 <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _T_8 = or(_WIRE_1, UInt<12>("h0")) @[SRAMTemplate.scala 98:31]
      node _T_9 = bits(_T_8, 11, 0) @[SRAMTemplate.scala 98:31]
      read mport MPORT_1 = array[_T_9], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_2 : UInt<64>
    _WIRE_2 <= MPORT_1[0]
    node _T_10 = bits(_WIRE_2, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _T_10 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_3 : UInt<64>
    _WIRE_3 <= MPORT_1[1]
    node _T_11 = bits(_WIRE_3, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _T_11 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_4 : UInt<64>
    _WIRE_4 <= MPORT_1[2]
    node _T_12 = bits(_WIRE_4, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _T_12 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _WIRE_5 : UInt<64>
    _WIRE_5 <= MPORT_1[3]
    node _T_13 = bits(_WIRE_5, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _T_13 @[SRAMTemplate.scala 98:78]
    wire _WIRE_6 : { data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE_6[0].data <= rdata_0.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[1].data <= rdata_1.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[2].data <= rdata_2.data @[SRAMTemplate.scala 99:28]
    _WIRE_6[3].data <= rdata_3.data @[SRAMTemplate.scala 99:28]
    io.r.resp.data[0].data <= _WIRE_6[0].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[1].data <= _WIRE_6[1].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[2].data <= _WIRE_6[2].data @[SRAMTemplate.scala 99:18]
    io.r.resp.data[3].data <= _WIRE_6[3].data @[SRAMTemplate.scala 99:18]
    node _T_14 = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _T_15 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _T_16 = and(_T_14, _T_15) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _T_16 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.setIdx <= io.in[1].bits.setIdx @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.setIdx <= io.in[0].bits.setIdx @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module SRAMTemplateWithArbiter_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>}}, flip resp : { data : { data : UInt<64>}[4]}}[2], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_6 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w.req.bits.waymask <= io.w.req.bits.waymask @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.data.data <= io.w.req.bits.data.data @[SRAMTemplate.scala 122:12]
    ram.io.w.req.bits.setIdx <= io.w.req.bits.setIdx @[SRAMTemplate.scala 122:12]
    ram.io.w.req.valid <= io.w.req.valid @[SRAMTemplate.scala 122:12]
    io.w.req.ready <= ram.io.w.req.ready @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_13 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0].bits.setIdx <= io.r[0].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[0].valid <= io.r[0].req.valid @[SRAMTemplate.scala 125:17]
    io.r[0].req.ready <= readArb.io.in[0].ready @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].bits.setIdx <= io.r[1].req.bits.setIdx @[SRAMTemplate.scala 125:17]
    readArb.io.in[1].valid <= io.r[1].req.valid @[SRAMTemplate.scala 125:17]
    io.r[1].req.ready <= readArb.io.in[1].ready @[SRAMTemplate.scala 125:17]
    ram.io.r.req.bits.setIdx <= readArb.io.out.bits.setIdx @[SRAMTemplate.scala 126:16]
    ram.io.r.req.valid <= readArb.io.out.valid @[SRAMTemplate.scala 126:16]
    readArb.io.out.ready <= ram.io.r.req.ready @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when REG : @[Reg.scala 28:19]
      r[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      r[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      r[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      r[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data[0].data <= _T_1[0].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[1].data <= _T_1[1].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[2].data <= _T_1[2].data @[SRAMTemplate.scala 130:17]
    io.r[0].resp.data[3].data <= _T_1[3].data @[SRAMTemplate.scala 130:17]
    node _T_2 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[SRAMTemplate.scala 130:58]
    REG_1 <= _T_2 @[SRAMTemplate.scala 130:58]
    wire _WIRE_1 : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE_1[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r_1 : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE_1) @[Reg.scala 27:20]
    when REG_1 : @[Reg.scala 28:19]
      r_1[0].data <= ram.io.r.resp.data[0].data @[Reg.scala 28:23]
      r_1[1].data <= ram.io.r.resp.data[1].data @[Reg.scala 28:23]
      r_1[2].data <= ram.io.r.resp.data[2].data @[Reg.scala 28:23]
      r_1[3].data <= ram.io.r.resp.data[3].data @[Reg.scala 28:23]
    node _T_3 = mux(REG_1, ram.io.r.resp.data, r_1) @[Hold.scala 23:48]
    io.r[1].resp.data[0].data <= _T_3[0].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[1].data <= _T_3[1].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[2].data <= _T_3[2].data @[SRAMTemplate.scala 130:17]
    io.r[1].resp.data[3].data <= _T_3[3].data @[SRAMTemplate.scala 130:17]

  module Arbiter_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 123:13]
    io.out.bits.wdata <= io.in[1].bits.wdata @[Arbiter.scala 124:15]
    io.out.bits.wmask <= io.in[1].bits.wmask @[Arbiter.scala 124:15]
    io.out.bits.cmd <= io.in[1].bits.cmd @[Arbiter.scala 124:15]
    io.out.bits.size <= io.in[1].bits.size @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[1].bits.addr @[Arbiter.scala 124:15]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 127:17]
      io.out.bits.wdata <= io.in[0].bits.wdata @[Arbiter.scala 128:19]
      io.out.bits.wmask <= io.in[0].bits.wmask @[Arbiter.scala 128:19]
      io.out.bits.cmd <= io.in[0].bits.cmd @[Arbiter.scala 128:19]
      io.out.bits.size <= io.in[0].bits.size @[Arbiter.scala 128:19]
      io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 128:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]

  module Cache_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip flush : UInt<2>, out : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}

    inst s1 of CacheStage1_2 @[Cache.scala 482:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2_2 @[Cache.scala 483:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3_2 @[Cache.scala 484:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter_4 @[Cache.scala 485:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_5 @[Cache.scala 486:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    inst arb of Arbiter_14 @[Cache.scala 495:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[1].bits.wdata <= io.in.req.bits.wdata @[Cache.scala 496:28]
    arb.io.in[1].bits.wmask <= io.in.req.bits.wmask @[Cache.scala 496:28]
    arb.io.in[1].bits.cmd <= io.in.req.bits.cmd @[Cache.scala 496:28]
    arb.io.in[1].bits.size <= io.in.req.bits.size @[Cache.scala 496:28]
    arb.io.in[1].bits.addr <= io.in.req.bits.addr @[Cache.scala 496:28]
    arb.io.in[1].valid <= io.in.req.valid @[Cache.scala 496:28]
    io.in.req.ready <= arb.io.in[1].ready @[Cache.scala 496:28]
    s1.io.in.bits.wdata <= arb.io.out.bits.wdata @[Cache.scala 498:12]
    s1.io.in.bits.wmask <= arb.io.out.bits.wmask @[Cache.scala 498:12]
    s1.io.in.bits.cmd <= arb.io.out.bits.cmd @[Cache.scala 498:12]
    s1.io.in.bits.size <= arb.io.out.bits.size @[Cache.scala 498:12]
    s1.io.in.bits.addr <= arb.io.out.bits.addr @[Cache.scala 498:12]
    s1.io.in.valid <= arb.io.out.valid @[Cache.scala 498:12]
    arb.io.out.ready <= s1.io.in.ready @[Cache.scala 498:12]
    node _T = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 40:37]
    node _T_1 = bits(io.flush, 0, 0) @[Cache.scala 504:66]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      REG <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_2 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_2 : @[Pipeline.scala 26:38]
      REG <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_1 : @[Pipeline.scala 27:20]
      REG <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _T_3 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg r : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when _T_3 : @[Reg.scala 16:19]
      r.req.wdata <= s1.io.out.bits.req.wdata @[Reg.scala 16:23]
      r.req.wmask <= s1.io.out.bits.req.wmask @[Reg.scala 16:23]
      r.req.cmd <= s1.io.out.bits.req.cmd @[Reg.scala 16:23]
      r.req.size <= s1.io.out.bits.req.size @[Reg.scala 16:23]
      r.req.addr <= s1.io.out.bits.req.addr @[Reg.scala 16:23]
    s2.io.in.bits.req.wdata <= r.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= r.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= r.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= r.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= r.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= REG @[Pipeline.scala 31:17]
    node _T_4 = bits(io.flush, 1, 1) @[Cache.scala 505:64]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_5 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_5 : @[Pipeline.scala 26:38]
      REG_1 <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_4 : @[Pipeline.scala 27:20]
      REG_1 <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _T_6 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg r_1 : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}, metas : { tag : UInt<17>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<12>, data : { data : UInt<64>}, waymask : UInt<4>}}, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when _T_6 : @[Reg.scala 16:19]
      r_1.forwardData.waymask <= s2.io.out.bits.forwardData.waymask @[Reg.scala 16:23]
      r_1.forwardData.data.data <= s2.io.out.bits.forwardData.data.data @[Reg.scala 16:23]
      r_1.forwardData.setIdx <= s2.io.out.bits.forwardData.setIdx @[Reg.scala 16:23]
      r_1.isForwardData <= s2.io.out.bits.isForwardData @[Reg.scala 16:23]
      r_1.mmio <= s2.io.out.bits.mmio @[Reg.scala 16:23]
      r_1.waymask <= s2.io.out.bits.waymask @[Reg.scala 16:23]
      r_1.hit <= s2.io.out.bits.hit @[Reg.scala 16:23]
      r_1.datas[0].data <= s2.io.out.bits.datas[0].data @[Reg.scala 16:23]
      r_1.datas[1].data <= s2.io.out.bits.datas[1].data @[Reg.scala 16:23]
      r_1.datas[2].data <= s2.io.out.bits.datas[2].data @[Reg.scala 16:23]
      r_1.datas[3].data <= s2.io.out.bits.datas[3].data @[Reg.scala 16:23]
      r_1.metas[0].dirty <= s2.io.out.bits.metas[0].dirty @[Reg.scala 16:23]
      r_1.metas[0].valid <= s2.io.out.bits.metas[0].valid @[Reg.scala 16:23]
      r_1.metas[0].tag <= s2.io.out.bits.metas[0].tag @[Reg.scala 16:23]
      r_1.metas[1].dirty <= s2.io.out.bits.metas[1].dirty @[Reg.scala 16:23]
      r_1.metas[1].valid <= s2.io.out.bits.metas[1].valid @[Reg.scala 16:23]
      r_1.metas[1].tag <= s2.io.out.bits.metas[1].tag @[Reg.scala 16:23]
      r_1.metas[2].dirty <= s2.io.out.bits.metas[2].dirty @[Reg.scala 16:23]
      r_1.metas[2].valid <= s2.io.out.bits.metas[2].valid @[Reg.scala 16:23]
      r_1.metas[2].tag <= s2.io.out.bits.metas[2].tag @[Reg.scala 16:23]
      r_1.metas[3].dirty <= s2.io.out.bits.metas[3].dirty @[Reg.scala 16:23]
      r_1.metas[3].valid <= s2.io.out.bits.metas[3].valid @[Reg.scala 16:23]
      r_1.metas[3].tag <= s2.io.out.bits.metas[3].tag @[Reg.scala 16:23]
      r_1.req.wdata <= s2.io.out.bits.req.wdata @[Reg.scala 16:23]
      r_1.req.wmask <= s2.io.out.bits.req.wmask @[Reg.scala 16:23]
      r_1.req.cmd <= s2.io.out.bits.req.cmd @[Reg.scala 16:23]
      r_1.req.size <= s2.io.out.bits.req.size @[Reg.scala 16:23]
      r_1.req.addr <= s2.io.out.bits.req.addr @[Reg.scala 16:23]
    s3.io.in.bits.forwardData.waymask <= r_1.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= r_1.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= r_1.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= r_1.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= r_1.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= r_1.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= r_1.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= r_1.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= r_1.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= r_1.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= r_1.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= r_1.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= r_1.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= r_1.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= r_1.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= r_1.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= r_1.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= r_1.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= r_1.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= r_1.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= r_1.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= r_1.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= r_1.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= r_1.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= r_1.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= r_1.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= r_1.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= r_1.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= REG_1 @[Pipeline.scala 31:17]
    io.in.resp.bits.rdata <= s3.io.out.bits.rdata @[Cache.scala 506:14]
    io.in.resp.bits.cmd <= s3.io.out.bits.cmd @[Cache.scala 506:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 506:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 506:14]
    node _T_7 = bits(io.flush, 1, 1) @[Cache.scala 507:26]
    s3.io.flush <= _T_7 @[Cache.scala 507:15]
    s3.io.mem.resp.bits.rdata <= io.out.mem.resp.bits.rdata @[Cache.scala 508:14]
    s3.io.mem.resp.bits.cmd <= io.out.mem.resp.bits.cmd @[Cache.scala 508:14]
    s3.io.mem.resp.valid <= io.out.mem.resp.valid @[Cache.scala 508:14]
    io.out.mem.resp.ready <= s3.io.mem.resp.ready @[Cache.scala 508:14]
    io.out.mem.req.bits.wdata <= s3.io.mem.req.bits.wdata @[Cache.scala 508:14]
    io.out.mem.req.bits.wmask <= s3.io.mem.req.bits.wmask @[Cache.scala 508:14]
    io.out.mem.req.bits.cmd <= s3.io.mem.req.bits.cmd @[Cache.scala 508:14]
    io.out.mem.req.bits.size <= s3.io.mem.req.bits.size @[Cache.scala 508:14]
    io.out.mem.req.bits.addr <= s3.io.mem.req.bits.addr @[Cache.scala 508:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 508:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 508:14]
    s3.io.mmio.resp.bits.rdata <= io.mmio.resp.bits.rdata @[Cache.scala 509:11]
    s3.io.mmio.resp.bits.cmd <= io.mmio.resp.bits.cmd @[Cache.scala 509:11]
    s3.io.mmio.resp.valid <= io.mmio.resp.valid @[Cache.scala 509:11]
    io.mmio.resp.ready <= s3.io.mmio.resp.ready @[Cache.scala 509:11]
    io.mmio.req.bits.wdata <= s3.io.mmio.req.bits.wdata @[Cache.scala 509:11]
    io.mmio.req.bits.wmask <= s3.io.mmio.req.bits.wmask @[Cache.scala 509:11]
    io.mmio.req.bits.cmd <= s3.io.mmio.req.bits.cmd @[Cache.scala 509:11]
    io.mmio.req.bits.size <= s3.io.mmio.req.bits.size @[Cache.scala 509:11]
    io.mmio.req.bits.addr <= s3.io.mmio.req.bits.addr @[Cache.scala 509:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 509:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 509:11]
    node _T_8 = eq(s2.io.in.valid, UInt<1>("h0")) @[Cache.scala 510:15]
    node _T_9 = eq(s3.io.in.valid, UInt<1>("h0")) @[Cache.scala 510:34]
    node _T_10 = and(_T_8, _T_9) @[Cache.scala 510:31]
    io.empty <= _T_10 @[Cache.scala 510:12]
    node _T_11 = eq(s3.io.out.bits.cmd, UInt<3>("h4")) @[SimpleBus.scala 95:26]
    node _T_12 = and(s3.io.out.valid, _T_11) @[Cache.scala 512:43]
    node _T_13 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 512:100]
    node _T_14 = mux(_T_12, UInt<1>("h0"), _T_13) @[Cache.scala 512:26]
    io.in.resp.valid <= _T_14 @[Cache.scala 512:20]
    wire _WIRE : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>} @[Cache.scala 517:19]
    _WIRE.addr <= io.out.coh.req.bits.addr @[SimpleBus.scala 64:15]
    _WIRE.cmd <= io.out.coh.req.bits.cmd @[SimpleBus.scala 65:14]
    _WIRE.size <= io.out.coh.req.bits.size @[SimpleBus.scala 66:15]
    _WIRE.wdata <= io.out.coh.req.bits.wdata @[SimpleBus.scala 67:16]
    _WIRE.wmask <= io.out.coh.req.bits.wmask @[SimpleBus.scala 68:16]
    arb.io.in[0].bits.wdata <= _WIRE.wdata @[Cache.scala 519:23]
    arb.io.in[0].bits.wmask <= _WIRE.wmask @[Cache.scala 519:23]
    arb.io.in[0].bits.cmd <= _WIRE.cmd @[Cache.scala 519:23]
    arb.io.in[0].bits.size <= _WIRE.size @[Cache.scala 519:23]
    arb.io.in[0].bits.addr <= _WIRE.addr @[Cache.scala 519:23]
    arb.io.in[0].valid <= io.out.coh.req.valid @[Cache.scala 520:24]
    io.out.coh.req.ready <= arb.io.in[0].ready @[Cache.scala 521:26]
    io.out.coh.resp.bits.rdata <= s3.io.cohResp.bits.rdata @[Cache.scala 522:21]
    io.out.coh.resp.bits.cmd <= s3.io.cohResp.bits.cmd @[Cache.scala 522:21]
    io.out.coh.resp.valid <= s3.io.cohResp.valid @[Cache.scala 522:21]
    s3.io.cohResp.ready <= io.out.coh.resp.ready @[Cache.scala 522:21]
    s1.io.metaReadBus.resp.data[0].dirty <= metaArray.io.r[0].resp.data[0].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[0].valid <= metaArray.io.r[0].resp.data[0].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[0].tag <= metaArray.io.r[0].resp.data[0].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].dirty <= metaArray.io.r[0].resp.data[1].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].valid <= metaArray.io.r[0].resp.data[1].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[1].tag <= metaArray.io.r[0].resp.data[1].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].dirty <= metaArray.io.r[0].resp.data[2].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].valid <= metaArray.io.r[0].resp.data[2].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[2].tag <= metaArray.io.r[0].resp.data[2].tag @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].dirty <= metaArray.io.r[0].resp.data[3].dirty @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].valid <= metaArray.io.r[0].resp.data[3].valid @[Cache.scala 530:21]
    s1.io.metaReadBus.resp.data[3].tag <= metaArray.io.r[0].resp.data[3].tag @[Cache.scala 530:21]
    metaArray.io.r[0].req.bits.setIdx <= s1.io.metaReadBus.req.bits.setIdx @[Cache.scala 530:21]
    metaArray.io.r[0].req.valid <= s1.io.metaReadBus.req.valid @[Cache.scala 530:21]
    s1.io.metaReadBus.req.ready <= metaArray.io.r[0].req.ready @[Cache.scala 530:21]
    s1.io.dataReadBus.resp.data[0].data <= dataArray.io.r[0].resp.data[0].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[1].data <= dataArray.io.r[0].resp.data[1].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[2].data <= dataArray.io.r[0].resp.data[2].data @[Cache.scala 531:21]
    s1.io.dataReadBus.resp.data[3].data <= dataArray.io.r[0].resp.data[3].data @[Cache.scala 531:21]
    dataArray.io.r[0].req.bits.setIdx <= s1.io.dataReadBus.req.bits.setIdx @[Cache.scala 531:21]
    dataArray.io.r[0].req.valid <= s1.io.dataReadBus.req.valid @[Cache.scala 531:21]
    s1.io.dataReadBus.req.ready <= dataArray.io.r[0].req.ready @[Cache.scala 531:21]
    s3.io.dataReadBus.resp.data[0].data <= dataArray.io.r[1].resp.data[0].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[1].data <= dataArray.io.r[1].resp.data[1].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[2].data <= dataArray.io.r[1].resp.data[2].data @[Cache.scala 532:21]
    s3.io.dataReadBus.resp.data[3].data <= dataArray.io.r[1].resp.data[3].data @[Cache.scala 532:21]
    dataArray.io.r[1].req.bits.setIdx <= s3.io.dataReadBus.req.bits.setIdx @[Cache.scala 532:21]
    dataArray.io.r[1].req.valid <= s3.io.dataReadBus.req.valid @[Cache.scala 532:21]
    s3.io.dataReadBus.req.ready <= dataArray.io.r[1].req.ready @[Cache.scala 532:21]
    metaArray.io.w.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 534:18]
    metaArray.io.w.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 534:18]
    metaArray.io.w.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 534:18]
    metaArray.io.w.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 534:18]
    s3.io.metaWriteBus.req.ready <= metaArray.io.w.req.ready @[Cache.scala 534:18]
    dataArray.io.w.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 535:18]
    dataArray.io.w.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 535:18]
    dataArray.io.w.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 535:18]
    dataArray.io.w.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 535:18]
    s3.io.dataWriteBus.req.ready <= dataArray.io.w.req.ready @[Cache.scala 535:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 537:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 537:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 537:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 537:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 538:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 538:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 538:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 538:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 539:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 539:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 540:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 540:22]
    reg REG_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_15 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_16 = tail(_T_15, 1) @[GTimer.scala 25:12]
    REG_2 <= _T_16 @[GTimer.scala 25:7]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_17 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 55:16]
    when _T_17 : @[Debug.scala 55:31]
      node _T_18 = asUInt(reset) @[Debug.scala 56:24]
      node _T_19 = eq(_T_18, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_19 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache_2: ", REG_2) : SIM @[Debug.scala 56:24]
      node _T_20 = asUInt(reset) @[Debug.scala 57:13]
      node _T_21 = eq(_T_20, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_21 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) : SIM_1 @[Debug.scala 57:13]
    reg REG_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_22 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_23 = tail(_T_22, 1) @[GTimer.scala 25:12]
    REG_3 <= _T_23 @[GTimer.scala 25:7]
    wire _WIRE_2 : UInt<1>
    _WIRE_2 <= UInt<1>("h0")
    node _T_24 = and(UInt<1>("h1"), _WIRE_2) @[Debug.scala 55:16]
    when _T_24 : @[Debug.scala 55:31]
      node _T_25 = asUInt(reset) @[Debug.scala 56:24]
      node _T_26 = eq(_T_25, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_26 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache_2: ", REG_3) : SIM_2 @[Debug.scala 56:24]
      node _T_27 = asUInt(reset) @[Debug.scala 57:13]
      node _T_28 = eq(_T_27, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_28 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) : SIM_3 @[Debug.scala 57:13]
    when s1.io.in.valid : @[Cache.scala 550:25]
      reg REG_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_29 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_30 = tail(_T_29, 1) @[GTimer.scala 25:12]
      REG_4 <= _T_30 @[GTimer.scala 25:7]
      wire _WIRE_3 : UInt<1>
      _WIRE_3 <= UInt<1>("h0")
      node _T_31 = and(UInt<1>("h1"), _WIRE_3) @[Debug.scala 55:16]
      when _T_31 : @[Debug.scala 55:31]
        node _T_32 = asUInt(reset) @[Debug.scala 56:24]
        node _T_33 = eq(_T_32, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_33 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache_2: ", REG_4) : SIM_4 @[Debug.scala 56:24]
        node _T_34 = asUInt(reset) @[Debug.scala 57:13]
        node _T_35 = eq(_T_34, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_35 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[l2cache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) : SIM_5 @[Debug.scala 57:13]
    when s2.io.in.valid : @[Cache.scala 551:25]
      reg REG_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_36 = add(REG_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_37 = tail(_T_36, 1) @[GTimer.scala 25:12]
      REG_5 <= _T_37 @[GTimer.scala 25:7]
      wire _WIRE_4 : UInt<1>
      _WIRE_4 <= UInt<1>("h0")
      node _T_38 = and(UInt<1>("h1"), _WIRE_4) @[Debug.scala 55:16]
      when _T_38 : @[Debug.scala 55:31]
        node _T_39 = asUInt(reset) @[Debug.scala 56:24]
        node _T_40 = eq(_T_39, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_40 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache_2: ", REG_5) : SIM_6 @[Debug.scala 56:24]
        node _T_41 = asUInt(reset) @[Debug.scala 57:13]
        node _T_42 = eq(_T_41, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_42 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[l2cache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) : SIM_7 @[Debug.scala 57:13]
    when s3.io.in.valid : @[Cache.scala 552:25]
      reg REG_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _T_43 = add(REG_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _T_44 = tail(_T_43, 1) @[GTimer.scala 25:12]
      REG_6 <= _T_44 @[GTimer.scala 25:7]
      wire _WIRE_5 : UInt<1>
      _WIRE_5 <= UInt<1>("h0")
      node _T_45 = and(UInt<1>("h1"), _WIRE_5) @[Debug.scala 55:16]
      when _T_45 : @[Debug.scala 55:31]
        node _T_46 = asUInt(reset) @[Debug.scala 56:24]
        node _T_47 = eq(_T_46, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_47 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache_2: ", REG_6) : SIM_8 @[Debug.scala 56:24]
        node _T_48 = asUInt(reset) @[Debug.scala 57:13]
        node _T_49 = eq(_T_48, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_49 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[l2cache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) : SIM_9 @[Debug.scala 57:13]

  module SimpleBusAddressMapper :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}

    io.in.resp.bits.rdata <= io.out.resp.bits.rdata @[AddressMapper.scala 31:10]
    io.in.resp.bits.cmd <= io.out.resp.bits.cmd @[AddressMapper.scala 31:10]
    io.in.resp.valid <= io.out.resp.valid @[AddressMapper.scala 31:10]
    io.out.resp.ready <= io.in.resp.ready @[AddressMapper.scala 31:10]
    io.out.req.bits.wdata <= io.in.req.bits.wdata @[AddressMapper.scala 31:10]
    io.out.req.bits.wmask <= io.in.req.bits.wmask @[AddressMapper.scala 31:10]
    io.out.req.bits.cmd <= io.in.req.bits.cmd @[AddressMapper.scala 31:10]
    io.out.req.bits.size <= io.in.req.bits.size @[AddressMapper.scala 31:10]
    io.out.req.bits.addr <= io.in.req.bits.addr @[AddressMapper.scala 31:10]
    io.out.req.valid <= io.in.req.valid @[AddressMapper.scala 31:10]
    io.in.req.ready <= io.out.req.ready @[AddressMapper.scala 31:10]

  module SimpleBus2AXI4Converter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h0")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h1")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.ar.bits.id <= UInt<1>("h0") @[ToAXI4.scala 168:24]
    node _T_7 = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_8 = mux(_T_7, UInt<3>("h7"), UInt<1>("h0")) @[ToAXI4.scala 169:30]
    io.out.ar.bits.len <= _T_8 @[ToAXI4.scala 169:24]
    io.out.ar.bits.size <= io.in.req.bits.size @[ToAXI4.scala 170:24]
    io.out.ar.bits.burst <= UInt<2>("h2") @[ToAXI4.scala 171:24]
    io.out.ar.bits.lock <= UInt<1>("h0") @[ToAXI4.scala 173:24]
    io.out.ar.bits.cache <= UInt<1>("h0") @[ToAXI4.scala 174:24]
    io.out.ar.bits.qos <= UInt<1>("h0") @[ToAXI4.scala 175:24]
    io.out.ar.bits.user <= UInt<1>("h0") @[ToAXI4.scala 176:24]
    node _T_9 = eq(io.in.req.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_10 = eq(io.in.req.bits.cmd, UInt<1>("h1")) @[SimpleBus.scala 77:29]
    node _T_11 = or(_T_9, _T_10) @[ToAXI4.scala 177:54]
    io.out.w.bits.last <= _T_11 @[ToAXI4.scala 177:24]
    wlast <= io.out.w.bits.last @[ToAXI4.scala 178:11]
    rlast <= io.out.r.bits.last @[ToAXI4.scala 179:11]
    io.out.aw.bits.qos <= io.out.ar.bits.qos @[ToAXI4.scala 182:6]
    io.out.aw.bits.cache <= io.out.ar.bits.cache @[ToAXI4.scala 182:6]
    io.out.aw.bits.lock <= io.out.ar.bits.lock @[ToAXI4.scala 182:6]
    io.out.aw.bits.burst <= io.out.ar.bits.burst @[ToAXI4.scala 182:6]
    io.out.aw.bits.size <= io.out.ar.bits.size @[ToAXI4.scala 182:6]
    io.out.aw.bits.len <= io.out.ar.bits.len @[ToAXI4.scala 182:6]
    io.out.aw.bits.user <= io.out.ar.bits.user @[ToAXI4.scala 182:6]
    io.out.aw.bits.id <= io.out.ar.bits.id @[ToAXI4.scala 182:6]
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_12 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_12 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_13 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_13 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_14 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_15 = and(_T_14, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_15 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_16 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_17 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_18 = and(_T_16, _T_17) @[ToAXI4.scala 189:27]
    node _T_19 = and(_T_18, wlast) @[ToAXI4.scala 189:43]
    node _T_20 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_21 = or(_T_19, _T_20) @[ToAXI4.scala 189:53]
    wSend <= _T_21 @[ToAXI4.scala 189:9]
    node _T_22 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_23 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_23 : @[Reg.scala 16:19]
      wen <= _T_22 @[Reg.scala 16:23]
    node _T_24 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_25 = eq(_T_24, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_26 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_27 = eq(_T_26, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_28 = and(_T_25, _T_27) @[SimpleBus.scala 73:26]
    node _T_29 = and(io.in.req.valid, _T_28) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_29 @[ToAXI4.scala 192:16]
    node _T_30 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_31 = and(io.in.req.valid, _T_30) @[SimpleBus.scala 103:29]
    node _T_32 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_33 = and(_T_31, _T_32) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_33 @[ToAXI4.scala 193:16]
    node _T_34 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_35 = and(io.in.req.valid, _T_34) @[SimpleBus.scala 103:29]
    node _T_36 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_37 = and(_T_35, _T_36) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_37 @[ToAXI4.scala 194:16]
    node _T_38 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_39 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_40 = and(_T_39, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_41 = mux(_T_38, _T_40, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_41 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_42 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_42 @[ToAXI4.scala 199:19]

  module SimpleBusCrossbar1toN :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}[3]}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Crossbar.scala 31:22]
    node _T = geq(io.in.req.bits.addr, UInt<31>("h40000000")) @[Crossbar.scala 36:20]
    node _T_1 = lt(io.in.req.bits.addr, UInt<32>("h80000000")) @[Crossbar.scala 36:42]
    node _T_2 = and(_T, _T_1) @[Crossbar.scala 36:34]
    node _T_3 = geq(io.in.req.bits.addr, UInt<30>("h38000000")) @[Crossbar.scala 36:20]
    node _T_4 = lt(io.in.req.bits.addr, UInt<30>("h38010000")) @[Crossbar.scala 36:42]
    node _T_5 = and(_T_3, _T_4) @[Crossbar.scala 36:34]
    node _T_6 = geq(io.in.req.bits.addr, UInt<30>("h3c000000")) @[Crossbar.scala 36:20]
    node _T_7 = lt(io.in.req.bits.addr, UInt<31>("h40000000")) @[Crossbar.scala 36:42]
    node _T_8 = and(_T_6, _T_7) @[Crossbar.scala 36:34]
    wire outSelVec : UInt<1>[3] @[Crossbar.scala 35:26]
    outSelVec[0] <= _T_2 @[Crossbar.scala 35:26]
    outSelVec[1] <= _T_5 @[Crossbar.scala 35:26]
    outSelVec[2] <= _T_8 @[Crossbar.scala 35:26]
    node _T_9 = mux(outSelVec[1], UInt<1>("h1"), UInt<2>("h2")) @[Mux.scala 47:69]
    node outSelIdx = mux(outSelVec[0], UInt<1>("h0"), _T_9) @[Mux.scala 47:69]
    node _T_10 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
    node _T_11 = eq(state, UInt<2>("h0")) @[Crossbar.scala 39:72]
    node _T_12 = and(_T_10, _T_11) @[Crossbar.scala 39:62]
    reg outSelIdxResp : UInt<2>, clock with :
      reset => (UInt<1>("h0"), outSelIdxResp) @[Reg.scala 15:16]
    when _T_12 : @[Reg.scala 16:19]
      outSelIdxResp <= outSelIdx @[Reg.scala 16:23]
    node hi = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 41:54]
    node _T_13 = cat(hi, outSelVec[0]) @[Crossbar.scala 41:54]
    node _T_14 = orr(_T_13) @[Crossbar.scala 41:61]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[Crossbar.scala 41:43]
    node reqInvalidAddr = and(io.in.req.valid, _T_15) @[Crossbar.scala 41:40]
    node hi_1 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 43:39]
    node _T_16 = cat(hi_1, outSelVec[0]) @[Crossbar.scala 43:39]
    node _T_17 = orr(_T_16) @[Crossbar.scala 43:46]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[Crossbar.scala 43:28]
    node _T_19 = and(io.in.req.valid, _T_18) @[Crossbar.scala 43:25]
    node hi_2 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 43:84]
    node _T_20 = cat(hi_2, outSelVec[0]) @[Crossbar.scala 43:84]
    node _T_21 = andr(_T_20) @[Crossbar.scala 43:91]
    node _T_22 = and(io.in.req.valid, _T_21) @[Crossbar.scala 43:71]
    node _T_23 = or(_T_19, _T_22) @[Crossbar.scala 43:51]
    when _T_23 : @[Crossbar.scala 43:97]
      wire _WIRE : UInt<1>
      _WIRE <= UInt<1>("h0")
      node _T_24 = and(UInt<1>("h1"), _WIRE) @[Debug.scala 80:29]
      when _T_24 : @[Debug.scala 80:52]
        reg REG : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_25 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_26 = tail(_T_25, 1) @[GTimer.scala 25:12]
        REG <= _T_26 @[GTimer.scala 25:7]
        node _T_27 = asUInt(reset) @[Crossbar.scala 45:13]
        node _T_28 = eq(_T_27, UInt<1>("h0")) @[Crossbar.scala 45:13]
        when _T_28 : @[Crossbar.scala 45:13]
          printf(clock, UInt<1>("h1"), "crossbar access bad addr %x, time %d\n", io.in.req.bits.addr, REG) : SIM @[Crossbar.scala 45:13]
    node hi_3 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 49:41]
    node _T_29 = cat(hi_3, outSelVec[0]) @[Crossbar.scala 49:41]
    node _T_30 = andr(_T_29) @[Crossbar.scala 49:48]
    node _T_31 = and(io.in.req.valid, _T_30) @[Crossbar.scala 49:28]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[Crossbar.scala 49:10]
    node _T_33 = asUInt(reset) @[Crossbar.scala 49:9]
    node _T_34 = or(_T_32, _T_33) @[Crossbar.scala 49:9]
    node _T_35 = eq(_T_34, UInt<1>("h0")) @[Crossbar.scala 49:9]
    when _T_35 : @[Crossbar.scala 49:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: address decode error, bad addr = 0x%x\n\n    at Crossbar.scala:49 assert(!(io.in.req.valid && outSelVec.asUInt.andR), \"address decode error, bad addr = 0x%%x\\n\", addr)\n", io.in.req.bits.addr) : SIM_1 @[Crossbar.scala 49:9]
      stop(clock, UInt<1>("h1"), 1) @[Crossbar.scala 49:9]
    io.out[0].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[0].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[0].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[0].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[0].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_36 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_37 = and(io.in.req.valid, _T_36) @[Crossbar.scala 54:42]
    node _T_38 = and(outSelVec[0], _T_37) @[Crossbar.scala 54:22]
    io.out[0].req.valid <= _T_38 @[Crossbar.scala 54:17]
    io.out[0].resp.ready <= outSelVec[0] @[Crossbar.scala 55:18]
    io.out[1].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[1].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[1].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[1].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[1].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_39 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_40 = and(io.in.req.valid, _T_39) @[Crossbar.scala 54:42]
    node _T_41 = and(outSelVec[1], _T_40) @[Crossbar.scala 54:22]
    io.out[1].req.valid <= _T_41 @[Crossbar.scala 54:17]
    io.out[1].resp.ready <= outSelVec[1] @[Crossbar.scala 55:18]
    io.out[2].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[2].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[2].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[2].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[2].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_42 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_43 = and(io.in.req.valid, _T_42) @[Crossbar.scala 54:42]
    node _T_44 = and(outSelVec[2], _T_43) @[Crossbar.scala 54:22]
    io.out[2].req.valid <= _T_44 @[Crossbar.scala 54:17]
    io.out[2].resp.ready <= outSelVec[2] @[Crossbar.scala 55:18]
    node _T_45 = eq(UInt<2>("h0"), state) @[Crossbar.scala 58:18]
    when _T_45 : @[Crossbar.scala 58:18]
      node _T_46 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
      when _T_46 : @[Crossbar.scala 60:32]
        state <= UInt<2>("h1") @[Crossbar.scala 60:40]
      when reqInvalidAddr : @[Crossbar.scala 61:29]
        state <= UInt<2>("h2") @[Crossbar.scala 61:37]
    else :
      node _T_47 = eq(UInt<2>("h1"), state) @[Crossbar.scala 58:18]
      when _T_47 : @[Crossbar.scala 58:18]
        node _T_48 = and(io.out[outSelIdxResp].resp.ready, io.out[outSelIdxResp].resp.valid) @[Decoupled.scala 40:37]
        when _T_48 : @[Crossbar.scala 63:49]
          state <= UInt<2>("h0") @[Crossbar.scala 63:57]
      else :
        node _T_49 = eq(UInt<2>("h2"), state) @[Crossbar.scala 58:18]
        when _T_49 : @[Crossbar.scala 58:18]
          node _T_50 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
          when _T_50 : @[Crossbar.scala 64:43]
            state <= UInt<2>("h0") @[Crossbar.scala 64:51]
    node _T_51 = and(io.out[outSelIdxResp].resp.ready, io.out[outSelIdxResp].resp.valid) @[Decoupled.scala 40:37]
    node _T_52 = eq(state, UInt<2>("h2")) @[Crossbar.scala 67:55]
    node _T_53 = or(_T_51, _T_52) @[Crossbar.scala 67:46]
    io.in.resp.valid <= _T_53 @[Crossbar.scala 67:20]
    io.in.resp.bits.rdata <= io.out[outSelIdxResp].resp.bits.rdata @[Crossbar.scala 68:19]
    io.in.resp.bits.cmd <= io.out[outSelIdxResp].resp.bits.cmd @[Crossbar.scala 68:19]
    io.out[outSelIdxResp].resp.ready <= io.in.resp.ready @[Crossbar.scala 70:25]
    node _T_54 = or(io.out[outSelIdx].req.ready, reqInvalidAddr) @[Crossbar.scala 71:39]
    io.in.req.ready <= _T_54 @[Crossbar.scala 71:19]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_55 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 80:29]
    when _T_55 : @[Debug.scala 80:52]
      node _T_56 = eq(state, UInt<2>("h0")) @[Crossbar.scala 74:17]
      node _T_57 = and(_T_56, io.in.req.valid) @[Crossbar.scala 74:28]
      when _T_57 : @[Crossbar.scala 74:48]
        reg REG_1 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_58 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_59 = tail(_T_58, 1) @[GTimer.scala 25:12]
        REG_1 <= _T_59 @[GTimer.scala 25:7]
        node _T_60 = asUInt(reset) @[Crossbar.scala 75:13]
        node _T_61 = eq(_T_60, UInt<1>("h0")) @[Crossbar.scala 75:13]
        when _T_61 : @[Crossbar.scala 75:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: in.req: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", REG_1, io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.size, io.in.req.bits.wmask, io.in.req.bits.wdata) : SIM_2 @[Crossbar.scala 75:13]
      node _T_62 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
      when _T_62 : @[Crossbar.scala 78:30]
        reg REG_2 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_63 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_64 = tail(_T_63, 1) @[GTimer.scala 25:12]
        REG_2 <= _T_64 @[GTimer.scala 25:7]
        node _T_65 = asUInt(reset) @[Crossbar.scala 79:13]
        node _T_66 = eq(_T_65, UInt<1>("h0")) @[Crossbar.scala 79:13]
        when _T_66 : @[Crossbar.scala 79:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: outSelIdx = %d, outSel.req: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", REG_2, outSelIdx, io.out[outSelIdx].req.bits.addr, io.out[outSelIdx].req.bits.cmd, io.out[outSelIdx].req.bits.size, io.out[outSelIdx].req.bits.wmask, io.out[outSelIdx].req.bits.wdata) : SIM_3 @[Crossbar.scala 79:13]
      node _T_67 = and(io.out[outSelIdx].resp.ready, io.out[outSelIdx].resp.valid) @[Decoupled.scala 40:37]
      when _T_67 : @[Crossbar.scala 81:31]
        reg REG_3 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_68 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_69 = tail(_T_68, 1) @[GTimer.scala 25:12]
        REG_3 <= _T_69 @[GTimer.scala 25:7]
        node _T_70 = asUInt(reset) @[Crossbar.scala 82:13]
        node _T_71 = eq(_T_70, UInt<1>("h0")) @[Crossbar.scala 82:13]
        when _T_71 : @[Crossbar.scala 82:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: outSelIdx= %d, outSel.resp: rdata = %x, cmd = %d\n", REG_3, outSelIdx, io.out[outSelIdx].resp.bits.rdata, io.out[outSelIdx].resp.bits.cmd) : SIM_4 @[Crossbar.scala 82:13]
      node _T_72 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
      when _T_72 : @[Crossbar.scala 85:30]
        reg REG_4 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_73 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_74 = tail(_T_73, 1) @[GTimer.scala 25:12]
        REG_4 <= _T_74 @[GTimer.scala 25:7]
        node _T_75 = asUInt(reset) @[Crossbar.scala 86:13]
        node _T_76 = eq(_T_75, UInt<1>("h0")) @[Crossbar.scala 86:13]
        when _T_76 : @[Crossbar.scala 86:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: in.resp: rdata = %x, cmd = %d\n", REG_4, io.in.resp.bits.rdata, io.in.resp.bits.cmd) : SIM_5 @[Crossbar.scala 86:13]

  module AXI4CLINT :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, extra : { mtip : UInt<1>, msip : UInt<1>}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    reg mtime : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[AXI4CLINT.scala 32:22]
    reg mtimecmp : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[AXI4CLINT.scala 33:25]
    reg msip : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[AXI4CLINT.scala 34:21]
    reg freq : UInt<16>, clock with :
      reset => (reset, UInt<16>("h2710")) @[AXI4CLINT.scala 37:21]
    reg inc : UInt<16>, clock with :
      reset => (reset, UInt<16>("h1")) @[AXI4CLINT.scala 38:20]
    reg cnt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[AXI4CLINT.scala 40:20]
    node _T_45 = add(cnt, UInt<1>("h1")) @[AXI4CLINT.scala 41:21]
    node nextCnt = tail(_T_45, 1) @[AXI4CLINT.scala 41:21]
    node _T_46 = lt(nextCnt, freq) @[AXI4CLINT.scala 42:22]
    node _T_47 = mux(_T_46, nextCnt, UInt<1>("h0")) @[AXI4CLINT.scala 42:13]
    cnt <= _T_47 @[AXI4CLINT.scala 42:7]
    node tick = eq(nextCnt, freq) @[AXI4CLINT.scala 43:23]
    when tick : @[AXI4CLINT.scala 44:15]
      node _T_48 = add(mtime, inc) @[AXI4CLINT.scala 44:32]
      node _T_49 = tail(_T_48, 1) @[AXI4CLINT.scala 44:32]
      mtime <= _T_49 @[AXI4CLINT.scala 44:23]
    wire _WIRE : UInt<1>
    _WIRE <= UInt<1>("h0")
    when _WIRE : @[AXI4CLINT.scala 49:18]
      node _T_50 = add(mtime, UInt<17>("h186a0")) @[AXI4CLINT.scala 49:35]
      node _T_51 = tail(_T_50, 1) @[AXI4CLINT.scala 49:35]
      mtime <= _T_51 @[AXI4CLINT.scala 49:26]
    node _T_52 = bits(raddr, 15, 0) @[AXI4CLINT.scala 59:35]
    node _T_53 = bits(waddr, 15, 0) @[AXI4CLINT.scala 59:35]
    node _T_54 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_55 = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_56 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_57 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_58 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_59 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_60 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_61 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_62 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_63 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_67 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_1 = cat(_T_66, _T_64) @[Cat.scala 30:58]
    node lo_hi_1 = cat(_T_70, _T_68) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(_T_74, _T_72) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_78, _T_76) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_79 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_80 = eq(UInt<1>("h0"), _T_52) @[LookupTree.scala 24:34]
    node _T_81 = eq(UInt<16>("h8000"), _T_52) @[LookupTree.scala 24:34]
    node _T_82 = eq(UInt<16>("hbff8"), _T_52) @[LookupTree.scala 24:34]
    node _T_83 = eq(UInt<16>("h8008"), _T_52) @[LookupTree.scala 24:34]
    node _T_84 = eq(UInt<15>("h4000"), _T_52) @[LookupTree.scala 24:34]
    node _T_85 = mux(_T_80, msip, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_86 = mux(_T_81, freq, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_87 = mux(_T_82, mtime, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_88 = mux(_T_83, inc, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_89 = mux(_T_84, mtimecmp, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_90 = or(_T_85, _T_86) @[Mux.scala 27:72]
    node _T_91 = or(_T_90, _T_87) @[Mux.scala 27:72]
    node _T_92 = or(_T_91, _T_88) @[Mux.scala 27:72]
    node _T_93 = or(_T_92, _T_89) @[Mux.scala 27:72]
    wire _WIRE_1 : UInt<64> @[Mux.scala 27:72]
    _WIRE_1 <= _T_93 @[Mux.scala 27:72]
    io.in.r.bits.data <= _WIRE_1 @[RegMap.scala 30:11]
    node _T_94 = eq(_T_53, UInt<1>("h0")) @[RegMap.scala 32:41]
    node _T_95 = and(_T_54, _T_94) @[RegMap.scala 32:32]
    when _T_95 : @[RegMap.scala 32:48]
      node _T_96 = and(io.in.w.bits.data, _T_79) @[BitUtils.scala 32:13]
      node _T_97 = not(_T_79) @[BitUtils.scala 32:38]
      node _T_98 = and(msip, _T_97) @[BitUtils.scala 32:36]
      node _T_99 = or(_T_96, _T_98) @[BitUtils.scala 32:25]
      msip <= _T_99 @[RegMap.scala 32:52]
    node _T_100 = eq(_T_53, UInt<16>("h8000")) @[RegMap.scala 32:41]
    node _T_101 = and(_T_54, _T_100) @[RegMap.scala 32:32]
    when _T_101 : @[RegMap.scala 32:48]
      node _T_102 = and(io.in.w.bits.data, _T_79) @[BitUtils.scala 32:13]
      node _T_103 = not(_T_79) @[BitUtils.scala 32:38]
      node _T_104 = and(freq, _T_103) @[BitUtils.scala 32:36]
      node _T_105 = or(_T_102, _T_104) @[BitUtils.scala 32:25]
      freq <= _T_105 @[RegMap.scala 32:52]
    node _T_106 = eq(_T_53, UInt<16>("hbff8")) @[RegMap.scala 32:41]
    node _T_107 = and(_T_54, _T_106) @[RegMap.scala 32:32]
    when _T_107 : @[RegMap.scala 32:48]
      node _T_108 = and(io.in.w.bits.data, _T_79) @[BitUtils.scala 32:13]
      node _T_109 = not(_T_79) @[BitUtils.scala 32:38]
      node _T_110 = and(mtime, _T_109) @[BitUtils.scala 32:36]
      node _T_111 = or(_T_108, _T_110) @[BitUtils.scala 32:25]
      mtime <= _T_111 @[RegMap.scala 32:52]
    node _T_112 = eq(_T_53, UInt<16>("h8008")) @[RegMap.scala 32:41]
    node _T_113 = and(_T_54, _T_112) @[RegMap.scala 32:32]
    when _T_113 : @[RegMap.scala 32:48]
      node _T_114 = and(io.in.w.bits.data, _T_79) @[BitUtils.scala 32:13]
      node _T_115 = not(_T_79) @[BitUtils.scala 32:38]
      node _T_116 = and(inc, _T_115) @[BitUtils.scala 32:36]
      node _T_117 = or(_T_114, _T_116) @[BitUtils.scala 32:25]
      inc <= _T_117 @[RegMap.scala 32:52]
    node _T_118 = eq(_T_53, UInt<15>("h4000")) @[RegMap.scala 32:41]
    node _T_119 = and(_T_54, _T_118) @[RegMap.scala 32:32]
    when _T_119 : @[RegMap.scala 32:48]
      node _T_120 = and(io.in.w.bits.data, _T_79) @[BitUtils.scala 32:13]
      node _T_121 = not(_T_79) @[BitUtils.scala 32:38]
      node _T_122 = and(mtimecmp, _T_121) @[BitUtils.scala 32:36]
      node _T_123 = or(_T_120, _T_122) @[BitUtils.scala 32:25]
      mtimecmp <= _T_123 @[RegMap.scala 32:52]
    node _T_124 = geq(mtime, mtimecmp) @[AXI4CLINT.scala 64:38]
    reg REG_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_3) @[AXI4CLINT.scala 64:31]
    REG_3 <= _T_124 @[AXI4CLINT.scala 64:31]
    io.extra.mtip <= REG_3 @[AXI4CLINT.scala 64:21]
    node _T_125 = neq(msip, UInt<1>("h0")) @[AXI4CLINT.scala 65:37]
    reg REG_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_4) @[AXI4CLINT.scala 65:31]
    REG_4 <= _T_125 @[AXI4CLINT.scala 65:31]
    io.extra.msip <= REG_4 @[AXI4CLINT.scala 65:21]

  module SimpleBus2AXI4Converter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module AXI4PLIC :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, extra : { flip intrVec : UInt<1>, meip : UInt<1>[1]}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    reg priority_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), priority_0) @[AXI4PLIC.scala 37:39]
    wire _WIRE : UInt<1>[32] @[AXI4PLIC.scala 43:59]
    _WIRE[0] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[1] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[2] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[3] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[4] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[5] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[6] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[7] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[8] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[9] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[10] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[11] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[12] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[13] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[14] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[15] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[16] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[17] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[18] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[19] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[20] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[21] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[22] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[23] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[24] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[25] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[26] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[27] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[28] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[29] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[30] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    _WIRE[31] <= UInt<1>("h0") @[AXI4PLIC.scala 43:59]
    reg pending_0 : UInt<1>[32], clock with :
      reset => (reset, _WIRE) @[AXI4PLIC.scala 43:46]
    node lo_lo_lo_lo = cat(pending_0[1], pending_0[0]) @[Cat.scala 30:58]
    node lo_lo_lo_hi = cat(pending_0[3], pending_0[2]) @[Cat.scala 30:58]
    node lo_lo_lo = cat(lo_lo_lo_hi, lo_lo_lo_lo) @[Cat.scala 30:58]
    node lo_lo_hi_lo = cat(pending_0[5], pending_0[4]) @[Cat.scala 30:58]
    node lo_lo_hi_hi = cat(pending_0[7], pending_0[6]) @[Cat.scala 30:58]
    node lo_lo_hi = cat(lo_lo_hi_hi, lo_lo_hi_lo) @[Cat.scala 30:58]
    node lo_lo_1 = cat(lo_lo_hi, lo_lo_lo) @[Cat.scala 30:58]
    node lo_hi_lo_lo = cat(pending_0[9], pending_0[8]) @[Cat.scala 30:58]
    node lo_hi_lo_hi = cat(pending_0[11], pending_0[10]) @[Cat.scala 30:58]
    node lo_hi_lo = cat(lo_hi_lo_hi, lo_hi_lo_lo) @[Cat.scala 30:58]
    node lo_hi_hi_lo = cat(pending_0[13], pending_0[12]) @[Cat.scala 30:58]
    node lo_hi_hi_hi = cat(pending_0[15], pending_0[14]) @[Cat.scala 30:58]
    node lo_hi_hi = cat(lo_hi_hi_hi, lo_hi_hi_lo) @[Cat.scala 30:58]
    node lo_hi_1 = cat(lo_hi_hi, lo_hi_lo) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_lo_lo = cat(pending_0[17], pending_0[16]) @[Cat.scala 30:58]
    node hi_lo_lo_hi = cat(pending_0[19], pending_0[18]) @[Cat.scala 30:58]
    node hi_lo_lo = cat(hi_lo_lo_hi, hi_lo_lo_lo) @[Cat.scala 30:58]
    node hi_lo_hi_lo = cat(pending_0[21], pending_0[20]) @[Cat.scala 30:58]
    node hi_lo_hi_hi = cat(pending_0[23], pending_0[22]) @[Cat.scala 30:58]
    node hi_lo_hi = cat(hi_lo_hi_hi, hi_lo_hi_lo) @[Cat.scala 30:58]
    node hi_lo_1 = cat(hi_lo_hi, hi_lo_lo) @[Cat.scala 30:58]
    node hi_hi_lo_lo = cat(pending_0[25], pending_0[24]) @[Cat.scala 30:58]
    node hi_hi_lo_hi = cat(pending_0[27], pending_0[26]) @[Cat.scala 30:58]
    node hi_hi_lo = cat(hi_hi_lo_hi, hi_hi_lo_lo) @[Cat.scala 30:58]
    node hi_hi_hi_lo = cat(pending_0[29], pending_0[28]) @[Cat.scala 30:58]
    node hi_hi_hi_hi = cat(pending_0[31], pending_0[30]) @[Cat.scala 30:58]
    node hi_hi_hi = cat(hi_hi_hi_hi, hi_hi_hi_lo) @[Cat.scala 30:58]
    node hi_hi_1 = cat(hi_hi_hi, hi_hi_lo) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_45 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    reg enable_0_0 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4PLIC.scala 48:64]
    reg threshold_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), threshold_0) @[AXI4PLIC.scala 53:40]
    wire _WIRE_1 : UInt<1>[2] @[AXI4PLIC.scala 58:38]
    _WIRE_1[0] <= UInt<1>("h0") @[AXI4PLIC.scala 58:38]
    _WIRE_1[1] <= UInt<1>("h0") @[AXI4PLIC.scala 58:38]
    reg inHandle : UInt<1>[2], clock with :
      reset => (reset, _WIRE_1) @[AXI4PLIC.scala 58:25]
    reg claimCompletion_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), claimCompletion_0) @[AXI4PLIC.scala 64:46]
    node _T_46 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_47 = bits(raddr, 25, 0) @[AXI4PLIC.scala 35:35]
    node _T_48 = eq(_T_47, UInt<22>("h200004")) @[AXI4PLIC.scala 68:46]
    node _T_49 = and(_T_46, _T_48) @[AXI4PLIC.scala 68:25]
    when _T_49 : @[AXI4PLIC.scala 68:59]
      node _T_50 = bits(claimCompletion_0, 0, 0)
      inHandle[_T_50] <= UInt<1>("h1") @[AXI4PLIC.scala 68:73]
    node _T_51 = bits(io.extra.intrVec, 0, 0) @[AXI4PLIC.scala 73:24]
    when _T_51 : @[AXI4PLIC.scala 75:17]
      pending_0[1] <= UInt<1>("h1") @[AXI4PLIC.scala 75:45]
    when inHandle[1] : @[AXI4PLIC.scala 76:25]
      pending_0[1] <= UInt<1>("h0") @[AXI4PLIC.scala 76:53]
    node lo_lo_lo_lo_1 = cat(pending_0[1], pending_0[0]) @[Cat.scala 30:58]
    node lo_lo_lo_hi_1 = cat(pending_0[3], pending_0[2]) @[Cat.scala 30:58]
    node lo_lo_lo_1 = cat(lo_lo_lo_hi_1, lo_lo_lo_lo_1) @[Cat.scala 30:58]
    node lo_lo_hi_lo_1 = cat(pending_0[5], pending_0[4]) @[Cat.scala 30:58]
    node lo_lo_hi_hi_1 = cat(pending_0[7], pending_0[6]) @[Cat.scala 30:58]
    node lo_lo_hi_1 = cat(lo_lo_hi_hi_1, lo_lo_hi_lo_1) @[Cat.scala 30:58]
    node lo_lo_2 = cat(lo_lo_hi_1, lo_lo_lo_1) @[Cat.scala 30:58]
    node lo_hi_lo_lo_1 = cat(pending_0[9], pending_0[8]) @[Cat.scala 30:58]
    node lo_hi_lo_hi_1 = cat(pending_0[11], pending_0[10]) @[Cat.scala 30:58]
    node lo_hi_lo_1 = cat(lo_hi_lo_hi_1, lo_hi_lo_lo_1) @[Cat.scala 30:58]
    node lo_hi_hi_lo_1 = cat(pending_0[13], pending_0[12]) @[Cat.scala 30:58]
    node lo_hi_hi_hi_1 = cat(pending_0[15], pending_0[14]) @[Cat.scala 30:58]
    node lo_hi_hi_1 = cat(lo_hi_hi_hi_1, lo_hi_hi_lo_1) @[Cat.scala 30:58]
    node lo_hi_2 = cat(lo_hi_hi_1, lo_hi_lo_1) @[Cat.scala 30:58]
    node lo_2 = cat(lo_hi_2, lo_lo_2) @[Cat.scala 30:58]
    node hi_lo_lo_lo_1 = cat(pending_0[17], pending_0[16]) @[Cat.scala 30:58]
    node hi_lo_lo_hi_1 = cat(pending_0[19], pending_0[18]) @[Cat.scala 30:58]
    node hi_lo_lo_1 = cat(hi_lo_lo_hi_1, hi_lo_lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_hi_lo_1 = cat(pending_0[21], pending_0[20]) @[Cat.scala 30:58]
    node hi_lo_hi_hi_1 = cat(pending_0[23], pending_0[22]) @[Cat.scala 30:58]
    node hi_lo_hi_1 = cat(hi_lo_hi_hi_1, hi_lo_hi_lo_1) @[Cat.scala 30:58]
    node hi_lo_2 = cat(hi_lo_hi_1, hi_lo_lo_1) @[Cat.scala 30:58]
    node hi_hi_lo_lo_1 = cat(pending_0[25], pending_0[24]) @[Cat.scala 30:58]
    node hi_hi_lo_hi_1 = cat(pending_0[27], pending_0[26]) @[Cat.scala 30:58]
    node hi_hi_lo_1 = cat(hi_hi_lo_hi_1, hi_hi_lo_lo_1) @[Cat.scala 30:58]
    node hi_hi_hi_lo_1 = cat(pending_0[29], pending_0[28]) @[Cat.scala 30:58]
    node hi_hi_hi_hi_1 = cat(pending_0[31], pending_0[30]) @[Cat.scala 30:58]
    node hi_hi_hi_1 = cat(hi_hi_hi_hi_1, hi_hi_hi_lo_1) @[Cat.scala 30:58]
    node hi_hi_2 = cat(hi_hi_hi_1, hi_hi_lo_1) @[Cat.scala 30:58]
    node hi_2 = cat(hi_hi_2, hi_lo_2) @[Cat.scala 30:58]
    node pendingVec = cat(hi_2, lo_2) @[Cat.scala 30:58]
    node _T_52 = and(pendingVec, enable_0_0) @[AXI4PLIC.scala 81:31]
    node _T_53 = eq(_T_52, UInt<1>("h0")) @[AXI4PLIC.scala 82:23]
    node _T_54 = bits(_T_52, 0, 0) @[OneHot.scala 47:40]
    node _T_55 = bits(_T_52, 1, 1) @[OneHot.scala 47:40]
    node _T_56 = bits(_T_52, 2, 2) @[OneHot.scala 47:40]
    node _T_57 = bits(_T_52, 3, 3) @[OneHot.scala 47:40]
    node _T_58 = bits(_T_52, 4, 4) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_52, 5, 5) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_52, 6, 6) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_52, 7, 7) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_52, 8, 8) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_52, 9, 9) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_52, 10, 10) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_52, 11, 11) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_52, 12, 12) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_52, 13, 13) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_52, 14, 14) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_52, 15, 15) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_52, 16, 16) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_52, 17, 17) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_52, 18, 18) @[OneHot.scala 47:40]
    node _T_73 = bits(_T_52, 19, 19) @[OneHot.scala 47:40]
    node _T_74 = bits(_T_52, 20, 20) @[OneHot.scala 47:40]
    node _T_75 = bits(_T_52, 21, 21) @[OneHot.scala 47:40]
    node _T_76 = bits(_T_52, 22, 22) @[OneHot.scala 47:40]
    node _T_77 = bits(_T_52, 23, 23) @[OneHot.scala 47:40]
    node _T_78 = bits(_T_52, 24, 24) @[OneHot.scala 47:40]
    node _T_79 = bits(_T_52, 25, 25) @[OneHot.scala 47:40]
    node _T_80 = bits(_T_52, 26, 26) @[OneHot.scala 47:40]
    node _T_81 = bits(_T_52, 27, 27) @[OneHot.scala 47:40]
    node _T_82 = bits(_T_52, 28, 28) @[OneHot.scala 47:40]
    node _T_83 = bits(_T_52, 29, 29) @[OneHot.scala 47:40]
    node _T_84 = bits(_T_52, 30, 30) @[OneHot.scala 47:40]
    node _T_85 = bits(_T_52, 31, 31) @[OneHot.scala 47:40]
    node _T_86 = mux(_T_84, UInt<5>("h1e"), UInt<5>("h1f")) @[Mux.scala 47:69]
    node _T_87 = mux(_T_83, UInt<5>("h1d"), _T_86) @[Mux.scala 47:69]
    node _T_88 = mux(_T_82, UInt<5>("h1c"), _T_87) @[Mux.scala 47:69]
    node _T_89 = mux(_T_81, UInt<5>("h1b"), _T_88) @[Mux.scala 47:69]
    node _T_90 = mux(_T_80, UInt<5>("h1a"), _T_89) @[Mux.scala 47:69]
    node _T_91 = mux(_T_79, UInt<5>("h19"), _T_90) @[Mux.scala 47:69]
    node _T_92 = mux(_T_78, UInt<5>("h18"), _T_91) @[Mux.scala 47:69]
    node _T_93 = mux(_T_77, UInt<5>("h17"), _T_92) @[Mux.scala 47:69]
    node _T_94 = mux(_T_76, UInt<5>("h16"), _T_93) @[Mux.scala 47:69]
    node _T_95 = mux(_T_75, UInt<5>("h15"), _T_94) @[Mux.scala 47:69]
    node _T_96 = mux(_T_74, UInt<5>("h14"), _T_95) @[Mux.scala 47:69]
    node _T_97 = mux(_T_73, UInt<5>("h13"), _T_96) @[Mux.scala 47:69]
    node _T_98 = mux(_T_72, UInt<5>("h12"), _T_97) @[Mux.scala 47:69]
    node _T_99 = mux(_T_71, UInt<5>("h11"), _T_98) @[Mux.scala 47:69]
    node _T_100 = mux(_T_70, UInt<5>("h10"), _T_99) @[Mux.scala 47:69]
    node _T_101 = mux(_T_69, UInt<4>("hf"), _T_100) @[Mux.scala 47:69]
    node _T_102 = mux(_T_68, UInt<4>("he"), _T_101) @[Mux.scala 47:69]
    node _T_103 = mux(_T_67, UInt<4>("hd"), _T_102) @[Mux.scala 47:69]
    node _T_104 = mux(_T_66, UInt<4>("hc"), _T_103) @[Mux.scala 47:69]
    node _T_105 = mux(_T_65, UInt<4>("hb"), _T_104) @[Mux.scala 47:69]
    node _T_106 = mux(_T_64, UInt<4>("ha"), _T_105) @[Mux.scala 47:69]
    node _T_107 = mux(_T_63, UInt<4>("h9"), _T_106) @[Mux.scala 47:69]
    node _T_108 = mux(_T_62, UInt<4>("h8"), _T_107) @[Mux.scala 47:69]
    node _T_109 = mux(_T_61, UInt<3>("h7"), _T_108) @[Mux.scala 47:69]
    node _T_110 = mux(_T_60, UInt<3>("h6"), _T_109) @[Mux.scala 47:69]
    node _T_111 = mux(_T_59, UInt<3>("h5"), _T_110) @[Mux.scala 47:69]
    node _T_112 = mux(_T_58, UInt<3>("h4"), _T_111) @[Mux.scala 47:69]
    node _T_113 = mux(_T_57, UInt<2>("h3"), _T_112) @[Mux.scala 47:69]
    node _T_114 = mux(_T_56, UInt<2>("h2"), _T_113) @[Mux.scala 47:69]
    node _T_115 = mux(_T_55, UInt<1>("h1"), _T_114) @[Mux.scala 47:69]
    node _T_116 = mux(_T_54, UInt<1>("h0"), _T_115) @[Mux.scala 47:69]
    node _T_117 = mux(_T_53, UInt<1>("h0"), _T_116) @[AXI4PLIC.scala 82:13]
    claimCompletion_0 <= _T_117 @[AXI4PLIC.scala 82:7]
    wire rdata : UInt<32> @[AXI4PLIC.scala 87:19]
    node _T_118 = bits(raddr, 25, 0) @[AXI4PLIC.scala 35:35]
    node _T_119 = bits(waddr, 25, 0) @[AXI4PLIC.scala 35:35]
    node _T_120 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_121 = bits(waddr, 2, 0) @[AXI4PLIC.scala 89:86]
    node _T_122 = dshr(io.in.w.bits.strb, _T_121) @[AXI4PLIC.scala 89:78]
    node _T_123 = bits(_T_122, 0, 0) @[BitUtils.scala 27:29]
    node _T_124 = bits(_T_122, 1, 1) @[BitUtils.scala 27:29]
    node _T_125 = bits(_T_122, 2, 2) @[BitUtils.scala 27:29]
    node _T_126 = bits(_T_122, 3, 3) @[BitUtils.scala 27:29]
    node _T_127 = bits(_T_122, 4, 4) @[BitUtils.scala 27:29]
    node _T_128 = bits(_T_122, 5, 5) @[BitUtils.scala 27:29]
    node _T_129 = bits(_T_122, 6, 6) @[BitUtils.scala 27:29]
    node _T_130 = bits(_T_122, 7, 7) @[BitUtils.scala 27:29]
    node _T_131 = bits(_T_123, 0, 0) @[Bitwise.scala 72:15]
    node _T_132 = mux(_T_131, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_133 = bits(_T_124, 0, 0) @[Bitwise.scala 72:15]
    node _T_134 = mux(_T_133, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_135 = bits(_T_125, 0, 0) @[Bitwise.scala 72:15]
    node _T_136 = mux(_T_135, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_137 = bits(_T_126, 0, 0) @[Bitwise.scala 72:15]
    node _T_138 = mux(_T_137, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_139 = bits(_T_127, 0, 0) @[Bitwise.scala 72:15]
    node _T_140 = mux(_T_139, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_141 = bits(_T_128, 0, 0) @[Bitwise.scala 72:15]
    node _T_142 = mux(_T_141, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_143 = bits(_T_129, 0, 0) @[Bitwise.scala 72:15]
    node _T_144 = mux(_T_143, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_145 = bits(_T_130, 0, 0) @[Bitwise.scala 72:15]
    node _T_146 = mux(_T_145, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_3 = cat(_T_134, _T_132) @[Cat.scala 30:58]
    node lo_hi_3 = cat(_T_138, _T_136) @[Cat.scala 30:58]
    node lo_3 = cat(lo_hi_3, lo_lo_3) @[Cat.scala 30:58]
    node hi_lo_3 = cat(_T_142, _T_140) @[Cat.scala 30:58]
    node hi_hi_3 = cat(_T_146, _T_144) @[Cat.scala 30:58]
    node hi_3 = cat(hi_hi_3, hi_lo_3) @[Cat.scala 30:58]
    node _T_147 = cat(hi_3, lo_3) @[Cat.scala 30:58]
    node _T_148 = eq(UInt<13>("h1000"), _T_118) @[LookupTree.scala 24:34]
    node _T_149 = eq(UInt<14>("h2000"), _T_118) @[LookupTree.scala 24:34]
    node _T_150 = eq(UInt<22>("h200004"), _T_118) @[LookupTree.scala 24:34]
    node _T_151 = eq(UInt<3>("h4"), _T_118) @[LookupTree.scala 24:34]
    node _T_152 = eq(UInt<22>("h200000"), _T_118) @[LookupTree.scala 24:34]
    node _T_153 = mux(_T_148, _T_45, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_154 = mux(_T_149, enable_0_0, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_155 = mux(_T_150, claimCompletion_0, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_156 = mux(_T_151, priority_0, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_157 = mux(_T_152, threshold_0, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_158 = or(_T_153, _T_154) @[Mux.scala 27:72]
    node _T_159 = or(_T_158, _T_155) @[Mux.scala 27:72]
    node _T_160 = or(_T_159, _T_156) @[Mux.scala 27:72]
    node _T_161 = or(_T_160, _T_157) @[Mux.scala 27:72]
    wire _WIRE_2 : UInt<32> @[Mux.scala 27:72]
    _WIRE_2 <= _T_161 @[Mux.scala 27:72]
    rdata <= _WIRE_2 @[RegMap.scala 30:11]
    node _T_162 = eq(_T_119, UInt<14>("h2000")) @[RegMap.scala 32:41]
    node _T_163 = and(_T_120, _T_162) @[RegMap.scala 32:32]
    when _T_163 : @[RegMap.scala 32:48]
      node _T_164 = and(io.in.w.bits.data, _T_147) @[BitUtils.scala 32:13]
      node _T_165 = not(_T_147) @[BitUtils.scala 32:38]
      node _T_166 = and(enable_0_0, _T_165) @[BitUtils.scala 32:36]
      node _T_167 = or(_T_164, _T_166) @[BitUtils.scala 32:25]
      enable_0_0 <= _T_167 @[RegMap.scala 32:52]
    node _T_168 = eq(_T_119, UInt<22>("h200004")) @[RegMap.scala 32:41]
    node _T_169 = and(_T_120, _T_168) @[RegMap.scala 32:32]
    when _T_169 : @[RegMap.scala 32:48]
      node _T_170 = and(io.in.w.bits.data, _T_147) @[BitUtils.scala 32:13]
      node _T_171 = not(_T_147) @[BitUtils.scala 32:38]
      node _T_172 = and(claimCompletion_0, _T_171) @[BitUtils.scala 32:36]
      node _T_173 = or(_T_170, _T_172) @[BitUtils.scala 32:25]
      node _T_174 = bits(_T_173, 31, 0) @[AXI4PLIC.scala 60:19]
      node _T_175 = bits(_T_174, 0, 0)
      inHandle[_T_175] <= UInt<1>("h0") @[AXI4PLIC.scala 60:27]
      claimCompletion_0 <= UInt<1>("h0") @[RegMap.scala 32:52]
    node _T_176 = eq(_T_119, UInt<3>("h4")) @[RegMap.scala 32:41]
    node _T_177 = and(_T_120, _T_176) @[RegMap.scala 32:32]
    when _T_177 : @[RegMap.scala 32:48]
      node _T_178 = and(io.in.w.bits.data, _T_147) @[BitUtils.scala 32:13]
      node _T_179 = not(_T_147) @[BitUtils.scala 32:38]
      node _T_180 = and(priority_0, _T_179) @[BitUtils.scala 32:36]
      node _T_181 = or(_T_178, _T_180) @[BitUtils.scala 32:25]
      priority_0 <= _T_181 @[RegMap.scala 32:52]
    node _T_182 = eq(_T_119, UInt<22>("h200000")) @[RegMap.scala 32:41]
    node _T_183 = and(_T_120, _T_182) @[RegMap.scala 32:32]
    when _T_183 : @[RegMap.scala 32:48]
      node _T_184 = and(io.in.w.bits.data, _T_147) @[BitUtils.scala 32:13]
      node _T_185 = not(_T_147) @[BitUtils.scala 32:38]
      node _T_186 = and(threshold_0, _T_185) @[BitUtils.scala 32:36]
      node _T_187 = or(_T_184, _T_186) @[BitUtils.scala 32:25]
      threshold_0 <= _T_187 @[RegMap.scala 32:52]
    node _T_188 = cat(rdata, rdata) @[Cat.scala 30:58]
    io.in.r.bits.data <= _T_188 @[AXI4PLIC.scala 91:18]
    node _T_189 = neq(claimCompletion_0, UInt<1>("h0")) @[AXI4PLIC.scala 93:87]
    io.extra.meip[0] <= _T_189 @[AXI4PLIC.scala 93:62]

  module SimpleBus2AXI4Converter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module NutShell :
    input clock : Clock
    input reset : Reset
    output io : { mem : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip frontend : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, flip meip : UInt<1>}

    inst nutcore of NutCore @[NutShell.scala 53:23]
    nutcore.clock <= clock
    nutcore.reset <= reset
    inst cohMg of CoherenceManager @[NutShell.scala 54:21]
    cohMg.clock <= clock
    cohMg.reset <= reset
    inst xbar of SimpleBusCrossbarNto1_2 @[NutShell.scala 55:20]
    xbar.clock <= clock
    xbar.reset <= reset
    nutcore.io.imem.mem.resp.bits.rdata <= cohMg.io.in.resp.bits.rdata @[NutShell.scala 56:15]
    nutcore.io.imem.mem.resp.bits.cmd <= cohMg.io.in.resp.bits.cmd @[NutShell.scala 56:15]
    nutcore.io.imem.mem.resp.valid <= cohMg.io.in.resp.valid @[NutShell.scala 56:15]
    cohMg.io.in.resp.ready <= nutcore.io.imem.mem.resp.ready @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.wdata <= nutcore.io.imem.mem.req.bits.wdata @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.wmask <= nutcore.io.imem.mem.req.bits.wmask @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.cmd <= nutcore.io.imem.mem.req.bits.cmd @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.size <= nutcore.io.imem.mem.req.bits.size @[NutShell.scala 56:15]
    cohMg.io.in.req.bits.addr <= nutcore.io.imem.mem.req.bits.addr @[NutShell.scala 56:15]
    cohMg.io.in.req.valid <= nutcore.io.imem.mem.req.valid @[NutShell.scala 56:15]
    nutcore.io.imem.mem.req.ready <= cohMg.io.in.req.ready @[NutShell.scala 56:15]
    cohMg.io.out.coh.resp.bits.rdata <= nutcore.io.dmem.coh.resp.bits.rdata @[NutShell.scala 57:23]
    cohMg.io.out.coh.resp.bits.cmd <= nutcore.io.dmem.coh.resp.bits.cmd @[NutShell.scala 57:23]
    cohMg.io.out.coh.resp.valid <= nutcore.io.dmem.coh.resp.valid @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.resp.ready <= cohMg.io.out.coh.resp.ready @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.wdata <= cohMg.io.out.coh.req.bits.wdata @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.wmask <= cohMg.io.out.coh.req.bits.wmask @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.cmd <= cohMg.io.out.coh.req.bits.cmd @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.size <= cohMg.io.out.coh.req.bits.size @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.bits.addr <= cohMg.io.out.coh.req.bits.addr @[NutShell.scala 57:23]
    nutcore.io.dmem.coh.req.valid <= cohMg.io.out.coh.req.valid @[NutShell.scala 57:23]
    cohMg.io.out.coh.req.ready <= nutcore.io.dmem.coh.req.ready @[NutShell.scala 57:23]
    cohMg.io.out.mem.resp.bits.rdata <= xbar.io.in[0].resp.bits.rdata @[NutShell.scala 58:17]
    cohMg.io.out.mem.resp.bits.cmd <= xbar.io.in[0].resp.bits.cmd @[NutShell.scala 58:17]
    cohMg.io.out.mem.resp.valid <= xbar.io.in[0].resp.valid @[NutShell.scala 58:17]
    xbar.io.in[0].resp.ready <= cohMg.io.out.mem.resp.ready @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.wdata <= cohMg.io.out.mem.req.bits.wdata @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.wmask <= cohMg.io.out.mem.req.bits.wmask @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.cmd <= cohMg.io.out.mem.req.bits.cmd @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.size <= cohMg.io.out.mem.req.bits.size @[NutShell.scala 58:17]
    xbar.io.in[0].req.bits.addr <= cohMg.io.out.mem.req.bits.addr @[NutShell.scala 58:17]
    xbar.io.in[0].req.valid <= cohMg.io.out.mem.req.valid @[NutShell.scala 58:17]
    cohMg.io.out.mem.req.ready <= xbar.io.in[0].req.ready @[NutShell.scala 58:17]
    nutcore.io.dmem.mem.resp.bits.rdata <= xbar.io.in[1].resp.bits.rdata @[NutShell.scala 59:17]
    nutcore.io.dmem.mem.resp.bits.cmd <= xbar.io.in[1].resp.bits.cmd @[NutShell.scala 59:17]
    nutcore.io.dmem.mem.resp.valid <= xbar.io.in[1].resp.valid @[NutShell.scala 59:17]
    xbar.io.in[1].resp.ready <= nutcore.io.dmem.mem.resp.ready @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.wdata <= nutcore.io.dmem.mem.req.bits.wdata @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.wmask <= nutcore.io.dmem.mem.req.bits.wmask @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.cmd <= nutcore.io.dmem.mem.req.bits.cmd @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.size <= nutcore.io.dmem.mem.req.bits.size @[NutShell.scala 59:17]
    xbar.io.in[1].req.bits.addr <= nutcore.io.dmem.mem.req.bits.addr @[NutShell.scala 59:17]
    xbar.io.in[1].req.valid <= nutcore.io.dmem.mem.req.valid @[NutShell.scala 59:17]
    nutcore.io.dmem.mem.req.ready <= xbar.io.in[1].req.ready @[NutShell.scala 59:17]
    inst axi2sb of AXI42SimpleBusConverter @[NutShell.scala 61:22]
    axi2sb.clock <= clock
    axi2sb.reset <= reset
    io.frontend.r.bits.user <= axi2sb.io.in.r.bits.user @[NutShell.scala 62:16]
    io.frontend.r.bits.id <= axi2sb.io.in.r.bits.id @[NutShell.scala 62:16]
    io.frontend.r.bits.last <= axi2sb.io.in.r.bits.last @[NutShell.scala 62:16]
    io.frontend.r.bits.data <= axi2sb.io.in.r.bits.data @[NutShell.scala 62:16]
    io.frontend.r.bits.resp <= axi2sb.io.in.r.bits.resp @[NutShell.scala 62:16]
    io.frontend.r.valid <= axi2sb.io.in.r.valid @[NutShell.scala 62:16]
    axi2sb.io.in.r.ready <= io.frontend.r.ready @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.qos <= io.frontend.ar.bits.qos @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.cache <= io.frontend.ar.bits.cache @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.lock <= io.frontend.ar.bits.lock @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.burst <= io.frontend.ar.bits.burst @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.size <= io.frontend.ar.bits.size @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.len <= io.frontend.ar.bits.len @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.user <= io.frontend.ar.bits.user @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.id <= io.frontend.ar.bits.id @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.prot <= io.frontend.ar.bits.prot @[NutShell.scala 62:16]
    axi2sb.io.in.ar.bits.addr <= io.frontend.ar.bits.addr @[NutShell.scala 62:16]
    axi2sb.io.in.ar.valid <= io.frontend.ar.valid @[NutShell.scala 62:16]
    io.frontend.ar.ready <= axi2sb.io.in.ar.ready @[NutShell.scala 62:16]
    io.frontend.b.bits.user <= axi2sb.io.in.b.bits.user @[NutShell.scala 62:16]
    io.frontend.b.bits.id <= axi2sb.io.in.b.bits.id @[NutShell.scala 62:16]
    io.frontend.b.bits.resp <= axi2sb.io.in.b.bits.resp @[NutShell.scala 62:16]
    io.frontend.b.valid <= axi2sb.io.in.b.valid @[NutShell.scala 62:16]
    axi2sb.io.in.b.ready <= io.frontend.b.ready @[NutShell.scala 62:16]
    axi2sb.io.in.w.bits.last <= io.frontend.w.bits.last @[NutShell.scala 62:16]
    axi2sb.io.in.w.bits.strb <= io.frontend.w.bits.strb @[NutShell.scala 62:16]
    axi2sb.io.in.w.bits.data <= io.frontend.w.bits.data @[NutShell.scala 62:16]
    axi2sb.io.in.w.valid <= io.frontend.w.valid @[NutShell.scala 62:16]
    io.frontend.w.ready <= axi2sb.io.in.w.ready @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.qos <= io.frontend.aw.bits.qos @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.cache <= io.frontend.aw.bits.cache @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.lock <= io.frontend.aw.bits.lock @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.burst <= io.frontend.aw.bits.burst @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.size <= io.frontend.aw.bits.size @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.len <= io.frontend.aw.bits.len @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.user <= io.frontend.aw.bits.user @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.id <= io.frontend.aw.bits.id @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.prot <= io.frontend.aw.bits.prot @[NutShell.scala 62:16]
    axi2sb.io.in.aw.bits.addr <= io.frontend.aw.bits.addr @[NutShell.scala 62:16]
    axi2sb.io.in.aw.valid <= io.frontend.aw.valid @[NutShell.scala 62:16]
    io.frontend.aw.ready <= axi2sb.io.in.aw.ready @[NutShell.scala 62:16]
    axi2sb.io.out.resp.bits.rdata <= nutcore.io.frontend.resp.bits.rdata @[NutShell.scala 63:23]
    axi2sb.io.out.resp.bits.cmd <= nutcore.io.frontend.resp.bits.cmd @[NutShell.scala 63:23]
    axi2sb.io.out.resp.valid <= nutcore.io.frontend.resp.valid @[NutShell.scala 63:23]
    nutcore.io.frontend.resp.ready <= axi2sb.io.out.resp.ready @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.wdata <= axi2sb.io.out.req.bits.wdata @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.wmask <= axi2sb.io.out.req.bits.wmask @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.cmd <= axi2sb.io.out.req.bits.cmd @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.size <= axi2sb.io.out.req.bits.size @[NutShell.scala 63:23]
    nutcore.io.frontend.req.bits.addr <= axi2sb.io.out.req.bits.addr @[NutShell.scala 63:23]
    nutcore.io.frontend.req.valid <= axi2sb.io.out.req.valid @[NutShell.scala 63:23]
    axi2sb.io.out.req.ready <= nutcore.io.frontend.req.ready @[NutShell.scala 63:23]
    inst SimpleBus2MemPortConverter of SimpleBus2MemPortConverter @[ToMemPort.scala 50:24]
    SimpleBus2MemPortConverter.clock <= clock
    SimpleBus2MemPortConverter.reset <= reset
    xbar.io.out.resp.bits.rdata <= SimpleBus2MemPortConverter.io.in.resp.bits.rdata @[ToMemPort.scala 51:18]
    xbar.io.out.resp.bits.cmd <= SimpleBus2MemPortConverter.io.in.resp.bits.cmd @[ToMemPort.scala 51:18]
    xbar.io.out.resp.valid <= SimpleBus2MemPortConverter.io.in.resp.valid @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.resp.ready <= xbar.io.out.resp.ready @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.wdata <= xbar.io.out.req.bits.wdata @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.wmask <= xbar.io.out.req.bits.wmask @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.cmd <= xbar.io.out.req.bits.cmd @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.size <= xbar.io.out.req.bits.size @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.bits.addr <= xbar.io.out.req.bits.addr @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.in.req.valid <= xbar.io.out.req.valid @[ToMemPort.scala 51:18]
    xbar.io.out.req.ready <= SimpleBus2MemPortConverter.io.in.req.ready @[ToMemPort.scala 51:18]
    SimpleBus2MemPortConverter.io.out.resp.bits.data is invalid @[NutShell.scala 66:26]
    SimpleBus2MemPortConverter.io.out.resp.valid is invalid @[NutShell.scala 67:22]
    SimpleBus2MemPortConverter.io.out.req.ready is invalid @[NutShell.scala 68:21]
    wire _WIRE : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}} @[NutShell.scala 71:26]
    inst Prefetcher of Prefetcher @[NutShell.scala 73:30]
    Prefetcher.clock <= clock
    Prefetcher.reset <= reset
    wire _WIRE_1 : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}} @[NutShell.scala 74:27]
    Prefetcher.io.in.bits.wdata <= xbar.io.out.req.bits.wdata @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.wmask <= xbar.io.out.req.bits.wmask @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.cmd <= xbar.io.out.req.bits.cmd @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.size <= xbar.io.out.req.bits.size @[NutShell.scala 75:24]
    Prefetcher.io.in.bits.addr <= xbar.io.out.req.bits.addr @[NutShell.scala 75:24]
    Prefetcher.io.in.valid <= xbar.io.out.req.valid @[NutShell.scala 75:24]
    xbar.io.out.req.ready <= Prefetcher.io.in.ready @[NutShell.scala 75:24]
    _WIRE_1.req.bits.wdata <= Prefetcher.io.out.bits.wdata @[NutShell.scala 76:21]
    _WIRE_1.req.bits.wmask <= Prefetcher.io.out.bits.wmask @[NutShell.scala 76:21]
    _WIRE_1.req.bits.cmd <= Prefetcher.io.out.bits.cmd @[NutShell.scala 76:21]
    _WIRE_1.req.bits.size <= Prefetcher.io.out.bits.size @[NutShell.scala 76:21]
    _WIRE_1.req.bits.addr <= Prefetcher.io.out.bits.addr @[NutShell.scala 76:21]
    _WIRE_1.req.valid <= Prefetcher.io.out.valid @[NutShell.scala 76:21]
    Prefetcher.io.out.ready <= _WIRE_1.req.ready @[NutShell.scala 76:21]
    xbar.io.out.resp.bits.rdata <= _WIRE_1.resp.bits.rdata @[NutShell.scala 77:24]
    xbar.io.out.resp.bits.cmd <= _WIRE_1.resp.bits.cmd @[NutShell.scala 77:24]
    xbar.io.out.resp.valid <= _WIRE_1.resp.valid @[NutShell.scala 77:24]
    _WIRE_1.resp.ready <= xbar.io.out.resp.ready @[NutShell.scala 77:24]
    wire _WIRE_2 : UInt<1> @[NutShell.scala 80:23]
    wire _WIRE_3 : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}} @[NutShell.scala 81:60]
    _WIRE_3.resp.bits.rdata <= UInt<64>("h0") @[NutShell.scala 81:60]
    _WIRE_3.resp.bits.cmd <= UInt<4>("h0") @[NutShell.scala 81:60]
    _WIRE_3.resp.valid <= UInt<1>("h0") @[NutShell.scala 81:60]
    _WIRE_3.resp.ready <= UInt<1>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.bits.wdata <= UInt<64>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.bits.wmask <= UInt<8>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.bits.cmd <= UInt<4>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.bits.size <= UInt<3>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.bits.addr <= UInt<32>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.valid <= UInt<1>("h0") @[NutShell.scala 81:60]
    _WIRE_3.req.ready <= UInt<1>("h0") @[NutShell.scala 81:60]
    inst Cache of Cache_2 @[Cache.scala 670:35]
    Cache.clock <= clock
    Cache.reset <= reset
    Cache.io.flush <= UInt<1>("h0") @[Cache.scala 675:20]
    _WIRE_1.resp.bits.rdata <= Cache.io.in.resp.bits.rdata @[Cache.scala 676:17]
    _WIRE_1.resp.bits.cmd <= Cache.io.in.resp.bits.cmd @[Cache.scala 676:17]
    _WIRE_1.resp.valid <= Cache.io.in.resp.valid @[Cache.scala 676:17]
    Cache.io.in.resp.ready <= _WIRE_1.resp.ready @[Cache.scala 676:17]
    Cache.io.in.req.bits.wdata <= _WIRE_1.req.bits.wdata @[Cache.scala 676:17]
    Cache.io.in.req.bits.wmask <= _WIRE_1.req.bits.wmask @[Cache.scala 676:17]
    Cache.io.in.req.bits.cmd <= _WIRE_1.req.bits.cmd @[Cache.scala 676:17]
    Cache.io.in.req.bits.size <= _WIRE_1.req.bits.size @[Cache.scala 676:17]
    Cache.io.in.req.bits.addr <= _WIRE_1.req.bits.addr @[Cache.scala 676:17]
    Cache.io.in.req.valid <= _WIRE_1.req.valid @[Cache.scala 676:17]
    _WIRE_1.req.ready <= Cache.io.in.req.ready @[Cache.scala 676:17]
    Cache.io.mmio.resp.bits.rdata <= _WIRE_3.resp.bits.rdata @[Cache.scala 677:13]
    Cache.io.mmio.resp.bits.cmd <= _WIRE_3.resp.bits.cmd @[Cache.scala 677:13]
    Cache.io.mmio.resp.valid <= _WIRE_3.resp.valid @[Cache.scala 677:13]
    _WIRE_3.resp.ready <= Cache.io.mmio.resp.ready @[Cache.scala 677:13]
    _WIRE_3.req.bits.wdata <= Cache.io.mmio.req.bits.wdata @[Cache.scala 677:13]
    _WIRE_3.req.bits.wmask <= Cache.io.mmio.req.bits.wmask @[Cache.scala 677:13]
    _WIRE_3.req.bits.cmd <= Cache.io.mmio.req.bits.cmd @[Cache.scala 677:13]
    _WIRE_3.req.bits.size <= Cache.io.mmio.req.bits.size @[Cache.scala 677:13]
    _WIRE_3.req.bits.addr <= Cache.io.mmio.req.bits.addr @[Cache.scala 677:13]
    _WIRE_3.req.valid <= Cache.io.mmio.req.valid @[Cache.scala 677:13]
    Cache.io.mmio.req.ready <= _WIRE_3.req.ready @[Cache.scala 677:13]
    _WIRE_2 <= Cache.io.empty @[Cache.scala 678:11]
    _WIRE.coh.resp.bits.rdata <= Cache.io.out.coh.resp.bits.rdata @[NutShell.scala 81:16]
    _WIRE.coh.resp.bits.cmd <= Cache.io.out.coh.resp.bits.cmd @[NutShell.scala 81:16]
    _WIRE.coh.resp.valid <= Cache.io.out.coh.resp.valid @[NutShell.scala 81:16]
    Cache.io.out.coh.resp.ready <= _WIRE.coh.resp.ready @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.wdata <= _WIRE.coh.req.bits.wdata @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.wmask <= _WIRE.coh.req.bits.wmask @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.cmd <= _WIRE.coh.req.bits.cmd @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.size <= _WIRE.coh.req.bits.size @[NutShell.scala 81:16]
    Cache.io.out.coh.req.bits.addr <= _WIRE.coh.req.bits.addr @[NutShell.scala 81:16]
    Cache.io.out.coh.req.valid <= _WIRE.coh.req.valid @[NutShell.scala 81:16]
    _WIRE.coh.req.ready <= Cache.io.out.coh.req.ready @[NutShell.scala 81:16]
    Cache.io.out.mem.resp.bits.rdata <= _WIRE.mem.resp.bits.rdata @[NutShell.scala 81:16]
    Cache.io.out.mem.resp.bits.cmd <= _WIRE.mem.resp.bits.cmd @[NutShell.scala 81:16]
    Cache.io.out.mem.resp.valid <= _WIRE.mem.resp.valid @[NutShell.scala 81:16]
    _WIRE.mem.resp.ready <= Cache.io.out.mem.resp.ready @[NutShell.scala 81:16]
    _WIRE.mem.req.bits.wdata <= Cache.io.out.mem.req.bits.wdata @[NutShell.scala 81:16]
    _WIRE.mem.req.bits.wmask <= Cache.io.out.mem.req.bits.wmask @[NutShell.scala 81:16]
    _WIRE.mem.req.bits.cmd <= Cache.io.out.mem.req.bits.cmd @[NutShell.scala 81:16]
    _WIRE.mem.req.bits.size <= Cache.io.out.mem.req.bits.size @[NutShell.scala 81:16]
    _WIRE.mem.req.bits.addr <= Cache.io.out.mem.req.bits.addr @[NutShell.scala 81:16]
    _WIRE.mem.req.valid <= Cache.io.out.mem.req.valid @[NutShell.scala 81:16]
    Cache.io.out.mem.req.ready <= _WIRE.mem.req.ready @[NutShell.scala 81:16]
    _WIRE.coh.resp.ready <= UInt<1>("h1") @[NutShell.scala 83:31]
    _WIRE.coh.req.valid <= UInt<1>("h0") @[NutShell.scala 84:30]
    _WIRE.coh.req.bits.wdata is invalid @[NutShell.scala 85:29]
    _WIRE.coh.req.bits.wmask is invalid @[NutShell.scala 85:29]
    _WIRE.coh.req.bits.cmd is invalid @[NutShell.scala 85:29]
    _WIRE.coh.req.bits.size is invalid @[NutShell.scala 85:29]
    _WIRE.coh.req.bits.addr is invalid @[NutShell.scala 85:29]
    inst memAddrMap of SimpleBusAddressMapper @[NutShell.scala 93:26]
    memAddrMap.clock <= clock
    memAddrMap.reset <= reset
    _WIRE.mem.resp.bits.rdata <= memAddrMap.io.in.resp.bits.rdata @[NutShell.scala 94:20]
    _WIRE.mem.resp.bits.cmd <= memAddrMap.io.in.resp.bits.cmd @[NutShell.scala 94:20]
    _WIRE.mem.resp.valid <= memAddrMap.io.in.resp.valid @[NutShell.scala 94:20]
    memAddrMap.io.in.resp.ready <= _WIRE.mem.resp.ready @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.wdata <= _WIRE.mem.req.bits.wdata @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.wmask <= _WIRE.mem.req.bits.wmask @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.cmd <= _WIRE.mem.req.bits.cmd @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.size <= _WIRE.mem.req.bits.size @[NutShell.scala 94:20]
    memAddrMap.io.in.req.bits.addr <= _WIRE.mem.req.bits.addr @[NutShell.scala 94:20]
    memAddrMap.io.in.req.valid <= _WIRE.mem.req.valid @[NutShell.scala 94:20]
    _WIRE.mem.req.ready <= memAddrMap.io.in.req.ready @[NutShell.scala 94:20]
    inst SimpleBus2AXI4Converter of SimpleBus2AXI4Converter @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter.clock <= clock
    SimpleBus2AXI4Converter.reset <= reset
    memAddrMap.io.out.resp.bits.rdata <= SimpleBus2AXI4Converter.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    memAddrMap.io.out.resp.bits.cmd <= SimpleBus2AXI4Converter.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    memAddrMap.io.out.resp.valid <= SimpleBus2AXI4Converter.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.resp.ready <= memAddrMap.io.out.resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.wdata <= memAddrMap.io.out.req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.wmask <= memAddrMap.io.out.req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.cmd <= memAddrMap.io.out.req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.size <= memAddrMap.io.out.req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.addr <= memAddrMap.io.out.req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.valid <= memAddrMap.io.out.req.valid @[ToAXI4.scala 205:18]
    memAddrMap.io.out.req.ready <= SimpleBus2AXI4Converter.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.out.r.bits.user <= io.mem.r.bits.user @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.id <= io.mem.r.bits.id @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.last <= io.mem.r.bits.last @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.data <= io.mem.r.bits.data @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.bits.resp <= io.mem.r.bits.resp @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.r.valid <= io.mem.r.valid @[NutShell.scala 95:10]
    io.mem.r.ready <= SimpleBus2AXI4Converter.io.out.r.ready @[NutShell.scala 95:10]
    io.mem.ar.bits.qos <= SimpleBus2AXI4Converter.io.out.ar.bits.qos @[NutShell.scala 95:10]
    io.mem.ar.bits.cache <= SimpleBus2AXI4Converter.io.out.ar.bits.cache @[NutShell.scala 95:10]
    io.mem.ar.bits.lock <= SimpleBus2AXI4Converter.io.out.ar.bits.lock @[NutShell.scala 95:10]
    io.mem.ar.bits.burst <= SimpleBus2AXI4Converter.io.out.ar.bits.burst @[NutShell.scala 95:10]
    io.mem.ar.bits.size <= SimpleBus2AXI4Converter.io.out.ar.bits.size @[NutShell.scala 95:10]
    io.mem.ar.bits.len <= SimpleBus2AXI4Converter.io.out.ar.bits.len @[NutShell.scala 95:10]
    io.mem.ar.bits.user <= SimpleBus2AXI4Converter.io.out.ar.bits.user @[NutShell.scala 95:10]
    io.mem.ar.bits.id <= SimpleBus2AXI4Converter.io.out.ar.bits.id @[NutShell.scala 95:10]
    io.mem.ar.bits.prot <= SimpleBus2AXI4Converter.io.out.ar.bits.prot @[NutShell.scala 95:10]
    io.mem.ar.bits.addr <= SimpleBus2AXI4Converter.io.out.ar.bits.addr @[NutShell.scala 95:10]
    io.mem.ar.valid <= SimpleBus2AXI4Converter.io.out.ar.valid @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.ar.ready <= io.mem.ar.ready @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.bits.user <= io.mem.b.bits.user @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.bits.id <= io.mem.b.bits.id @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.bits.resp <= io.mem.b.bits.resp @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.b.valid <= io.mem.b.valid @[NutShell.scala 95:10]
    io.mem.b.ready <= SimpleBus2AXI4Converter.io.out.b.ready @[NutShell.scala 95:10]
    io.mem.w.bits.last <= SimpleBus2AXI4Converter.io.out.w.bits.last @[NutShell.scala 95:10]
    io.mem.w.bits.strb <= SimpleBus2AXI4Converter.io.out.w.bits.strb @[NutShell.scala 95:10]
    io.mem.w.bits.data <= SimpleBus2AXI4Converter.io.out.w.bits.data @[NutShell.scala 95:10]
    io.mem.w.valid <= SimpleBus2AXI4Converter.io.out.w.valid @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.w.ready <= io.mem.w.ready @[NutShell.scala 95:10]
    io.mem.aw.bits.qos <= SimpleBus2AXI4Converter.io.out.aw.bits.qos @[NutShell.scala 95:10]
    io.mem.aw.bits.cache <= SimpleBus2AXI4Converter.io.out.aw.bits.cache @[NutShell.scala 95:10]
    io.mem.aw.bits.lock <= SimpleBus2AXI4Converter.io.out.aw.bits.lock @[NutShell.scala 95:10]
    io.mem.aw.bits.burst <= SimpleBus2AXI4Converter.io.out.aw.bits.burst @[NutShell.scala 95:10]
    io.mem.aw.bits.size <= SimpleBus2AXI4Converter.io.out.aw.bits.size @[NutShell.scala 95:10]
    io.mem.aw.bits.len <= SimpleBus2AXI4Converter.io.out.aw.bits.len @[NutShell.scala 95:10]
    io.mem.aw.bits.user <= SimpleBus2AXI4Converter.io.out.aw.bits.user @[NutShell.scala 95:10]
    io.mem.aw.bits.id <= SimpleBus2AXI4Converter.io.out.aw.bits.id @[NutShell.scala 95:10]
    io.mem.aw.bits.prot <= SimpleBus2AXI4Converter.io.out.aw.bits.prot @[NutShell.scala 95:10]
    io.mem.aw.bits.addr <= SimpleBus2AXI4Converter.io.out.aw.bits.addr @[NutShell.scala 95:10]
    io.mem.aw.valid <= SimpleBus2AXI4Converter.io.out.aw.valid @[NutShell.scala 95:10]
    SimpleBus2AXI4Converter.io.out.aw.ready <= io.mem.aw.ready @[NutShell.scala 95:10]
    nutcore.io.imem.coh.resp.ready <= UInt<1>("h1") @[NutShell.scala 97:34]
    nutcore.io.imem.coh.req.valid <= UInt<1>("h0") @[NutShell.scala 98:33]
    nutcore.io.imem.coh.req.bits.wdata is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.wmask is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.cmd is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.size is invalid @[NutShell.scala 99:32]
    nutcore.io.imem.coh.req.bits.addr is invalid @[NutShell.scala 99:32]
    inst mmioXbar of SimpleBusCrossbar1toN @[NutShell.scala 106:24]
    mmioXbar.clock <= clock
    mmioXbar.reset <= reset
    nutcore.io.mmio.resp.bits.rdata <= mmioXbar.io.in.resp.bits.rdata @[NutShell.scala 107:18]
    nutcore.io.mmio.resp.bits.cmd <= mmioXbar.io.in.resp.bits.cmd @[NutShell.scala 107:18]
    nutcore.io.mmio.resp.valid <= mmioXbar.io.in.resp.valid @[NutShell.scala 107:18]
    mmioXbar.io.in.resp.ready <= nutcore.io.mmio.resp.ready @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.wdata <= nutcore.io.mmio.req.bits.wdata @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.wmask <= nutcore.io.mmio.req.bits.wmask @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.cmd <= nutcore.io.mmio.req.bits.cmd @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.size <= nutcore.io.mmio.req.bits.size @[NutShell.scala 107:18]
    mmioXbar.io.in.req.bits.addr <= nutcore.io.mmio.req.bits.addr @[NutShell.scala 107:18]
    mmioXbar.io.in.req.valid <= nutcore.io.mmio.req.valid @[NutShell.scala 107:18]
    nutcore.io.mmio.req.ready <= mmioXbar.io.in.req.ready @[NutShell.scala 107:18]
    mmioXbar.io.out[0].resp.bits.rdata <= io.mmio.resp.bits.rdata @[NutShell.scala 111:18]
    mmioXbar.io.out[0].resp.bits.cmd <= io.mmio.resp.bits.cmd @[NutShell.scala 111:18]
    mmioXbar.io.out[0].resp.valid <= io.mmio.resp.valid @[NutShell.scala 111:18]
    io.mmio.resp.ready <= mmioXbar.io.out[0].resp.ready @[NutShell.scala 111:18]
    io.mmio.req.bits.wdata <= mmioXbar.io.out[0].req.bits.wdata @[NutShell.scala 111:18]
    io.mmio.req.bits.wmask <= mmioXbar.io.out[0].req.bits.wmask @[NutShell.scala 111:18]
    io.mmio.req.bits.cmd <= mmioXbar.io.out[0].req.bits.cmd @[NutShell.scala 111:18]
    io.mmio.req.bits.size <= mmioXbar.io.out[0].req.bits.size @[NutShell.scala 111:18]
    io.mmio.req.bits.addr <= mmioXbar.io.out[0].req.bits.addr @[NutShell.scala 111:18]
    io.mmio.req.valid <= mmioXbar.io.out[0].req.valid @[NutShell.scala 111:18]
    mmioXbar.io.out[0].req.ready <= io.mmio.req.ready @[NutShell.scala 111:18]
    inst clint of AXI4CLINT @[NutShell.scala 113:21]
    clint.clock <= clock
    clint.reset <= reset
    inst SimpleBus2AXI4Converter_1 of SimpleBus2AXI4Converter_1 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_1.clock <= clock
    SimpleBus2AXI4Converter_1.reset <= reset
    mmioXbar.io.out[1].resp.bits.rdata <= SimpleBus2AXI4Converter_1.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    mmioXbar.io.out[1].resp.bits.cmd <= SimpleBus2AXI4Converter_1.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    mmioXbar.io.out[1].resp.valid <= SimpleBus2AXI4Converter_1.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.resp.ready <= mmioXbar.io.out[1].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.wdata <= mmioXbar.io.out[1].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.wmask <= mmioXbar.io.out[1].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.cmd <= mmioXbar.io.out[1].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.size <= mmioXbar.io.out[1].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.addr <= mmioXbar.io.out[1].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.valid <= mmioXbar.io.out[1].req.valid @[ToAXI4.scala 205:18]
    mmioXbar.io.out[1].req.ready <= SimpleBus2AXI4Converter_1.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.out.r.bits.data <= clint.io.in.r.bits.data @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.r.bits.resp <= clint.io.in.r.bits.resp @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.r.valid <= clint.io.in.r.valid @[NutShell.scala 114:15]
    clint.io.in.r.ready <= SimpleBus2AXI4Converter_1.io.out.r.ready @[NutShell.scala 114:15]
    clint.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_1.io.out.ar.bits.prot @[NutShell.scala 114:15]
    clint.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_1.io.out.ar.bits.addr @[NutShell.scala 114:15]
    clint.io.in.ar.valid <= SimpleBus2AXI4Converter_1.io.out.ar.valid @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.ar.ready <= clint.io.in.ar.ready @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.b.bits.resp <= clint.io.in.b.bits.resp @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.b.valid <= clint.io.in.b.valid @[NutShell.scala 114:15]
    clint.io.in.b.ready <= SimpleBus2AXI4Converter_1.io.out.b.ready @[NutShell.scala 114:15]
    clint.io.in.w.bits.strb <= SimpleBus2AXI4Converter_1.io.out.w.bits.strb @[NutShell.scala 114:15]
    clint.io.in.w.bits.data <= SimpleBus2AXI4Converter_1.io.out.w.bits.data @[NutShell.scala 114:15]
    clint.io.in.w.valid <= SimpleBus2AXI4Converter_1.io.out.w.valid @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.w.ready <= clint.io.in.w.ready @[NutShell.scala 114:15]
    clint.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_1.io.out.aw.bits.prot @[NutShell.scala 114:15]
    clint.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_1.io.out.aw.bits.addr @[NutShell.scala 114:15]
    clint.io.in.aw.valid <= SimpleBus2AXI4Converter_1.io.out.aw.valid @[NutShell.scala 114:15]
    SimpleBus2AXI4Converter_1.io.out.aw.ready <= clint.io.in.aw.ready @[NutShell.scala 114:15]
    inst plic of AXI4PLIC @[NutShell.scala 120:20]
    plic.clock <= clock
    plic.reset <= reset
    inst SimpleBus2AXI4Converter_2 of SimpleBus2AXI4Converter_2 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_2.clock <= clock
    SimpleBus2AXI4Converter_2.reset <= reset
    mmioXbar.io.out[2].resp.bits.rdata <= SimpleBus2AXI4Converter_2.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    mmioXbar.io.out[2].resp.bits.cmd <= SimpleBus2AXI4Converter_2.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    mmioXbar.io.out[2].resp.valid <= SimpleBus2AXI4Converter_2.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.resp.ready <= mmioXbar.io.out[2].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.wdata <= mmioXbar.io.out[2].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.wmask <= mmioXbar.io.out[2].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.cmd <= mmioXbar.io.out[2].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.size <= mmioXbar.io.out[2].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.addr <= mmioXbar.io.out[2].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.valid <= mmioXbar.io.out[2].req.valid @[ToAXI4.scala 205:18]
    mmioXbar.io.out[2].req.ready <= SimpleBus2AXI4Converter_2.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.out.r.bits.data <= plic.io.in.r.bits.data @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.r.bits.resp <= plic.io.in.r.bits.resp @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.r.valid <= plic.io.in.r.valid @[NutShell.scala 121:14]
    plic.io.in.r.ready <= SimpleBus2AXI4Converter_2.io.out.r.ready @[NutShell.scala 121:14]
    plic.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_2.io.out.ar.bits.prot @[NutShell.scala 121:14]
    plic.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_2.io.out.ar.bits.addr @[NutShell.scala 121:14]
    plic.io.in.ar.valid <= SimpleBus2AXI4Converter_2.io.out.ar.valid @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.ar.ready <= plic.io.in.ar.ready @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.b.bits.resp <= plic.io.in.b.bits.resp @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.b.valid <= plic.io.in.b.valid @[NutShell.scala 121:14]
    plic.io.in.b.ready <= SimpleBus2AXI4Converter_2.io.out.b.ready @[NutShell.scala 121:14]
    plic.io.in.w.bits.strb <= SimpleBus2AXI4Converter_2.io.out.w.bits.strb @[NutShell.scala 121:14]
    plic.io.in.w.bits.data <= SimpleBus2AXI4Converter_2.io.out.w.bits.data @[NutShell.scala 121:14]
    plic.io.in.w.valid <= SimpleBus2AXI4Converter_2.io.out.w.valid @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.w.ready <= plic.io.in.w.ready @[NutShell.scala 121:14]
    plic.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_2.io.out.aw.bits.prot @[NutShell.scala 121:14]
    plic.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_2.io.out.aw.bits.addr @[NutShell.scala 121:14]
    plic.io.in.aw.valid <= SimpleBus2AXI4Converter_2.io.out.aw.valid @[NutShell.scala 121:14]
    SimpleBus2AXI4Converter_2.io.out.aw.ready <= plic.io.in.aw.ready @[NutShell.scala 121:14]
    reg REG : UInt, clock with :
      reset => (UInt<1>("h0"), REG) @[NutShell.scala 122:47]
    REG <= io.meip @[NutShell.scala 122:47]
    reg REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_1) @[NutShell.scala 122:39]
    REG_1 <= REG @[NutShell.scala 122:39]
    plic.io.extra.intrVec <= REG_1 @[NutShell.scala 122:29]

  extmodule RAMHelper :
    input clk : Clock
    input rIdx : UInt<64>
    output rdata : UInt<64>
    input wIdx : UInt<64>
    input wdata : UInt<64>
    input wmask : UInt<64>
    input wen : UInt<1>
    input en : UInt<1>
    defname = RAMHelper

  module AXI4RAM :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    reg value : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Counter.scala 60:40]
    reg value_1 : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Counter.scala 60:40]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    wire _WIRE : UInt<8> @[Hold.scala 23:81]
    _WIRE <= UInt<1>("h0") @[Hold.scala 23:81]
    reg r : UInt, clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when _T_24 : @[Reg.scala 28:19]
      r <= io.in.ar.bits.len @[Reg.scala 28:23]
    node _T_25 = mux(_T_24, io.in.ar.bits.len, r) @[Hold.scala 23:48]
    node _T_26 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    wire _WIRE_1 : UInt<2> @[Hold.scala 23:81]
    _WIRE_1 <= UInt<1>("h0") @[Hold.scala 23:81]
    reg r_1 : UInt, clock with :
      reset => (reset, _WIRE_1) @[Reg.scala 27:20]
    when _T_26 : @[Reg.scala 28:19]
      r_1 <= io.in.ar.bits.burst @[Reg.scala 28:23]
    node _T_27 = mux(_T_26, io.in.ar.bits.burst, r_1) @[Hold.scala 23:48]
    wire _WIRE_2 : UInt<32> @[AXI4Slave.scala 45:69]
    _WIRE_2 <= io.in.ar.bits.len @[AXI4Slave.scala 45:69]
    node _T_28 = dshl(_WIRE_2, io.in.ar.bits.size) @[AXI4Slave.scala 45:89]
    node _T_29 = not(_T_28) @[AXI4Slave.scala 45:42]
    node _T_30 = and(io.in.ar.bits.addr, _T_29) @[AXI4Slave.scala 45:40]
    node _T_31 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    wire _WIRE_3 : UInt<39> @[Hold.scala 23:81]
    _WIRE_3 <= UInt<1>("h0") @[Hold.scala 23:81]
    reg r_2 : UInt, clock with :
      reset => (reset, _WIRE_3) @[Reg.scala 27:20]
    when _T_31 : @[Reg.scala 28:19]
      r_2 <= _T_30 @[Reg.scala 28:23]
    node _T_32 = mux(_T_31, _T_30, r_2) @[Hold.scala 23:48]
    raddr <= _T_32 @[AXI4Slave.scala 46:13]
    node _T_33 = eq(value, _T_25) @[AXI4Slave.scala 47:36]
    io.in.r.bits.last <= _T_33 @[AXI4Slave.scala 47:24]
    when ren : @[AXI4Slave.scala 48:18]
      node wrap = eq(value_1, UInt<8>("hff")) @[Counter.scala 72:24]
      node _value_T = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_1 @[Counter.scala 76:15]
      node _T_34 = eq(_T_27, UInt<2>("h2")) @[AXI4Slave.scala 50:21]
      node _T_35 = eq(value_1, _T_25) @[AXI4Slave.scala 50:68]
      node _T_36 = and(_T_34, _T_35) @[AXI4Slave.scala 50:51]
      when _T_36 : @[AXI4Slave.scala 50:77]
        value_1 <= UInt<1>("h0") @[AXI4Slave.scala 50:93]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    when _T_37 : @[AXI4Slave.scala 52:28]
      node wrap_1 = eq(value, UInt<8>("hff")) @[Counter.scala 72:24]
      node _value_T_2 = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value <= _value_T_3 @[Counter.scala 76:15]
      when io.in.r.bits.last : @[AXI4Slave.scala 54:33]
        value <= UInt<1>("h0") @[AXI4Slave.scala 54:43]
    node _T_38 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    when _T_38 : @[AXI4Slave.scala 56:29]
      node _value_T_4 = dshr(io.in.ar.bits.addr, io.in.ar.bits.size) @[AXI4Slave.scala 57:45]
      node _value_T_5 = and(_value_T_4, io.in.ar.bits.len) @[AXI4Slave.scala 57:67]
      value_1 <= _value_T_5 @[AXI4Slave.scala 57:23]
      node _T_39 = neq(io.in.ar.bits.len, UInt<1>("h0")) @[AXI4Slave.scala 58:32]
      node _T_40 = eq(io.in.ar.bits.burst, UInt<2>("h2")) @[AXI4Slave.scala 58:62]
      node _T_41 = and(_T_39, _T_40) @[AXI4Slave.scala 58:40]
      when _T_41 : @[AXI4Slave.scala 58:93]
        node _T_42 = eq(io.in.ar.bits.len, UInt<1>("h1")) @[AXI4Slave.scala 59:35]
        node _T_43 = eq(io.in.ar.bits.len, UInt<2>("h3")) @[AXI4Slave.scala 59:63]
        node _T_44 = or(_T_42, _T_43) @[AXI4Slave.scala 59:43]
        node _T_45 = eq(io.in.ar.bits.len, UInt<3>("h7")) @[AXI4Slave.scala 60:30]
        node _T_46 = or(_T_44, _T_45) @[AXI4Slave.scala 59:71]
        node _T_47 = eq(io.in.ar.bits.len, UInt<4>("hf")) @[AXI4Slave.scala 60:58]
        node _T_48 = or(_T_46, _T_47) @[AXI4Slave.scala 60:38]
        node _T_49 = asUInt(reset) @[AXI4Slave.scala 59:17]
        node _T_50 = or(_T_48, _T_49) @[AXI4Slave.scala 59:17]
        node _T_51 = eq(_T_50, UInt<1>("h0")) @[AXI4Slave.scala 59:17]
        when _T_51 : @[AXI4Slave.scala 59:17]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AXI4Slave.scala:59 assert(axi4.ar.bits.len === 1.U || axi4.ar.bits.len === 3.U ||\n") : SIM @[AXI4Slave.scala 59:17]
          stop(clock, UInt<1>("h1"), 1) @[AXI4Slave.scala 59:17]
    node _T_52 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_53 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_54 = and(_T_53, io.in.r.bits.last) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_54 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_52 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_55 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_56 = or(io.in.r.ready, _T_55) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_56 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_57 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_57 @[AXI4Slave.scala 73:17]
    node _T_58 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_59 = eq(io.in.r.bits.last, UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_60 = and(_T_58, _T_59) @[AXI4Slave.scala 73:62]
    node _T_61 = or(REG, _T_60) @[AXI4Slave.scala 73:46]
    ren <= _T_61 @[AXI4Slave.scala 73:7]
    node _T_62 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_63 = or(_T_62, r_busy) @[AXI4Slave.scala 74:52]
    node _T_64 = and(ren, _T_63) @[AXI4Slave.scala 74:35]
    node _T_65 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_65 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_64 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    reg value_2 : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Counter.scala 60:40]
    node _T_66 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    wire _WIRE_4 : UInt<32> @[Hold.scala 23:81]
    _WIRE_4 <= UInt<1>("h0") @[Hold.scala 23:81]
    reg r_3 : UInt, clock with :
      reset => (reset, _WIRE_4) @[Reg.scala 27:20]
    when _T_66 : @[Reg.scala 28:19]
      r_3 <= io.in.aw.bits.addr @[Reg.scala 28:23]
    node _T_67 = mux(_T_66, io.in.aw.bits.addr, r_3) @[Hold.scala 23:48]
    waddr <= _T_67 @[AXI4Slave.scala 81:13]
    node _T_68 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    when _T_68 : @[AXI4Slave.scala 82:28]
      node wrap_2 = eq(value_2, UInt<8>("hff")) @[Counter.scala 72:24]
      node _value_T_6 = add(value_2, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_7 = tail(_value_T_6, 1) @[Counter.scala 76:24]
      value_2 <= _value_T_7 @[Counter.scala 76:15]
      when io.in.w.bits.last : @[AXI4Slave.scala 84:33]
        value_2 <= UInt<1>("h0") @[AXI4Slave.scala 84:43]
    node _T_69 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_70 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_70 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_69 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_71 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_71 @[AXI4Slave.scala 94:15]
    node _T_72 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_72 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_73 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_74 = and(_T_73, io.in.w.bits.last) @[AXI4Slave.scala 97:43]
    node _T_75 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_75 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_74 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    node _T_76 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    reg r_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_4) @[Reg.scala 15:16]
    when _T_76 : @[Reg.scala 16:19]
      r_4 <= io.in.aw.bits.id @[Reg.scala 16:23]
    io.in.b.bits.id <= r_4 @[AXI4Slave.scala 101:24]
    node _T_77 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    reg r_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_5) @[Reg.scala 15:16]
    when _T_77 : @[Reg.scala 16:19]
      r_5 <= io.in.aw.bits.user @[Reg.scala 16:23]
    io.in.b.bits.user <= r_5 @[AXI4Slave.scala 102:24]
    node _T_78 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg r_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_6) @[Reg.scala 15:16]
    when _T_78 : @[Reg.scala 16:19]
      r_6 <= io.in.ar.bits.id @[Reg.scala 16:23]
    io.in.r.bits.id <= r_6 @[AXI4Slave.scala 103:24]
    node _T_79 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg r_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_7) @[Reg.scala 15:16]
    when _T_79 : @[Reg.scala 16:19]
      r_7 <= io.in.ar.bits.user @[Reg.scala 16:23]
    io.in.r.bits.user <= r_7 @[AXI4Slave.scala 104:24]
    node _T_80 = and(waddr, UInt<27>("h7ffffff")) @[AXI4RAM.scala 45:33]
    node _T_81 = shr(_T_80, 3) @[AXI4RAM.scala 45:49]
    node _T_82 = add(_T_81, value_2) @[AXI4RAM.scala 48:27]
    node wIdx = tail(_T_82, 1) @[AXI4RAM.scala 48:27]
    node _T_83 = and(raddr, UInt<27>("h7ffffff")) @[AXI4RAM.scala 45:33]
    node _T_84 = shr(_T_83, 3) @[AXI4RAM.scala 45:49]
    node _T_85 = add(_T_84, value_1) @[AXI4RAM.scala 49:27]
    node rIdx = tail(_T_85, 1) @[AXI4RAM.scala 49:27]
    node _T_86 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_87 = lt(wIdx, UInt<25>("h1000000")) @[AXI4RAM.scala 46:32]
    node wen = and(_T_86, _T_87) @[AXI4RAM.scala 50:25]
    inst RAMHelper of RAMHelper @[AXI4RAM.scala 53:21]
    RAMHelper.en is invalid
    RAMHelper.wen is invalid
    RAMHelper.wmask is invalid
    RAMHelper.wdata is invalid
    RAMHelper.wIdx is invalid
    RAMHelper.rdata is invalid
    RAMHelper.rIdx is invalid
    RAMHelper.clk is invalid
    RAMHelper.clk <= clock @[AXI4RAM.scala 54:16]
    RAMHelper.rIdx <= rIdx @[AXI4RAM.scala 55:17]
    RAMHelper.wIdx <= wIdx @[AXI4RAM.scala 56:17]
    RAMHelper.wdata <= io.in.w.bits.data @[AXI4RAM.scala 57:18]
    RAMHelper.wmask <= fullMask @[AXI4RAM.scala 58:18]
    RAMHelper.wen <= wen @[AXI4RAM.scala 59:16]
    RAMHelper.en <= UInt<1>("h1") @[AXI4RAM.scala 60:15]
    reg r_8 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), r_8) @[Reg.scala 15:16]
    when ren : @[Reg.scala 16:19]
      r_8 <= RAMHelper.rdata @[Reg.scala 16:23]
    io.in.r.bits.data <= r_8 @[AXI4RAM.scala 71:18]

  module LatencyPipe :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}}

    clock is invalid
    reset is invalid
    io is invalid
    io.out <- io.in @[LatencyPipe.scala 16:10]

  module LatencyPipe_1 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}}

    clock is invalid
    reset is invalid
    io is invalid
    io.out <- io.in @[LatencyPipe.scala 16:10]

  module AXI4Delayer :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}}

    inst LatencyPipe of LatencyPipe @[LatencyPipe.scala 21:22]
    LatencyPipe.clock is invalid
    LatencyPipe.reset is invalid
    LatencyPipe.io is invalid
    LatencyPipe.clock <= clock
    LatencyPipe.reset <= reset
    LatencyPipe.io.in <- io.in.ar @[LatencyPipe.scala 22:16]
    io.out.ar.bits.qos <= LatencyPipe.io.out.bits.qos @[Delayer.scala 15:13]
    io.out.ar.bits.cache <= LatencyPipe.io.out.bits.cache @[Delayer.scala 15:13]
    io.out.ar.bits.lock <= LatencyPipe.io.out.bits.lock @[Delayer.scala 15:13]
    io.out.ar.bits.burst <= LatencyPipe.io.out.bits.burst @[Delayer.scala 15:13]
    io.out.ar.bits.size <= LatencyPipe.io.out.bits.size @[Delayer.scala 15:13]
    io.out.ar.bits.len <= LatencyPipe.io.out.bits.len @[Delayer.scala 15:13]
    io.out.ar.bits.user <= LatencyPipe.io.out.bits.user @[Delayer.scala 15:13]
    io.out.ar.bits.id <= LatencyPipe.io.out.bits.id @[Delayer.scala 15:13]
    io.out.ar.bits.prot <= LatencyPipe.io.out.bits.prot @[Delayer.scala 15:13]
    io.out.ar.bits.addr <= LatencyPipe.io.out.bits.addr @[Delayer.scala 15:13]
    io.out.ar.valid <= LatencyPipe.io.out.valid @[Delayer.scala 15:13]
    LatencyPipe.io.out.ready <= io.out.ar.ready @[Delayer.scala 15:13]
    inst LatencyPipe_1 of LatencyPipe_1 @[LatencyPipe.scala 21:22]
    LatencyPipe_1.clock is invalid
    LatencyPipe_1.reset is invalid
    LatencyPipe_1.io is invalid
    LatencyPipe_1.clock <= clock
    LatencyPipe_1.reset <= reset
    LatencyPipe_1.io.in <- io.in.aw @[LatencyPipe.scala 22:16]
    io.out.aw.bits.qos <= LatencyPipe_1.io.out.bits.qos @[Delayer.scala 16:13]
    io.out.aw.bits.cache <= LatencyPipe_1.io.out.bits.cache @[Delayer.scala 16:13]
    io.out.aw.bits.lock <= LatencyPipe_1.io.out.bits.lock @[Delayer.scala 16:13]
    io.out.aw.bits.burst <= LatencyPipe_1.io.out.bits.burst @[Delayer.scala 16:13]
    io.out.aw.bits.size <= LatencyPipe_1.io.out.bits.size @[Delayer.scala 16:13]
    io.out.aw.bits.len <= LatencyPipe_1.io.out.bits.len @[Delayer.scala 16:13]
    io.out.aw.bits.user <= LatencyPipe_1.io.out.bits.user @[Delayer.scala 16:13]
    io.out.aw.bits.id <= LatencyPipe_1.io.out.bits.id @[Delayer.scala 16:13]
    io.out.aw.bits.prot <= LatencyPipe_1.io.out.bits.prot @[Delayer.scala 16:13]
    io.out.aw.bits.addr <= LatencyPipe_1.io.out.bits.addr @[Delayer.scala 16:13]
    io.out.aw.valid <= LatencyPipe_1.io.out.valid @[Delayer.scala 16:13]
    LatencyPipe_1.io.out.ready <= io.out.aw.ready @[Delayer.scala 16:13]
    io.out.w.bits.last <= io.in.w.bits.last @[Delayer.scala 17:13]
    io.out.w.bits.strb <= io.in.w.bits.strb @[Delayer.scala 17:13]
    io.out.w.bits.data <= io.in.w.bits.data @[Delayer.scala 17:13]
    io.out.w.valid <= io.in.w.valid @[Delayer.scala 17:13]
    io.in.w.ready <= io.out.w.ready @[Delayer.scala 17:13]
    io.in.b.bits.user <= io.out.b.bits.user @[Delayer.scala 18:13]
    io.in.b.bits.id <= io.out.b.bits.id @[Delayer.scala 18:13]
    io.in.b.bits.resp <= io.out.b.bits.resp @[Delayer.scala 18:13]
    io.in.b.valid <= io.out.b.valid @[Delayer.scala 18:13]
    io.out.b.ready <= io.in.b.ready @[Delayer.scala 18:13]
    io.in.r.bits.user <= io.out.r.bits.user @[Delayer.scala 19:13]
    io.in.r.bits.id <= io.out.r.bits.id @[Delayer.scala 19:13]
    io.in.r.bits.last <= io.out.r.bits.last @[Delayer.scala 19:13]
    io.in.r.bits.data <= io.out.r.bits.data @[Delayer.scala 19:13]
    io.in.r.bits.resp <= io.out.r.bits.resp @[Delayer.scala 19:13]
    io.in.r.valid <= io.out.r.valid @[Delayer.scala 19:13]
    io.out.r.ready <= io.in.r.ready @[Delayer.scala 19:13]

  module SimpleBusCrossbar1toN_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}[7]}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Crossbar.scala 31:22]
    node _T = geq(io.in.req.bits.addr, UInt<31>("h40600000")) @[Crossbar.scala 36:20]
    node _T_1 = lt(io.in.req.bits.addr, UInt<31>("h40600010")) @[Crossbar.scala 36:42]
    node _T_2 = and(_T, _T_1) @[Crossbar.scala 36:34]
    node _T_3 = geq(io.in.req.bits.addr, UInt<31>("h50000000")) @[Crossbar.scala 36:20]
    node _T_4 = lt(io.in.req.bits.addr, UInt<31>("h50400000")) @[Crossbar.scala 36:42]
    node _T_5 = and(_T_3, _T_4) @[Crossbar.scala 36:34]
    node _T_6 = geq(io.in.req.bits.addr, UInt<31>("h40001000")) @[Crossbar.scala 36:20]
    node _T_7 = lt(io.in.req.bits.addr, UInt<31>("h40001008")) @[Crossbar.scala 36:42]
    node _T_8 = and(_T_6, _T_7) @[Crossbar.scala 36:34]
    node _T_9 = geq(io.in.req.bits.addr, UInt<31>("h40000000")) @[Crossbar.scala 36:20]
    node _T_10 = lt(io.in.req.bits.addr, UInt<31>("h40001000")) @[Crossbar.scala 36:42]
    node _T_11 = and(_T_9, _T_10) @[Crossbar.scala 36:34]
    node _T_12 = geq(io.in.req.bits.addr, UInt<31>("h40002000")) @[Crossbar.scala 36:20]
    node _T_13 = lt(io.in.req.bits.addr, UInt<31>("h40003000")) @[Crossbar.scala 36:42]
    node _T_14 = and(_T_12, _T_13) @[Crossbar.scala 36:34]
    node _T_15 = geq(io.in.req.bits.addr, UInt<31>("h40004000")) @[Crossbar.scala 36:20]
    node _T_16 = lt(io.in.req.bits.addr, UInt<31>("h40005000")) @[Crossbar.scala 36:42]
    node _T_17 = and(_T_15, _T_16) @[Crossbar.scala 36:34]
    node _T_18 = geq(io.in.req.bits.addr, UInt<31>("h40003000")) @[Crossbar.scala 36:20]
    node _T_19 = lt(io.in.req.bits.addr, UInt<31>("h40004000")) @[Crossbar.scala 36:42]
    node _T_20 = and(_T_18, _T_19) @[Crossbar.scala 36:34]
    wire outSelVec : UInt<1>[7] @[Crossbar.scala 35:26]
    outSelVec[0] <= _T_2 @[Crossbar.scala 35:26]
    outSelVec[1] <= _T_5 @[Crossbar.scala 35:26]
    outSelVec[2] <= _T_8 @[Crossbar.scala 35:26]
    outSelVec[3] <= _T_11 @[Crossbar.scala 35:26]
    outSelVec[4] <= _T_14 @[Crossbar.scala 35:26]
    outSelVec[5] <= _T_17 @[Crossbar.scala 35:26]
    outSelVec[6] <= _T_20 @[Crossbar.scala 35:26]
    node _T_21 = mux(outSelVec[5], UInt<3>("h5"), UInt<3>("h6")) @[Mux.scala 47:69]
    node _T_22 = mux(outSelVec[4], UInt<3>("h4"), _T_21) @[Mux.scala 47:69]
    node _T_23 = mux(outSelVec[3], UInt<2>("h3"), _T_22) @[Mux.scala 47:69]
    node _T_24 = mux(outSelVec[2], UInt<2>("h2"), _T_23) @[Mux.scala 47:69]
    node _T_25 = mux(outSelVec[1], UInt<1>("h1"), _T_24) @[Mux.scala 47:69]
    node outSelIdx = mux(outSelVec[0], UInt<1>("h0"), _T_25) @[Mux.scala 47:69]
    node _T_26 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
    node _T_27 = eq(state, UInt<2>("h0")) @[Crossbar.scala 39:72]
    node _T_28 = and(_T_26, _T_27) @[Crossbar.scala 39:62]
    reg outSelIdxResp : UInt<3>, clock with :
      reset => (UInt<1>("h0"), outSelIdxResp) @[Reg.scala 15:16]
    when _T_28 : @[Reg.scala 16:19]
      outSelIdxResp <= outSelIdx @[Reg.scala 16:23]
    node lo_hi = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 41:54]
    node lo = cat(lo_hi, outSelVec[0]) @[Crossbar.scala 41:54]
    node hi_lo = cat(outSelVec[4], outSelVec[3]) @[Crossbar.scala 41:54]
    node hi_hi = cat(outSelVec[6], outSelVec[5]) @[Crossbar.scala 41:54]
    node hi = cat(hi_hi, hi_lo) @[Crossbar.scala 41:54]
    node _T_29 = cat(hi, lo) @[Crossbar.scala 41:54]
    node _T_30 = orr(_T_29) @[Crossbar.scala 41:61]
    node _T_31 = eq(_T_30, UInt<1>("h0")) @[Crossbar.scala 41:43]
    node reqInvalidAddr = and(io.in.req.valid, _T_31) @[Crossbar.scala 41:40]
    node lo_hi_1 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 43:39]
    node lo_1 = cat(lo_hi_1, outSelVec[0]) @[Crossbar.scala 43:39]
    node hi_lo_1 = cat(outSelVec[4], outSelVec[3]) @[Crossbar.scala 43:39]
    node hi_hi_1 = cat(outSelVec[6], outSelVec[5]) @[Crossbar.scala 43:39]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Crossbar.scala 43:39]
    node _T_32 = cat(hi_1, lo_1) @[Crossbar.scala 43:39]
    node _T_33 = orr(_T_32) @[Crossbar.scala 43:46]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Crossbar.scala 43:28]
    node _T_35 = and(io.in.req.valid, _T_34) @[Crossbar.scala 43:25]
    node lo_hi_2 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 43:84]
    node lo_2 = cat(lo_hi_2, outSelVec[0]) @[Crossbar.scala 43:84]
    node hi_lo_2 = cat(outSelVec[4], outSelVec[3]) @[Crossbar.scala 43:84]
    node hi_hi_2 = cat(outSelVec[6], outSelVec[5]) @[Crossbar.scala 43:84]
    node hi_2 = cat(hi_hi_2, hi_lo_2) @[Crossbar.scala 43:84]
    node _T_36 = cat(hi_2, lo_2) @[Crossbar.scala 43:84]
    node _T_37 = andr(_T_36) @[Crossbar.scala 43:91]
    node _T_38 = and(io.in.req.valid, _T_37) @[Crossbar.scala 43:71]
    node _T_39 = or(_T_35, _T_38) @[Crossbar.scala 43:51]
    when _T_39 : @[Crossbar.scala 43:97]
      wire _WIRE : UInt<1>
      _WIRE <= UInt<1>("h0")
      node _T_40 = and(UInt<1>("h1"), _WIRE) @[Debug.scala 80:29]
      when _T_40 : @[Debug.scala 80:52]
        reg REG : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_41 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_42 = tail(_T_41, 1) @[GTimer.scala 25:12]
        REG <= _T_42 @[GTimer.scala 25:7]
        node _T_43 = asUInt(reset) @[Crossbar.scala 45:13]
        node _T_44 = eq(_T_43, UInt<1>("h0")) @[Crossbar.scala 45:13]
        when _T_44 : @[Crossbar.scala 45:13]
          printf(clock, UInt<1>("h1"), "crossbar access bad addr %x, time %d\n", io.in.req.bits.addr, REG) : SIM @[Crossbar.scala 45:13]
    node lo_hi_3 = cat(outSelVec[2], outSelVec[1]) @[Crossbar.scala 49:41]
    node lo_3 = cat(lo_hi_3, outSelVec[0]) @[Crossbar.scala 49:41]
    node hi_lo_3 = cat(outSelVec[4], outSelVec[3]) @[Crossbar.scala 49:41]
    node hi_hi_3 = cat(outSelVec[6], outSelVec[5]) @[Crossbar.scala 49:41]
    node hi_3 = cat(hi_hi_3, hi_lo_3) @[Crossbar.scala 49:41]
    node _T_45 = cat(hi_3, lo_3) @[Crossbar.scala 49:41]
    node _T_46 = andr(_T_45) @[Crossbar.scala 49:48]
    node _T_47 = and(io.in.req.valid, _T_46) @[Crossbar.scala 49:28]
    node _T_48 = eq(_T_47, UInt<1>("h0")) @[Crossbar.scala 49:10]
    node _T_49 = asUInt(reset) @[Crossbar.scala 49:9]
    node _T_50 = or(_T_48, _T_49) @[Crossbar.scala 49:9]
    node _T_51 = eq(_T_50, UInt<1>("h0")) @[Crossbar.scala 49:9]
    when _T_51 : @[Crossbar.scala 49:9]
      printf(clock, UInt<1>("h1"), "Assertion failed: address decode error, bad addr = 0x%x\n\n    at Crossbar.scala:49 assert(!(io.in.req.valid && outSelVec.asUInt.andR), \"address decode error, bad addr = 0x%%x\\n\", addr)\n", io.in.req.bits.addr) : SIM_1 @[Crossbar.scala 49:9]
      stop(clock, UInt<1>("h1"), 1) @[Crossbar.scala 49:9]
    io.out[0].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[0].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[0].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[0].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[0].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_52 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_53 = and(io.in.req.valid, _T_52) @[Crossbar.scala 54:42]
    node _T_54 = and(outSelVec[0], _T_53) @[Crossbar.scala 54:22]
    io.out[0].req.valid <= _T_54 @[Crossbar.scala 54:17]
    io.out[0].resp.ready <= outSelVec[0] @[Crossbar.scala 55:18]
    io.out[1].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[1].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[1].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[1].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[1].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_55 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_56 = and(io.in.req.valid, _T_55) @[Crossbar.scala 54:42]
    node _T_57 = and(outSelVec[1], _T_56) @[Crossbar.scala 54:22]
    io.out[1].req.valid <= _T_57 @[Crossbar.scala 54:17]
    io.out[1].resp.ready <= outSelVec[1] @[Crossbar.scala 55:18]
    io.out[2].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[2].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[2].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[2].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[2].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_58 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_59 = and(io.in.req.valid, _T_58) @[Crossbar.scala 54:42]
    node _T_60 = and(outSelVec[2], _T_59) @[Crossbar.scala 54:22]
    io.out[2].req.valid <= _T_60 @[Crossbar.scala 54:17]
    io.out[2].resp.ready <= outSelVec[2] @[Crossbar.scala 55:18]
    io.out[3].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[3].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[3].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[3].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[3].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_61 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_62 = and(io.in.req.valid, _T_61) @[Crossbar.scala 54:42]
    node _T_63 = and(outSelVec[3], _T_62) @[Crossbar.scala 54:22]
    io.out[3].req.valid <= _T_63 @[Crossbar.scala 54:17]
    io.out[3].resp.ready <= outSelVec[3] @[Crossbar.scala 55:18]
    io.out[4].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[4].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[4].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[4].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[4].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_64 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_65 = and(io.in.req.valid, _T_64) @[Crossbar.scala 54:42]
    node _T_66 = and(outSelVec[4], _T_65) @[Crossbar.scala 54:22]
    io.out[4].req.valid <= _T_66 @[Crossbar.scala 54:17]
    io.out[4].resp.ready <= outSelVec[4] @[Crossbar.scala 55:18]
    io.out[5].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[5].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[5].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[5].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[5].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_67 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_68 = and(io.in.req.valid, _T_67) @[Crossbar.scala 54:42]
    node _T_69 = and(outSelVec[5], _T_68) @[Crossbar.scala 54:22]
    io.out[5].req.valid <= _T_69 @[Crossbar.scala 54:17]
    io.out[5].resp.ready <= outSelVec[5] @[Crossbar.scala 55:18]
    io.out[6].req.bits.wdata <= io.in.req.bits.wdata @[Crossbar.scala 53:16]
    io.out[6].req.bits.wmask <= io.in.req.bits.wmask @[Crossbar.scala 53:16]
    io.out[6].req.bits.cmd <= io.in.req.bits.cmd @[Crossbar.scala 53:16]
    io.out[6].req.bits.size <= io.in.req.bits.size @[Crossbar.scala 53:16]
    io.out[6].req.bits.addr <= io.in.req.bits.addr @[Crossbar.scala 53:16]
    node _T_70 = eq(state, UInt<2>("h0")) @[Crossbar.scala 54:52]
    node _T_71 = and(io.in.req.valid, _T_70) @[Crossbar.scala 54:42]
    node _T_72 = and(outSelVec[6], _T_71) @[Crossbar.scala 54:22]
    io.out[6].req.valid <= _T_72 @[Crossbar.scala 54:17]
    io.out[6].resp.ready <= outSelVec[6] @[Crossbar.scala 55:18]
    node _T_73 = eq(UInt<2>("h0"), state) @[Crossbar.scala 58:18]
    when _T_73 : @[Crossbar.scala 58:18]
      node _T_74 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
      when _T_74 : @[Crossbar.scala 60:32]
        state <= UInt<2>("h1") @[Crossbar.scala 60:40]
      when reqInvalidAddr : @[Crossbar.scala 61:29]
        state <= UInt<2>("h2") @[Crossbar.scala 61:37]
    else :
      node _T_75 = eq(UInt<2>("h1"), state) @[Crossbar.scala 58:18]
      when _T_75 : @[Crossbar.scala 58:18]
        node _T_76 = and(io.out[outSelIdxResp].resp.ready, io.out[outSelIdxResp].resp.valid) @[Decoupled.scala 40:37]
        when _T_76 : @[Crossbar.scala 63:49]
          state <= UInt<2>("h0") @[Crossbar.scala 63:57]
      else :
        node _T_77 = eq(UInt<2>("h2"), state) @[Crossbar.scala 58:18]
        when _T_77 : @[Crossbar.scala 58:18]
          node _T_78 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
          when _T_78 : @[Crossbar.scala 64:43]
            state <= UInt<2>("h0") @[Crossbar.scala 64:51]
    node _T_79 = and(io.out[outSelIdxResp].resp.ready, io.out[outSelIdxResp].resp.valid) @[Decoupled.scala 40:37]
    node _T_80 = eq(state, UInt<2>("h2")) @[Crossbar.scala 67:55]
    node _T_81 = or(_T_79, _T_80) @[Crossbar.scala 67:46]
    io.in.resp.valid <= _T_81 @[Crossbar.scala 67:20]
    io.in.resp.bits.rdata <= io.out[outSelIdxResp].resp.bits.rdata @[Crossbar.scala 68:19]
    io.in.resp.bits.cmd <= io.out[outSelIdxResp].resp.bits.cmd @[Crossbar.scala 68:19]
    io.out[outSelIdxResp].resp.ready <= io.in.resp.ready @[Crossbar.scala 70:25]
    node _T_82 = or(io.out[outSelIdx].req.ready, reqInvalidAddr) @[Crossbar.scala 71:39]
    io.in.req.ready <= _T_82 @[Crossbar.scala 71:19]
    wire _WIRE_1 : UInt<1>
    _WIRE_1 <= UInt<1>("h0")
    node _T_83 = and(UInt<1>("h1"), _WIRE_1) @[Debug.scala 80:29]
    when _T_83 : @[Debug.scala 80:52]
      node _T_84 = eq(state, UInt<2>("h0")) @[Crossbar.scala 74:17]
      node _T_85 = and(_T_84, io.in.req.valid) @[Crossbar.scala 74:28]
      when _T_85 : @[Crossbar.scala 74:48]
        reg REG_1 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_86 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_87 = tail(_T_86, 1) @[GTimer.scala 25:12]
        REG_1 <= _T_87 @[GTimer.scala 25:7]
        node _T_88 = asUInt(reset) @[Crossbar.scala 75:13]
        node _T_89 = eq(_T_88, UInt<1>("h0")) @[Crossbar.scala 75:13]
        when _T_89 : @[Crossbar.scala 75:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: in.req: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", REG_1, io.in.req.bits.addr, io.in.req.bits.cmd, io.in.req.bits.size, io.in.req.bits.wmask, io.in.req.bits.wdata) : SIM_2 @[Crossbar.scala 75:13]
      node _T_90 = and(io.out[outSelIdx].req.ready, io.out[outSelIdx].req.valid) @[Decoupled.scala 40:37]
      when _T_90 : @[Crossbar.scala 78:30]
        reg REG_2 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_91 = add(REG_2, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_92 = tail(_T_91, 1) @[GTimer.scala 25:12]
        REG_2 <= _T_92 @[GTimer.scala 25:7]
        node _T_93 = asUInt(reset) @[Crossbar.scala 79:13]
        node _T_94 = eq(_T_93, UInt<1>("h0")) @[Crossbar.scala 79:13]
        when _T_94 : @[Crossbar.scala 79:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: outSelIdx = %d, outSel.req: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", REG_2, outSelIdx, io.out[outSelIdx].req.bits.addr, io.out[outSelIdx].req.bits.cmd, io.out[outSelIdx].req.bits.size, io.out[outSelIdx].req.bits.wmask, io.out[outSelIdx].req.bits.wdata) : SIM_3 @[Crossbar.scala 79:13]
      node _T_95 = and(io.out[outSelIdx].resp.ready, io.out[outSelIdx].resp.valid) @[Decoupled.scala 40:37]
      when _T_95 : @[Crossbar.scala 81:31]
        reg REG_3 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_96 = add(REG_3, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_97 = tail(_T_96, 1) @[GTimer.scala 25:12]
        REG_3 <= _T_97 @[GTimer.scala 25:7]
        node _T_98 = asUInt(reset) @[Crossbar.scala 82:13]
        node _T_99 = eq(_T_98, UInt<1>("h0")) @[Crossbar.scala 82:13]
        when _T_99 : @[Crossbar.scala 82:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: outSelIdx= %d, outSel.resp: rdata = %x, cmd = %d\n", REG_3, outSelIdx, io.out[outSelIdx].resp.bits.rdata, io.out[outSelIdx].resp.bits.cmd) : SIM_4 @[Crossbar.scala 82:13]
      node _T_100 = and(io.in.resp.ready, io.in.resp.valid) @[Decoupled.scala 40:37]
      when _T_100 : @[Crossbar.scala 85:30]
        reg REG_4 : UInt<64>, clock with :
          reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
        node _T_101 = add(REG_4, UInt<1>("h1")) @[GTimer.scala 25:12]
        node _T_102 = tail(_T_101, 1) @[GTimer.scala 25:12]
        REG_4 <= _T_102 @[GTimer.scala 25:7]
        node _T_103 = asUInt(reset) @[Crossbar.scala 86:13]
        node _T_104 = eq(_T_103, UInt<1>("h0")) @[Crossbar.scala 86:13]
        when _T_104 : @[Crossbar.scala 86:13]
          printf(clock, UInt<1>("h1"), "%d: xbar: in.resp: rdata = %x, cmd = %d\n", REG_4, io.in.resp.bits.rdata, io.in.resp.bits.cmd) : SIM_5 @[Crossbar.scala 86:13]

  module AXI4UART :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, extra : { out : { valid : UInt<1>, ch : UInt<8>}, in : { valid : UInt<1>, flip ch : UInt<8>}}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    reg rxfifo : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4UART.scala 28:23]
    reg txfifo : UInt<32>, clock with :
      reset => (UInt<1>("h0"), txfifo) @[AXI4UART.scala 29:19]
    reg stat : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[AXI4UART.scala 30:21]
    reg ctrl : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4UART.scala 31:21]
    node _T_45 = bits(waddr, 3, 0) @[AXI4UART.scala 33:35]
    node _T_46 = eq(_T_45, UInt<3>("h4")) @[AXI4UART.scala 33:41]
    node _T_47 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_48 = and(_T_46, _T_47) @[AXI4UART.scala 33:49]
    io.extra.out.valid <= _T_48 @[AXI4UART.scala 33:26]
    node _T_49 = bits(io.in.w.bits.data, 7, 0) @[AXI4UART.scala 34:40]
    io.extra.out.ch <= _T_49 @[AXI4UART.scala 34:23]
    node _T_50 = bits(raddr, 3, 0) @[AXI4UART.scala 35:34]
    node _T_51 = eq(_T_50, UInt<1>("h0")) @[AXI4UART.scala 35:40]
    node _T_52 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_53 = and(_T_51, _T_52) @[AXI4UART.scala 35:48]
    io.extra.in.valid <= _T_53 @[AXI4UART.scala 35:25]
    node _T_54 = bits(raddr, 3, 0) @[AXI4UART.scala 44:33]
    node _T_55 = bits(waddr, 3, 0) @[AXI4UART.scala 45:10]
    node _T_56 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_57 = bits(waddr, 2, 0) @[AXI4UART.scala 45:80]
    node _T_58 = dshr(io.in.w.bits.strb, _T_57) @[AXI4UART.scala 45:72]
    node _T_59 = bits(_T_58, 0, 0) @[BitUtils.scala 27:29]
    node _T_60 = bits(_T_58, 1, 1) @[BitUtils.scala 27:29]
    node _T_61 = bits(_T_58, 2, 2) @[BitUtils.scala 27:29]
    node _T_62 = bits(_T_58, 3, 3) @[BitUtils.scala 27:29]
    node _T_63 = bits(_T_58, 4, 4) @[BitUtils.scala 27:29]
    node _T_64 = bits(_T_58, 5, 5) @[BitUtils.scala 27:29]
    node _T_65 = bits(_T_58, 6, 6) @[BitUtils.scala 27:29]
    node _T_66 = bits(_T_58, 7, 7) @[BitUtils.scala 27:29]
    node _T_67 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_68 = mux(_T_67, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_69 = bits(_T_60, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_71 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_72 = mux(_T_71, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_73 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_75 = bits(_T_63, 0, 0) @[Bitwise.scala 72:15]
    node _T_76 = mux(_T_75, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_77 = bits(_T_64, 0, 0) @[Bitwise.scala 72:15]
    node _T_78 = mux(_T_77, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_79 = bits(_T_65, 0, 0) @[Bitwise.scala 72:15]
    node _T_80 = mux(_T_79, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_81 = bits(_T_66, 0, 0) @[Bitwise.scala 72:15]
    node _T_82 = mux(_T_81, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_1 = cat(_T_70, _T_68) @[Cat.scala 30:58]
    node lo_hi_1 = cat(_T_74, _T_72) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(_T_78, _T_76) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_82, _T_80) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_83 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_84 = eq(UInt<1>("h0"), _T_54) @[LookupTree.scala 24:34]
    node _T_85 = eq(UInt<3>("h4"), _T_54) @[LookupTree.scala 24:34]
    node _T_86 = eq(UInt<4>("h8"), _T_54) @[LookupTree.scala 24:34]
    node _T_87 = eq(UInt<4>("hc"), _T_54) @[LookupTree.scala 24:34]
    node _T_88 = mux(_T_84, io.extra.in.ch, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_89 = mux(_T_85, txfifo, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_90 = mux(_T_86, stat, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_91 = mux(_T_87, ctrl, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_92 = or(_T_88, _T_89) @[Mux.scala 27:72]
    node _T_93 = or(_T_92, _T_90) @[Mux.scala 27:72]
    node _T_94 = or(_T_93, _T_91) @[Mux.scala 27:72]
    wire _WIRE : UInt<32> @[Mux.scala 27:72]
    _WIRE <= _T_94 @[Mux.scala 27:72]
    io.in.r.bits.data <= _WIRE @[RegMap.scala 30:11]
    node _T_95 = eq(_T_55, UInt<3>("h4")) @[RegMap.scala 32:41]
    node _T_96 = and(_T_56, _T_95) @[RegMap.scala 32:32]
    when _T_96 : @[RegMap.scala 32:48]
      node _T_97 = and(io.in.w.bits.data, _T_83) @[BitUtils.scala 32:13]
      node _T_98 = not(_T_83) @[BitUtils.scala 32:38]
      node _T_99 = and(txfifo, _T_98) @[BitUtils.scala 32:36]
      node _T_100 = or(_T_97, _T_99) @[BitUtils.scala 32:25]
      txfifo <= _T_100 @[RegMap.scala 32:52]
    node _T_101 = eq(_T_55, UInt<4>("h8")) @[RegMap.scala 32:41]
    node _T_102 = and(_T_56, _T_101) @[RegMap.scala 32:32]
    when _T_102 : @[RegMap.scala 32:48]
      node _T_103 = and(io.in.w.bits.data, _T_83) @[BitUtils.scala 32:13]
      node _T_104 = not(_T_83) @[BitUtils.scala 32:38]
      node _T_105 = and(stat, _T_104) @[BitUtils.scala 32:36]
      node _T_106 = or(_T_103, _T_105) @[BitUtils.scala 32:25]
      stat <= _T_106 @[RegMap.scala 32:52]
    node _T_107 = eq(_T_55, UInt<4>("hc")) @[RegMap.scala 32:41]
    node _T_108 = and(_T_56, _T_107) @[RegMap.scala 32:32]
    when _T_108 : @[RegMap.scala 32:48]
      node _T_109 = and(io.in.w.bits.data, _T_83) @[BitUtils.scala 32:13]
      node _T_110 = not(_T_83) @[BitUtils.scala 32:38]
      node _T_111 = and(ctrl, _T_110) @[BitUtils.scala 32:36]
      node _T_112 = or(_T_109, _T_111) @[BitUtils.scala 32:25]
      ctrl <= _T_112 @[RegMap.scala 32:52]

  module VGACtrl :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, extra : { sync : UInt<1>}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    node fbSizeReg = cat(UInt<16>("h190"), UInt<16>("h12c")) @[Cat.scala 30:58]
    node sync = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_45 = bits(raddr, 3, 0) @[AXI4VGA.scala 80:33]
    node _T_46 = bits(waddr, 3, 0) @[AXI4VGA.scala 81:10]
    node _T_47 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_48 = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_49 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_50 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_51 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_52 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_53 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_54 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_55 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_56 = bits(_T_48, 0, 0) @[Bitwise.scala 72:15]
    node _T_57 = mux(_T_56, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_58 = bits(_T_49, 0, 0) @[Bitwise.scala 72:15]
    node _T_59 = mux(_T_58, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_60 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
    node _T_61 = mux(_T_60, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_62 = bits(_T_51, 0, 0) @[Bitwise.scala 72:15]
    node _T_63 = mux(_T_62, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_64 = bits(_T_52, 0, 0) @[Bitwise.scala 72:15]
    node _T_65 = mux(_T_64, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_66 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_67 = mux(_T_66, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_68 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_69 = mux(_T_68, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_70 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_71 = mux(_T_70, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_1 = cat(_T_59, _T_57) @[Cat.scala 30:58]
    node lo_hi_1 = cat(_T_63, _T_61) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(_T_67, _T_65) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_71, _T_69) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_72 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_73 = eq(UInt<1>("h0"), _T_45) @[LookupTree.scala 24:34]
    node _T_74 = eq(UInt<3>("h4"), _T_45) @[LookupTree.scala 24:34]
    node _T_75 = mux(_T_73, fbSizeReg, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_76 = mux(_T_74, sync, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_77 = or(_T_75, _T_76) @[Mux.scala 27:72]
    wire _WIRE : UInt<32> @[Mux.scala 27:72]
    _WIRE <= _T_77 @[Mux.scala 27:72]
    io.in.r.bits.data <= _WIRE @[RegMap.scala 30:11]
    io.extra.sync <= sync @[AXI4VGA.scala 83:21]

  module AXI4RAM_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    node _T_45 = and(waddr, UInt<19>("h7ffff")) @[AXI4RAM.scala 45:33]
    node _T_46 = shr(_T_45, 3) @[AXI4RAM.scala 45:49]
    node _T_47 = add(_T_46, UInt<1>("h0")) @[AXI4RAM.scala 48:27]
    node wIdx = tail(_T_47, 1) @[AXI4RAM.scala 48:27]
    node _T_48 = and(raddr, UInt<19>("h7ffff")) @[AXI4RAM.scala 45:33]
    node _T_49 = shr(_T_48, 3) @[AXI4RAM.scala 45:49]
    node _T_50 = add(_T_49, UInt<1>("h0")) @[AXI4RAM.scala 49:27]
    node rIdx = tail(_T_50, 1) @[AXI4RAM.scala 49:27]
    node _T_51 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_52 = lt(wIdx, UInt<16>("hea60")) @[AXI4RAM.scala 46:32]
    node wen = and(_T_51, _T_52) @[AXI4RAM.scala 50:25]
    cmem MEM : UInt<8>[8] [60000] @[AXI4RAM.scala 63:18]
    node _T_53 = bits(io.in.w.bits.data, 7, 0) @[AXI4RAM.scala 65:66]
    node _T_54 = bits(io.in.w.bits.data, 15, 8) @[AXI4RAM.scala 65:66]
    node _T_55 = bits(io.in.w.bits.data, 23, 16) @[AXI4RAM.scala 65:66]
    node _T_56 = bits(io.in.w.bits.data, 31, 24) @[AXI4RAM.scala 65:66]
    node _T_57 = bits(io.in.w.bits.data, 39, 32) @[AXI4RAM.scala 65:66]
    node _T_58 = bits(io.in.w.bits.data, 47, 40) @[AXI4RAM.scala 65:66]
    node _T_59 = bits(io.in.w.bits.data, 55, 48) @[AXI4RAM.scala 65:66]
    node _T_60 = bits(io.in.w.bits.data, 63, 56) @[AXI4RAM.scala 65:66]
    wire _WIRE : UInt<8>[8] @[AXI4RAM.scala 65:45]
    _WIRE[0] <= _T_53 @[AXI4RAM.scala 65:45]
    _WIRE[1] <= _T_54 @[AXI4RAM.scala 65:45]
    _WIRE[2] <= _T_55 @[AXI4RAM.scala 65:45]
    _WIRE[3] <= _T_56 @[AXI4RAM.scala 65:45]
    _WIRE[4] <= _T_57 @[AXI4RAM.scala 65:45]
    _WIRE[5] <= _T_58 @[AXI4RAM.scala 65:45]
    _WIRE[6] <= _T_59 @[AXI4RAM.scala 65:45]
    _WIRE[7] <= _T_60 @[AXI4RAM.scala 65:45]
    when wen : @[AXI4RAM.scala 66:16]
      node _T_61 = bits(io.in.w.bits.strb, 0, 0) @[AXI4RAM.scala 66:56]
      node _T_62 = bits(io.in.w.bits.strb, 1, 1) @[AXI4RAM.scala 66:56]
      node _T_63 = bits(io.in.w.bits.strb, 2, 2) @[AXI4RAM.scala 66:56]
      node _T_64 = bits(io.in.w.bits.strb, 3, 3) @[AXI4RAM.scala 66:56]
      node _T_65 = bits(io.in.w.bits.strb, 4, 4) @[AXI4RAM.scala 66:56]
      node _T_66 = bits(io.in.w.bits.strb, 5, 5) @[AXI4RAM.scala 66:56]
      node _T_67 = bits(io.in.w.bits.strb, 6, 6) @[AXI4RAM.scala 66:56]
      node _T_68 = bits(io.in.w.bits.strb, 7, 7) @[AXI4RAM.scala 66:56]
      node _T_69 = or(wIdx, UInt<16>("h0"))
      node _T_70 = bits(_T_69, 15, 0)
      write mport MPORT = MEM[_T_70], clock
      when _T_61 :
        MPORT[0] <= _WIRE[0]
      when _T_62 :
        MPORT[1] <= _WIRE[1]
      when _T_63 :
        MPORT[2] <= _WIRE[2]
      when _T_64 :
        MPORT[3] <= _WIRE[3]
      when _T_65 :
        MPORT[4] <= _WIRE[4]
      when _T_66 :
        MPORT[5] <= _WIRE[5]
      when _T_67 :
        MPORT[6] <= _WIRE[6]
      when _T_68 :
        MPORT[7] <= _WIRE[7]
    node _T_71 = or(rIdx, UInt<16>("h0")) @[AXI4RAM.scala 68:17]
    node _T_72 = bits(_T_71, 15, 0) @[AXI4RAM.scala 68:17]
    read mport MPORT_1 = MEM[_T_72], clock @[AXI4RAM.scala 68:17]
    node lo_lo_1 = cat(MPORT_1[1], MPORT_1[0]) @[Cat.scala 30:58]
    node lo_hi_1 = cat(MPORT_1[3], MPORT_1[2]) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(MPORT_1[5], MPORT_1[4]) @[Cat.scala 30:58]
    node hi_hi_1 = cat(MPORT_1[7], MPORT_1[6]) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node rdata = cat(hi_1, lo_1) @[Cat.scala 30:58]
    reg r : UInt<64>, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when ren : @[Reg.scala 16:19]
      r <= rdata @[Reg.scala 16:23]
    io.in.r.bits.data <= r @[AXI4RAM.scala 71:18]

  extmodule FBHelper :
    input clk : Clock
    input valid : UInt<1>
    input pixel : UInt<32>
    input sync : UInt<1>
    defname = FBHelper

  module AXI4VGA :
    input clock : Clock
    input reset : Reset
    output io : { in : { flip fb : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, flip ctrl : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}, vga : { rgb : UInt<24>, hsync : UInt<1>, vsync : UInt<1>, valid : UInt<1>}}

    inst ctrl of VGACtrl @[AXI4VGA.scala 125:20]
    ctrl.clock <= clock
    ctrl.reset <= reset
    io.in.ctrl.r.bits.data <= ctrl.io.in.r.bits.data @[AXI4VGA.scala 126:14]
    io.in.ctrl.r.bits.resp <= ctrl.io.in.r.bits.resp @[AXI4VGA.scala 126:14]
    io.in.ctrl.r.valid <= ctrl.io.in.r.valid @[AXI4VGA.scala 126:14]
    ctrl.io.in.r.ready <= io.in.ctrl.r.ready @[AXI4VGA.scala 126:14]
    ctrl.io.in.ar.bits.prot <= io.in.ctrl.ar.bits.prot @[AXI4VGA.scala 126:14]
    ctrl.io.in.ar.bits.addr <= io.in.ctrl.ar.bits.addr @[AXI4VGA.scala 126:14]
    ctrl.io.in.ar.valid <= io.in.ctrl.ar.valid @[AXI4VGA.scala 126:14]
    io.in.ctrl.ar.ready <= ctrl.io.in.ar.ready @[AXI4VGA.scala 126:14]
    io.in.ctrl.b.bits.resp <= ctrl.io.in.b.bits.resp @[AXI4VGA.scala 126:14]
    io.in.ctrl.b.valid <= ctrl.io.in.b.valid @[AXI4VGA.scala 126:14]
    ctrl.io.in.b.ready <= io.in.ctrl.b.ready @[AXI4VGA.scala 126:14]
    ctrl.io.in.w.bits.strb <= io.in.ctrl.w.bits.strb @[AXI4VGA.scala 126:14]
    ctrl.io.in.w.bits.data <= io.in.ctrl.w.bits.data @[AXI4VGA.scala 126:14]
    ctrl.io.in.w.valid <= io.in.ctrl.w.valid @[AXI4VGA.scala 126:14]
    io.in.ctrl.w.ready <= ctrl.io.in.w.ready @[AXI4VGA.scala 126:14]
    ctrl.io.in.aw.bits.prot <= io.in.ctrl.aw.bits.prot @[AXI4VGA.scala 126:14]
    ctrl.io.in.aw.bits.addr <= io.in.ctrl.aw.bits.addr @[AXI4VGA.scala 126:14]
    ctrl.io.in.aw.valid <= io.in.ctrl.aw.valid @[AXI4VGA.scala 126:14]
    io.in.ctrl.aw.ready <= ctrl.io.in.aw.ready @[AXI4VGA.scala 126:14]
    inst fb of AXI4RAM_1 @[AXI4VGA.scala 127:18]
    fb.clock <= clock
    fb.reset <= reset
    fb.io.in.aw.bits.prot <= io.in.fb.aw.bits.prot @[AXI4VGA.scala 130:15]
    fb.io.in.aw.bits.addr <= io.in.fb.aw.bits.addr @[AXI4VGA.scala 130:15]
    fb.io.in.aw.valid <= io.in.fb.aw.valid @[AXI4VGA.scala 130:15]
    io.in.fb.aw.ready <= fb.io.in.aw.ready @[AXI4VGA.scala 130:15]
    fb.io.in.w.bits.strb <= io.in.fb.w.bits.strb @[AXI4VGA.scala 131:14]
    fb.io.in.w.bits.data <= io.in.fb.w.bits.data @[AXI4VGA.scala 131:14]
    fb.io.in.w.valid <= io.in.fb.w.valid @[AXI4VGA.scala 131:14]
    io.in.fb.w.ready <= fb.io.in.w.ready @[AXI4VGA.scala 131:14]
    io.in.fb.b.bits.resp <= fb.io.in.b.bits.resp @[AXI4VGA.scala 132:14]
    io.in.fb.b.valid <= fb.io.in.b.valid @[AXI4VGA.scala 132:14]
    fb.io.in.b.ready <= io.in.fb.b.ready @[AXI4VGA.scala 132:14]
    io.in.fb.ar.ready <= UInt<1>("h1") @[AXI4VGA.scala 133:21]
    io.in.fb.r.bits.data <= UInt<1>("h0") @[AXI4VGA.scala 134:24]
    io.in.fb.r.bits.resp <= UInt<2>("h0") @[AXI4VGA.scala 135:24]
    node _T = and(io.in.fb.ar.ready, io.in.fb.ar.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(io.in.fb.r.ready, io.in.fb.r.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_1 : @[StopWatch.scala 26:19]
      REG <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T : @[StopWatch.scala 27:20]
      REG <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.fb.r.valid <= REG @[AXI4VGA.scala 136:20]
    reg hCounter : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[Counter.scala 60:40]
    wire hFinish : UInt<1>
    hFinish <= UInt<1>("h0")
    when UInt<1>("h1") : @[Counter.scala 118:17]
      node wrap_wrap = eq(hCounter, UInt<11>("h41f")) @[Counter.scala 72:24]
      node _wrap_value_T = add(hCounter, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      hCounter <= _wrap_value_T_1 @[Counter.scala 76:15]
      when wrap_wrap : @[Counter.scala 86:20]
        hCounter <= UInt<1>("h0") @[Counter.scala 86:28]
      hFinish <= wrap_wrap @[Counter.scala 118:24]
    reg vCounter : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[Counter.scala 60:40]
    wire vFinish : UInt<1>
    vFinish <= UInt<1>("h0")
    when hFinish : @[Counter.scala 118:17]
      node wrap_wrap_1 = eq(vCounter, UInt<10>("h273")) @[Counter.scala 72:24]
      node _wrap_value_T_2 = add(vCounter, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24]
      vCounter <= _wrap_value_T_3 @[Counter.scala 76:15]
      when wrap_wrap_1 : @[Counter.scala 86:20]
        vCounter <= UInt<1>("h0") @[Counter.scala 86:28]
      vFinish <= wrap_wrap_1 @[Counter.scala 118:24]
    node _T_2 = geq(hCounter, UInt<6>("h28")) @[AXI4VGA.scala 143:28]
    io.vga.hsync <= _T_2 @[AXI4VGA.scala 143:16]
    node _T_3 = geq(vCounter, UInt<1>("h1")) @[AXI4VGA.scala 144:28]
    io.vga.vsync <= _T_3 @[AXI4VGA.scala 144:16]
    node _T_4 = geq(hCounter, UInt<8>("ha8")) @[AXI4VGA.scala 138:51]
    node _T_5 = lt(hCounter, UInt<10>("h3c8")) @[AXI4VGA.scala 138:69]
    node hInRange = and(_T_4, _T_5) @[AXI4VGA.scala 138:63]
    node _T_6 = geq(vCounter, UInt<3>("h5")) @[AXI4VGA.scala 138:51]
    node _T_7 = lt(vCounter, UInt<10>("h25d")) @[AXI4VGA.scala 138:69]
    node vInRange = and(_T_6, _T_7) @[AXI4VGA.scala 138:63]
    node _T_8 = and(hInRange, vInRange) @[AXI4VGA.scala 148:28]
    io.vga.valid <= _T_8 @[AXI4VGA.scala 148:16]
    node hCounterIsOdd = bits(hCounter, 0, 0) @[AXI4VGA.scala 150:31]
    node _T_9 = bits(hCounter, 1, 0) @[AXI4VGA.scala 151:29]
    node hCounterIs2 = eq(_T_9, UInt<2>("h2")) @[AXI4VGA.scala 151:35]
    node vCounterIsOdd = bits(vCounter, 0, 0) @[AXI4VGA.scala 152:31]
    node _T_10 = geq(hCounter, UInt<8>("ha7")) @[AXI4VGA.scala 138:51]
    node _T_11 = lt(hCounter, UInt<10>("h3c7")) @[AXI4VGA.scala 138:69]
    node _T_12 = and(_T_10, _T_11) @[AXI4VGA.scala 138:63]
    node _T_13 = and(_T_12, vInRange) @[AXI4VGA.scala 155:66]
    node nextPixel = and(_T_13, hCounterIsOdd) @[AXI4VGA.scala 155:78]
    node _T_14 = eq(vCounterIsOdd, UInt<1>("h0")) @[AXI4VGA.scala 156:44]
    node _T_15 = and(nextPixel, _T_14) @[AXI4VGA.scala 156:41]
    reg fbPixelAddrV0 : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[Counter.scala 60:40]
    wire wrap : UInt<1>
    wrap <= UInt<1>("h0")
    when _T_15 : @[Counter.scala 118:17]
      node wrap_wrap_2 = eq(fbPixelAddrV0, UInt<17>("h1d4bf")) @[Counter.scala 72:24]
      node _wrap_value_T_4 = add(fbPixelAddrV0, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_5 = tail(_wrap_value_T_4, 1) @[Counter.scala 76:24]
      fbPixelAddrV0 <= _wrap_value_T_5 @[Counter.scala 76:15]
      when wrap_wrap_2 : @[Counter.scala 86:20]
        fbPixelAddrV0 <= UInt<1>("h0") @[Counter.scala 86:28]
      wrap <= wrap_wrap_2 @[Counter.scala 118:24]
    node _T_16 = and(nextPixel, vCounterIsOdd) @[AXI4VGA.scala 157:41]
    reg fbPixelAddrV1 : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[Counter.scala 60:40]
    wire wrap_1 : UInt<1>
    wrap_1 <= UInt<1>("h0")
    when _T_16 : @[Counter.scala 118:17]
      node wrap_wrap_3 = eq(fbPixelAddrV1, UInt<17>("h1d4bf")) @[Counter.scala 72:24]
      node _wrap_value_T_6 = add(fbPixelAddrV1, UInt<1>("h1")) @[Counter.scala 76:24]
      node _wrap_value_T_7 = tail(_wrap_value_T_6, 1) @[Counter.scala 76:24]
      fbPixelAddrV1 <= _wrap_value_T_7 @[Counter.scala 76:15]
      when wrap_wrap_3 : @[Counter.scala 86:20]
        fbPixelAddrV1 <= UInt<1>("h0") @[Counter.scala 86:28]
      wrap_1 <= wrap_wrap_3 @[Counter.scala 118:24]
    fb.io.in.ar.bits.prot <= UInt<1>("h0") @[AXI4VGA.scala 160:25]
    node _T_17 = mux(vCounterIsOdd, fbPixelAddrV1, fbPixelAddrV0) @[AXI4VGA.scala 161:35]
    node _T_18 = cat(_T_17, UInt<2>("h0")) @[Cat.scala 30:58]
    fb.io.in.ar.bits.addr <= _T_18 @[AXI4VGA.scala 161:25]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[AXI4VGA.scala 162:31]
    REG_1 <= nextPixel @[AXI4VGA.scala 162:31]
    node _T_19 = and(REG_1, hCounterIs2) @[AXI4VGA.scala 162:43]
    fb.io.in.ar.valid <= _T_19 @[AXI4VGA.scala 162:21]
    fb.io.in.r.ready <= UInt<1>("h1") @[AXI4VGA.scala 164:20]
    node _T_20 = and(fb.io.in.r.ready, fb.io.in.r.valid) @[Decoupled.scala 40:37]
    wire _WIRE : UInt<64> @[Hold.scala 23:81]
    _WIRE <= UInt<1>("h0") @[Hold.scala 23:81]
    reg r : UInt, clock with :
      reset => (reset, _WIRE) @[Reg.scala 27:20]
    when _T_20 : @[Reg.scala 28:19]
      r <= fb.io.in.r.bits.data @[Reg.scala 28:23]
    node data = mux(_T_20, fb.io.in.r.bits.data, r) @[Hold.scala 23:48]
    node _T_21 = bits(hCounter, 1, 1) @[AXI4VGA.scala 167:32]
    node _T_22 = bits(data, 63, 32) @[AXI4VGA.scala 167:41]
    node _T_23 = bits(data, 31, 0) @[AXI4VGA.scala 167:55]
    node color = mux(_T_21, _T_22, _T_23) @[AXI4VGA.scala 167:23]
    node _T_24 = bits(color, 23, 0) @[AXI4VGA.scala 168:40]
    node _T_25 = mux(io.vga.valid, _T_24, UInt<1>("h0")) @[AXI4VGA.scala 168:20]
    io.vga.rgb <= _T_25 @[AXI4VGA.scala 168:14]
    inst FBHelper of FBHelper @[AXI4VGA.scala 171:26]
    FBHelper.sync is invalid
    FBHelper.pixel is invalid
    FBHelper.valid is invalid
    FBHelper.clk is invalid
    FBHelper.clk <= clock @[AXI4VGA.scala 172:21]
    FBHelper.valid <= io.vga.valid @[AXI4VGA.scala 173:23]
    FBHelper.pixel <= color @[AXI4VGA.scala 174:23]
    FBHelper.sync <= ctrl.io.extra.sync @[AXI4VGA.scala 175:22]

  module AXI4Flash :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    wire rdata : UInt<64> @[AXI4Flash.scala 37:19]
    node _T_45 = bits(raddr, 12, 0) @[AXI4Flash.scala 35:35]
    node _T_46 = bits(waddr, 12, 0) @[AXI4Flash.scala 35:35]
    node _T_47 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_48 = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_49 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_50 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_51 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_52 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_53 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_54 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_55 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_56 = bits(_T_48, 0, 0) @[Bitwise.scala 72:15]
    node _T_57 = mux(_T_56, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_58 = bits(_T_49, 0, 0) @[Bitwise.scala 72:15]
    node _T_59 = mux(_T_58, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_60 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
    node _T_61 = mux(_T_60, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_62 = bits(_T_51, 0, 0) @[Bitwise.scala 72:15]
    node _T_63 = mux(_T_62, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_64 = bits(_T_52, 0, 0) @[Bitwise.scala 72:15]
    node _T_65 = mux(_T_64, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_66 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_67 = mux(_T_66, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_68 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_69 = mux(_T_68, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_70 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_71 = mux(_T_70, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_1 = cat(_T_59, _T_57) @[Cat.scala 30:58]
    node lo_hi_1 = cat(_T_63, _T_61) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(_T_67, _T_65) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_71, _T_69) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_72 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_73 = eq(UInt<1>("h0"), _T_45) @[LookupTree.scala 24:34]
    node _T_74 = eq(UInt<3>("h4"), _T_45) @[LookupTree.scala 24:34]
    node _T_75 = eq(UInt<4>("h8"), _T_45) @[LookupTree.scala 24:34]
    node _T_76 = mux(_T_73, UInt<21>("h10029b"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_77 = mux(_T_74, UInt<25>("h1f29293"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_78 = mux(_T_75, UInt<18>("h28067"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_79 = or(_T_76, _T_77) @[Mux.scala 27:72]
    node _T_80 = or(_T_79, _T_78) @[Mux.scala 27:72]
    wire _WIRE : UInt<25> @[Mux.scala 27:72]
    _WIRE <= _T_80 @[Mux.scala 27:72]
    rdata <= _WIRE @[RegMap.scala 30:11]
    node _T_81 = bits(rdata, 31, 0) @[AXI4Flash.scala 41:52]
    node _T_82 = cat(_T_81, _T_81) @[Cat.scala 30:58]
    reg REG_3 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_3) @[AXI4Flash.scala 41:38]
    REG_3 <= _T_82 @[AXI4Flash.scala 41:38]
    reg r : UInt, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when ren : @[Reg.scala 16:19]
      r <= REG_3 @[Reg.scala 16:23]
    io.in.r.bits.data <= r @[AXI4Flash.scala 41:18]

  extmodule SDHelper :
    input clk : Clock
    input ren : UInt<1>
    output data : UInt<32>
    input setAddr : UInt<1>
    input addr : UInt<32>
    defname = SDHelper

  module AXI4DummySD :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    reg regs_0 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_3 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_4 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_5 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_6 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_7 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_8 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_9 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_10 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_11 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_12 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_13 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_14 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_15 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_16 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_17 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_18 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_19 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    reg regs_20 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DummySD.scala 72:43]
    wire setAddr : UInt<1>
    setAddr <= UInt<1>("h0")
    inst sdHelper of SDHelper @[AXI4DummySD.scala 114:24]
    sdHelper.addr is invalid
    sdHelper.setAddr is invalid
    sdHelper.data is invalid
    sdHelper.ren is invalid
    sdHelper.clk is invalid
    sdHelper.clk <= clock @[AXI4DummySD.scala 115:19]
    node _T_45 = bits(raddr, 12, 0) @[AXI4DummySD.scala 135:35]
    node _T_46 = eq(_T_45, UInt<7>("h40")) @[AXI4DummySD.scala 116:40]
    node _T_47 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_48 = and(_T_46, _T_47) @[AXI4DummySD.scala 116:51]
    sdHelper.ren <= _T_48 @[AXI4DummySD.scala 116:19]
    sdHelper.setAddr <= setAddr @[AXI4DummySD.scala 117:23]
    sdHelper.addr <= regs_1 @[AXI4DummySD.scala 118:20]
    node _T_49 = bits(waddr, 2, 2) @[AXI4DummySD.scala 138:28]
    node _T_50 = bits(io.in.w.bits.strb, 7, 4) @[AXI4DummySD.scala 138:47]
    node _T_51 = bits(io.in.w.bits.strb, 3, 0) @[AXI4DummySD.scala 138:68]
    node strb = mux(_T_49, _T_50, _T_51) @[AXI4DummySD.scala 138:22]
    wire rdata : UInt<64> @[AXI4DummySD.scala 139:19]
    node _T_52 = bits(raddr, 12, 0) @[AXI4DummySD.scala 135:35]
    node _T_53 = bits(waddr, 12, 0) @[AXI4DummySD.scala 135:35]
    node _T_54 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_55 = bits(strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_56 = bits(strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_57 = bits(strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_58 = bits(strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_59 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_60 = mux(_T_59, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_61 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
    node _T_62 = mux(_T_61, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_63 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_64 = mux(_T_63, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_65 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_1 = cat(_T_62, _T_60) @[Cat.scala 30:58]
    node hi_1 = cat(_T_66, _T_64) @[Cat.scala 30:58]
    node _T_67 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_68 = eq(UInt<1>("h0"), _T_52) @[LookupTree.scala 24:34]
    node _T_69 = eq(UInt<6>("h38"), _T_52) @[LookupTree.scala 24:34]
    node _T_70 = eq(UInt<5>("h18"), _T_52) @[LookupTree.scala 24:34]
    node _T_71 = eq(UInt<6>("h34"), _T_52) @[LookupTree.scala 24:34]
    node _T_72 = eq(UInt<5>("h14"), _T_52) @[LookupTree.scala 24:34]
    node _T_73 = eq(UInt<5>("h1c"), _T_52) @[LookupTree.scala 24:34]
    node _T_74 = eq(UInt<6>("h20"), _T_52) @[LookupTree.scala 24:34]
    node _T_75 = eq(UInt<7>("h40"), _T_52) @[LookupTree.scala 24:34]
    node _T_76 = eq(UInt<7>("h50"), _T_52) @[LookupTree.scala 24:34]
    node _T_77 = eq(UInt<5>("h10"), _T_52) @[LookupTree.scala 24:34]
    node _T_78 = eq(UInt<3>("h4"), _T_52) @[LookupTree.scala 24:34]
    node _T_79 = mux(_T_68, regs_0, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_80 = mux(_T_69, regs_15, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_81 = mux(_T_70, regs_6, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_82 = mux(_T_71, UInt<8>("h80"), UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_83 = mux(_T_72, regs_5, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_84 = mux(_T_73, regs_7, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_85 = mux(_T_74, regs_8, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_86 = mux(_T_75, sdHelper.data, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_87 = mux(_T_76, regs_20, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_88 = mux(_T_77, regs_4, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_89 = mux(_T_78, regs_1, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_90 = or(_T_79, _T_80) @[Mux.scala 27:72]
    node _T_91 = or(_T_90, _T_81) @[Mux.scala 27:72]
    node _T_92 = or(_T_91, _T_82) @[Mux.scala 27:72]
    node _T_93 = or(_T_92, _T_83) @[Mux.scala 27:72]
    node _T_94 = or(_T_93, _T_84) @[Mux.scala 27:72]
    node _T_95 = or(_T_94, _T_85) @[Mux.scala 27:72]
    node _T_96 = or(_T_95, _T_86) @[Mux.scala 27:72]
    node _T_97 = or(_T_96, _T_87) @[Mux.scala 27:72]
    node _T_98 = or(_T_97, _T_88) @[Mux.scala 27:72]
    node _T_99 = or(_T_98, _T_89) @[Mux.scala 27:72]
    wire _WIRE : UInt<32> @[Mux.scala 27:72]
    _WIRE <= _T_99 @[Mux.scala 27:72]
    rdata <= _WIRE @[RegMap.scala 30:11]
    node _T_100 = eq(_T_53, UInt<1>("h0")) @[RegMap.scala 32:41]
    node _T_101 = and(_T_54, _T_100) @[RegMap.scala 32:32]
    when _T_101 : @[RegMap.scala 32:48]
      node _T_102 = and(io.in.w.bits.data, _T_67) @[BitUtils.scala 32:13]
      node _T_103 = not(_T_67) @[BitUtils.scala 32:38]
      node _T_104 = and(regs_0, _T_103) @[BitUtils.scala 32:36]
      node _T_105 = or(_T_102, _T_104) @[BitUtils.scala 32:25]
      node _T_106 = bits(_T_105, 5, 0) @[AXI4DummySD.scala 84:20]
      node _T_107 = eq(UInt<1>("h1"), _T_106) @[AXI4DummySD.scala 85:18]
      when _T_107 : @[AXI4DummySD.scala 85:18]
        regs_4 <= UInt<32>("h80ff8000") @[AXI4DummySD.scala 87:22]
      else :
        node _T_108 = eq(UInt<2>("h2"), _T_106) @[AXI4DummySD.scala 85:18]
        when _T_108 : @[AXI4DummySD.scala 85:18]
          regs_4 <= UInt<1>("h1") @[AXI4DummySD.scala 90:22]
          regs_5 <= UInt<1>("h0") @[AXI4DummySD.scala 91:22]
          regs_6 <= UInt<1>("h0") @[AXI4DummySD.scala 92:22]
          regs_7 <= UInt<29>("h15000000") @[AXI4DummySD.scala 93:22]
        else :
          node _T_109 = eq(UInt<4>("h9"), _T_106) @[AXI4DummySD.scala 85:18]
          when _T_109 : @[AXI4DummySD.scala 85:18]
            regs_4 <= UInt<32>("h92404001") @[AXI4DummySD.scala 96:22]
            node _T_110 = shl(UInt<2>("h3"), 30) @[AXI4DummySD.scala 97:56]
            node _T_111 = or(UInt<29>("h124b97e3"), _T_110) @[AXI4DummySD.scala 97:39]
            regs_5 <= _T_111 @[AXI4DummySD.scala 97:22]
            node _T_112 = or(UInt<28>("hf508000"), UInt<10>("h3f")) @[AXI4DummySD.scala 98:39]
            node _T_113 = shl(UInt<4>("hf"), 16) @[AXI4DummySD.scala 98:73]
            node _T_114 = or(_T_112, _T_113) @[AXI4DummySD.scala 98:56]
            regs_6 <= _T_114 @[AXI4DummySD.scala 98:22]
            regs_7 <= UInt<32>("h8c26012a") @[AXI4DummySD.scala 99:22]
          else :
            node _T_115 = eq(UInt<4>("hd"), _T_106) @[AXI4DummySD.scala 85:18]
            when _T_115 : @[AXI4DummySD.scala 85:18]
              regs_4 <= UInt<1>("h0") @[AXI4DummySD.scala 102:22]
              regs_5 <= UInt<1>("h0") @[AXI4DummySD.scala 103:22]
              regs_6 <= UInt<1>("h0") @[AXI4DummySD.scala 104:22]
              regs_7 <= UInt<1>("h0") @[AXI4DummySD.scala 105:22]
            else :
              node _T_116 = eq(UInt<5>("h12"), _T_106) @[AXI4DummySD.scala 85:18]
              when _T_116 : @[AXI4DummySD.scala 85:18]
                setAddr <= UInt<1>("h1") @[AXI4DummySD.scala 108:17]
      regs_0 <= _T_105 @[RegMap.scala 32:52]
    node _T_117 = eq(_T_53, UInt<6>("h38")) @[RegMap.scala 32:41]
    node _T_118 = and(_T_54, _T_117) @[RegMap.scala 32:32]
    when _T_118 : @[RegMap.scala 32:48]
      node _T_119 = and(io.in.w.bits.data, _T_67) @[BitUtils.scala 32:13]
      node _T_120 = not(_T_67) @[BitUtils.scala 32:38]
      node _T_121 = and(regs_15, _T_120) @[BitUtils.scala 32:36]
      node _T_122 = or(_T_119, _T_121) @[BitUtils.scala 32:25]
      regs_15 <= _T_122 @[RegMap.scala 32:52]
    node _T_123 = eq(_T_53, UInt<6>("h20")) @[RegMap.scala 32:41]
    node _T_124 = and(_T_54, _T_123) @[RegMap.scala 32:32]
    when _T_124 : @[RegMap.scala 32:48]
      node _T_125 = and(io.in.w.bits.data, _T_67) @[BitUtils.scala 32:13]
      node _T_126 = not(_T_67) @[BitUtils.scala 32:38]
      node _T_127 = and(regs_8, _T_126) @[BitUtils.scala 32:36]
      node _T_128 = or(_T_125, _T_127) @[BitUtils.scala 32:25]
      regs_8 <= _T_128 @[RegMap.scala 32:52]
    node _T_129 = eq(_T_53, UInt<7>("h50")) @[RegMap.scala 32:41]
    node _T_130 = and(_T_54, _T_129) @[RegMap.scala 32:32]
    when _T_130 : @[RegMap.scala 32:48]
      node _T_131 = and(io.in.w.bits.data, _T_67) @[BitUtils.scala 32:13]
      node _T_132 = not(_T_67) @[BitUtils.scala 32:38]
      node _T_133 = and(regs_20, _T_132) @[BitUtils.scala 32:36]
      node _T_134 = or(_T_131, _T_133) @[BitUtils.scala 32:25]
      regs_20 <= _T_134 @[RegMap.scala 32:52]
    node _T_135 = eq(_T_53, UInt<3>("h4")) @[RegMap.scala 32:41]
    node _T_136 = and(_T_54, _T_135) @[RegMap.scala 32:32]
    when _T_136 : @[RegMap.scala 32:48]
      node _T_137 = and(io.in.w.bits.data, _T_67) @[BitUtils.scala 32:13]
      node _T_138 = not(_T_67) @[BitUtils.scala 32:38]
      node _T_139 = and(regs_1, _T_138) @[BitUtils.scala 32:36]
      node _T_140 = or(_T_137, _T_139) @[BitUtils.scala 32:25]
      regs_1 <= _T_140 @[RegMap.scala 32:52]
    node _T_141 = bits(rdata, 31, 0) @[AXI4DummySD.scala 144:58]
    node _T_142 = cat(_T_141, _T_141) @[Cat.scala 30:58]
    reg REG_3 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_3) @[AXI4DummySD.scala 144:44]
    REG_3 <= _T_142 @[AXI4DummySD.scala 144:44]
    reg r : UInt, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when ren : @[Reg.scala 16:19]
      r <= REG_3 @[Reg.scala 16:23]
    io.in.r.bits.data <= r @[AXI4DummySD.scala 143:18]

  module AXI4MeipGen :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, extra : { meip : UInt<1>}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    reg meip : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MeipGen.scala 31:21]
    node _T_45 = bits(raddr, 3, 0) @[MeipGen.scala 37:35]
    node _T_46 = bits(waddr, 3, 0) @[MeipGen.scala 37:35]
    node _T_47 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_48 = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_49 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_50 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_51 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_52 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_53 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_54 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_55 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_56 = bits(_T_48, 0, 0) @[Bitwise.scala 72:15]
    node _T_57 = mux(_T_56, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_58 = bits(_T_49, 0, 0) @[Bitwise.scala 72:15]
    node _T_59 = mux(_T_58, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_60 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
    node _T_61 = mux(_T_60, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_62 = bits(_T_51, 0, 0) @[Bitwise.scala 72:15]
    node _T_63 = mux(_T_62, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_64 = bits(_T_52, 0, 0) @[Bitwise.scala 72:15]
    node _T_65 = mux(_T_64, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_66 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_67 = mux(_T_66, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_68 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_69 = mux(_T_68, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_70 = bits(_T_55, 0, 0) @[Bitwise.scala 72:15]
    node _T_71 = mux(_T_70, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_1 = cat(_T_59, _T_57) @[Cat.scala 30:58]
    node lo_hi_1 = cat(_T_63, _T_61) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(_T_67, _T_65) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_71, _T_69) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_72 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_73 = eq(UInt<1>("h0"), _T_45) @[LookupTree.scala 24:34]
    io.in.r.bits.data <= meip @[RegMap.scala 30:11]
    node _T_74 = eq(_T_46, UInt<1>("h0")) @[RegMap.scala 32:41]
    node _T_75 = and(_T_47, _T_74) @[RegMap.scala 32:32]
    when _T_75 : @[RegMap.scala 32:48]
      node _T_76 = and(io.in.w.bits.data, _T_72) @[BitUtils.scala 32:13]
      node _T_77 = not(_T_72) @[BitUtils.scala 32:38]
      node _T_78 = and(meip, _T_77) @[BitUtils.scala 32:36]
      node _T_79 = or(_T_76, _T_78) @[BitUtils.scala 32:25]
      meip <= _T_79 @[RegMap.scala 32:52]
    io.extra.meip <= meip @[MeipGen.scala 41:21]

  module AXI4DMA :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}, extra : { dma : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}}}

    node _T = bits(io.in.w.bits.strb, 0, 0) @[BitUtils.scala 27:29]
    node _T_1 = bits(io.in.w.bits.strb, 1, 1) @[BitUtils.scala 27:29]
    node _T_2 = bits(io.in.w.bits.strb, 2, 2) @[BitUtils.scala 27:29]
    node _T_3 = bits(io.in.w.bits.strb, 3, 3) @[BitUtils.scala 27:29]
    node _T_4 = bits(io.in.w.bits.strb, 4, 4) @[BitUtils.scala 27:29]
    node _T_5 = bits(io.in.w.bits.strb, 5, 5) @[BitUtils.scala 27:29]
    node _T_6 = bits(io.in.w.bits.strb, 6, 6) @[BitUtils.scala 27:29]
    node _T_7 = bits(io.in.w.bits.strb, 7, 7) @[BitUtils.scala 27:29]
    node _T_8 = bits(_T, 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_12 = bits(_T_2, 0, 0) @[Bitwise.scala 72:15]
    node _T_13 = mux(_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_14 = bits(_T_3, 0, 0) @[Bitwise.scala 72:15]
    node _T_15 = mux(_T_14, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_16 = bits(_T_4, 0, 0) @[Bitwise.scala 72:15]
    node _T_17 = mux(_T_16, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_18 = bits(_T_5, 0, 0) @[Bitwise.scala 72:15]
    node _T_19 = mux(_T_18, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_20 = bits(_T_6, 0, 0) @[Bitwise.scala 72:15]
    node _T_21 = mux(_T_20, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_22 = bits(_T_7, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_22, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo = cat(_T_11, _T_9) @[Cat.scala 30:58]
    node lo_hi = cat(_T_15, _T_13) @[Cat.scala 30:58]
    node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
    node hi_lo = cat(_T_19, _T_17) @[Cat.scala 30:58]
    node hi_hi = cat(_T_23, _T_21) @[Cat.scala 30:58]
    node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
    node fullMask = cat(hi, lo) @[Cat.scala 30:58]
    wire raddr : UInt @[AXI4Slave.scala 37:19]
    wire ren : UInt<1> @[AXI4Slave.scala 38:17]
    raddr <= io.in.ar.bits.addr @[AXI4Slave.scala 66:13]
    node _T_24 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_25 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_26 = and(_T_25, UInt<1>("h1")) @[AXI4Slave.scala 70:56]
    reg r_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_26 : @[StopWatch.scala 26:19]
      r_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_24 : @[StopWatch.scala 27:20]
      r_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_27 = eq(r_busy, UInt<1>("h0")) @[AXI4Slave.scala 71:32]
    node _T_28 = or(io.in.r.ready, _T_27) @[AXI4Slave.scala 71:29]
    io.in.ar.ready <= _T_28 @[AXI4Slave.scala 71:15]
    io.in.r.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 72:18]
    node _T_29 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    reg REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI4Slave.scala 73:17]
    REG <= _T_29 @[AXI4Slave.scala 73:17]
    node _T_30 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    node _T_31 = eq(UInt<1>("h1"), UInt<1>("h0")) @[AXI4Slave.scala 73:65]
    node _T_32 = and(_T_30, _T_31) @[AXI4Slave.scala 73:62]
    node _T_33 = or(REG, _T_32) @[AXI4Slave.scala 73:46]
    ren <= _T_33 @[AXI4Slave.scala 73:7]
    node _T_34 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 40:37]
    node _T_35 = or(_T_34, r_busy) @[AXI4Slave.scala 74:52]
    node _T_36 = and(ren, _T_35) @[AXI4Slave.scala 74:35]
    node _T_37 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 40:37]
    reg REG_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_37 : @[StopWatch.scala 26:19]
      REG_1 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_36 : @[StopWatch.scala 27:20]
      REG_1 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.r.valid <= REG_1 @[AXI4Slave.scala 74:14]
    wire waddr : UInt @[AXI4Slave.scala 77:19]
    waddr <= io.in.aw.bits.addr @[AXI4Slave.scala 89:13]
    node _T_38 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 40:37]
    node _T_39 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg w_busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_39 : @[StopWatch.scala 26:19]
      w_busy <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_38 : @[StopWatch.scala 27:20]
      w_busy <= UInt<1>("h1") @[StopWatch.scala 27:24]
    node _T_40 = eq(w_busy, UInt<1>("h0")) @[AXI4Slave.scala 94:18]
    io.in.aw.ready <= _T_40 @[AXI4Slave.scala 94:15]
    node _T_41 = or(io.in.aw.valid, w_busy) @[AXI4Slave.scala 95:30]
    io.in.w.ready <= _T_41 @[AXI4Slave.scala 95:15]
    io.in.b.bits.resp <= UInt<2>("h0") @[AXI4Slave.scala 96:18]
    node _T_42 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_43 = and(_T_42, UInt<1>("h1")) @[AXI4Slave.scala 97:43]
    node _T_44 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 40:37]
    reg REG_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_44 : @[StopWatch.scala 26:19]
      REG_2 <= UInt<1>("h0") @[StopWatch.scala 26:23]
    when _T_43 : @[StopWatch.scala 27:20]
      REG_2 <= UInt<1>("h1") @[StopWatch.scala 27:24]
    io.in.b.valid <= REG_2 @[AXI4Slave.scala 97:14]
    reg dest : UInt<32>, clock with :
      reset => (UInt<1>("h0"), dest) @[AXI4DMA.scala 34:17]
    reg src : UInt<32>, clock with :
      reset => (UInt<1>("h0"), src) @[AXI4DMA.scala 35:16]
    reg len : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXI4DMA.scala 36:20]
    reg data : UInt<32>, clock with :
      reset => (UInt<1>("h0"), data) @[AXI4DMA.scala 39:17]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXI4DMA.scala 42:22]
    node _T_45 = eq(state, UInt<3>("h0")) @[AXI4DMA.scala 52:15]
    node _T_46 = neq(len, UInt<1>("h0")) @[AXI4DMA.scala 52:33]
    node _T_47 = and(_T_45, _T_46) @[AXI4DMA.scala 52:26]
    when _T_47 : @[AXI4DMA.scala 52:42]
      state <= UInt<3>("h1") @[AXI4DMA.scala 52:50]
    node _T_48 = eq(state, UInt<3>("h1")) @[AXI4DMA.scala 53:15]
    node _T_49 = and(io.extra.dma.ar.ready, io.extra.dma.ar.valid) @[Decoupled.scala 40:37]
    node _T_50 = and(_T_48, _T_49) @[AXI4DMA.scala 53:30]
    when _T_50 : @[AXI4DMA.scala 53:48]
      state <= UInt<3>("h2") @[AXI4DMA.scala 53:56]
    node _T_51 = eq(state, UInt<3>("h2")) @[AXI4DMA.scala 54:15]
    node _T_52 = and(io.extra.dma.r.ready, io.extra.dma.r.valid) @[Decoupled.scala 40:37]
    node _T_53 = and(_T_51, _T_52) @[AXI4DMA.scala 54:36]
    when _T_53 : @[AXI4DMA.scala 54:53]
      wire _WIRE : UInt<32>[2] @[AXI4DMA.scala 55:37]
      wire _WIRE_1 : UInt<64>
      _WIRE_1 <= io.extra.dma.r.bits.data
      node _T_54 = bits(_WIRE_1, 31, 0) @[AXI4DMA.scala 55:37]
      _WIRE[0] <= _T_54 @[AXI4DMA.scala 55:37]
      node _T_55 = bits(_WIRE_1, 63, 32) @[AXI4DMA.scala 55:37]
      _WIRE[1] <= _T_55 @[AXI4DMA.scala 55:37]
      node _T_56 = bits(src, 2, 2) @[AXI4DMA.scala 55:74]
      data <= _WIRE[_T_56] @[AXI4DMA.scala 55:10]
      state <= UInt<3>("h3") @[AXI4DMA.scala 56:11]
    wire wSend : UInt<1> @[AXI4DMA.scala 59:19]
    node _T_57 = and(io.extra.dma.aw.ready, io.extra.dma.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_57 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_58 = and(io.extra.dma.w.ready, io.extra.dma.w.valid) @[Decoupled.scala 40:37]
    node _T_59 = and(_T_58, io.extra.dma.w.bits.last) @[AXI4DMA.scala 62:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_59 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_60 = and(io.extra.dma.aw.ready, io.extra.dma.aw.valid) @[Decoupled.scala 40:37]
    node _T_61 = and(io.extra.dma.w.ready, io.extra.dma.w.valid) @[Decoupled.scala 40:37]
    node _T_62 = and(_T_60, _T_61) @[AXI4DMA.scala 63:27]
    node _T_63 = and(_T_62, io.extra.dma.w.bits.last) @[AXI4DMA.scala 63:43]
    node _T_64 = and(awAck, wAck) @[AXI4DMA.scala 63:63]
    node _T_65 = or(_T_63, _T_64) @[AXI4DMA.scala 63:53]
    wSend <= _T_65 @[AXI4DMA.scala 63:9]
    node _T_66 = eq(state, UInt<3>("h3")) @[AXI4DMA.scala 65:15]
    node _T_67 = and(_T_66, wSend) @[AXI4DMA.scala 65:31]
    when _T_67 : @[AXI4DMA.scala 65:41]
      state <= UInt<3>("h4") @[AXI4DMA.scala 65:49]
    node _T_68 = eq(state, UInt<3>("h4")) @[AXI4DMA.scala 66:15]
    node _T_69 = and(io.extra.dma.b.ready, io.extra.dma.b.valid) @[Decoupled.scala 40:37]
    node _T_70 = and(_T_68, _T_69) @[AXI4DMA.scala 66:37]
    when _T_70 : @[AXI4DMA.scala 66:54]
      node _T_71 = sub(len, UInt<3>("h4")) @[AXI4DMA.scala 67:16]
      node _T_72 = tail(_T_71, 1) @[AXI4DMA.scala 67:16]
      len <= _T_72 @[AXI4DMA.scala 67:9]
      node _T_73 = add(dest, UInt<3>("h4")) @[AXI4DMA.scala 68:18]
      node _T_74 = tail(_T_73, 1) @[AXI4DMA.scala 68:18]
      dest <= _T_74 @[AXI4DMA.scala 68:10]
      node _T_75 = add(src, UInt<3>("h4")) @[AXI4DMA.scala 69:16]
      node _T_76 = tail(_T_75, 1) @[AXI4DMA.scala 69:16]
      src <= _T_76 @[AXI4DMA.scala 69:9]
      node _T_77 = leq(len, UInt<3>("h4")) @[AXI4DMA.scala 70:22]
      node _T_78 = mux(_T_77, UInt<3>("h0"), UInt<3>("h1")) @[AXI4DMA.scala 70:17]
      state <= _T_78 @[AXI4DMA.scala 70:11]
    io.extra.dma.ar.bits.prot <= UInt<3>("h1") @[AXI4DMA.scala 73:20]
    io.extra.dma.ar.bits.id <= UInt<1>("h0") @[AXI4DMA.scala 74:18]
    io.extra.dma.ar.bits.size <= UInt<2>("h2") @[AXI4DMA.scala 75:20]
    io.extra.dma.ar.bits.burst <= UInt<2>("h1") @[AXI4DMA.scala 76:21]
    io.extra.dma.ar.bits.lock <= UInt<1>("h0") @[AXI4DMA.scala 77:20]
    io.extra.dma.ar.bits.cache <= UInt<1>("h0") @[AXI4DMA.scala 78:21]
    io.extra.dma.ar.bits.qos <= UInt<1>("h0") @[AXI4DMA.scala 79:19]
    io.extra.dma.ar.bits.user <= UInt<1>("h0") @[AXI4DMA.scala 80:20]
    io.extra.dma.ar.bits.len <= UInt<1>("h0") @[AXI4DMA.scala 81:19]
    io.extra.dma.ar.bits.addr <= src @[AXI4DMA.scala 82:20]
    node _T_79 = eq(state, UInt<3>("h1")) @[AXI4DMA.scala 83:26]
    io.extra.dma.ar.valid <= _T_79 @[AXI4DMA.scala 83:16]
    node _T_80 = eq(state, UInt<3>("h2")) @[AXI4DMA.scala 84:25]
    io.extra.dma.r.ready <= _T_80 @[AXI4DMA.scala 84:15]
    io.extra.dma.aw.bits.qos <= io.extra.dma.ar.bits.qos @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.cache <= io.extra.dma.ar.bits.cache @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.lock <= io.extra.dma.ar.bits.lock @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.burst <= io.extra.dma.ar.bits.burst @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.size <= io.extra.dma.ar.bits.size @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.len <= io.extra.dma.ar.bits.len @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.user <= io.extra.dma.ar.bits.user @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.id <= io.extra.dma.ar.bits.id @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.prot <= io.extra.dma.ar.bits.prot @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.addr <= io.extra.dma.ar.bits.addr @[AXI4DMA.scala 86:15]
    io.extra.dma.aw.bits.addr <= dest @[AXI4DMA.scala 87:20]
    node _T_81 = eq(state, UInt<3>("h3")) @[AXI4DMA.scala 88:26]
    node _T_82 = eq(awAck, UInt<1>("h0")) @[AXI4DMA.scala 88:46]
    node _T_83 = and(_T_81, _T_82) @[AXI4DMA.scala 88:43]
    io.extra.dma.aw.valid <= _T_83 @[AXI4DMA.scala 88:16]
    node _T_84 = eq(state, UInt<3>("h3")) @[AXI4DMA.scala 89:25]
    node _T_85 = eq(wAck, UInt<1>("h0")) @[AXI4DMA.scala 89:45]
    node _T_86 = and(_T_84, _T_85) @[AXI4DMA.scala 89:42]
    io.extra.dma.w.valid <= _T_86 @[AXI4DMA.scala 89:15]
    node _T_87 = cat(data, data) @[Cat.scala 30:58]
    io.extra.dma.w.bits.data <= _T_87 @[AXI4DMA.scala 90:19]
    node _T_88 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12]
    node _T_89 = bits(dest, 2, 2) @[AXI4DMA.scala 91:49]
    node _T_90 = mul(_T_89, UInt<3>("h4")) @[AXI4DMA.scala 91:68]
    node _T_91 = dshl(_T_88, _T_90) @[AXI4DMA.scala 91:41]
    io.extra.dma.w.bits.strb <= _T_91 @[AXI4DMA.scala 91:19]
    io.extra.dma.w.bits.last <= UInt<1>("h1") @[AXI4DMA.scala 92:19]
    node _T_92 = eq(state, UInt<3>("h4")) @[AXI4DMA.scala 93:25]
    io.extra.dma.b.ready <= _T_92 @[AXI4DMA.scala 93:15]
    node _T_93 = bits(raddr, 3, 0) @[AXI4DMA.scala 101:33]
    node _T_94 = bits(waddr, 3, 0) @[AXI4DMA.scala 102:10]
    node _T_95 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 40:37]
    node _T_96 = bits(waddr, 2, 0) @[AXI4DMA.scala 102:80]
    node _T_97 = dshr(io.in.w.bits.strb, _T_96) @[AXI4DMA.scala 102:72]
    node _T_98 = bits(_T_97, 0, 0) @[BitUtils.scala 27:29]
    node _T_99 = bits(_T_97, 1, 1) @[BitUtils.scala 27:29]
    node _T_100 = bits(_T_97, 2, 2) @[BitUtils.scala 27:29]
    node _T_101 = bits(_T_97, 3, 3) @[BitUtils.scala 27:29]
    node _T_102 = bits(_T_97, 4, 4) @[BitUtils.scala 27:29]
    node _T_103 = bits(_T_97, 5, 5) @[BitUtils.scala 27:29]
    node _T_104 = bits(_T_97, 6, 6) @[BitUtils.scala 27:29]
    node _T_105 = bits(_T_97, 7, 7) @[BitUtils.scala 27:29]
    node _T_106 = bits(_T_98, 0, 0) @[Bitwise.scala 72:15]
    node _T_107 = mux(_T_106, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_108 = bits(_T_99, 0, 0) @[Bitwise.scala 72:15]
    node _T_109 = mux(_T_108, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_110 = bits(_T_100, 0, 0) @[Bitwise.scala 72:15]
    node _T_111 = mux(_T_110, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_112 = bits(_T_101, 0, 0) @[Bitwise.scala 72:15]
    node _T_113 = mux(_T_112, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_114 = bits(_T_102, 0, 0) @[Bitwise.scala 72:15]
    node _T_115 = mux(_T_114, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_116 = bits(_T_103, 0, 0) @[Bitwise.scala 72:15]
    node _T_117 = mux(_T_116, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_118 = bits(_T_104, 0, 0) @[Bitwise.scala 72:15]
    node _T_119 = mux(_T_118, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_120 = bits(_T_105, 0, 0) @[Bitwise.scala 72:15]
    node _T_121 = mux(_T_120, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node lo_lo_1 = cat(_T_109, _T_107) @[Cat.scala 30:58]
    node lo_hi_1 = cat(_T_113, _T_111) @[Cat.scala 30:58]
    node lo_1 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
    node hi_lo_1 = cat(_T_117, _T_115) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_121, _T_119) @[Cat.scala 30:58]
    node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
    node _T_122 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_123 = eq(UInt<1>("h0"), _T_93) @[LookupTree.scala 24:34]
    node _T_124 = eq(UInt<3>("h4"), _T_93) @[LookupTree.scala 24:34]
    node _T_125 = eq(UInt<4>("h8"), _T_93) @[LookupTree.scala 24:34]
    node _T_126 = mux(_T_123, dest, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_127 = mux(_T_124, src, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_128 = mux(_T_125, len, UInt<1>("h0")) @[Mux.scala 27:72]
    node _T_129 = or(_T_126, _T_127) @[Mux.scala 27:72]
    node _T_130 = or(_T_129, _T_128) @[Mux.scala 27:72]
    wire _WIRE_2 : UInt<32> @[Mux.scala 27:72]
    _WIRE_2 <= _T_130 @[Mux.scala 27:72]
    io.in.r.bits.data <= _WIRE_2 @[RegMap.scala 30:11]
    node _T_131 = eq(_T_94, UInt<1>("h0")) @[RegMap.scala 32:41]
    node _T_132 = and(_T_95, _T_131) @[RegMap.scala 32:32]
    when _T_132 : @[RegMap.scala 32:48]
      node _T_133 = and(io.in.w.bits.data, _T_122) @[BitUtils.scala 32:13]
      node _T_134 = not(_T_122) @[BitUtils.scala 32:38]
      node _T_135 = and(dest, _T_134) @[BitUtils.scala 32:36]
      node _T_136 = or(_T_133, _T_135) @[BitUtils.scala 32:25]
      dest <= _T_136 @[RegMap.scala 32:52]
    node _T_137 = eq(_T_94, UInt<3>("h4")) @[RegMap.scala 32:41]
    node _T_138 = and(_T_95, _T_137) @[RegMap.scala 32:32]
    when _T_138 : @[RegMap.scala 32:48]
      node _T_139 = and(io.in.w.bits.data, _T_122) @[BitUtils.scala 32:13]
      node _T_140 = not(_T_122) @[BitUtils.scala 32:38]
      node _T_141 = and(src, _T_140) @[BitUtils.scala 32:36]
      node _T_142 = or(_T_139, _T_141) @[BitUtils.scala 32:25]
      src <= _T_142 @[RegMap.scala 32:52]
    node _T_143 = eq(_T_94, UInt<4>("h8")) @[RegMap.scala 32:41]
    node _T_144 = and(_T_95, _T_143) @[RegMap.scala 32:32]
    when _T_144 : @[RegMap.scala 32:48]
      node _T_145 = and(io.in.w.bits.data, _T_122) @[BitUtils.scala 32:13]
      node _T_146 = not(_T_122) @[BitUtils.scala 32:38]
      node _T_147 = and(len, _T_146) @[BitUtils.scala 32:36]
      node _T_148 = or(_T_145, _T_147) @[BitUtils.scala 32:25]
      len <= _T_148 @[RegMap.scala 32:52]

  module SimpleBus2AXI4Converter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimpleBus2AXI4Converter_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimpleBus2AXI4Converter_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimpleBus2AXI4Converter_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimpleBus2AXI4Converter_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimpleBus2AXI4Converter_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimpleBus2AXI4Converter_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>}}}}

    node _T = bits(io.in.req.bits.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _T_1 = and(io.in.req.valid, _T) @[ToAXI4.scala 151:38]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[ToAXI4.scala 151:20]
    node toAXI4Lite = and(_T_2, UInt<1>("h1")) @[ToAXI4.scala 151:67]
    node _T_3 = or(toAXI4Lite, UInt<1>("h0")) @[ToAXI4.scala 153:21]
    node _T_4 = asUInt(reset) @[ToAXI4.scala 153:9]
    node _T_5 = or(_T_3, _T_4) @[ToAXI4.scala 153:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ToAXI4.scala 153:9]
    when _T_6 : @[ToAXI4.scala 153:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:153 assert(toAXI4Lite || toAXI4)\n") : SIM @[ToAXI4.scala 153:9]
      stop(clock, UInt<1>("h1"), 1) @[ToAXI4.scala 153:9]
    io.out.ar.bits.addr <= io.in.req.bits.addr @[ToAXI4.scala 158:12]
    io.out.ar.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 159:12]
    io.out.w.bits.data <= io.in.req.bits.wdata @[ToAXI4.scala 160:10]
    io.out.w.bits.strb <= io.in.req.bits.wmask @[ToAXI4.scala 161:10]
    wire wlast : UInt<1>
    wlast <= UInt<1>("h1")
    wire rlast : UInt<1>
    rlast <= UInt<1>("h1")
    io.out.aw.bits.prot <= io.out.ar.bits.prot @[ToAXI4.scala 182:6]
    io.out.aw.bits.addr <= io.out.ar.bits.addr @[ToAXI4.scala 182:6]
    io.in.resp.bits.rdata <= io.out.r.bits.data @[ToAXI4.scala 183:23]
    node _T_7 = mux(rlast, UInt<3>("h6"), UInt<1>("h0")) @[ToAXI4.scala 184:28]
    io.in.resp.bits.cmd <= _T_7 @[ToAXI4.scala 184:22]
    wire wSend : UInt<1> @[ToAXI4.scala 186:19]
    node _T_8 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    reg awAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_8 : @[StopWatch.scala 30:20]
      awAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      awAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_9 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_10 = and(_T_9, wlast) @[ToAXI4.scala 188:41]
    reg wAck : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[StopWatch.scala 24:20]
    when _T_10 : @[StopWatch.scala 30:20]
      wAck <= UInt<1>("h1") @[StopWatch.scala 30:24]
    when wSend : @[StopWatch.scala 31:19]
      wAck <= UInt<1>("h0") @[StopWatch.scala 31:23]
    node _T_11 = and(io.out.aw.ready, io.out.aw.valid) @[Decoupled.scala 40:37]
    node _T_12 = and(io.out.w.ready, io.out.w.valid) @[Decoupled.scala 40:37]
    node _T_13 = and(_T_11, _T_12) @[ToAXI4.scala 189:27]
    node _T_14 = and(_T_13, wlast) @[ToAXI4.scala 189:43]
    node _T_15 = and(awAck, wAck) @[ToAXI4.scala 189:63]
    node _T_16 = or(_T_14, _T_15) @[ToAXI4.scala 189:53]
    wSend <= _T_16 @[ToAXI4.scala 189:9]
    node _T_17 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_18 = and(io.in.req.ready, io.in.req.valid) @[Decoupled.scala 40:37]
    reg wen : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wen) @[Reg.scala 15:16]
    when _T_18 : @[Reg.scala 16:19]
      wen <= _T_17 @[Reg.scala 16:23]
    node _T_19 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _T_21 = bits(io.in.req.bits.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _T_23 = and(_T_20, _T_22) @[SimpleBus.scala 73:26]
    node _T_24 = and(io.in.req.valid, _T_23) @[SimpleBus.scala 104:29]
    io.out.ar.valid <= _T_24 @[ToAXI4.scala 192:16]
    node _T_25 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_26 = and(io.in.req.valid, _T_25) @[SimpleBus.scala 103:29]
    node _T_27 = eq(awAck, UInt<1>("h0")) @[ToAXI4.scala 193:36]
    node _T_28 = and(_T_26, _T_27) @[ToAXI4.scala 193:33]
    io.out.aw.valid <= _T_28 @[ToAXI4.scala 193:16]
    node _T_29 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_30 = and(io.in.req.valid, _T_29) @[SimpleBus.scala 103:29]
    node _T_31 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 194:36]
    node _T_32 = and(_T_30, _T_31) @[ToAXI4.scala 194:33]
    io.out.w.valid <= _T_32 @[ToAXI4.scala 194:16]
    node _T_33 = bits(io.in.req.bits.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _T_34 = eq(wAck, UInt<1>("h0")) @[ToAXI4.scala 195:49]
    node _T_35 = and(_T_34, io.out.w.ready) @[ToAXI4.scala 195:55]
    node _T_36 = mux(_T_33, _T_35, io.out.ar.ready) @[ToAXI4.scala 195:24]
    io.in.req.ready <= _T_36 @[ToAXI4.scala 195:18]
    io.out.r.ready <= io.in.resp.ready @[ToAXI4.scala 197:16]
    io.out.b.ready <= io.in.resp.ready @[ToAXI4.scala 198:16]
    node _T_37 = mux(wen, io.out.b.valid, io.out.r.valid) @[ToAXI4.scala 199:25]
    io.in.resp.valid <= _T_37 @[ToAXI4.scala 199:19]

  module SimMMIO :
    input clock : Clock
    input reset : Reset
    output io : { flip rw : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, meip : UInt<1>, dma : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<1>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, prot : UInt<3>, id : UInt<1>, user : UInt<1>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<1>, user : UInt<1>}}}, uart : { out : { valid : UInt<1>, ch : UInt<8>}, in : { valid : UInt<1>, flip ch : UInt<8>}}}

    inst xbar of SimpleBusCrossbar1toN_1 @[SimMMIO.scala 45:20]
    xbar.clock <= clock
    xbar.reset <= reset
    io.rw.resp.bits.rdata <= xbar.io.in.resp.bits.rdata @[SimMMIO.scala 46:14]
    io.rw.resp.bits.cmd <= xbar.io.in.resp.bits.cmd @[SimMMIO.scala 46:14]
    io.rw.resp.valid <= xbar.io.in.resp.valid @[SimMMIO.scala 46:14]
    xbar.io.in.resp.ready <= io.rw.resp.ready @[SimMMIO.scala 46:14]
    xbar.io.in.req.bits.wdata <= io.rw.req.bits.wdata @[SimMMIO.scala 46:14]
    xbar.io.in.req.bits.wmask <= io.rw.req.bits.wmask @[SimMMIO.scala 46:14]
    xbar.io.in.req.bits.cmd <= io.rw.req.bits.cmd @[SimMMIO.scala 46:14]
    xbar.io.in.req.bits.size <= io.rw.req.bits.size @[SimMMIO.scala 46:14]
    xbar.io.in.req.bits.addr <= io.rw.req.bits.addr @[SimMMIO.scala 46:14]
    xbar.io.in.req.valid <= io.rw.req.valid @[SimMMIO.scala 46:14]
    io.rw.req.ready <= xbar.io.in.req.ready @[SimMMIO.scala 46:14]
    inst uart of AXI4UART @[SimMMIO.scala 48:20]
    uart.clock <= clock
    uart.reset <= reset
    inst vga of AXI4VGA @[SimMMIO.scala 49:19]
    vga.clock <= clock
    vga.reset <= reset
    inst flash of AXI4Flash @[SimMMIO.scala 50:21]
    flash.clock <= clock
    flash.reset <= reset
    inst sd of AXI4DummySD @[SimMMIO.scala 51:18]
    sd.clock <= clock
    sd.reset <= reset
    inst meipGen of AXI4MeipGen @[SimMMIO.scala 52:23]
    meipGen.clock <= clock
    meipGen.reset <= reset
    inst dma of AXI4DMA @[SimMMIO.scala 53:19]
    dma.clock <= clock
    dma.reset <= reset
    inst SimpleBus2AXI4Converter of SimpleBus2AXI4Converter_3 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter.clock <= clock
    SimpleBus2AXI4Converter.reset <= reset
    xbar.io.out[0].resp.bits.rdata <= SimpleBus2AXI4Converter.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[0].resp.bits.cmd <= SimpleBus2AXI4Converter.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[0].resp.valid <= SimpleBus2AXI4Converter.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.resp.ready <= xbar.io.out[0].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.wdata <= xbar.io.out[0].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.wmask <= xbar.io.out[0].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.cmd <= xbar.io.out[0].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.size <= xbar.io.out[0].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.bits.addr <= xbar.io.out[0].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.in.req.valid <= xbar.io.out[0].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[0].req.ready <= SimpleBus2AXI4Converter.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter.io.out.r.bits.data <= uart.io.in.r.bits.data @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.r.bits.resp <= uart.io.in.r.bits.resp @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.r.valid <= uart.io.in.r.valid @[SimMMIO.scala 54:14]
    uart.io.in.r.ready <= SimpleBus2AXI4Converter.io.out.r.ready @[SimMMIO.scala 54:14]
    uart.io.in.ar.bits.prot <= SimpleBus2AXI4Converter.io.out.ar.bits.prot @[SimMMIO.scala 54:14]
    uart.io.in.ar.bits.addr <= SimpleBus2AXI4Converter.io.out.ar.bits.addr @[SimMMIO.scala 54:14]
    uart.io.in.ar.valid <= SimpleBus2AXI4Converter.io.out.ar.valid @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.ar.ready <= uart.io.in.ar.ready @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.b.bits.resp <= uart.io.in.b.bits.resp @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.b.valid <= uart.io.in.b.valid @[SimMMIO.scala 54:14]
    uart.io.in.b.ready <= SimpleBus2AXI4Converter.io.out.b.ready @[SimMMIO.scala 54:14]
    uart.io.in.w.bits.strb <= SimpleBus2AXI4Converter.io.out.w.bits.strb @[SimMMIO.scala 54:14]
    uart.io.in.w.bits.data <= SimpleBus2AXI4Converter.io.out.w.bits.data @[SimMMIO.scala 54:14]
    uart.io.in.w.valid <= SimpleBus2AXI4Converter.io.out.w.valid @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.w.ready <= uart.io.in.w.ready @[SimMMIO.scala 54:14]
    uart.io.in.aw.bits.prot <= SimpleBus2AXI4Converter.io.out.aw.bits.prot @[SimMMIO.scala 54:14]
    uart.io.in.aw.bits.addr <= SimpleBus2AXI4Converter.io.out.aw.bits.addr @[SimMMIO.scala 54:14]
    uart.io.in.aw.valid <= SimpleBus2AXI4Converter.io.out.aw.valid @[SimMMIO.scala 54:14]
    SimpleBus2AXI4Converter.io.out.aw.ready <= uart.io.in.aw.ready @[SimMMIO.scala 54:14]
    inst SimpleBus2AXI4Converter_1 of SimpleBus2AXI4Converter_4 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_1.clock <= clock
    SimpleBus2AXI4Converter_1.reset <= reset
    xbar.io.out[1].resp.bits.rdata <= SimpleBus2AXI4Converter_1.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[1].resp.bits.cmd <= SimpleBus2AXI4Converter_1.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[1].resp.valid <= SimpleBus2AXI4Converter_1.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.resp.ready <= xbar.io.out[1].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.wdata <= xbar.io.out[1].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.wmask <= xbar.io.out[1].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.cmd <= xbar.io.out[1].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.size <= xbar.io.out[1].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.bits.addr <= xbar.io.out[1].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.in.req.valid <= xbar.io.out[1].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[1].req.ready <= SimpleBus2AXI4Converter_1.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_1.io.out.r.bits.data <= vga.io.in.fb.r.bits.data @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.r.bits.resp <= vga.io.in.fb.r.bits.resp @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.r.valid <= vga.io.in.fb.r.valid @[SimMMIO.scala 55:16]
    vga.io.in.fb.r.ready <= SimpleBus2AXI4Converter_1.io.out.r.ready @[SimMMIO.scala 55:16]
    vga.io.in.fb.ar.bits.prot <= SimpleBus2AXI4Converter_1.io.out.ar.bits.prot @[SimMMIO.scala 55:16]
    vga.io.in.fb.ar.bits.addr <= SimpleBus2AXI4Converter_1.io.out.ar.bits.addr @[SimMMIO.scala 55:16]
    vga.io.in.fb.ar.valid <= SimpleBus2AXI4Converter_1.io.out.ar.valid @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.ar.ready <= vga.io.in.fb.ar.ready @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.b.bits.resp <= vga.io.in.fb.b.bits.resp @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.b.valid <= vga.io.in.fb.b.valid @[SimMMIO.scala 55:16]
    vga.io.in.fb.b.ready <= SimpleBus2AXI4Converter_1.io.out.b.ready @[SimMMIO.scala 55:16]
    vga.io.in.fb.w.bits.strb <= SimpleBus2AXI4Converter_1.io.out.w.bits.strb @[SimMMIO.scala 55:16]
    vga.io.in.fb.w.bits.data <= SimpleBus2AXI4Converter_1.io.out.w.bits.data @[SimMMIO.scala 55:16]
    vga.io.in.fb.w.valid <= SimpleBus2AXI4Converter_1.io.out.w.valid @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.w.ready <= vga.io.in.fb.w.ready @[SimMMIO.scala 55:16]
    vga.io.in.fb.aw.bits.prot <= SimpleBus2AXI4Converter_1.io.out.aw.bits.prot @[SimMMIO.scala 55:16]
    vga.io.in.fb.aw.bits.addr <= SimpleBus2AXI4Converter_1.io.out.aw.bits.addr @[SimMMIO.scala 55:16]
    vga.io.in.fb.aw.valid <= SimpleBus2AXI4Converter_1.io.out.aw.valid @[SimMMIO.scala 55:16]
    SimpleBus2AXI4Converter_1.io.out.aw.ready <= vga.io.in.fb.aw.ready @[SimMMIO.scala 55:16]
    inst SimpleBus2AXI4Converter_2 of SimpleBus2AXI4Converter_5 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_2.clock <= clock
    SimpleBus2AXI4Converter_2.reset <= reset
    xbar.io.out[2].resp.bits.rdata <= SimpleBus2AXI4Converter_2.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[2].resp.bits.cmd <= SimpleBus2AXI4Converter_2.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[2].resp.valid <= SimpleBus2AXI4Converter_2.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.resp.ready <= xbar.io.out[2].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.wdata <= xbar.io.out[2].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.wmask <= xbar.io.out[2].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.cmd <= xbar.io.out[2].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.size <= xbar.io.out[2].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.bits.addr <= xbar.io.out[2].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.in.req.valid <= xbar.io.out[2].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[2].req.ready <= SimpleBus2AXI4Converter_2.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_2.io.out.r.bits.data <= vga.io.in.ctrl.r.bits.data @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.r.bits.resp <= vga.io.in.ctrl.r.bits.resp @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.r.valid <= vga.io.in.ctrl.r.valid @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.r.ready <= SimpleBus2AXI4Converter_2.io.out.r.ready @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.ar.bits.prot <= SimpleBus2AXI4Converter_2.io.out.ar.bits.prot @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.ar.bits.addr <= SimpleBus2AXI4Converter_2.io.out.ar.bits.addr @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.ar.valid <= SimpleBus2AXI4Converter_2.io.out.ar.valid @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.ar.ready <= vga.io.in.ctrl.ar.ready @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.b.bits.resp <= vga.io.in.ctrl.b.bits.resp @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.b.valid <= vga.io.in.ctrl.b.valid @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.b.ready <= SimpleBus2AXI4Converter_2.io.out.b.ready @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.w.bits.strb <= SimpleBus2AXI4Converter_2.io.out.w.bits.strb @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.w.bits.data <= SimpleBus2AXI4Converter_2.io.out.w.bits.data @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.w.valid <= SimpleBus2AXI4Converter_2.io.out.w.valid @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.w.ready <= vga.io.in.ctrl.w.ready @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.aw.bits.prot <= SimpleBus2AXI4Converter_2.io.out.aw.bits.prot @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.aw.bits.addr <= SimpleBus2AXI4Converter_2.io.out.aw.bits.addr @[SimMMIO.scala 56:18]
    vga.io.in.ctrl.aw.valid <= SimpleBus2AXI4Converter_2.io.out.aw.valid @[SimMMIO.scala 56:18]
    SimpleBus2AXI4Converter_2.io.out.aw.ready <= vga.io.in.ctrl.aw.ready @[SimMMIO.scala 56:18]
    inst SimpleBus2AXI4Converter_3 of SimpleBus2AXI4Converter_6 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_3.clock <= clock
    SimpleBus2AXI4Converter_3.reset <= reset
    xbar.io.out[3].resp.bits.rdata <= SimpleBus2AXI4Converter_3.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[3].resp.bits.cmd <= SimpleBus2AXI4Converter_3.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[3].resp.valid <= SimpleBus2AXI4Converter_3.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.resp.ready <= xbar.io.out[3].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.wdata <= xbar.io.out[3].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.wmask <= xbar.io.out[3].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.cmd <= xbar.io.out[3].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.size <= xbar.io.out[3].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.bits.addr <= xbar.io.out[3].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.in.req.valid <= xbar.io.out[3].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[3].req.ready <= SimpleBus2AXI4Converter_3.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_3.io.out.r.bits.data <= flash.io.in.r.bits.data @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.r.bits.resp <= flash.io.in.r.bits.resp @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.r.valid <= flash.io.in.r.valid @[SimMMIO.scala 57:15]
    flash.io.in.r.ready <= SimpleBus2AXI4Converter_3.io.out.r.ready @[SimMMIO.scala 57:15]
    flash.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_3.io.out.ar.bits.prot @[SimMMIO.scala 57:15]
    flash.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_3.io.out.ar.bits.addr @[SimMMIO.scala 57:15]
    flash.io.in.ar.valid <= SimpleBus2AXI4Converter_3.io.out.ar.valid @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.ar.ready <= flash.io.in.ar.ready @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.b.bits.resp <= flash.io.in.b.bits.resp @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.b.valid <= flash.io.in.b.valid @[SimMMIO.scala 57:15]
    flash.io.in.b.ready <= SimpleBus2AXI4Converter_3.io.out.b.ready @[SimMMIO.scala 57:15]
    flash.io.in.w.bits.strb <= SimpleBus2AXI4Converter_3.io.out.w.bits.strb @[SimMMIO.scala 57:15]
    flash.io.in.w.bits.data <= SimpleBus2AXI4Converter_3.io.out.w.bits.data @[SimMMIO.scala 57:15]
    flash.io.in.w.valid <= SimpleBus2AXI4Converter_3.io.out.w.valid @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.w.ready <= flash.io.in.w.ready @[SimMMIO.scala 57:15]
    flash.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_3.io.out.aw.bits.prot @[SimMMIO.scala 57:15]
    flash.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_3.io.out.aw.bits.addr @[SimMMIO.scala 57:15]
    flash.io.in.aw.valid <= SimpleBus2AXI4Converter_3.io.out.aw.valid @[SimMMIO.scala 57:15]
    SimpleBus2AXI4Converter_3.io.out.aw.ready <= flash.io.in.aw.ready @[SimMMIO.scala 57:15]
    inst SimpleBus2AXI4Converter_4 of SimpleBus2AXI4Converter_7 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_4.clock <= clock
    SimpleBus2AXI4Converter_4.reset <= reset
    xbar.io.out[4].resp.bits.rdata <= SimpleBus2AXI4Converter_4.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[4].resp.bits.cmd <= SimpleBus2AXI4Converter_4.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[4].resp.valid <= SimpleBus2AXI4Converter_4.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.resp.ready <= xbar.io.out[4].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.req.bits.wdata <= xbar.io.out[4].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.req.bits.wmask <= xbar.io.out[4].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.req.bits.cmd <= xbar.io.out[4].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.req.bits.size <= xbar.io.out[4].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.req.bits.addr <= xbar.io.out[4].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.in.req.valid <= xbar.io.out[4].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[4].req.ready <= SimpleBus2AXI4Converter_4.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_4.io.out.r.bits.data <= sd.io.in.r.bits.data @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.r.bits.resp <= sd.io.in.r.bits.resp @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.r.valid <= sd.io.in.r.valid @[SimMMIO.scala 58:12]
    sd.io.in.r.ready <= SimpleBus2AXI4Converter_4.io.out.r.ready @[SimMMIO.scala 58:12]
    sd.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_4.io.out.ar.bits.prot @[SimMMIO.scala 58:12]
    sd.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_4.io.out.ar.bits.addr @[SimMMIO.scala 58:12]
    sd.io.in.ar.valid <= SimpleBus2AXI4Converter_4.io.out.ar.valid @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.ar.ready <= sd.io.in.ar.ready @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.b.bits.resp <= sd.io.in.b.bits.resp @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.b.valid <= sd.io.in.b.valid @[SimMMIO.scala 58:12]
    sd.io.in.b.ready <= SimpleBus2AXI4Converter_4.io.out.b.ready @[SimMMIO.scala 58:12]
    sd.io.in.w.bits.strb <= SimpleBus2AXI4Converter_4.io.out.w.bits.strb @[SimMMIO.scala 58:12]
    sd.io.in.w.bits.data <= SimpleBus2AXI4Converter_4.io.out.w.bits.data @[SimMMIO.scala 58:12]
    sd.io.in.w.valid <= SimpleBus2AXI4Converter_4.io.out.w.valid @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.w.ready <= sd.io.in.w.ready @[SimMMIO.scala 58:12]
    sd.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_4.io.out.aw.bits.prot @[SimMMIO.scala 58:12]
    sd.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_4.io.out.aw.bits.addr @[SimMMIO.scala 58:12]
    sd.io.in.aw.valid <= SimpleBus2AXI4Converter_4.io.out.aw.valid @[SimMMIO.scala 58:12]
    SimpleBus2AXI4Converter_4.io.out.aw.ready <= sd.io.in.aw.ready @[SimMMIO.scala 58:12]
    inst SimpleBus2AXI4Converter_5 of SimpleBus2AXI4Converter_8 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_5.clock <= clock
    SimpleBus2AXI4Converter_5.reset <= reset
    xbar.io.out[5].resp.bits.rdata <= SimpleBus2AXI4Converter_5.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[5].resp.bits.cmd <= SimpleBus2AXI4Converter_5.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[5].resp.valid <= SimpleBus2AXI4Converter_5.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.resp.ready <= xbar.io.out[5].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.req.bits.wdata <= xbar.io.out[5].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.req.bits.wmask <= xbar.io.out[5].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.req.bits.cmd <= xbar.io.out[5].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.req.bits.size <= xbar.io.out[5].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.req.bits.addr <= xbar.io.out[5].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.in.req.valid <= xbar.io.out[5].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[5].req.ready <= SimpleBus2AXI4Converter_5.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_5.io.out.r.bits.data <= meipGen.io.in.r.bits.data @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.r.bits.resp <= meipGen.io.in.r.bits.resp @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.r.valid <= meipGen.io.in.r.valid @[SimMMIO.scala 59:17]
    meipGen.io.in.r.ready <= SimpleBus2AXI4Converter_5.io.out.r.ready @[SimMMIO.scala 59:17]
    meipGen.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_5.io.out.ar.bits.prot @[SimMMIO.scala 59:17]
    meipGen.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_5.io.out.ar.bits.addr @[SimMMIO.scala 59:17]
    meipGen.io.in.ar.valid <= SimpleBus2AXI4Converter_5.io.out.ar.valid @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.ar.ready <= meipGen.io.in.ar.ready @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.b.bits.resp <= meipGen.io.in.b.bits.resp @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.b.valid <= meipGen.io.in.b.valid @[SimMMIO.scala 59:17]
    meipGen.io.in.b.ready <= SimpleBus2AXI4Converter_5.io.out.b.ready @[SimMMIO.scala 59:17]
    meipGen.io.in.w.bits.strb <= SimpleBus2AXI4Converter_5.io.out.w.bits.strb @[SimMMIO.scala 59:17]
    meipGen.io.in.w.bits.data <= SimpleBus2AXI4Converter_5.io.out.w.bits.data @[SimMMIO.scala 59:17]
    meipGen.io.in.w.valid <= SimpleBus2AXI4Converter_5.io.out.w.valid @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.w.ready <= meipGen.io.in.w.ready @[SimMMIO.scala 59:17]
    meipGen.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_5.io.out.aw.bits.prot @[SimMMIO.scala 59:17]
    meipGen.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_5.io.out.aw.bits.addr @[SimMMIO.scala 59:17]
    meipGen.io.in.aw.valid <= SimpleBus2AXI4Converter_5.io.out.aw.valid @[SimMMIO.scala 59:17]
    SimpleBus2AXI4Converter_5.io.out.aw.ready <= meipGen.io.in.aw.ready @[SimMMIO.scala 59:17]
    inst SimpleBus2AXI4Converter_6 of SimpleBus2AXI4Converter_9 @[ToAXI4.scala 204:24]
    SimpleBus2AXI4Converter_6.clock <= clock
    SimpleBus2AXI4Converter_6.reset <= reset
    xbar.io.out[6].resp.bits.rdata <= SimpleBus2AXI4Converter_6.io.in.resp.bits.rdata @[ToAXI4.scala 205:18]
    xbar.io.out[6].resp.bits.cmd <= SimpleBus2AXI4Converter_6.io.in.resp.bits.cmd @[ToAXI4.scala 205:18]
    xbar.io.out[6].resp.valid <= SimpleBus2AXI4Converter_6.io.in.resp.valid @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.resp.ready <= xbar.io.out[6].resp.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.req.bits.wdata <= xbar.io.out[6].req.bits.wdata @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.req.bits.wmask <= xbar.io.out[6].req.bits.wmask @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.req.bits.cmd <= xbar.io.out[6].req.bits.cmd @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.req.bits.size <= xbar.io.out[6].req.bits.size @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.req.bits.addr <= xbar.io.out[6].req.bits.addr @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.in.req.valid <= xbar.io.out[6].req.valid @[ToAXI4.scala 205:18]
    xbar.io.out[6].req.ready <= SimpleBus2AXI4Converter_6.io.in.req.ready @[ToAXI4.scala 205:18]
    SimpleBus2AXI4Converter_6.io.out.r.bits.data <= dma.io.in.r.bits.data @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.r.bits.resp <= dma.io.in.r.bits.resp @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.r.valid <= dma.io.in.r.valid @[SimMMIO.scala 60:13]
    dma.io.in.r.ready <= SimpleBus2AXI4Converter_6.io.out.r.ready @[SimMMIO.scala 60:13]
    dma.io.in.ar.bits.prot <= SimpleBus2AXI4Converter_6.io.out.ar.bits.prot @[SimMMIO.scala 60:13]
    dma.io.in.ar.bits.addr <= SimpleBus2AXI4Converter_6.io.out.ar.bits.addr @[SimMMIO.scala 60:13]
    dma.io.in.ar.valid <= SimpleBus2AXI4Converter_6.io.out.ar.valid @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.ar.ready <= dma.io.in.ar.ready @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.b.bits.resp <= dma.io.in.b.bits.resp @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.b.valid <= dma.io.in.b.valid @[SimMMIO.scala 60:13]
    dma.io.in.b.ready <= SimpleBus2AXI4Converter_6.io.out.b.ready @[SimMMIO.scala 60:13]
    dma.io.in.w.bits.strb <= SimpleBus2AXI4Converter_6.io.out.w.bits.strb @[SimMMIO.scala 60:13]
    dma.io.in.w.bits.data <= SimpleBus2AXI4Converter_6.io.out.w.bits.data @[SimMMIO.scala 60:13]
    dma.io.in.w.valid <= SimpleBus2AXI4Converter_6.io.out.w.valid @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.w.ready <= dma.io.in.w.ready @[SimMMIO.scala 60:13]
    dma.io.in.aw.bits.prot <= SimpleBus2AXI4Converter_6.io.out.aw.bits.prot @[SimMMIO.scala 60:13]
    dma.io.in.aw.bits.addr <= SimpleBus2AXI4Converter_6.io.out.aw.bits.addr @[SimMMIO.scala 60:13]
    dma.io.in.aw.valid <= SimpleBus2AXI4Converter_6.io.out.aw.valid @[SimMMIO.scala 60:13]
    SimpleBus2AXI4Converter_6.io.out.aw.ready <= dma.io.in.aw.ready @[SimMMIO.scala 60:13]
    dma.io.extra.dma.r.bits.user <= io.dma.r.bits.user @[SimMMIO.scala 61:10]
    dma.io.extra.dma.r.bits.id <= io.dma.r.bits.id @[SimMMIO.scala 61:10]
    dma.io.extra.dma.r.bits.last <= io.dma.r.bits.last @[SimMMIO.scala 61:10]
    dma.io.extra.dma.r.bits.data <= io.dma.r.bits.data @[SimMMIO.scala 61:10]
    dma.io.extra.dma.r.bits.resp <= io.dma.r.bits.resp @[SimMMIO.scala 61:10]
    dma.io.extra.dma.r.valid <= io.dma.r.valid @[SimMMIO.scala 61:10]
    io.dma.r.ready <= dma.io.extra.dma.r.ready @[SimMMIO.scala 61:10]
    io.dma.ar.bits.qos <= dma.io.extra.dma.ar.bits.qos @[SimMMIO.scala 61:10]
    io.dma.ar.bits.cache <= dma.io.extra.dma.ar.bits.cache @[SimMMIO.scala 61:10]
    io.dma.ar.bits.lock <= dma.io.extra.dma.ar.bits.lock @[SimMMIO.scala 61:10]
    io.dma.ar.bits.burst <= dma.io.extra.dma.ar.bits.burst @[SimMMIO.scala 61:10]
    io.dma.ar.bits.size <= dma.io.extra.dma.ar.bits.size @[SimMMIO.scala 61:10]
    io.dma.ar.bits.len <= dma.io.extra.dma.ar.bits.len @[SimMMIO.scala 61:10]
    io.dma.ar.bits.user <= dma.io.extra.dma.ar.bits.user @[SimMMIO.scala 61:10]
    io.dma.ar.bits.id <= dma.io.extra.dma.ar.bits.id @[SimMMIO.scala 61:10]
    io.dma.ar.bits.prot <= dma.io.extra.dma.ar.bits.prot @[SimMMIO.scala 61:10]
    io.dma.ar.bits.addr <= dma.io.extra.dma.ar.bits.addr @[SimMMIO.scala 61:10]
    io.dma.ar.valid <= dma.io.extra.dma.ar.valid @[SimMMIO.scala 61:10]
    dma.io.extra.dma.ar.ready <= io.dma.ar.ready @[SimMMIO.scala 61:10]
    dma.io.extra.dma.b.bits.user <= io.dma.b.bits.user @[SimMMIO.scala 61:10]
    dma.io.extra.dma.b.bits.id <= io.dma.b.bits.id @[SimMMIO.scala 61:10]
    dma.io.extra.dma.b.bits.resp <= io.dma.b.bits.resp @[SimMMIO.scala 61:10]
    dma.io.extra.dma.b.valid <= io.dma.b.valid @[SimMMIO.scala 61:10]
    io.dma.b.ready <= dma.io.extra.dma.b.ready @[SimMMIO.scala 61:10]
    io.dma.w.bits.last <= dma.io.extra.dma.w.bits.last @[SimMMIO.scala 61:10]
    io.dma.w.bits.strb <= dma.io.extra.dma.w.bits.strb @[SimMMIO.scala 61:10]
    io.dma.w.bits.data <= dma.io.extra.dma.w.bits.data @[SimMMIO.scala 61:10]
    io.dma.w.valid <= dma.io.extra.dma.w.valid @[SimMMIO.scala 61:10]
    dma.io.extra.dma.w.ready <= io.dma.w.ready @[SimMMIO.scala 61:10]
    io.dma.aw.bits.qos <= dma.io.extra.dma.aw.bits.qos @[SimMMIO.scala 61:10]
    io.dma.aw.bits.cache <= dma.io.extra.dma.aw.bits.cache @[SimMMIO.scala 61:10]
    io.dma.aw.bits.lock <= dma.io.extra.dma.aw.bits.lock @[SimMMIO.scala 61:10]
    io.dma.aw.bits.burst <= dma.io.extra.dma.aw.bits.burst @[SimMMIO.scala 61:10]
    io.dma.aw.bits.size <= dma.io.extra.dma.aw.bits.size @[SimMMIO.scala 61:10]
    io.dma.aw.bits.len <= dma.io.extra.dma.aw.bits.len @[SimMMIO.scala 61:10]
    io.dma.aw.bits.user <= dma.io.extra.dma.aw.bits.user @[SimMMIO.scala 61:10]
    io.dma.aw.bits.id <= dma.io.extra.dma.aw.bits.id @[SimMMIO.scala 61:10]
    io.dma.aw.bits.prot <= dma.io.extra.dma.aw.bits.prot @[SimMMIO.scala 61:10]
    io.dma.aw.bits.addr <= dma.io.extra.dma.aw.bits.addr @[SimMMIO.scala 61:10]
    io.dma.aw.valid <= dma.io.extra.dma.aw.valid @[SimMMIO.scala 61:10]
    dma.io.extra.dma.aw.ready <= io.dma.aw.ready @[SimMMIO.scala 61:10]
    io.meip <= meipGen.io.extra.meip @[SimMMIO.scala 62:11]
    uart.io.extra.in.ch <= io.uart.in.ch @[SimMMIO.scala 63:21]
    io.uart.in.valid <= uart.io.extra.in.valid @[SimMMIO.scala 63:21]
    io.uart.out.ch <= uart.io.extra.out.ch @[SimMMIO.scala 63:21]
    io.uart.out.valid <= uart.io.extra.out.valid @[SimMMIO.scala 63:21]
    vga.io.vga.valid is invalid @[SimMMIO.scala 64:14]
    vga.io.vga.vsync is invalid @[SimMMIO.scala 64:14]
    vga.io.vga.hsync is invalid @[SimMMIO.scala 64:14]
    vga.io.vga.rgb is invalid @[SimMMIO.scala 64:14]

  module SimTop :
    input clock : Clock
    input reset : UInt<1>
    output io : { logCtrl : { flip log_begin : UInt<64>, flip log_end : UInt<64>, flip log_level : UInt<64>}, perfInfo : { flip clean : UInt<1>, flip dump : UInt<1>}, uart : { out : { valid : UInt<1>, ch : UInt<8>}, in : { valid : UInt<1>, flip ch : UInt<8>}}}

    inst soc of NutShell @[NutShellSim.scala 40:19]
    soc.clock <= clock
    soc.reset <= reset
    inst mem of AXI4RAM @[NutShellSim.scala 41:19]
    mem.clock <= clock
    mem.reset <= reset
    inst memdelay of AXI4Delayer @[NutShellSim.scala 44:24]
    memdelay.clock <= clock
    memdelay.reset <= reset
    inst mmio of SimMMIO @[NutShellSim.scala 45:20]
    mmio.clock <= clock
    mmio.reset <= reset
    mmio.io.dma.r.bits.user <= soc.io.frontend.r.bits.user @[NutShellSim.scala 47:19]
    mmio.io.dma.r.bits.id <= soc.io.frontend.r.bits.id @[NutShellSim.scala 47:19]
    mmio.io.dma.r.bits.last <= soc.io.frontend.r.bits.last @[NutShellSim.scala 47:19]
    mmio.io.dma.r.bits.data <= soc.io.frontend.r.bits.data @[NutShellSim.scala 47:19]
    mmio.io.dma.r.bits.resp <= soc.io.frontend.r.bits.resp @[NutShellSim.scala 47:19]
    mmio.io.dma.r.valid <= soc.io.frontend.r.valid @[NutShellSim.scala 47:19]
    soc.io.frontend.r.ready <= mmio.io.dma.r.ready @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.qos <= mmio.io.dma.ar.bits.qos @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.cache <= mmio.io.dma.ar.bits.cache @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.lock <= mmio.io.dma.ar.bits.lock @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.burst <= mmio.io.dma.ar.bits.burst @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.size <= mmio.io.dma.ar.bits.size @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.len <= mmio.io.dma.ar.bits.len @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.user <= mmio.io.dma.ar.bits.user @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.id <= mmio.io.dma.ar.bits.id @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.prot <= mmio.io.dma.ar.bits.prot @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.bits.addr <= mmio.io.dma.ar.bits.addr @[NutShellSim.scala 47:19]
    soc.io.frontend.ar.valid <= mmio.io.dma.ar.valid @[NutShellSim.scala 47:19]
    mmio.io.dma.ar.ready <= soc.io.frontend.ar.ready @[NutShellSim.scala 47:19]
    mmio.io.dma.b.bits.user <= soc.io.frontend.b.bits.user @[NutShellSim.scala 47:19]
    mmio.io.dma.b.bits.id <= soc.io.frontend.b.bits.id @[NutShellSim.scala 47:19]
    mmio.io.dma.b.bits.resp <= soc.io.frontend.b.bits.resp @[NutShellSim.scala 47:19]
    mmio.io.dma.b.valid <= soc.io.frontend.b.valid @[NutShellSim.scala 47:19]
    soc.io.frontend.b.ready <= mmio.io.dma.b.ready @[NutShellSim.scala 47:19]
    soc.io.frontend.w.bits.last <= mmio.io.dma.w.bits.last @[NutShellSim.scala 47:19]
    soc.io.frontend.w.bits.strb <= mmio.io.dma.w.bits.strb @[NutShellSim.scala 47:19]
    soc.io.frontend.w.bits.data <= mmio.io.dma.w.bits.data @[NutShellSim.scala 47:19]
    soc.io.frontend.w.valid <= mmio.io.dma.w.valid @[NutShellSim.scala 47:19]
    mmio.io.dma.w.ready <= soc.io.frontend.w.ready @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.qos <= mmio.io.dma.aw.bits.qos @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.cache <= mmio.io.dma.aw.bits.cache @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.lock <= mmio.io.dma.aw.bits.lock @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.burst <= mmio.io.dma.aw.bits.burst @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.size <= mmio.io.dma.aw.bits.size @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.len <= mmio.io.dma.aw.bits.len @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.user <= mmio.io.dma.aw.bits.user @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.id <= mmio.io.dma.aw.bits.id @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.prot <= mmio.io.dma.aw.bits.prot @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.bits.addr <= mmio.io.dma.aw.bits.addr @[NutShellSim.scala 47:19]
    soc.io.frontend.aw.valid <= mmio.io.dma.aw.valid @[NutShellSim.scala 47:19]
    mmio.io.dma.aw.ready <= soc.io.frontend.aw.ready @[NutShellSim.scala 47:19]
    soc.io.mem.r.bits.user <= memdelay.io.in.r.bits.user @[NutShellSim.scala 49:18]
    soc.io.mem.r.bits.id <= memdelay.io.in.r.bits.id @[NutShellSim.scala 49:18]
    soc.io.mem.r.bits.last <= memdelay.io.in.r.bits.last @[NutShellSim.scala 49:18]
    soc.io.mem.r.bits.data <= memdelay.io.in.r.bits.data @[NutShellSim.scala 49:18]
    soc.io.mem.r.bits.resp <= memdelay.io.in.r.bits.resp @[NutShellSim.scala 49:18]
    soc.io.mem.r.valid <= memdelay.io.in.r.valid @[NutShellSim.scala 49:18]
    memdelay.io.in.r.ready <= soc.io.mem.r.ready @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.qos <= soc.io.mem.ar.bits.qos @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.cache <= soc.io.mem.ar.bits.cache @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.lock <= soc.io.mem.ar.bits.lock @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.burst <= soc.io.mem.ar.bits.burst @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.size <= soc.io.mem.ar.bits.size @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.len <= soc.io.mem.ar.bits.len @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.user <= soc.io.mem.ar.bits.user @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.id <= soc.io.mem.ar.bits.id @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.prot <= soc.io.mem.ar.bits.prot @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.bits.addr <= soc.io.mem.ar.bits.addr @[NutShellSim.scala 49:18]
    memdelay.io.in.ar.valid <= soc.io.mem.ar.valid @[NutShellSim.scala 49:18]
    soc.io.mem.ar.ready <= memdelay.io.in.ar.ready @[NutShellSim.scala 49:18]
    soc.io.mem.b.bits.user <= memdelay.io.in.b.bits.user @[NutShellSim.scala 49:18]
    soc.io.mem.b.bits.id <= memdelay.io.in.b.bits.id @[NutShellSim.scala 49:18]
    soc.io.mem.b.bits.resp <= memdelay.io.in.b.bits.resp @[NutShellSim.scala 49:18]
    soc.io.mem.b.valid <= memdelay.io.in.b.valid @[NutShellSim.scala 49:18]
    memdelay.io.in.b.ready <= soc.io.mem.b.ready @[NutShellSim.scala 49:18]
    memdelay.io.in.w.bits.last <= soc.io.mem.w.bits.last @[NutShellSim.scala 49:18]
    memdelay.io.in.w.bits.strb <= soc.io.mem.w.bits.strb @[NutShellSim.scala 49:18]
    memdelay.io.in.w.bits.data <= soc.io.mem.w.bits.data @[NutShellSim.scala 49:18]
    memdelay.io.in.w.valid <= soc.io.mem.w.valid @[NutShellSim.scala 49:18]
    soc.io.mem.w.ready <= memdelay.io.in.w.ready @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.qos <= soc.io.mem.aw.bits.qos @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.cache <= soc.io.mem.aw.bits.cache @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.lock <= soc.io.mem.aw.bits.lock @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.burst <= soc.io.mem.aw.bits.burst @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.size <= soc.io.mem.aw.bits.size @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.len <= soc.io.mem.aw.bits.len @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.user <= soc.io.mem.aw.bits.user @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.id <= soc.io.mem.aw.bits.id @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.prot <= soc.io.mem.aw.bits.prot @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.bits.addr <= soc.io.mem.aw.bits.addr @[NutShellSim.scala 49:18]
    memdelay.io.in.aw.valid <= soc.io.mem.aw.valid @[NutShellSim.scala 49:18]
    soc.io.mem.aw.ready <= memdelay.io.in.aw.ready @[NutShellSim.scala 49:18]
    memdelay.io.out.r.bits.user <= mem.io.in.r.bits.user @[NutShellSim.scala 50:13]
    memdelay.io.out.r.bits.id <= mem.io.in.r.bits.id @[NutShellSim.scala 50:13]
    memdelay.io.out.r.bits.last <= mem.io.in.r.bits.last @[NutShellSim.scala 50:13]
    memdelay.io.out.r.bits.data <= mem.io.in.r.bits.data @[NutShellSim.scala 50:13]
    memdelay.io.out.r.bits.resp <= mem.io.in.r.bits.resp @[NutShellSim.scala 50:13]
    memdelay.io.out.r.valid <= mem.io.in.r.valid @[NutShellSim.scala 50:13]
    mem.io.in.r.ready <= memdelay.io.out.r.ready @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.qos <= memdelay.io.out.ar.bits.qos @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.cache <= memdelay.io.out.ar.bits.cache @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.lock <= memdelay.io.out.ar.bits.lock @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.burst <= memdelay.io.out.ar.bits.burst @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.size <= memdelay.io.out.ar.bits.size @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.len <= memdelay.io.out.ar.bits.len @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.user <= memdelay.io.out.ar.bits.user @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.id <= memdelay.io.out.ar.bits.id @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.prot <= memdelay.io.out.ar.bits.prot @[NutShellSim.scala 50:13]
    mem.io.in.ar.bits.addr <= memdelay.io.out.ar.bits.addr @[NutShellSim.scala 50:13]
    mem.io.in.ar.valid <= memdelay.io.out.ar.valid @[NutShellSim.scala 50:13]
    memdelay.io.out.ar.ready <= mem.io.in.ar.ready @[NutShellSim.scala 50:13]
    memdelay.io.out.b.bits.user <= mem.io.in.b.bits.user @[NutShellSim.scala 50:13]
    memdelay.io.out.b.bits.id <= mem.io.in.b.bits.id @[NutShellSim.scala 50:13]
    memdelay.io.out.b.bits.resp <= mem.io.in.b.bits.resp @[NutShellSim.scala 50:13]
    memdelay.io.out.b.valid <= mem.io.in.b.valid @[NutShellSim.scala 50:13]
    mem.io.in.b.ready <= memdelay.io.out.b.ready @[NutShellSim.scala 50:13]
    mem.io.in.w.bits.last <= memdelay.io.out.w.bits.last @[NutShellSim.scala 50:13]
    mem.io.in.w.bits.strb <= memdelay.io.out.w.bits.strb @[NutShellSim.scala 50:13]
    mem.io.in.w.bits.data <= memdelay.io.out.w.bits.data @[NutShellSim.scala 50:13]
    mem.io.in.w.valid <= memdelay.io.out.w.valid @[NutShellSim.scala 50:13]
    memdelay.io.out.w.ready <= mem.io.in.w.ready @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.qos <= memdelay.io.out.aw.bits.qos @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.cache <= memdelay.io.out.aw.bits.cache @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.lock <= memdelay.io.out.aw.bits.lock @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.burst <= memdelay.io.out.aw.bits.burst @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.size <= memdelay.io.out.aw.bits.size @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.len <= memdelay.io.out.aw.bits.len @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.user <= memdelay.io.out.aw.bits.user @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.id <= memdelay.io.out.aw.bits.id @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.prot <= memdelay.io.out.aw.bits.prot @[NutShellSim.scala 50:13]
    mem.io.in.aw.bits.addr <= memdelay.io.out.aw.bits.addr @[NutShellSim.scala 50:13]
    mem.io.in.aw.valid <= memdelay.io.out.aw.valid @[NutShellSim.scala 50:13]
    memdelay.io.out.aw.ready <= mem.io.in.aw.ready @[NutShellSim.scala 50:13]
    soc.io.mmio.resp.bits.rdata <= mmio.io.rw.resp.bits.rdata @[NutShellSim.scala 52:14]
    soc.io.mmio.resp.bits.cmd <= mmio.io.rw.resp.bits.cmd @[NutShellSim.scala 52:14]
    soc.io.mmio.resp.valid <= mmio.io.rw.resp.valid @[NutShellSim.scala 52:14]
    mmio.io.rw.resp.ready <= soc.io.mmio.resp.ready @[NutShellSim.scala 52:14]
    mmio.io.rw.req.bits.wdata <= soc.io.mmio.req.bits.wdata @[NutShellSim.scala 52:14]
    mmio.io.rw.req.bits.wmask <= soc.io.mmio.req.bits.wmask @[NutShellSim.scala 52:14]
    mmio.io.rw.req.bits.cmd <= soc.io.mmio.req.bits.cmd @[NutShellSim.scala 52:14]
    mmio.io.rw.req.bits.size <= soc.io.mmio.req.bits.size @[NutShellSim.scala 52:14]
    mmio.io.rw.req.bits.addr <= soc.io.mmio.req.bits.addr @[NutShellSim.scala 52:14]
    mmio.io.rw.req.valid <= soc.io.mmio.req.valid @[NutShellSim.scala 52:14]
    soc.io.mmio.req.ready <= mmio.io.rw.req.ready @[NutShellSim.scala 52:14]
    soc.io.meip <= mmio.io.meip @[NutShellSim.scala 54:15]
    wire log_begin : UInt<64>
    log_begin <= UInt<64>("h0")
    wire log_end : UInt<64>
    log_end <= UInt<64>("h0")
    wire log_level : UInt<64>
    log_level <= UInt<64>("h0")
    log_begin <= io.logCtrl.log_begin @[NutShellSim.scala 57:13]
    log_end <= io.logCtrl.log_end @[NutShellSim.scala 58:11]
    log_level <= io.logCtrl.log_level @[NutShellSim.scala 59:13]
    node _T = leq(log_begin, log_end) @[NutShellSim.scala 61:20]
    node _T_1 = bits(reset, 0, 0) @[NutShellSim.scala 61:9]
    node _T_2 = or(_T, _T_1) @[NutShellSim.scala 61:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[NutShellSim.scala 61:9]
    when _T_3 : @[NutShellSim.scala 61:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at NutShellSim.scala:61 assert(log_begin <= log_end)\n") : SIM @[NutShellSim.scala 61:9]
      stop(clock, UInt<1>("h1"), 1) @[NutShellSim.scala 61:9]
    reg REG : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_4 = add(REG, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_5 = tail(_T_4, 1) @[GTimer.scala 25:12]
    REG <= _T_5 @[GTimer.scala 25:7]
    node _T_6 = geq(REG, log_begin) @[NutShellSim.scala 62:35]
    reg REG_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _T_7 = add(REG_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _T_8 = tail(_T_7, 1) @[GTimer.scala 25:12]
    REG_1 <= _T_8 @[GTimer.scala 25:7]
    node _T_9 = lt(REG_1, log_end) @[NutShellSim.scala 62:62]
    node _T_10 = and(_T_6, _T_9) @[NutShellSim.scala 62:49]
    wire dummyWire : UInt<1>
    dummyWire <= UInt<1>("h0")
    mmio.io.uart.in.ch <= io.uart.in.ch @[NutShellSim.scala 68:11]
    io.uart.in.valid <= mmio.io.uart.in.valid @[NutShellSim.scala 68:11]
    io.uart.out.ch <= mmio.io.uart.out.ch @[NutShellSim.scala 68:11]
    io.uart.out.valid <= mmio.io.uart.out.valid @[NutShellSim.scala 68:11]

